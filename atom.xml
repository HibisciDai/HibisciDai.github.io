<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HibisciDai</title>
  
  <subtitle>Waiting/Patience/Trusting/Times All Takes</subtitle>
  <link href="http://hibiscidai.com/atom.xml" rel="self"/>
  
  <link href="http://hibiscidai.com/"/>
  <updated>2023-02-08T13:09:29.000Z</updated>
  <id>http://hibiscidai.com/</id>
  
  <author>
    <name>HibisciDai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</title>
    <link href="http://hibiscidai.com/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-04T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"><p>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"><a href="#实用Python程序设计MOOC-第十四章tkinter图形界面程序设计" class="headerlink" title="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"></a>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</h1><h1 id="tkinter-图形界面编程"><a href="#tkinter-图形界面编程" class="headerlink" title="tkinter 图形界面编程"></a>tkinter 图形界面编程</h1><p>图形界面编程要点</p><ul><li>使用Python自带tkinter库，简单，但是简陋</li><li><p>使用PyQt，精美，但是难学</p></li><li><p>控件(widgets)<br>按钮、列表框、单选框、多选框、编辑框……</p></li><li><p>布局<br>如何将控件摆放在窗口上合适的位置</p></li><li><p>事件响应<br>对鼠标点击、键盘敲击、控件被点击等操作进行响应</p></li><li><p>对话框<br>弹出一个和用户交互的窗口接受一些输入</p></li></ul><h1 id="tkinter控件"><a href="#tkinter控件" class="headerlink" title="tkinter控件"></a>tkinter控件</h1><h2 id="tkinter的常用控件"><a href="#tkinter的常用控件" class="headerlink" title="tkinter的常用控件"></a>tkinter的常用控件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">控件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Button</strong></td><td style="text-align:center">按钮</td></tr><tr><td style="text-align:center">Canvas</td><td style="text-align:center">画布，显示图形如线条或文本</td></tr><tr><td style="text-align:center"><strong>Checkbutton</strong></td><td style="text-align:center">多选框(方形)</td></tr><tr><td style="text-align:center"><strong>Entry</strong></td><td style="text-align:center">单行编辑框(输入框)</td></tr><tr><td style="text-align:center"><strong>Frame</strong></td><td style="text-align:center">框架，上面可以摆放多个控件</td></tr><tr><td style="text-align:center"><strong>Label</strong></td><td style="text-align:center">标签 ，可以显示文本和图像</td></tr><tr><td style="text-align:center"><strong>Listbox</strong></td><td style="text-align:center">列表框</td></tr><tr><td style="text-align:center">Menubutton</td><td style="text-align:center">带菜单的按钮</td></tr><tr><td style="text-align:center"><strong>Menu</strong></td><td style="text-align:center">菜单</td></tr><tr><td style="text-align:center">Message</td><td style="text-align:center">消息，显示多行文本</td></tr><tr><td style="text-align:center"><strong>OptionMenu</strong></td><td style="text-align:center">带下拉菜单的按钮</td></tr><tr><td style="text-align:center"><strong>Radiobutton</strong></td><td style="text-align:center">单选框(圆形)</td></tr><tr><td style="text-align:center">Scale</td><td style="text-align:center">滑块标尺，可以做一定范围内的数值选择</td></tr><tr><td style="text-align:center">Scrollbar</td><td style="text-align:center">卷滚条，使内容在显示区域内上下滚动</td></tr><tr><td style="text-align:center"><strong>Text</strong></td><td style="text-align:center">多行编辑框（输入框）</td></tr><tr><td style="text-align:center">Toplevel</td><td style="text-align:center">顶层窗口，可以用于弹出自定义对话框</td></tr><tr><td style="text-align:center"><strong>Spinbox</strong></td><td style="text-align:center">微调输入框。可以输入数值，也可以用上下箭头微调数值</td></tr><tr><td style="text-align:center">PanedWindow</td><td style="text-align:center">滑动分割窗口。可以将一个窗口分成几块，交界处可以拖动，改变各块大小</td></tr><tr><td style="text-align:center"><strong>LabelFrame</strong></td><td style="text-align:center">带文字标签的框架，上面可以摆放多个控件</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">win = tk.Tk() <span class="comment">#生成一个窗口</span></span><br><span class="line">tk.Label(win,.....) <span class="comment">#在窗口win上生成一个Label，该Label的母体是win</span></span><br><span class="line">ckb = tk.Checkbutton(win,.....) <span class="comment">#在窗口上生成一个Checkbutton</span></span><br><span class="line">frm = tk.Frame(win,.....) <span class="comment">#在窗口上生成一个Frame</span></span><br><span class="line">bt = tk.Button(frm,......) <span class="comment">#在frm上生成一个Button</span></span><br></pre></td></tr></table></figure><h2 id="tkinter的扩展控件"><a href="#tkinter的扩展控件" class="headerlink" title="tkinter的扩展控件"></a>tkinter的扩展控件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">控件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>TreeView</strong></td><td style="text-align:center">树形列表</td></tr><tr><td style="text-align:center">ProgressBar</td><td style="text-align:center">进度条</td></tr><tr><td style="text-align:center"><strong>Notebook</strong></td><td style="text-align:center">多页标签</td></tr><tr><td style="text-align:center"><strong>LabeledScale</strong></td><td style="text-align:center">带文字的滑块标尺</td></tr><tr><td style="text-align:center"><strong>Panedwindow</strong></td><td style="text-align:center">分栏窗口</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="comment">#tk中的控件ttk中都有，且更美观，用法基本和tk一样，且ttk多出几个控件</span></span><br><span class="line"></span><br><span class="line">tree = ttk.TreeView(win,......)</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/tkinter%E6%8E%A7%E4%BB%B61.png" class="" title="tkinter控件1"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/tkinter%E6%8E%A7%E4%BB%B62.png" class="" title="tkinter控件2"><h1 id="tkinter布局"><a href="#tkinter布局" class="headerlink" title="tkinter布局"></a>tkinter布局</h1><p>用grid进行布局</p><ul><li><p>pack布局,place布局(略)</p></li><li><p>grid布局在窗口上布置网格(grid)，控件放在网格单元里面</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">win = tk.Tk() <span class="comment">#创建窗口</span></span><br><span class="line">win.title(<span class="string">&quot;Hello&quot;</span>) <span class="comment">#指定窗口标题</span></span><br><span class="line">label1 = tk.Label(win,text=<span class="string">&quot;用户名： &quot;</span>) <span class="comment">#创建属于win上的图文标签控件</span></span><br><span class="line">label2 = tk.Label(win,text=<span class="string">&quot;密码： &quot;</span>)</span><br><span class="line">etUsername = tk.Entry(win) <span class="comment">#创建属于win的单行编辑框控件，用于输入用户名</span></span><br><span class="line">etPassword = tk.Entry(win) <span class="comment">#创建密码编辑框</span></span><br><span class="line"></span><br><span class="line">label1.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)<span class="comment">#label1放在第0行第0列，上下左右都留白5像素</span></span><br><span class="line">label2.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">etUsername.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>) <span class="comment">#用户名输入框放在第0行第1列</span></span><br><span class="line">etPassword.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>) <span class="comment">#密码输入框放在第1行第1列</span></span><br><span class="line"></span><br><span class="line">btLogin = tk.Button(win,text=<span class="string">&quot;登录&quot;</span>) <span class="comment">#创建属于win的按钮控件</span></span><br><span class="line">btLogin.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)<span class="comment">#btLogin放在第2行第0列，跨2列</span></span><br><span class="line"></span><br><span class="line">win.mainloop() <span class="comment">#显示窗口</span></span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%801.png" class="" title="grid布局1"><h2 id="默认情况下的grid规则"><a href="#默认情况下的grid规则" class="headerlink" title="默认情况下的grid规则"></a>默认情况下的grid规则</h2><ul><li><p>一个单元格只能放一个控件，控件在单元格中居中摆放。</p></li><li><p>不同控件高宽可以不同，因此网格不同行可以不一样高，不同列也可以不一样宽。但同一行的单元格是一样高的，同一列的单元格也是一样宽的。</p></li><li><p>一行的高度，以该行中包含最高控件的那个单元格为准。单元格的高度，等于该单元格中摆放的控件的高度（控件如果有上下留白，还要加上留白的高度）。列宽度也是类似的处理方式。</p></li><li><p>若不指定窗口的大小和显示位置，则窗口大小和网格的大小一样，即恰好能包裹所有控件；显示位置则由Python自行决定。</p></li><li><p>如果指定了窗口大小，或者用户拖拽窗口边缘将窗口变大，就会发生网格小于窗口大小的情况。</p></li><li><p><code>win.geometry(&quot;800x500+200+100&quot;)</code> 字母x<br>设定窗口宽800像素，高500，左上角位于（200， 100）</p></li><li><p>可以做到网格随着窗口大小变化自动变化，填满窗口，并且控件依然居中显示</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">win.geometry(<span class="string">&quot;500x200&quot;</span>)</span><br><span class="line">win.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#指定第0列增量分配权重为1</span></span><br><span class="line">win.columnconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.rowconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#指定第0行增量分配权重为1</span></span><br><span class="line">win.rowconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.rowconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%802.png" class="" title="grid布局2"><p>行列默认<code>增量分配权重</code>为0，宽高不会随着窗口大小变化而变化<br>窗口增大的时候会按照<code>增量分配权重值</code>的大小按比例分配</p><h2 id="grid-函数的sticky参数"><a href="#grid-函数的sticky参数" class="headerlink" title="grid()函数的sticky参数"></a>grid()函数的sticky参数</h2><ul><li>sticky指明控件在单元格中的“贴边方式”，即是否要贴着单元格的四条边。该参数可以是个字符串，包含”E”,”W”,”S”,”N”四个字符中的一个或多个。</li></ul><p>不设置默认居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">label2.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;NE&quot;</span>)</span><br><span class="line"><span class="comment">#密码标签靠左上角</span></span><br><span class="line"></span><br><span class="line">etUsername.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;E&quot;</span>)</span><br><span class="line"><span class="comment">#用户名编辑框靠右</span></span><br><span class="line"></span><br><span class="line">etPassword.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;EWSN&quot;</span>)</span><br><span class="line"><span class="comment">#密码编辑框占满单元格</span></span><br><span class="line"></span><br><span class="line">btLogin.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;SW&quot;</span>)</span><br><span class="line"><span class="comment">#登录按钮靠左下</span></span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%803.png" class="" title="grid布局3"><h1 id="使用Frame控件进行布局"><a href="#使用Frame控件进行布局" class="headerlink" title="使用Frame控件进行布局"></a>使用Frame控件进行布局</h1><ul><li><p>控件多了，要算每个控件行、列、 rowspan,columnspan很麻烦</p></li><li><p>Frame控件上面还可以摆放控件，可以当作底板使用</p></li><li><p>可以在Frame控件上面设置网格进行Grid布局，摆放多个控件</p></li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Frame%E5%B8%83%E5%B1%801.png" class="" title="Frame布局1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&#x27;人事系统&#x27;</span>)</span><br><span class="line">frm01Red = tk.Frame(win,bg=<span class="string">&quot;red&quot;</span>,highlightthickness=<span class="number">2</span>) <span class="comment">#背景红色，边框宽度2</span></span><br><span class="line">frm01Red.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,columnspan=<span class="number">2</span>,sticky=<span class="string">&quot;WE&quot;</span>)</span><br><span class="line">tk.Label(frm01Red, text=<span class="string">&quot;姓名： &quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Entry(frm01Red).grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Label(frm01Red, text=<span class="string">&quot;手机号： &quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">2</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Entry(frm01Red).grid(row=<span class="number">0</span>,column=<span class="number">3</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Button(frm01Red,text=<span class="string">&quot;更新&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">4</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">frm00Blue = tk.Frame(win, bg=<span class="string">&quot;blue&quot;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm00Blue.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,rowspan=<span class="number">2</span>,sticky=<span class="string">&quot;NS&quot;</span>)</span><br><span class="line">tk.Label(frm00Blue,text=<span class="string">&quot;筛选条件：&quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;男性&quot;</span>).grid(row=<span class="number">1</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;女性&quot;</span>).grid(row=<span class="number">2</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;博士&quot;</span>).grid(row=<span class="number">3</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Label(frm00Blue,text=<span class="string">&quot;符合条件的名单：&quot;</span>).grid(row=<span class="number">4</span>,padx=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">nameList = tk.Listbox(frm00Blue)</span><br><span class="line">nameList.grid(row=<span class="number">5</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;李丽&#x27;</span>,<span class="string">&#x27;刘娟&#x27;</span>]:</span><br><span class="line">nameList.insert(tk.END,x) <span class="comment">#将x插入到列表框尾部。</span></span><br><span class="line"></span><br><span class="line">frm21Green = tk.Frame(win,bg=<span class="string">&#x27;green&#x27;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm21Green.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,sticky=<span class="string">&quot;WE&quot;</span>)</span><br><span class="line">tk.Label(frm21Green, text=<span class="string">&quot;提示：目前一切正常&quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">frm11Yellow = tk.Frame(win, bg=<span class="string">&#x27;yellow&#x27;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm11Yellow.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,sticky=<span class="string">&quot;NSWE&quot;</span>) <span class="comment">#要贴住单元格四条边</span></span><br><span class="line">frm11Yellow.rowconfigure(<span class="number">1</span>,weight=<span class="number">1</span>) <span class="comment">#使得frm11Yellow中第1行高度会自动伸缩</span></span><br><span class="line">frm11Yellow.columnconfigure(<span class="number">0</span>,weight=<span class="number">1</span>)</span><br><span class="line">tk.Label(frm11Yellow,text=<span class="string">&quot;简历： &quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">tk.Text(frm11Yellow).grid(row=<span class="number">1</span>,padx=<span class="number">15</span>,pady=<span class="number">15</span>,sticky=<span class="string">&quot;NSWE&quot;</span>)</span><br><span class="line"><span class="comment"># sticky=&quot;NSWE&quot;使得该多行编辑框会自动保持填满整个单元格</span></span><br><span class="line"></span><br><span class="line">win.rowconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.columnconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><h1 id="控件属性和事件响应"><a href="#控件属性和事件响应" class="headerlink" title="控件属性和事件响应"></a>控件属性和事件响应</h1><h2 id="控件属性和事件响应概述"><a href="#控件属性和事件响应概述" class="headerlink" title="控件属性和事件响应概述"></a>控件属性和事件响应概述</h2><ul><li>有的控件有函数可以用来设置和获取其属性，或以字典下标的形式获取和设置其属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lbHint = tk.Label(win, text=<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;登录成功!&quot;</span> <span class="comment">#修改lbHint的文字</span></span><br><span class="line"></span><br><span class="line">txt = tk.Text(win)</span><br><span class="line">txt.get(<span class="number">0.0</span>, tk.END)) <span class="comment">#取全部文字</span></span><br></pre></td></tr></table></figure><ul><li>有的控件必须和一个变量相关联，取变量值或设置变量值，就是取或设置该控件的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = tk.StringVar()</span><br><span class="line">s.<span class="built_in">set</span>(<span class="string">&quot;sin(x)&quot;</span>)</span><br><span class="line"></span><br><span class="line">tk.Entry(win, textvariable=s)</span><br><span class="line"><span class="built_in">print</span>(s.get())</span><br></pre></td></tr></table></figure><ul><li>创建有些控件时，可以用command参数指定控件的事件响应函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tk.Button(win,text=<span class="string">&quot;显示函数图&quot;</span>,command=myfunc) <span class="comment">#myfunc是函数名</span></span><br><span class="line">tk.Checkbox(win,text=<span class="string">&quot;显示函数图&quot;</span>,command=<span class="keyword">lambda</span>:<span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>可以用控件的bind函数指定事件响应函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lb = tk.Label(win,text=<span class="string">&quot;something&quot;</span>)</span><br><span class="line">lb.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>,mouse_down) <span class="comment">#鼠标左键按下事件</span></span><br></pre></td></tr></table></figure><h2 id="基本的控件属性和事件响应示例"><a href="#基本的控件属性和事件响应示例" class="headerlink" title="基本的控件属性和事件响应示例"></a>基本的控件属性和事件响应示例</h2><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%941.png" class="" title="事件响应1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btLogin_click</span>(): <span class="comment">#登录按钮的事件响应函数，点击该按钮时被调用</span></span><br><span class="line">    <span class="keyword">if</span> username.get()==<span class="string">&quot;pku&quot;</span> <span class="keyword">and</span> password.get()==<span class="string">&quot;123&quot;</span>: <span class="comment">#正确的用户名和密码</span></span><br><span class="line">    lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;登录成功!&quot;</span> <span class="comment">#修改lbHint的文字</span></span><br><span class="line">    lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span> <span class="comment">#文字变成黑色， &quot;fg&quot;表示前景色,&quot;bg&quot;表示背景色</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    username.<span class="built_in">set</span>(<span class="string">&quot;&quot;</span>) <span class="comment">#将用户名输入框清空</span></span><br><span class="line">    password.<span class="built_in">set</span>(<span class="string">&quot;&quot;</span>) <span class="comment">#将密码输入框清空</span></span><br><span class="line">    lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span> <span class="comment">#文字变成红色</span></span><br><span class="line">    lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;用户名密码错误，请重新输入!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cbPassword_click</span>(): <span class="comment">#&quot;显示密码&quot;单选框的事件响应函数，点击该单选框时被调用</span></span><br><span class="line">    <span class="keyword">if</span> showPassword.get():<span class="comment">#showPassword是和cbPassword绑定的tkinter布尔变量</span></span><br><span class="line">    etPassword[<span class="string">&quot;show&quot;</span>] = <span class="string">&quot;&quot;</span> <span class="comment">#使得密码输入框能正常显示密码。 Entry有show属性</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    etPassword[<span class="string">&quot;show&quot;</span>] = <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line"></span><br><span class="line">username,password = tk.StringVar(),tk.StringVar()</span><br><span class="line"><span class="comment">#两个字符串类型变量，分别用于关联用户名输入框和密码输入框</span></span><br><span class="line">showPassword = tk.BooleanVar() <span class="comment">#用于关联“显示密码”单选框</span></span><br><span class="line">showPassword.<span class="built_in">set</span>(<span class="literal">True</span>) <span class="comment">#使得cbPassowrd开始就是选中状态</span></span><br><span class="line"></span><br><span class="line">lbHint = tk.Label(win,text=<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">lbHint.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line">lbUsername = tk.Label(win,text=<span class="string">&quot;用户名： &quot;</span>)</span><br><span class="line">lbUsername.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">lbPassword = tk.Label(win,text=<span class="string">&quot;密码： &quot;</span>)</span><br><span class="line">lbPassword.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">etUsername = tk.Entry(win,textvariable=username)</span><br><span class="line"><span class="comment">#输入框etUsername和变量username关联</span></span><br><span class="line">etUsername.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">etPassword = tk.Entry(win,textvariable=password,show=<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">#Entry的属性show=&quot;*&quot;表示该输入框不论内容是啥，只显示&#x27;*&#x27;字符，为&quot;&quot;则正常显示</span></span><br><span class="line">etPassword.grid(row=<span class="number">2</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">cbPassword = tk.Checkbutton(win,text=<span class="string">&quot;显示密码&quot;</span>,variable=showPassword,command=cbPassword_click)</span><br><span class="line"><span class="comment">#cbPassword关联变量showPassword，其事件响应函数是cbPassword_click，即点击它时</span></span><br><span class="line"><span class="comment">#会调用 cbPassword_click()</span></span><br><span class="line">cbPassword.grid(row=<span class="number">3</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">btLogin = tk.Button(win,text=<span class="string">&quot;登录&quot;</span>,command=btLogin_click)</span><br><span class="line"><span class="comment">#点击btLogin按钮会执行btLogin_click()</span></span><br><span class="line">btLogin.grid(row=<span class="number">4</span>,column=<span class="number">0</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">btQuit = tk.Button(win,text=<span class="string">&quot;退出&quot;</span>,command=win.quit)</span><br><span class="line"><span class="comment">#点击btQuit会执行win.quit(),win.quit()导致窗口关闭,于是整个程序结束</span></span><br><span class="line">btQuit.grid(row=<span class="number">4</span>,column=<span class="number">1</span>,pady=<span class="number">5</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%942.png" class="" title="事件响应2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%943.png" class="" title="事件响应3"><h1 id="Python火锅店实例"><a href="#Python火锅店实例" class="headerlink" title="Python火锅店实例"></a>Python火锅店实例</h1><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B1.png" class="" title="Python火锅店实例1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk  <span class="comment"># ttk中有更多控件</span></span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span>  <span class="comment"># 表示窗口</span></span><br><span class="line">gDishes = ((<span class="string">&quot;清汤(20元)&quot;</span>, <span class="string">&quot;滋补(40元)&quot;</span>, <span class="string">&quot;鸳鸯(60元)&quot;</span>),  <span class="comment"># 锅底</span></span><br><span class="line">           (<span class="string">&quot;香菜(10元)&quot;</span>, <span class="string">&quot;麻酱(20元)&quot;</span>, <span class="string">&quot;韭花(20元)&quot;</span>),  <span class="comment"># 佐料</span></span><br><span class="line">           (<span class="string">&quot;羊肉(30元)&quot;</span>, <span class="string">&quot;肥牛(40元)&quot;</span>, <span class="string">&quot;白菜(10元)&quot;</span>, <span class="string">&quot;茼蒿(20元)&quot;</span>))  <span class="comment"># 菜品</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addToListbox</span>(<span class="params">listbox, lst</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        listbox.insert(tk.END, x)  <span class="comment"># 将x添加到列表框尾部</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doDiscount</span>():</span><br><span class="line">    gWin.discount = [<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">0.8</span>][gWin.custom.get()]</span><br><span class="line">    gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">    gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categoryChanged</span>(<span class="params">event</span>):  <span class="comment"># gWin.cbxCategory选项变化时被调用</span></span><br><span class="line">    gWin.lsbDishes.delete(<span class="number">0</span>, tk.END)  <span class="comment"># 删除全部内容,delete(x,y)删除第x项到第y项</span></span><br><span class="line">    idx = gWin.cbxCategory.current()  <span class="comment"># gWin.cbxCategory当前选中的是第idx项</span></span><br><span class="line">    addToListbox(gWin.lsbDishes, gDishes[idx])  <span class="comment"># 装入相应菜单</span></span><br><span class="line">    gWin.lsbDishes.select_set(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btAdd_click</span>():</span><br><span class="line">    <span class="comment"># btAdd[&quot;state&quot;] = tk.DISABLED  tk.NORMAL</span></span><br><span class="line">    sel = gWin.lsbDishes.curselection()  <span class="comment"># sel形如 (1,2,3)</span></span><br><span class="line">    <span class="keyword">if</span> sel == ():</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;您还没有选中要添加的菜&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dish = gWin.lsbDishes.get(sel)</span><br><span class="line">        price, num = <span class="built_in">int</span>(dish[<span class="number">3</span>:<span class="number">5</span>]), gWin.dishNum.get()</span><br><span class="line">        gWin.lsbTable.insert(tk.END, <span class="string">&quot;[&quot;</span> + gWin.category.get() + <span class="string">&quot;]&quot;</span> + dish + <span class="string">&quot; X&quot;</span> + num)</span><br><span class="line">        gWin.totalCost += price * <span class="built_in">int</span>(num)</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btDelete_click</span>():</span><br><span class="line">    sel = gWin.lsbTable.curselection()</span><br><span class="line">    <span class="keyword">if</span> sel == ():</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;您还没有选中要删除的菜&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">            dish = gWin.lsbTable.get(i)</span><br><span class="line">            price = <span class="built_in">int</span>(dish[<span class="number">7</span>:<span class="number">9</span>])</span><br><span class="line">            price *= <span class="built_in">int</span>(dish[dish.index(<span class="string">&quot;X&quot;</span>) + <span class="number">1</span>:])</span><br><span class="line">            gWin.totalCost -= price</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sel[::-<span class="number">1</span>]: <span class="comment"># 从后往前删除</span></span><br><span class="line">            gWin.lsbTable.delete(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin = tk.Tk()</span><br><span class="line">    gWin.title(<span class="string">&quot;Python火锅店&quot;</span>)</span><br><span class="line">    gWin.geometry(<span class="string">&quot;520x300&quot;</span>)</span><br><span class="line">    gWin.totalCost, gWin.discount = <span class="number">0</span>, <span class="number">1</span>  <span class="comment"># 总价和折扣</span></span><br><span class="line">    gWin.resizable(<span class="literal">False</span>, <span class="literal">False</span>)  <span class="comment"># gWin不可改变大小</span></span><br><span class="line"></span><br><span class="line">    lb = tk.Label(gWin, text=<span class="string">&quot;欢迎光临Python火锅店&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    lb.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">4</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.category = tk.StringVar()  <span class="comment"># 对应组合框gWin.cbxCategory收起状态显示的文字</span></span><br><span class="line">    gWin.cbxCategory = ttk.Combobox(gWin, textvariable=gWin.category)</span><br><span class="line">    gWin.cbxCategory[<span class="string">&quot;values&quot;</span>] = (<span class="string">&quot;锅底&quot;</span>, <span class="string">&quot;佐料&quot;</span>, <span class="string">&quot;菜品&quot;</span>)  <span class="comment"># 下拉时显示的表象</span></span><br><span class="line">    gWin.cbxCategory[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;readonly&quot;</span>  <span class="comment"># 将gWin.cbxCategory设置为不可输入，只能选择</span></span><br><span class="line">    gWin.cbxCategory.current(<span class="number">0</span>)  <span class="comment"># 选中第0项</span></span><br><span class="line">    gWin.cbxCategory.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.lsbDishes = tk.Listbox(gWin, selectmode=tk.SINGLE, exportselection=<span class="literal">False</span>) <span class="comment"># exportselection使得列表框失去输入焦点也能保持选中项目</span></span><br><span class="line">    gWin.lsbDishes.bind(<span class="string">&quot;&lt;Double-Button-1&gt;&quot;</span>, <span class="keyword">lambda</span> e:btAdd_click())</span><br><span class="line">    gWin.lsbDishes.bind(<span class="string">&quot;&lt;&lt;ListboxSelect&gt;&gt;&quot;</span>, <span class="keyword">lambda</span> e:gWin.dishNum.<span class="built_in">set</span>(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"></span><br><span class="line">    addToListbox(gWin.lsbDishes, gDishes[<span class="number">0</span>])  <span class="comment"># 装入锅底菜单</span></span><br><span class="line">    gWin.lsbDishes.select_set(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># select_set(x,y)可以选中第x项到第y项(包括y)</span></span><br><span class="line">    gWin.lsbDishes.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EWNS&quot;</span>)</span><br><span class="line">    gWin.cbxCategory.bind(<span class="string">&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;</span>, categoryChanged)</span><br><span class="line">    <span class="comment"># 当组合框下拉后有表现被选中时，会发生ComboboxSelected事件。</span></span><br><span class="line">    <span class="comment"># 此处指定该事件发生时，会调用gWin.categoryChanged函数</span></span><br><span class="line">    <span class="comment"># 指定&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;事件的响应函数是gWin.categoryChanged</span></span><br><span class="line"></span><br><span class="line">    gWin.lsbTable = tk.Listbox(gWin, selectmode=tk.EXTENDED, exportselection=<span class="literal">False</span>)</span><br><span class="line">    gWin.lsbTable.grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=<span class="string">&quot;EWNS&quot;</span>)</span><br><span class="line">    tk.Label(gWin, text=<span class="string">&quot;我的餐桌&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">2</span>)</span><br><span class="line">    gWin.lbHint = tk.Label(gWin, text=<span class="string">&quot;饭菜总价：0元&quot;</span>)</span><br><span class="line">    gWin.lbHint.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scrollbar = tk.Scrollbar(gWin, width=<span class="number">20</span>, orient=<span class="string">&quot;vertical&quot;</span>, command=gWin.lsbTable.yview)</span><br><span class="line">    gWin.lsbTable.configure(yscrollcommand=scrollbar.<span class="built_in">set</span>)  <span class="comment"># 绑定listbox和scrollbar</span></span><br><span class="line">    scrollbar.grid(row=<span class="number">2</span>, column=<span class="number">3</span>, sticky=<span class="string">&quot;NS&quot;</span>)</span><br><span class="line"></span><br><span class="line">    frm = tk.Frame(gWin)</span><br><span class="line">    frm.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line">    tk.Label(frm, text=<span class="string">&quot;数量：&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">    gWin.dishNum = tk.StringVar(value=<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    gWin.spNum = tk.Spinbox(frm, width=<span class="number">5</span>, from_=<span class="number">1</span>, to=<span class="number">1000</span>, textvariable=gWin.dishNum)</span><br><span class="line">    gWin.spNum.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    btAdd = tk.Button(frm, text=<span class="string">&quot;添加&quot;</span>, command=btAdd_click)</span><br><span class="line">    btAdd.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">    btDelete = tk.Button(frm, text=<span class="string">&quot;删除&quot;</span>, command=btDelete_click)</span><br><span class="line">    btDelete.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    lbfDiscount = tk.LabelFrame(frm, text=<span class="string">&quot;价格&quot;</span>)</span><br><span class="line">    lbfDiscount.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">    gWin.custom = tk.IntVar()  <span class="comment"># 如果写 gWin.custom = tk.IntVar(value=0)就不用下一行了</span></span><br><span class="line">    gWin.custom.<span class="built_in">set</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 三个单选框绑定了一个，所以同时只可以选择一个</span></span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;普通价&quot;</span>, value=<span class="number">0</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;会员价(九折)&quot;</span>, value=<span class="number">1</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;VIP价(八折)&quot;</span>, value=<span class="number">2</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.columnconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.rowconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.mainloop()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B2.png" class="" title="Python火锅店实例2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B3.png" class="" title="Python火锅店实例3"><h1 id="菜单和编辑框"><a href="#菜单和编辑框" class="headerlink" title="菜单和编辑框"></a>菜单和编辑框</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muCut_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&quot;&lt;&lt;Cut&gt;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muCopy_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&quot;&lt;&lt;Copy&gt;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muPaste_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&#x27;&lt;&lt;Paste&gt;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveTextFile</span>(<span class="params">fileName</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(fileName, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    f.write(gWin.txtFile.get(<span class="number">0.0</span>, tk.END))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muSaveAs_click</span>():</span><br><span class="line">    fileName = filedialog.asksaveasfilename(title=<span class="string">&#x27;Save File&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp&#x27;</span>, initialfile=<span class="string">&#x27;untitled.txt&#x27;</span>, filetypes=[(<span class="string">&#x27;Text File&#x27;</span>, <span class="string">&#x27;*.txt&#x27;</span>)], defaultextension=<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        saveTextFile(fileName)</span><br><span class="line">        gWin.title(fileName)</span><br><span class="line">        gWin.curFileName = fileName</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muSave_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.curFileName.lower() == <span class="string">&quot;untitled.txt&quot;</span>:</span><br><span class="line">        muSaveAs_click()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        saveTextFile(gWin.curFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muOpen_click</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    fileName = filedialog.askopenfilename(title=<span class="string">&#x27;Open File&#x27;</span>, filetypes=[(<span class="string">&#x27;Text Files&#x27;</span>, <span class="string">&#x27;*.txt&#x27;</span>), (<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        gWin.curFileName = fileName</span><br><span class="line">        gWin.title(fileName)</span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        text = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        gWin.txtFile.delete(<span class="number">0.0</span>, tk.END)</span><br><span class="line">        gWin.txtFile.insert(<span class="string">&quot;insert&quot;</span>, text) <span class="comment">#gWin.txtFile.insert(tk.END, text)加在最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muBigFont_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.isBigFont.get() == <span class="number">1</span>:</span><br><span class="line">        gWin.txtFile.configure(font=(<span class="string">&quot;SimHei&quot;</span>, <span class="number">18</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gWin.txtFile.configure(font=(<span class="string">&quot;&quot;</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muNew_click</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin.txtFile.delete(<span class="number">0.0</span>, tk.END)</span><br><span class="line">    gWin.title(<span class="string">&quot;untitled.txt&quot;</span>)</span><br><span class="line">    gWin.curFileName = <span class="string">&quot;untitled.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muPrintSelection_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.txtFile.tag_ranges(tk.SEL):</span><br><span class="line">        <span class="built_in">print</span>(gWin.txtFile.selection_get())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin = tk.Tk()</span><br><span class="line">    gWin.title(<span class="string">&quot;untitled.txt&quot;</span>)</span><br><span class="line">    gWin.menubar = tk.Menu(gWin)</span><br><span class="line"></span><br><span class="line">    gWin.fileMenu = tk.Menu(gWin.menubar, tearoff=<span class="number">0</span>)  <span class="comment"># 去掉顶端横线</span></span><br><span class="line">    gWin.menubar.add_cascade(label=<span class="string">&#x27;File&#x27;</span>, menu=gWin.fileMenu)  <span class="comment"># 添加一个子菜单 File</span></span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;New&#x27;</span>, command=muNew_click)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Open&#x27;</span>, command=muOpen_click)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Save&#x27;</span>, command=muSave_click, accelerator=<span class="string">&quot;Ctrl+S&quot;</span>)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Save As&#x27;</span>, command=muSaveAs_click)</span><br><span class="line">    gWin.fileMenu.add_separator()  <span class="comment"># 加分割线</span></span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Exit&#x27;</span>, command=gWin.quit)</span><br><span class="line"></span><br><span class="line">    editMenu = tk.Menu(gWin.menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">    gWin.menubar.add_cascade(label=<span class="string">&#x27;Edit&#x27;</span>, menu=editMenu)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Cut&#x27;</span>, command=muCut_click)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Copy&#x27;</span>, command=muCopy_click)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Paste&#x27;</span>, command=muPaste_click)</span><br><span class="line"></span><br><span class="line">    settingsMenu = tk.Menu(editMenu, tearoff=<span class="number">0</span>)</span><br><span class="line">    editMenu.add_cascade(label=<span class="string">&#x27;Settings&#x27;</span>, menu=settingsMenu)</span><br><span class="line">    gWin.isBigFont = tk.IntVar()</span><br><span class="line">    settingsMenu.add_checkbutton(label=<span class="string">&quot;Big Font&quot;</span>, command=muBigFont_click, variable=gWin.isBigFont)</span><br><span class="line">    settingsMenu.add_command(label=<span class="string">&quot;Print Selection&quot;</span>, command=muPrintSelection_click)</span><br><span class="line"></span><br><span class="line">    gWin.config(menu=gWin.menubar)</span><br><span class="line">    gWin.txtFile = tk.Text(gWin)</span><br><span class="line">    gWin.txtFile.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;NWSE&quot;</span>)</span><br><span class="line">    gWin.curFileName = <span class="string">&quot;untitled.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    gWin.rowconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.bind_all(<span class="string">&quot;&lt;Control-s&gt;&quot;</span>, <span class="keyword">lambda</span> event:muSave_click())</span><br><span class="line">    gWin.mainloop()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%861.png" class="" title="菜单和编辑框1"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%862.png" class="" title="菜单和编辑框2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%863.png" class="" title="菜单和编辑框3"><h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><ul><li>作用：弹出小窗口和用户进行交互，或者显示信息</li></ul><h2 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h2><h2 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h2><ul><li>用于复杂一点的交互</li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%AF%9D%E6%A1%86.png" class="" title="自定义对话框"><ul><li>自定义对话框要点<br>1) 自定义对话框是一个 Toplevel窗口，控件布局方式、事件响应方式和普通窗口一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dialog = tk.Toplevel(gWin) <span class="comment">#gWin是主窗口，创建对话框窗口</span></span><br><span class="line">dialog.grab_set() <span class="comment">#显示对话框，并独占输入焦点</span></span><br></pre></td></tr></table></figure><p>2) 关闭自定义对话框：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.destroy()</span><br></pre></td></tr></table></figure><h2 id="对话框整合示例"><a href="#对话框整合示例" class="headerlink" title="对话框整合示例"></a>对话框整合示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> simpledialog</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">innerCmd</span>(): <span class="comment">#innerCmd是个闭包</span></span><br><span class="line"><span class="comment"># if n &lt;= 4:</span></span><br><span class="line"><span class="comment"># func = eval(&quot;messagebox.&quot; + gWin.titles[n])</span></span><br><span class="line"><span class="comment"># value = func(&quot;Dialog&quot;, gWin.titles[n])</span></span><br><span class="line"><span class="comment"># elif n &lt;= 7:</span></span><br><span class="line"><span class="comment"># func = eval(&quot;simpledialog.&quot; + gWin.titles[n])</span></span><br><span class="line"><span class="comment"># value = func(&quot;Dialog&quot;, gWin.titles[n])</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>: value = messagebox.askokcancel(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">1</span>: value = messagebox.askyesno(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>: value = messagebox.showerror(<span class="string">&quot;Dialog&quot;</span>,<span class="string">&quot;抱歉，您的账户余额不足!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">3</span>: value = messagebox.showinfo(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">4</span>: value = messagebox.showwarning(<span class="string">&quot;Dialog&quot;</span>,gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">5</span>: value = simpledialog.askfloat(<span class="string">&quot;Dialog&quot;</span>,<span class="string">&quot;请输入支付金额:&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">6</span>: value = simpledialog.askinteger(<span class="string">&quot;Dialog&quot;</span>,gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">7</span>: value = simpledialog.askstring(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">8</span>: value = filedialog.askopenfilename(title=<span class="string">&#x27;打开文件&#x27;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>), (<span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;*.txt&#x27;</span>),(<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">9</span>: value = filedialog.asksaveasfilename(title=<span class="string">&#x27;保存文件&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp&#x27;</span>, initialfile=<span class="string">&#x27;hello.py&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">10</span>: value = filedialog.askopenfilenames(title=<span class="string">&#x27;打开文件&#x27;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>), (<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">11</span>: value = filedialog.askdirectory(title=<span class="string">&#x27;打开文件&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(n,value,<span class="built_in">type</span>(value))</span><br><span class="line"><span class="keyword">return</span> innerCmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">global</span> gWin</span><br><span class="line">gWin = tk.Tk()</span><br><span class="line">gWin.titles = [<span class="string">&quot;askokcancel&quot;</span>, <span class="string">&quot;askyesno&quot;</span>, <span class="string">&quot;showerror&quot;</span>,</span><br><span class="line">  <span class="string">&quot;showinfo&quot;</span>, <span class="string">&quot;showwarning&quot;</span>, <span class="string">&quot;askfloat&quot;</span>, <span class="string">&quot;askinteger&quot;</span>,</span><br><span class="line">  <span class="string">&quot;askstring&quot;</span>, <span class="string">&quot;askopenfilename&quot;</span>, <span class="string">&quot;asksaveasfilename&quot;</span>,</span><br><span class="line">  <span class="string">&quot;askopenfilenames&quot;</span>, <span class="string">&quot;askdirectory&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">button = tk.Button(gWin, text = gWin.titles[i], command=cmd(i))</span><br><span class="line">button.grid(row=i//<span class="number">4</span>, column=i%<span class="number">4</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">gWin.columnconfigure(<span class="number">0</span>,weight=<span class="number">1</span>)</span><br><span class="line">gWin.mainloop()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E5%90%88.png" class="" title="对话框整合"><h1 id="显示图像和matplotlib绘图"><a href="#显示图像和matplotlib绘图" class="headerlink" title="显示图像和matplotlib绘图"></a>显示图像和matplotlib绘图</h1><ul><li>tkinter界面上matplotlib绘图要点</li></ul><p>1) 创建一个<code>matplotlib.pyplot.Figure</code>对象fig<br>2) 在fig对象上用<code>add_subplot()</code>创建一个子图ax<br>3) <code>canvas = FigureCanvasTkAgg(fig, master=win)</code>得到一个将fig绑定在win上面的FigureCanvasTkAgg对象canvas。win可以是窗口，也可以是Frame,LabelFrame<br>4) <code>canvas.get_tk_widget().grid(....)</code>将canvas布局到win的合适位置<br>5) 子图ax上画完图后，还要<code>cavans.draw()</code>才能刷新显示</p><ul><li>用Label显示图像要点</li></ul><p>1) <code>aLabel.config(image = tkinter.PhotoImage(file=&#39;xxx.gif&#39;))</code> 可以显示gif图像<br>2) 要显示jpg,png需要用到PIL库里的Image和ImageTk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageTk</span><br><span class="line">img = ImageTk.PhotoImage(Image.<span class="built_in">open</span>(<span class="string">&quot;XXX.jpg&quot;</span>))</span><br><span class="line">aLabel.config(image=img)</span><br></pre></td></tr></table></figure><p>注意，可能是库有bug，此处img必须不是局部变量，否则可能无法显示图像。</p><ul><li>两个组件重叠，只显示一个的要点</li></ul><p>两个组件可以放在同一个单元格里面。</p><p><code>ctrl.grid_forget()</code> 可以让ctrl组件消失<br><code>ctrl.grid(....)</code>又将其恢复</p><ul><li>鼠标移动显示位置</li></ul><p>为Label添加鼠标左键按下、松开和鼠标移动三个事件响应函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lbImg.bind(<span class="string">&quot;&lt;Motion&gt;&quot;</span>, mouse_move)</span><br><span class="line">lbImg.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>, mouse_down)</span><br><span class="line">lbImg.bind(<span class="string">&quot;&lt;ButtonRelease-1&gt;&quot;</span>, mouse_up)</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F%E5%92%8Cmatplotlib%E7%BB%98%E5%9B%BE.png" class="" title="显示图像和matplotlib绘图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageTk</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_tkagg <span class="keyword">import</span> FigureCanvasTkAgg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_down</span>(<span class="params">event</span>):</span><br><span class="line">gWin.mouseDown = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_up</span>(<span class="params">event</span>):</span><br><span class="line">gWin.mouseDown = <span class="literal">False</span></span><br><span class="line">gWin.lbMsg[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;按住鼠标键移动，会显示鼠标位置&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_move</span>(<span class="params">event</span>):</span><br><span class="line"><span class="keyword">if</span> gWin.mouseDown:</span><br><span class="line">gWin.lbMsg[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;鼠标位置：(%d,%d)&quot;</span> % (event.x,event.y)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showImage</span>():</span><br><span class="line">fileName = filedialog.askopenfilename(title=<span class="string">&#x27;打开文件&#x27;</span>, initialdir=<span class="string">&quot;c:/tmp2/&quot;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>)])</span><br><span class="line"><span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">gWin.geometry(<span class="string">&quot;&quot;</span>)</span><br><span class="line">gWin.frmPlot.grid_forget()</span><br><span class="line">gWin.frmImg.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">gWin.img = ImageTk.PhotoImage(Image.<span class="built_in">open</span>(fileName))  <span class="comment"># 用PIL模块的PhotoImage打开</span></span><br><span class="line"><span class="comment"># and keep a reference。如果 仅img = ImageTk.....然后 lbImage.config(image=img),则显示不出来</span></span><br><span class="line">gWin.lbImg.config(image=gWin.img)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showPlot</span>():</span><br><span class="line">gWin.geometry(<span class="string">&quot;&quot;</span>)</span><br><span class="line">gWin.frmImg.grid_forget()</span><br><span class="line">gWin.frmPlot.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">gWin.ax.clear()  <span class="comment"># gWin.fig.clear()</span></span><br><span class="line">xs = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">y = [<span class="built_in">eval</span>(gWin.fstr.get()) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">gWin.ax.plot(xs,y,color=<span class="string">&#x27;red&#x27;</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">gWin.canvas.draw()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">global</span> gWin</span><br><span class="line">gWin = tk.Tk()</span><br><span class="line">frm = tk.Frame(gWin)</span><br><span class="line">frm.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">tk.Label(frm,text=<span class="string">&quot;y =&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">gWin.fstr = tk.StringVar()</span><br><span class="line">gWin.fstr.<span class="built_in">set</span>(<span class="string">&quot;sin(x)&quot;</span>)</span><br><span class="line">tk.Entry(frm,textvariable = gWin.fstr).grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(frm,text=<span class="string">&quot;显示函数图&quot;</span>,command=showPlot).grid(row=<span class="number">0</span>,column=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(frm, text=<span class="string">&quot;显示图像文件&quot;</span>, command=showImage).grid(row=<span class="number">0</span>, column=<span class="number">3</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">gWin.frmImg = tk.Frame(gWin)</span><br><span class="line">gWin.lbImg = tk.Label(gWin.frmImg)</span><br><span class="line">gWin.lbImg.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;NSWE&quot;</span>)</span><br><span class="line">gWin.lbMsg = tk.Label(gWin.frmImg, fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, text= <span class="string">&quot;按住鼠标键移动，会显示鼠标位置&quot;</span>)</span><br><span class="line">gWin.lbMsg.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">gWin.mouseDown = <span class="literal">False</span></span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;Motion&gt;&quot;</span>, mouse_move)</span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>,mouse_down)</span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;ButtonRelease-1&gt;&quot;</span>, mouse_up)</span><br><span class="line">gWin.frmPlot = tk.Frame(gWin)</span><br><span class="line">gWin.fig = plt.Figure(figsize=(<span class="number">5</span>, <span class="number">4</span>), dpi=<span class="number">100</span>)</span><br><span class="line">gWin.ax = gWin.fig.add_subplot()</span><br><span class="line">gWin.canvas = FigureCanvasTkAgg(gWin.fig, master=gWin.frmPlot)</span><br><span class="line">gWin.canvas.get_tk_widget().grid(row=<span class="number">0</span>, column=<span class="number">0</span>,sticky=<span class="string">&quot;ESNW&quot;</span>)</span><br><span class="line">gWin.frmPlot.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">showPlot()</span><br><span class="line">gWin.rowconfigure(<span class="number">1</span>,weight = <span class="number">1</span>)</span><br><span class="line">gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">gWin.mainloop()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十三章面向对象程序设计</title>
    <link href="http://hibiscidai.com/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-03T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十三章面向对象程序设计"><p>实用Python程序设计MOOC-第十三章面向对象程序设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十三章面向对象程序设计"><a href="#实用Python程序设计MOOC-第十三章面向对象程序设计" class="headerlink" title="实用Python程序设计MOOC-第十三章面向对象程序设计"></a>实用Python程序设计MOOC-第十三章面向对象程序设计</h1><h1 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h1><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="为什么需要”类”"><a href="#为什么需要”类”" class="headerlink" title="为什么需要”类”"></a>为什么需要”类”</h2><ul><li>用列表或元组表示学生信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = [<span class="string">&quot;张三&quot;</span>, <span class="number">20001807</span>, <span class="number">3.4</span>, <span class="string">&quot;1988-01-24&quot;</span>]</span><br></pre></td></tr></table></figure><p>记不住GPA到底下标是多少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student[3] = XXXX 也不知道是对哪项数据赋值</span><br></pre></td></tr></table></figure><h2 id="类和对象的概念"><a href="#类和对象的概念" class="headerlink" title="类和对象的概念"></a>类和对象的概念</h2><ul><li><p>类是用来代表事物的。 对一种事物，可以设计一个类，概括出该种事物的属性，用成员变量表示之； 还要概括该种事物事物能进行的操作，用成员函数表示之。成员变量也称为类的“属性”，成员函数也称为类的“方法” 。</p></li><li><p>类的实例，称为“对象”。类代表一种事物的共同特点，对象就是一个具体的事物个体。</p></li><li><p>生成对象的方法： 类名(参数1，参数2……)</p></li></ul><h2 id="类的写法"><a href="#类的写法" class="headerlink" title="类的写法"></a>类的写法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>): <span class="comment"># 构造函数</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数1</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数2</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ........</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数n</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ........</span><br></pre></td></tr></table></figure><h2 id="矩形类示例"><a href="#矩形类示例" class="headerlink" title="矩形类示例"></a>矩形类示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">rectangle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,w,h</span>): <span class="comment">#构造函数，每个类必有</span></span><br><span class="line">    self.w,self.h = w,h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.w * self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (self.w + self.h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w,h = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()) <span class="comment">#假设输入2 3</span></span><br><span class="line">    rect = rectangle(w,h) <span class="comment">#生成一个rectangle对象</span></span><br><span class="line">    <span class="built_in">print</span>(rect.area(),rect.perimeter()) <span class="comment">#&gt;&gt;6 10</span></span><br><span class="line"></span><br><span class="line">    rect.w,rect.h = <span class="number">10</span>,<span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(rect.area(),rect.perimeter()) <span class="comment">#&gt;&gt;200 60</span></span><br><span class="line"></span><br><span class="line">    rect2 = rectangle(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(rect2.area(), rect2.perimeter()) <span class="comment">#&gt;&gt;6 10</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="类的作用"><a href="#类的作用" class="headerlink" title="类的作用"></a>类的作用</h2><p>将数据和操作数据的函数捆绑在一起，便于当作一个整体使用</p><h2 id="Python中的类"><a href="#Python中的类" class="headerlink" title="Python中的类"></a>Python中的类</h2><ul><li>类型名即是类名：</li></ul><p>float、str、list、dict …..</p><ul><li><p>小数、复数、字符串、元组、列表、集合、字典等组合数据类型的常量，都是对象，函数也是对象，但整数型常量不是对象</p></li><li><p>各种库都是由类组成：</p></li></ul><p>turtle、matplotlib、jieba、sqlite3</p><ul><li>程序员可以自定义类，如rectangle</li></ul><h1 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h1><ul><li><p>Python中所有的类，包括自定义的类，都有<code>__eq__</code>方法。</p></li><li><p><code>x==y</code>的值，就是<code>x.__eq__(y)</code>的值；如果<code>x.__eq__(y)</code>没定义，那么就是<code>y.__eq__(x)</code>的值。如果<code>x.__eq__(y)</code>和<code>y.__eq__(x)</code>都没定义，则<code>x==y</code>也没定义（x,y都是整数常量时不适用)</p></li><li><p><code>print(24.5.__eq__(24.5)) #&gt;&gt;True</code></p></li></ul><p><code>a!=b</code> 等价于 <code>a.__ne__(b)</code> ，或 <code>b.__ne__(a)</code>(若<code>a.__ne__(b)</code>没定义)<br>默认情况下, <code>a.__ne__(b)</code>等价于<code>not a.__eq__(b)</code></p><p><code>a&lt;b</code> 等价于 <code>a.__lt__(b)</code><br><code>a&gt;b</code> 等价于 <code>a.__gt__(b)</code><br><code>a&lt;=b</code> 等价于 <code>a.__le__(b)</code><br><code>a&gt;=b</code> 等价于 <code>a.__ge__(b)</code></p><h2 id="自定义对象的比较"><a href="#自定义对象的比较" class="headerlink" title="自定义对象的比较"></a>自定义对象的比较</h2><ul><li>默认情况下，一个自定义类的<code>__eq__</code>方法，功能是判断两个对象的id是否相同。</li><li>默认情况下，一个自定义类的两个对象a和b， <code>a == b</code> 和<code>a is b</code>的含义一样，都是“a和b是否指向相同的地方”。同理， <code>a != b</code> 和 <code>not a is b</code> 含义相同。</li><li>默认情况下，自定义类的对象不能比较大小，因其<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>方法都被设置成了None</li></ul><h2 id="对象比较大小程序示例"><a href="#对象比较大小程序示例" class="headerlink" title="对象比较大小程序示例"></a>对象比较大小程序示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y = <span class="number">0</span></span>):</span><br><span class="line">    self.x , self.y = x,y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">    <span class="keyword">return</span> self.x == other.x <span class="keyword">and</span> self.y == other.y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>): <span class="comment">#使得两个point对象可以用&lt;进行比较</span></span><br><span class="line">    <span class="keyword">if</span> self.x == other.x:</span><br><span class="line">    <span class="keyword">return</span> self.y &lt; other.y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> self.x &lt; other.x</span><br><span class="line"></span><br><span class="line">a,b = point(<span class="number">1</span>,<span class="number">2</span>),point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#&gt;&gt;True 等价于 a.__eq__(b)</span></span><br><span class="line"><span class="built_in">print</span>(a != b) <span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; point(<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#&gt;&gt;False 等价于 a.__lt__(point(0,1))</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; point(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">lst = [a,point(-<span class="number">2</span>,<span class="number">3</span>),point(<span class="number">7</span>,<span class="number">8</span>),point(<span class="number">5</span>,<span class="number">9</span>),point(<span class="number">5</span>,<span class="number">0</span>)]</span><br><span class="line">lst.sort()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> lst: <span class="comment">#&gt;&gt;-2 3, 1 2, 5 0, 5 9, 7 8,</span></span><br><span class="line"><span class="built_in">print</span>(p.x,p.y ,end = <span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="自定义类重写str方法可以将对象转字符串"><a href="#自定义类重写str方法可以将对象转字符串" class="headerlink" title="自定义类重写str方法可以将对象转字符串"></a>自定义类重写<strong>str</strong>方法可以将对象转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y</span>):</span><br><span class="line">    self.x ,self.y = x ,y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;(%d,%d)&quot;</span> % (self.x, self.y))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(point(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment">#&gt;&gt;(3,5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(point(<span class="number">2</span>,<span class="number">4</span>))) <span class="comment">#&gt;&gt;(2,4)</span></span><br></pre></td></tr></table></figure><h1 id="继承和派生"><a href="#继承和派生" class="headerlink" title="继承和派生"></a>继承和派生</h1><ul><li><p>要写小学生类、中学生类、大学生类….</p></li><li><p>所有学生都有共同点，每种学生又有各自特点，如何避免每个类都从头编写的重复劳动？</p></li><li><p>使用继承（派生）</p></li></ul><p>定义一个新的类B时，如果发现类B拥有某个已写好的类A的全部特点，此外还有类A没有的特点，那么就不必从头重写类B，而是可以把A作为一个“基类”（也称“父类”），把B写为基类A的一个“派生类”（也称“子类”）来写。这样，就可以说从A类“派生”出了B类，也可以说B类“继承”了A类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">基类名</span>):</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,gender,birthYear</span>):</span><br><span class="line">    self.<span class="built_in">id</span>,self.name,self.gender,self.birthYear = <span class="built_in">id</span>,name,gender,birthYear</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printInfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Name:&quot;</span>, self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ID:&quot;</span>, self.<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Birth Year:&quot;</span>, self.birthYear)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Gender:&quot;</span>, self.gender)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Age:&quot;</span>, self.countAge())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAge</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.now().year - self.birthYear</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">undergraduateStudent</span>(<span class="title class_ inherited__">student</span>): <span class="comment">#本科生类，继承了student类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,gender,birthYear,department</span>):</span><br><span class="line">        student.__init__(self,<span class="built_in">id</span>,name,gender,birthYear)</span><br><span class="line">        self.department = department</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">qualifiedForBaoyan</span>(<span class="params">self</span>): <span class="comment">#给予保研资格</span></span><br><span class="line">    <span class="built_in">print</span>(self.name + <span class="string">&quot;is qualified for baoyan&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printInfo</span>(<span class="params">self</span>): <span class="comment">#基类中有同名方法</span></span><br><span class="line">        student.printInfo(self) <span class="comment">#调用基类的PrintInfo</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Department:&quot;</span>, self.department)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s2 = undergraduateStudent(<span class="string">&quot;118829212&quot;</span>, <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="number">2000</span>, <span class="string">&quot;Computer Science&quot;</span>)</span><br><span class="line">    s2.printInfo()<span class="comment"># 子类的方法</span></span><br><span class="line">    s2.qualifiedForBaoyan()</span><br><span class="line">    <span class="keyword">if</span> s2.countAge() &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(s2.name, <span class="string">&quot;is older than 18&quot;</span>)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">Name: Harry Potter</span><br><span class="line">ID: 118829212</span><br><span class="line">Birth Year: 2000</span><br><span class="line">Gender: M</span><br><span class="line">Age: 20</span><br><span class="line">Department: Computer Science</span><br><span class="line">Harry Potter is qualified for baoyan</span><br><span class="line">Harry Potter is older than 18</span><br></pre></td></tr></table></figure><h2 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h2><ul><li>所有类都是object类的派生类，因而具有object类的各种属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(A)) <span class="comment">#输出A的方法,对象名称也可以</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;,&#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;,&#x27;__hash__&#x27;,&#x27;__init__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;,  &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;func&#x27;]</span><br></pre></td></tr></table></figure><ul><li>有的类<code>_lt__</code>，<code>__gt__</code>等方法被设置成None，于是对象不可比较大小</li></ul><h1 id="静态属性和静态方法"><a href="#静态属性和静态方法" class="headerlink" title="静态属性和静态方法"></a>静态属性和静态方法</h1><ul><li>静态属性被所有对象所共享，一共只有一份</li><li>静态方法不是作用在具体的某个对象上的，不能访问非静态属性</li><li>静态属性和静态方法这种机制存在的目的，就是为了少写全局变量和全局函数</li></ul><blockquote><p>静态方法不可以访问非静态属性。<br>静态方法和属性是用来替代全局变量和全局函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">employee</span>:</span><br><span class="line">    totalSalary = <span class="number">0</span> <span class="comment"># 静态属性，记录发给员工的工资总数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,income</span>):</span><br><span class="line">    self.name,self.income = name, income</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,salary</span>):</span><br><span class="line">    self.income += salary</span><br><span class="line">    employee.totalSalary += salary</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printTotalSalary</span>(): <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="built_in">print</span>(employee.totalSalary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = employee(<span class="string">&quot;Jack&quot;</span>,<span class="number">0</span>)</span><br><span class="line">e2 = employee(<span class="string">&quot;Tom&quot;</span>,<span class="number">0</span>)</span><br><span class="line">e1.pay(<span class="number">100</span>)</span><br><span class="line">e2.pay(<span class="number">200</span>)</span><br><span class="line">employee.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line">e1.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line">e2.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line"><span class="built_in">print</span>(employee.totalSalary) <span class="comment">#&gt;&gt;300</span></span><br></pre></td></tr></table></figure><h1 id="对象作为集合元素或字典的键"><a href="#对象作为集合元素或字典的键" class="headerlink" title="对象作为集合元素或字典的键"></a>对象作为集合元素或字典的键</h1><h2 id="什么是“可哈希”"><a href="#什么是“可哈希”" class="headerlink" title="什么是“可哈希”"></a>什么是“可哈希”</h2><ul><li><p>可哈希的东西，才可以作为字典的键和集合的元素。</p></li><li><p><code>hash(x)</code>有定义，即为 x 可哈希</p></li><li><p><code>hash(x) = x</code> (如果x是整型常量)<br><code>hash(x) = x.__hash___()</code> （如果x不是整型常量)</p></li><li><p>object类有<code>__hash__()</code>方法，返回值是个整数</p></li></ul><p>列表、集合、字典的<code>__hash__</code>成员函数都被设置成None，因此它们都不能成为集合的元素，或者字典的键，因为无法计算哈希值。</p><p>整数类型变量、小数、字符串、元组的哈希值，是根据它们的值算出来的，只要值相同，哈希值就相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">23.1</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),<span class="number">23.1</span>.__hash__())</span><br><span class="line"><span class="comment">#&gt;&gt;230584300921372695 230584300921372695</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),<span class="built_in">hash</span>(<span class="number">23</span>)) <span class="comment">#&gt;&gt;23 23</span></span><br><span class="line"></span><br><span class="line">x = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),(<span class="number">1</span>,<span class="number">2</span>).__hash__(),<span class="built_in">hash</span>(x))</span><br><span class="line"><span class="comment">#&gt;&gt;3713081631934410656 3713081631934410656 3713081631934410656</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(), <span class="string">&quot;ok&quot;</span>.__hash__())</span><br><span class="line"><span class="comment">#&gt;&gt;-423760875654480603 -423760875654480603</span></span><br></pre></td></tr></table></figure><h2 id="哈希值和字典、集合的关系"><a href="#哈希值和字典、集合的关系" class="headerlink" title="哈希值和字典、集合的关系"></a>哈希值和字典、集合的关系</h2><ul><li><p>字典和集合都是”哈希表”数据结构，根据元素的哈希值为元素找存放的”槽”，哈希值可以看作是槽编号。一个槽里面可以放多个哈希值相同的元素。</p></li><li><p>两个对象a，b若<code>hash(a) != hash(b)</code>，则a，b可以处于同一集合（也可以作为同一字典的不同元素的键)。</p></li><li><p>两个对象a，b 若<code>hash(a) == hash(b)</code>，但<code>a == b</code>不成立，则a，b可以处于同一集合（也可以作为同一字典的不同元素的键)，即不算重复，可以放在同一个槽里。</p></li><li><p>若 dt 是个字典，<code>dt[x]</code>计算过程如下：<br>1) 根据hash(x)去找x应该在的槽的编号；<br>2) 如果该槽没有元素，则认为dt中没有键为x的元素；<br>3) 如果该槽中有元素，则试图在槽中找一个元素y，使得<code>y的键 == x</code>。如果找到，则dt[x]即为y的值，如果找不到，则dt[x]没定义，即认为dt中不存在键为x的元素。</p></li><li><p>自定义类的对象，默认情况下哈希值是根据对象id进行计算。所以两个对象，只要<code>a is b</code>不成立， a和b的哈希值就不同，就可以同时存在于一个集合内，或作为同一字典的不同元素的键。</p></li><li><p>可以重写自定义类的<code>__hash__()</code>方法，使得对象的哈希值和对象的值，而不是id相关，这样值相同的对象，就不能处于同一个集合中，也不能作为同一字典不同元素的键。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line"></span><br><span class="line">a,b = A(<span class="number">5</span>), A(<span class="number">5</span>) <span class="comment">#两个A(5)不是同一个,因此a和b的id不同</span></span><br><span class="line">dt = &#123;a:<span class="number">20</span>, A(<span class="number">5</span>):<span class="number">30</span>, b:<span class="number">40</span>&#125; <span class="comment">#三个元素的键id不同,因此在不同槽里</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dt), dt[a], dt[b]) <span class="comment">#&gt;&gt;3 20 40</span></span><br><span class="line"><span class="built_in">print</span>(dt[A(<span class="number">5</span>)]) <span class="comment">#runtime error,传入的A(5)是一个新的对象</span></span><br></pre></td></tr></table></figure><h2 id="自定义类的对象是否可哈希"><a href="#自定义类的对象是否可哈希" class="headerlink" title="自定义类的对象是否可哈希"></a>自定义类的对象是否可哈希</h2><ul><li><p><code>a==b</code>等价于<code>a.__eq__(b)</code>。自定义类的默认<code>__eq__</code>函数是判断两个对象的id是否相同。自定义类的默认<code>__hash__</code>函数是根据对象id算哈希值的。</p></li><li><p>如果为自定义的类重写了<code>__eq__(self,other)</code>成员函数，则其<code>__hash__</code>成员函数会被自动设置为None。这种情况下，该类就变成不可哈希的</p></li><li><p>一个自定义类，只有在重写了<code>__eq__</code>方法却没有重写<code>__hash__</code>方法的情况下，才是不可哈希的。</p></li></ul><h3 id="自定义类重写-hash-但不重写-eq"><a href="#自定义类重写-hash-但不重写-eq" class="headerlink" title="自定义类重写__hash___但不重写__eq__"></a>自定义类重写<code>__hash___</code>但不重写<code>__eq__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(self.x)</span><br><span class="line">c = A(<span class="number">1</span>)</span><br><span class="line">dt = &#123;A(<span class="number">1</span>):<span class="number">2</span>, A(<span class="number">1</span>):<span class="number">3</span>, c:<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">#三个元素的键哈希值相同，但值不同，不算重复，可以在同一个槽里</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dt)) <span class="comment">#&gt;&gt;3</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dt.items():</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>].x,a[<span class="number">1</span>],end = <span class="string">&quot;,&quot;</span>) <span class="comment">#&gt;&gt;1 2,1 3,1 4,</span></span><br><span class="line"><span class="built_in">print</span>(dt[c]) <span class="comment">#&gt;&gt;4</span></span><br><span class="line"><span class="built_in">print</span>(dt[A(<span class="number">1</span>)]) <span class="comment">#runtime error</span></span><br><span class="line"><span class="comment">#找到了和A(1)哈希相同的槽，但不存在元素的键x，满足x==A(1)(特指最后一行的A(1))</span></span><br></pre></td></tr></table></figure><h3 id="自定义类同时重写-hash-和-eq"><a href="#自定义类同时重写-hash-和-eq" class="headerlink" title="自定义类同时重写__hash___和__eq__"></a>自定义类同时重写<code>__hash___</code>和<code>__eq__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other,A): <span class="comment">#判断other是不是类A的对象</span></span><br><span class="line">        <span class="keyword">return</span> self.x == other.x</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other,<span class="built_in">int</span>): <span class="comment">#如果other是整数</span></span><br><span class="line">        <span class="keyword">return</span> self.x == other</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.x</span><br><span class="line">a = A(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> == a) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">b = A(<span class="number">3</span>)</span><br><span class="line">d = &#123;A(<span class="number">5</span>):<span class="number">10</span>,A(<span class="number">3</span>):<span class="number">20</span>,a:<span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d),d[a],d[b],d[<span class="number">3</span>]) <span class="comment">#&gt;&gt;2 30 30 30</span></span><br><span class="line"><span class="comment"># d[a],d[b],d[3]中a b 3的哈希值相同，而且使用==号判断时候也相同。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十三章面向对象程序设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十二章网络爬虫设计</title>
    <link href="http://hibiscidai.com/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-02T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十二章网络爬虫设计"><p>实用Python程序设计MOOC-第十二章网络爬虫设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十二章网络爬虫设计"><a href="#实用Python程序设计MOOC-第十二章网络爬虫设计" class="headerlink" title="实用Python程序设计MOOC-第十二章网络爬虫设计"></a>实用Python程序设计MOOC-第十二章网络爬虫设计</h1><h1 id="爬虫基本原理"><a href="#爬虫基本原理" class="headerlink" title="爬虫基本原理"></a>爬虫基本原理</h1><h2 id="爬虫的用途和原理"><a href="#爬虫的用途和原理" class="headerlink" title="爬虫的用途和原理"></a>爬虫的用途和原理</h2><p>1) 在网络上搜集数据（比如搜索引擎）<br>2) 模拟浏览器快速操作（抢票，抢课，抢挂号…..)<br>3) 模拟浏览器操作，替代填表等重复操作</p><h2 id="最基本的爬虫写法"><a href="#最基本的爬虫写法" class="headerlink" title="最基本的爬虫写法"></a>最基本的爬虫写法</h2><p>数据获取型爬虫的本质就是自动获取网页并抽取其中的内容<br>1) 手工找出合适的url（网址） 。<br>2) 用浏览器手工查看url对应的网页，并查看网页源码，找出包含想要的内容（文件名，链接等）的字符串的模式。<br>3) 程序中获取url对应的网页。<br>4) 程序中用正则表达式或BeautifulSoup库抽取网页中想要的内容并保存。</p><h2 id="示例：获取百度图片的搜索结果图片"><a href="#示例：获取百度图片的搜索结果图片" class="headerlink" title="示例：获取百度图片的搜索结果图片"></a>示例：获取百度图片的搜索结果图片</h2><ol><li>/在百度图片敲关键字“desk”进行搜索</li><li><p>搜索后看浏览器地址栏的地址：<br><a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=desk&amp;oq=desk&amp;rsp=-1">搜索后看浏览器地址栏的地址</a></p></li><li><p>猜测只要在浏览器输入下面地址的word=内容，替换其中的单词，就能搜到图片：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=desk</span><br><span class="line"></span><br><span class="line">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=猫</span><br></pre></td></tr></table></figure><p>浏览器输入后出现猫的搜索结果</p><ol><li><p>用浏览器访问刚才的url,并用浏览器查看源码(chrome)</p></li><li><p>在源码中查找</p></li></ol><p>复制出来的图片地址:<code>https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg</code><br>为某张图片的网络地址，此链接是百度保存的缩略图的网址</p><p>查看网页源代码后搜索图片连接，找到源码：<br><code>716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg</code></p><p>发现图片链接在网页里都是这样的：<br><code>&#123;&quot;thumbURL&quot;:&quot;https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.sjpg&quot;, &quot;adType&quot;:&quot;0&quot;,&quot;midd</code></p><p>即thumbURL后跟的是图片连接。</p><p>可以用正则表达式提取图片链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests <span class="comment">#request库用于获取网络资源 pip install requests</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>): <span class="comment">#获取网址为url的网页</span></span><br><span class="line"><span class="comment">#具体实现略，后面再讲述</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getBaiduPictures</span>(<span class="params">word,n</span>):</span><br><span class="line"><span class="comment">#下载n个百度图片搜来的关于word的图片保存到本地</span></span><br><span class="line">url=<span class="string">&quot;https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=&quot;</span></span><br><span class="line">url += word</span><br><span class="line">html = getHtml(url)</span><br><span class="line">pt = <span class="string">&#x27;\&quot;thumbURL\&quot;:.*?\&quot;(.*?)\&quot;&#x27;</span> <span class="comment">#正则表达式，用于寻找图片网址</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment">#&quot;thumbURL&quot;:&quot;https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;,</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html): <span class="comment">#x就是图片url</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = x.lower()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(x, stream=<span class="literal">True</span>)<span class="comment">#获取x对应的网络资源</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;&#123;0&#125;&#123;1&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(word,i), <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"><span class="comment">#&quot;wb&quot;表示二进制写方式打开文件</span></span><br><span class="line">f.write(r.content) <span class="comment">#图片内容写入文件</span></span><br><span class="line">f.close()</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= n:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">getBaiduPictures(<span class="string">&quot;猫&quot;</span>, <span class="number">5</span>)</span><br><span class="line">getBaiduPictures(<span class="string">&quot;熊猫&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="用requests库获取网页"><a href="#用requests库获取网页" class="headerlink" title="用requests库获取网页"></a>用requests库获取网页</h1><h2 id="用requests-get获取网页"><a href="#用requests-get获取网页" class="headerlink" title="用requests.get获取网页"></a>用requests.get获取网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 获取网址url的网页</span></span><br><span class="line">    <span class="keyword">import</span> requests  <span class="comment"># request库用于获取网络资源,pip install request</span></span><br><span class="line">    fakeHeaders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:  <span class="comment"># 用于伪装浏览器发送请求</span></span><br><span class="line">                       <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">                       AppleWebKit/537.36 (KHTML, like Gecko) \ &#x27;</span></span><br><span class="line">                       <span class="string">&#x27;Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,*/*&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, headers=fakeHeaders)</span><br><span class="line">        </span><br><span class="line">        r.encoding = r.apparent_encoding  <span class="comment"># 确保网页编码正确</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> r.text  <span class="comment"># 返回值是个字符串，内含整个网页内容</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 用法： html = getHtml(&quot;http://openjudge.cn&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="用requests-get获取网页（编码识别加强版"><a href="#用requests-get获取网页（编码识别加强版" class="headerlink" title="用requests.get获取网页（编码识别加强版)"></a>用requests.get获取网页（编码识别加强版)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">import</span> sys, requests</span><br><span class="line">    <span class="keyword">import</span> chardet  <span class="comment"># 编码处理库 pip install chardet</span></span><br><span class="line">    fakeHeaders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">                       <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">                       AppleWebKit/537.36 (KHTML, like Gecko) \ &#x27;</span></span><br><span class="line">                       <span class="string">&#x27;Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,*/*&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, headers=fakeHeaders)</span><br><span class="line">        </span><br><span class="line">        ecd = chardet.detect(r.content)[<span class="string">&#x27;encoding&#x27;</span>]  <span class="comment"># ecd是个字符串</span></span><br><span class="line">        <span class="keyword">if</span> ecd.lower() != sys.getdefaultencoding().lower():</span><br><span class="line">            r.encoding = ecd  <span class="comment"># 修改r中文本的编码</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.textv</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="用requests库获取网页的优势和局限"><a href="#用requests库获取网页的优势和局限" class="headerlink" title="用requests库获取网页的优势和局限"></a>用requests库获取网页的优势和局限</h2><ul><li>优势</li></ul><ul><li>相比其它方法， 速度快几倍</li><li>安装简单，分发容易</li></ul><ul><li>局限</li></ul><ul><li>容易被反爬虫手段屏蔽</li><li>不能获取包含javascript生成的动态网页<br>用上面的getHtml函数，不能得到百度图片搜索结果网页，得到的网页是空网页（被反爬了）</li></ul><h2 id="弥补requests不足的其它获取网页的办法"><a href="#弥补requests不足的其它获取网页的办法" class="headerlink" title="弥补requests不足的其它获取网页的办法"></a>弥补requests不足的其它获取网页的办法</h2><ul><li>使用selenium库 (慢，很容易被反爬，且已经被许多网站反爬，网上各种对付反爬的解决办法基本不管用，不推荐）</li><li>使用pyppeteer库（快，暂未被许多网站反爬，强烈推荐）</li></ul><h1 id="用selenium库获取网页"><a href="#用selenium库获取网页" class="headerlink" title="用selenium库获取网页"></a>用selenium库获取网页</h1><p><code>pip install selunium</code></p><p>需要chrome浏览器或firefox浏览器，此外还需要下载chrome驱动程序(chromedriver.exe)或firefox驱动程序(geckodriver.exe)</p><h2 id="用selenium获取网页"><a href="#用selenium获取网页" class="headerlink" title="用selenium获取网页"></a>用selenium获取网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 暂时适用于百度图片搜索</span></span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 需要pip install selenium</span></span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">    options = Options()  <span class="comment"># 浏览器选项</span></span><br><span class="line">    <span class="comment"># 等价于 options = webdriver.chrome.options.Options()</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 规定chrome浏览器隐身模式运行</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 禁止chrome使用gpu加速，能快点</span></span><br><span class="line">    driver = webdriver.Chrome(</span><br><span class="line">        executable_path=<span class="string">&#x27;c:/tmp/chromedriver.exe&#x27;</span>, options=options)</span><br><span class="line">    <span class="comment"># driver就是个chrome浏览器。需要下载安装chrome驱动器 chromedriver.exe</span></span><br><span class="line">    driver.get(url)  <span class="comment"># 浏览器装入网页</span></span><br><span class="line">    html = driver.page_source  <span class="comment"># 网页源代码</span></span><br><span class="line">    driver.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line">    driver.quit()  <span class="comment"># 退出</span></span><br><span class="line">    <span class="keyword">return</span> html  <span class="comment"># 返回字符串</span></span><br></pre></td></tr></table></figure><h2 id="用pyppeteer库获取网页"><a href="#用pyppeteer库获取网页" class="headerlink" title="用pyppeteer库获取网页"></a>用pyppeteer库获取网页</h2><ul><li><p>puppeteer是谷歌公司推出的可以控制Chrome浏览器的一套编程工具。一个日本工程师以此为基础推出了Python版本，叫pyppeteer。</p></li><li><p><a href="https://pypi.org/project/pyppeteer/">pyppeteer的官网</a></p></li><li><p>启动一个浏览器Chromium，用浏览器装入网页。浏览器可以用无头模式（headless)，即隐藏模式启动，也可以显式启动。</p></li><li><p>从浏览器可以获取网页源代码，若网页有javascript程序，获取到的是javascript被浏览器执行后的网页源代码。</p></li><li><p>可以向浏览器发送命令，模拟用户在浏览器上键盘输入、鼠标点击等操作,让浏览器转到其它网页。</p></li><li><p>selenium原理及功能和pyppeteer一样。</p></li></ul><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p><code>pip install pyppeteer</code></p><ul><li>要求Python版本 &gt;= 3.6</li><li>必须下载并安装特殊版本的谷歌浏览器Chromium</li></ul><p>可以将Chromium压缩包随便解压在哪个文件夹，然后在程序指明其中chrome.exe的位置。<br>也可以将Chromium解压到pyppeteer的安装文件夹下面。这个文件夹通常类似：<br><code>C:\Users\username\AppData\Local\pyppeteer\pyppeteer\local-chromium\588429</code><br>把username要换成自己的windows用户名， 588429这里可能是别的数。<br>将Chromium压缩包里面的chrome-win32文件夹整个放在上面那个文件夹里面就行</p><h3 id="预备知识：协程"><a href="#预备知识：协程" class="headerlink" title="预备知识：协程"></a>预备知识：协程</h3><ul><li>协程就是前面加了’async’的函数(从Python 3.6开始有)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">f</span>()</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>调用协程时，必须在函数名前面加’await’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> f()</span><br></pre></td></tr></table></figure><ul><li><p>协程只能在协程里面调用，即await语句只能出现在协程里面。</p></li><li><p>协程是一种特殊的函数，多个协程可以并行。</p></li><li><p>pyppeteer中的所有函数都是协程，调用时前面都要加 await，且只能在协程中调用<br>初用协程，经常因为调用XXXX时忘了加await导致下面错误：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeWarning: coroutine &#x27;XXXX&#x27; was never awaited</span><br></pre></td></tr></table></figure><h3 id="用pyppeteer获取网页"><a href="#用pyppeteer获取网页" class="headerlink" title="用pyppeteer获取网页"></a>用pyppeteer获取网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 暂时适用于百度图片搜索</span></span><br><span class="line">    <span class="keyword">import</span> asyncio  <span class="comment"># Python 3.6之后自带的协程库</span></span><br><span class="line">    <span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">asGetHtml</span>(<span class="params">url</span>):  <span class="comment"># 获取url对应网页的源代码</span></span><br><span class="line">        browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 启动Chromium,browser即为Chromium浏览器，非隐藏启动</span></span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()  <span class="comment"># 在浏览器中打开一个新页面（标签）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; \</span></span><br><span class="line"><span class="string">Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)  <span class="comment"># 反反爬措施</span></span><br><span class="line">        <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">            <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator, \</span></span><br><span class="line"><span class="string">            &#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)  <span class="comment"># 反反爬措施</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.goto(url)  <span class="comment"># 装入url对应的网页</span></span><br><span class="line">        text = <span class="keyword">await</span> page.content()  <span class="comment"># page.coutent就是网页源代码字符串</span></span><br><span class="line">        <span class="keyword">await</span> browser.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"><span class="comment"># 速度大约比用requests.get慢5,6倍</span></span><br><span class="line"></span><br><span class="line">m = asyncio.ensure_future(asGetHtml(url))  <span class="comment"># 协程外启动协程</span></span><br><span class="line">asyncio.get_event_loop().run_until_complete(m)  <span class="comment"># 等待协程结束</span></span><br><span class="line"><span class="keyword">return</span> m.result()  <span class="comment"># 返回的就是asGetHtml的返回值 text</span></span><br></pre></td></tr></table></figure><p>可以改进程序，只需要启动一次浏览器，生成一个page对象即可，以后获取不同网页都用相同page对象，所有事情完成后才关闭浏览器。</p><ul><li>launch的其它参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>, executablePath=<span class="string">&quot;c:/tmp/chrome-win32/chrome.exe&quot;</span>, userdataDir=<span class="string">&quot;c:/tmp&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>excutablePath</code>: 如果Chromium没有安装在默认文件夹下面，则需要指定其位置。<br><code>userdataDir</code>: userdataDir指明用来存放浏览器工作期间存放临时文件的文件夹。不是必须，能够防止可能出现的莫名其妙的错误。</p><h2 id="用BeautifulSoup库分析网页"><a href="#用BeautifulSoup库分析网页" class="headerlink" title="用BeautifulSoup库分析网页"></a>用BeautifulSoup库分析网页</h2><h3 id="分析并提取网页内容的三种方式"><a href="#分析并提取网页内容的三种方式" class="headerlink" title="分析并提取网页内容的三种方式"></a>分析并提取网页内容的三种方式</h3><ol><li>正则表达式(速度最快，但适应变化略差)</li><li>BeautifulSoup库 (速度是正则表达式的约几分之一)</li><li>selenium或pyppeteer的中的浏览器对象的查找元素函数(速度是正则表达式的约百分之一，用在需要模拟在网页中进行输入，点击按钮等操作的时候)</li></ol><h3 id="html文档-网页-中的tag"><a href="#html文档-网页-中的tag" class="headerlink" title="html文档(网页)中的tag"></a>html文档(网页)中的tag</h3><p>tag格式通常为(少数没有正文和<code>&lt; /X &gt;</code>):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">X</span> <span class="attr">attr1</span>=<span class="string">&#x27;xxx&#x27;</span> <span class="attr">attr2</span>=<span class="string">&#x27;yyy&#x27;</span> <span class="attr">attr3</span>=<span class="string">&#x27;zzz&#x27;</span> …&gt;</span></span><br><span class="line">nnnnnnnnnnnnnn</span><br><span class="line"><span class="tag">&lt;/<span class="name">X</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>X : tag的名字(name)</li><li>attr1,attr2… : tag的属性（attr） =后面跟着属性的值</li><li>nnnnnnnnnnnnnn : tag的正文（text）</li></ul><p>例如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.sohu.com&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;mylink&#x27;</span>&gt;</span>搜狐网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>a ：tag的名字(name)</li><li>href, id ： tag的属性(attr)， =后面跟着属性的值</li><li>搜狐网 ： tag的正文(text)</li></ul><h3 id="tag可以嵌套"><a href="#tag可以嵌套" class="headerlink" title="tag可以嵌套"></a>tag可以嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;siteHeader&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;topsearch&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;userMenu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://openjudge.cn/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用BeautifulSoup库分析html"><a href="#用BeautifulSoup库分析html" class="headerlink" title="用BeautifulSoup库分析html"></a>用BeautifulSoup库分析html</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><p>1) 将html文档装入一个BeautifulSoup对象X<br>2) 用X对象的<code>find</code>,<code>find_all</code>等函数去找想要的tag对象<br>3) 对找到的tag对象，还可以用其<code>find</code>,<code>find_all</code>函数去，找它内部包含（嵌套）的tag对象<br>4) tag对象的text就是该对象里的正文（text）， tag对象也可以看作是一个字典，里面包含各种属性(attr)及其值。</p><h3 id="把html文档载入BeautifulSoup对象"><a href="#把html文档载入BeautifulSoup对象" class="headerlink" title="把html文档载入BeautifulSoup对象"></a>把html文档载入BeautifulSoup对象</h3><ul><li>方法1，html文档来自字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;siteHeader&quot; class=&quot;wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h1 class=&quot;logo&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;topsearch&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;ul id=&quot;userMenu&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li &gt;&lt;a href=&quot;http://openjudge.cn/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#带href的 &lt;a&gt;都是链接，上面“首页”是链接文字 ,href后面http://openjudge.cn是链</span></span><br><span class="line">接地址</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">str</span>, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>).text) <span class="comment">#&gt;&gt;首页</span></span><br></pre></td></tr></table></figure><ul><li>方法2，html文档来自于文件：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>方法3，html文档来自于给定网址：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):</span><br><span class="line"><span class="comment">#获得html文本</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.raise_for_status()</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">html = getHtml(<span class="string">&quot;https://cn.bing.com/dict/search?q=new&quot;</span>)</span><br><span class="line">soup = bs4.BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="实例：用BeautifulSoup对象寻找想要的tag"><a href="#实例：用BeautifulSoup对象寻找想要的tag" class="headerlink" title="实例：用BeautifulSoup对象寻找想要的tag"></a>实例：用BeautifulSoup对象寻找想要的tag</h3><p><code>c:\tmp\test.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;synoid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;df_div2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;de_title1&quot;</span>&gt;</span>adj.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col_fl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">h</span>=<span class="string">&quot;ID=Dictionary,5237.1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cn.bing.com/dict/search?q=novel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p1-4&quot;</span>&gt;</span>novel<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">h</span>=<span class="string">&quot;ID=Dictionary,5238.1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cn.bing.com/dict/search?q=newfangled&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p1-4&quot;</span>&gt;</span>newfangled<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchlink1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sh1&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchlink1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sh2&quot;</span>&gt;</span>谷歌<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>),<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">diva = soup.find(<span class="string">&quot;div&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;synoid&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#寻找名为&quot;div&quot;,且具有值为&quot;synoid&quot;的属性&quot;id&quot;的tag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> diva != <span class="literal">None</span>: <span class="comment">#如果找到</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> diva.find_all(<span class="string">&quot;span&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;p1-4&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text) <span class="comment">#在diva内部继续找</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> diva.find_all(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line">x = diva.find(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;sh2&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">novel</span><br><span class="line">newfangled</span><br><span class="line">百度</span><br><span class="line">谷歌</span><br><span class="line">谷歌</span><br><span class="line">http://www.google.com</span><br><span class="line">searchlink1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果别处没有和 &lt;div id=&quot;synoid&quot; style=&quot;display:block;&quot;&gt; 内部的模式相似的东西，也可以不用先找这个 &quot;synoid&quot; tag</span></span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>),<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;span&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;p1-4&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br><span class="line">x = soup.find(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;sh2&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="实例：爬取每日股票交易信息"><a href="#实例：爬取每日股票交易信息" class="headerlink" title="实例：爬取每日股票交易信息"></a>实例：爬取每日股票交易信息</h2><p><a href="https://www.banban.cn/gupiao/list_cyb.html">创业板股票交易代码大全</a><br><a href="https://www.banban.cn/gupiao/list_sz.html">深圳股票交易代码大全</a><br><a href="https://www.banban.cn/gupiao/list_sh.html">上证股票交易代码大全</a></p><p>查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600151/&quot;</span>&gt;</span>航天机电(600151)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600156/&quot;</span>&gt;</span>华升股份(600156)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600160/&quot;</span>&gt;</span>巨化股份(600160)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600161/&quot;</span>&gt;</span>天坛生物(600161)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600162/&quot;</span>&gt;</span>香江控股(600162)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>东方财富网每日股票交易信息单只股票：</p><p>quote.eastmoney.com/sh600000.html 上证<br>quote.eastmoney.com/sz000017.html 深圳或创业板</p><p>该页面查看源代码，看不到 12.17, 12.51等交易数据。说明源代码里面包含javascript程序，<br>浏览器执行javascript程序以后，才能得到显示的页面。</p><p>因此python程序需要在取到网页后，还要执行里面的javascript程序，才能得到股票数据</p><p>用requests.get无法得到显示的网页。必须用selenium或者pyppeteer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio  <span class="comment"># Python 3.6之后自带的协程库</span></span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):  <span class="comment"># 为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; \</span></span><br><span class="line"><span class="string">Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">        <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator, \</span></span><br><span class="line"><span class="string">        &#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用正则表达式获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line"><span class="comment">#从&quot;https://www.banban.cn/gupiao/list_sh.html&quot;对应的page获取所有股票名称和代码</span></span><br><span class="line">codes = []</span><br><span class="line"><span class="comment"># 最终内容： [&quot;四川路桥(600039)&quot;,&quot;包钢股份(600010)&quot;......]</span></span><br><span class="line">html = <span class="keyword">await</span> page.content()</span><br><span class="line">pt = <span class="string">&#x27;&lt;a href=&quot;/gupiao/[^&quot;]*&quot;&gt;([^&lt;]*\(\d+\))&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="comment"># 对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html):</span><br><span class="line">codes.append(x)</span><br><span class="line"><span class="keyword">return</span> codes</span><br><span class="line"><span class="comment"># 耗时： 0: 00:00.033943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockInfo</span>(<span class="params">url</span>):</span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 启动Chromium,browser即为Chromium浏览器，非隐藏启动</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()  <span class="comment">#在浏览器中打开一个新页面（标签）</span></span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)  <span class="comment">#新页面生成后一律调用此来反反爬</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(url)  <span class="comment">#装入url对应的网页</span></span><br><span class="line">    codes = <span class="keyword">await</span> getStockCodes(page)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> codes[:<span class="number">3</span>]:  <span class="comment">#只取前三个股票信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----&quot;</span>, x)  <span class="comment">#x形如&quot;四川路桥(600039)&quot;</span></span><br><span class="line">        pos1, pos2 = x.index(<span class="string">&quot;(&quot;</span>), x.index(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        code = x[pos1 + <span class="number">1</span>:pos2]  <span class="comment"># 取股票代码,如600039</span></span><br><span class="line">        url = <span class="string">&quot;https://quote.eastmoney.com/sh&quot;</span> + code + <span class="string">&quot;.html&quot;</span></span><br><span class="line">        <span class="keyword">await</span> page.goto(url)</span><br><span class="line">        html = <span class="keyword">await</span> page.content()  <span class="comment"># 往下编程前可以先print(html)看一看</span></span><br><span class="line">        pt = <span class="string">&#x27;&lt;td&gt;([^&lt;]*)&lt;/td&gt;.*?&lt;td[^&gt;]*id=&quot;gt\d*?&quot;[^&gt;]*&gt;([^&lt;]*)&lt;/td&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html, re.DOTALL):</span><br><span class="line">            <span class="built_in">print</span>(x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">await</span> browser.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.banban.cn/gupiao/list_sh.html&quot;</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(getStockInfo(url))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="keyword">await</span> page.content()</span><br><span class="line"><span class="built_in">print</span>(html) <span class="comment">#打出的内容拷贝到记事本查看，找到以下内容：</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>今开： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;46&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>最高： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;44&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>涨停： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl red&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;51&quot;</span>&gt;</span>1.34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>换手： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>1%<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>成交量： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;47&quot;</span>&gt;</span>316.4万手<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    .....................</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;pe&quot;</span>&gt;</span>245.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>总市值： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt7&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;tmv&quot;</span>&gt;</span>547.0亿<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正则表达式pt对应:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>今开： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;46&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----- 包钢股份(600010)</span><br><span class="line">今开： 1.22</span><br><span class="line">最高： 1.22</span><br><span class="line">涨停： 1.34</span><br><span class="line">换手： 1%</span><br><span class="line">成交量： 316.4万手</span><br><span class="line">总市值： 547.0亿</span><br><span class="line">昨收： 1.22</span><br><span class="line">最低： 1.19</span><br><span class="line">跌停： 1.1</span><br><span class="line">量比： 1.04</span><br><span class="line">成交额： 3.81亿</span><br><span class="line">市净： 1.03</span><br><span class="line">流通市值： 380.1亿</span><br><span class="line">----- 四川路桥(600039)</span><br><span class="line">今开： 4.94</span><br><span class="line">最高： 4.95</span><br><span class="line">涨停： 5.43</span><br><span class="line">换手： 0.49%</span><br><span class="line">成交量： 17.64万手</span><br><span class="line">总市值： 232.8亿</span><br><span class="line">昨收： 4.94</span><br><span class="line">最低： 4.86</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用BeautifulSoup获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line">    codes = []</span><br><span class="line">    html = <span class="keyword">await</span> page.content()</span><br><span class="line">    soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;li&quot;</span>):</span><br><span class="line">    <span class="comment">#对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">    a = x.find(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>( <span class="string">&quot;(&quot;</span> <span class="keyword">in</span> a.text <span class="keyword">and</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> a.text):</span><br><span class="line">    codes.append(a.text)</span><br><span class="line">    <span class="keyword">return</span> codes</span><br><span class="line">    <span class="comment">#耗时： 0: 00:00.193480</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用浏览器自身的查找元素功能获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line">codes = []</span><br><span class="line">elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;li&quot;</span>) <span class="comment">#根据tag name找元素</span></span><br><span class="line"><span class="comment">#对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> elements:</span><br><span class="line">a = <span class="keyword">await</span> e.querySelector(<span class="string">&quot;a&quot;</span>) <span class="comment">#根据tag name找元素</span></span><br><span class="line">obj = <span class="keyword">await</span> a.getProperty(<span class="string">&quot;text&quot;</span>) <span class="comment">#还可以 a.getProperty(&quot;href&quot;)</span></span><br><span class="line"><span class="comment">#上面这句不行就改成: obj = await a.getProperty(&quot;innerText&quot;)</span></span><br><span class="line">text = <span class="keyword">await</span> obj.jsonValue() <span class="comment">#固定写法</span></span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;(&quot;</span> <span class="keyword">in</span> text <span class="keyword">and</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> text):</span><br><span class="line">codes.append(text)</span><br><span class="line"><span class="keyword">return</span> codes</span><br><span class="line"><span class="comment">#耗时： 0:00:04.421178</span></span><br></pre></td></tr></table></figure><p>弹出菜单点“检查”，可以看到附近元素对应的源代码(查看源代码看不到)</p><h2 id="需要登录的爬虫"><a href="#需要登录的爬虫" class="headerlink" title="需要登录的爬虫"></a>需要登录的爬虫</h2><ul><li><p>许多网站需要登录后才能访问其内容</p><p>  京东、淘宝需要登录才能访问交易记录<br>  openjudge.cn 需要登录才能看提交过的源代码</p></li><li><p>登录操作，无法用一个url表示出来</p></li><li><p>解决办法之一：用浏览器模拟登录过程，输入用户名密码、点登录按钮。或者程序启动浏览器，等待手工登录后，程序再继续爬虫操作(对有验证码的情况)</p></li></ul><h3 id="爬取Openjudge自己提交通过的所有程序源码"><a href="#爬取Openjudge自己提交通过的所有程序源码" class="headerlink" title="爬取Openjudge自己提交通过的所有程序源码"></a>爬取Openjudge自己提交通过的所有程序源码</h3><ul><li>程序命令浏览器模拟登录过程，即输入用户名密码、点登录按钮</li><li>或：程序启动浏览器，等待手工登录后，程序再继续爬虫操作(对有验证码的情况，或者懒得写代码的情况)</li><li>更高级做法：不用浏览器，经数据包分析后，用requests库进行数据传输进行登录</li></ul><p>鼠标右键点击右上角的“个人首页”，在弹出的菜单上选“检查” :</p><p>点击 “个人首页”， 进入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://cxsjsxmooc.openjudge.cn/2020t1fallall2/solution/25212869/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;result-right&quot;</span>&gt;</span>Accepted<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击某个题的“Accepted”链接，进入:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;sh_python&quot;</span>&gt;</span></span><br><span class="line">n = int(input())</span><br><span class="line">lst = []</span><br><span class="line">for i in range(n):</span><br><span class="line">s = input().split()</span><br><span class="line">lst.append((s[0], int(s[1])))</span><br><span class="line">lst.sort(key= lambda x : (-x[1], x[0]))</span><br><span class="line">for x in lst:</span><br><span class="line">print(x[0], x[1])<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment"># 为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) \ &#x27;</span> <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span> <span class="string">&#x27;Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">        <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getOjSourceCode</span>(<span class="params">loginUrl</span>):</span><br><span class="line">    width, height = <span class="number">1400</span>, <span class="number">800</span>  <span class="comment">#网页宽高</span></span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>,</span><br><span class="line">                               userdataDir=<span class="string">&quot;c:/tmp&quot;</span>,</span><br><span class="line">                               args=[<span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(loginUrl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若手动登录，则以下若干行可以去掉</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#email&quot;</span>)  <span class="comment"># 找到账户输入框</span></span><br><span class="line">    <span class="keyword">await</span> element.<span class="built_in">type</span>(<span class="string">&quot;XXXXX@qq.com&quot;</span>)  <span class="comment"># 输入邮箱</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#password&quot;</span>)  <span class="comment"># 找到密码输入框</span></span><br><span class="line">    <span class="keyword">await</span> element.<span class="built_in">type</span>(<span class="string">&quot;XXXXXXXXX&quot;</span>)  <span class="comment"># 输入密码</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#main &gt; form &gt; div.user-login &gt;    p:nth-child(2) &gt; button&quot;</span>) <span class="comment">#找到登录按钮</span></span><br><span class="line">    <span class="keyword">await</span> element.click()  <span class="comment"># 点击登录按钮</span></span><br><span class="line">    <span class="comment"># 若手动登录，则以上若干行可以去掉。time.sleep(10)或等待某个元素出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#main&gt;h2&quot;</span>, timeout=<span class="number">30000</span>)  <span class="comment"># 等待“正在进行的比赛....&quot;标题出现</span></span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#userMenu&gt;li:nth-child(2)&gt;a&quot;</span>)</span><br><span class="line">    <span class="comment"># 找&quot;个人首页”链接</span></span><br><span class="line">    <span class="keyword">await</span> element.click()  <span class="comment"># 点击个人首页链接</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation()  <span class="comment"># 等新网页装入完毕</span></span><br><span class="line"></span><br><span class="line">    elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;.result-right&quot;</span>)</span><br><span class="line">    <span class="comment"># 找所有&quot;Accepted&quot;链接, 其有属性 class=&quot;result-right&quot;</span></span><br><span class="line">    page2 = <span class="keyword">await</span> browser.newPage()  <span class="comment"># 新开一个页面 (标签)</span></span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page2)<span class="comment">#添加反反爬</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements[:<span class="number">2</span>]:  <span class="comment"># 只打印前两个程序</span></span><br><span class="line">        obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;href&quot;</span>)  <span class="comment"># 获取href属性</span></span><br><span class="line">    url = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">   <span class="keyword">await</span> page2.goto(url)  <span class="comment"># 在新页面(标签)中装入新网页</span></span><br><span class="line">    element = <span class="keyword">await</span> page2.querySelector(<span class="string">&quot;pre&quot;</span>)  <span class="comment"># 查找pre tag</span></span><br><span class="line">    obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;innerText&quot;</span>)  <span class="comment"># 取源代码</span></span><br><span class="line">    text = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://openjudge.cn/auth/login/&quot;</span></span><br><span class="line">    syncio.get_event_loop().run_until_complete(getOjSourceCode(url))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="pyppeteer-requests编写快速爬虫"><a href="#pyppeteer-requests编写快速爬虫" class="headerlink" title="pyppeteer+requests编写快速爬虫"></a>pyppeteer+requests编写快速爬虫</h2><ul><li>requests要对付登录比较麻烦（要用到抓包等技巧）</li><li>pyppeteer没有requests快(因为要浏览器渲染网页)</li><li>对于需要登录，且登录后的网页都不是javascript生成的动态网页的情况，可以使用pyppeteer登录后，再用requests做剩下的事情。</li></ul><p>网址: <a href="http://openjudge.cn/user/2312/">http://openjudge.cn/user/2312/</a></p><p>不登录，访问同样网址，提示没有登录<br>同样的访问请求，服务器怎么知道浏览器是否登录过？</p><h3 id="预备知识：-cookie和session"><a href="#预备知识：-cookie和session" class="headerlink" title="预备知识： cookie和session"></a>预备知识： cookie和session</h3><ul><li><p>登录成功后，服务器向浏览器发送一些身份标识数据，称为cookie，浏览器以后每次向服务器发送请求，都带上cookie，服务器就能知道请求来自前面那个登录的浏览器了。</p></li><li><p>服务器在内存为浏览器维护一个session，每个浏览器对应不同的session，里面存放着该浏览器的状态（比如一系列的填表等步骤已经进行到什么程度），不同的session有不同的session id，浏览器发送请求的时候，如果带上session id,服务器也能知道是哪个浏览器在请求。</p></li><li><p>在客户计算机上由cookie可以生成标识同一个浏览器的session。</p></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>pyppeteer的浏览器的页面有cookies()函数可以获得cookie</li><li>requests.Session()可以生成一个空session</li><li>session的cookies.update(cookies)函数可以根据cookies生成相应session</li><li>session的get(url)函数，可以向服务器发送带session的请求</li><li>获得cookie，生成相应session以后，爬取网页都用session的get函数进行(前提：网页不是javascript生成的。如果是，依然用pyppeteer的浏览器爬取）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sessionGetHtml</span>(<span class="params">session, url</span>):  <span class="comment"># 发送带session的网页请求</span></span><br><span class="line">    fakeHeaders = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">    AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">    Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span></span><br><span class="line">    &#125;  <span class="comment"># 伪装浏览器用的请求头</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = session.get(url, headers=fakeHeaders)</span><br><span class="line">        result.encoding = result.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> result.text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">makeSession</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment"># 返回一个session,将其内部cookies修改成pypeteer浏览器页面对象中的cookies</span></span><br><span class="line">    cookies = <span class="keyword">await</span> page.cookies() <span class="comment">#cookies是一个列表,每个元素都是一个字典</span></span><br><span class="line">    cookies1 = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies: <span class="comment"># requests中的cookies只要&quot;name&quot;属性</span></span><br><span class="line">    cookies1[cookie[<span class="string">&#x27;name&#x27;</span>]] = cookie[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    session.cookies.update(cookies1)</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment">#为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) \ &#x27;</span></span><br><span class="line">    <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">    <span class="string">&#x27;Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">    <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getOjSourceCode</span>(<span class="params">loginUrl</span>):</span><br><span class="line">    width, height = <span class="number">1400</span>, <span class="number">800</span> <span class="comment">#网页宽高</span></span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>,</span><br><span class="line">    userdataDir = <span class="string">&quot;c:/tmp&quot;</span>,</span><br><span class="line">    args=[<span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(loginUrl)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#main&gt;h2&quot;</span>,</span><br><span class="line">    timeout=<span class="number">30000</span>) <span class="comment">#等待手动登录后，“正在进行的比赛....&quot;标题出现</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#userMenu&gt;li:nth-child(2)&gt;a&quot;</span>)</span><br><span class="line">    <span class="comment">#找&quot;个人首页”链接</span></span><br><span class="line">    <span class="keyword">await</span> element.click() <span class="comment">#点击个人首页链接</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation() <span class="comment">#等新网页装入完毕</span></span><br><span class="line">    </span><br><span class="line">    elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;.result-right&quot;</span>)</span><br><span class="line">    <span class="comment">#找所有&quot;Accepted&quot;链接, 其有属性 class=&quot;result-right&quot;</span></span><br><span class="line">    session = <span class="keyword">await</span> makeSession(page)</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements[:<span class="number">2</span>]:</span><br><span class="line">    obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">        url = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">        html = sessionGetHtml(session, url)</span><br><span class="line">        soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        element = soup.find(<span class="string">&quot;pre&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://openjudge.cn/auth/login/&quot;</span></span><br><span class="line">    asyncio.get_event_loop().run_until_complete(getOjSourceCode(url))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="补充tips"><a href="#补充tips" class="headerlink" title="补充tips"></a>补充tips</h1><h2 id="绝对网址和相对网址"><a href="#绝对网址和相对网址" class="headerlink" title="绝对网址和相对网址"></a>绝对网址和相对网址</h2><ul><li><p>绝对网址以http:// 或 https:// 开头 ,相对网址无这两种开头<br>如果当前网页网址是：<br><code>http://www.pku.edu.cn/education/index.htm</code><br>而该网页中有一个链接，其中网址是相对的，形如：<br><code>&lt;a href=&quot;dict/word.htm&quot;&gt;词典单词&lt;/a&gt;</code><br>则该链接的真实网址（绝对网址）是：<br><code>http://www.pku.edu.cn/education/dict/word.htm</code></p></li><li><p>使用requests库时，获得当前网页网址: </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.url) <span class="comment">#&gt;&gt;http://openjudge.cn</span></span><br><span class="line"><span class="comment">#或：</span></span><br><span class="line">session = requests.session()</span><br><span class="line">r = session.get(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br></pre></td></tr></table></figure><ul><li>使用pyppeteer库时，获得当前网页网址:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line"><span class="keyword">await</span> page.goto(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(page.url) <span class="comment">#&gt;&gt;http://openjudge.cn</span></span><br></pre></td></tr></table></figure><h2 id="反反爬"><a href="#反反爬" class="headerlink" title="反反爬"></a>反反爬</h2><ul><li>连续的两个操作之间，加入适当延时，模拟人的动作，以免因动作太快被识破</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">2</span>) <span class="comment">#暂停2秒，啥也不做</span></span><br></pre></td></tr></table></figure><p>也可以用<code>time.sleep(...)</code>来等待一段时间，确保网页加载完成</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十二章网络爬虫设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十一章数据分析和展示</title>
    <link href="http://hibiscidai.com/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/"/>
    <id>http://hibiscidai.com/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/</id>
    <published>2023-02-01T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA.png" class="" title="实用Python程序设计MOOC-第十一章数据分析和展示"><p>实用Python程序设计MOOC-第十一章数据分析和展示</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十一章数据分析和展示"><a href="#实用Python程序设计MOOC-第十一章数据分析和展示" class="headerlink" title="实用Python程序设计MOOC-第十一章数据分析和展示"></a>实用Python程序设计MOOC-第十一章数据分析和展示</h1><h1 id="多维数组库numpy"><a href="#多维数组库numpy" class="headerlink" title="多维数组库numpy"></a>多维数组库numpy</h1><h2 id="numpy简介"><a href="#numpy简介" class="headerlink" title="numpy简介"></a>numpy简介</h2><ul><li>多维数组库，创建多维数组很方便，可以替代多维列表</li><li>速度比多维列表快</li><li>支持向量和矩阵的各种数学运算</li><li>所有元素类型必须相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy 安装</span><br></pre></td></tr></table></figure><h2 id="numpy创建数组的函数"><a href="#numpy创建数组的函数" class="headerlink" title="numpy创建数组的函数"></a>numpy创建数组的函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">array(x)</td><td style="text-align:center">根据列表或元组x创建数组</td></tr><tr><td style="text-align:center">arange(x,y,i)</td><td style="text-align:center">创建一维数组， 元素等价于range(x,y,i)</td></tr><tr><td style="text-align:center">linespace(x,y,n)</td><td style="text-align:center">创建一个由区间[x,y]的n-1等分点构成的一维数组,包含x和y</td></tr><tr><td style="text-align:center">random.randint(…)</td><td style="text-align:center">创建一个元素为随机整数的数组</td></tr><tr><td style="text-align:center">zeros(n)</td><td style="text-align:center">创建一个元素全为0.0的长度为n数组</td></tr><tr><td style="text-align:center">ones(n)</td><td style="text-align:center">创建一个元素全为1.0的长度为n数组</td></tr></tbody></table></div><h2 id="numpy创建数组示例"><a href="#numpy创建数组示例" class="headerlink" title="numpy创建数组示例"></a>numpy创建数组示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#以后numpy简写为np</span></span><br><span class="line"><span class="built_in">print</span>(np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])) <span class="comment">#&gt;&gt;[1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>)) <span class="comment">#&gt;&gt;[1 3 5 7] 等差数列[1,9)</span></span><br><span class="line"><span class="built_in">print</span>(np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>)) <span class="comment">#&gt;&gt;[ 1. 4. 7. 10.]等分数列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">10</span>,<span class="number">20</span>,[<span class="number">2</span>,<span class="number">3</span>]))<span class="comment">#[10,20) 2行3列的数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[12 19 12]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [19 13 10]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">10</span>,<span class="number">20</span>,<span class="number">5</span>)) <span class="comment">#&gt;&gt;[12 19 19 10 13]</span></span><br><span class="line">a = np.zeros(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[ 0. 0. 0.]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a)) <span class="comment">#&gt;&gt;[0.0, 0.0, 0.0]</span></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">3</span>),dtype=<span class="built_in">int</span>) <span class="comment">#创建一个2行3列的元素都是整数0的数组</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组常用属性和函数"><a href="#numpy数组常用属性和函数" class="headerlink" title="numpy数组常用属性和函数"></a>numpy数组常用属性和函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性或函数</th><th style="text-align:center">含义或功能</th></tr></thead><tbody><tr><td style="text-align:center">dtype</td><td style="text-align:center">数组元素的类型</td></tr><tr><td style="text-align:center">ndim</td><td style="text-align:center">数组是几维的</td></tr><tr><td style="text-align:center">shape</td><td style="text-align:center">数组每一维的长度</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">数组元素个数</td></tr><tr><td style="text-align:center">argwhere(…)</td><td style="text-align:center">查找元素</td></tr><tr><td style="text-align:center">tolist()</td><td style="text-align:center">转换为list</td></tr><tr><td style="text-align:center">min()</td><td style="text-align:center">求最小元素</td></tr><tr><td style="text-align:center">max()</td><td style="text-align:center">求最大元素</td></tr><tr><td style="text-align:center">reshape(…)</td><td style="text-align:center">改变数组的形状</td></tr><tr><td style="text-align:center">flatten()</td><td style="text-align:center">转换成一维数组</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line"><span class="comment">#b是[ 0 1 2 3 4 5 6 7 8 9 10 11]</span></span><br><span class="line">a = b.reshape((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#转换成3行4列的数组， b不变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment">#&gt;&gt;3 a有3行</span></span><br><span class="line"><span class="built_in">print</span>(a.size) <span class="comment">#&gt;&gt;12 a的元素个数是12</span></span><br><span class="line"><span class="built_in">print</span>(a.ndim) <span class="comment">#&gt;&gt;2 a是2维的</span></span><br><span class="line"><span class="built_in">print</span>(a.shape) <span class="comment">#&gt;&gt;(3, 4) a是3行4列</span></span><br><span class="line"><span class="built_in">print</span>(a.dtype) <span class="comment">#&gt;&gt;int32 a的元素类型是32位的整数</span></span><br><span class="line">L = a.tolist() <span class="comment">#转换成列表,a不变</span></span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#&gt;&gt;[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]</span></span><br><span class="line">b = a.flatten() <span class="comment">#转换成一维数组</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[ 0 1 2 3 4 5 6 7 8 9 10 11]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组元素增删"><a href="#numpy数组元素增删" class="headerlink" title="numpy数组元素增删"></a>numpy数组元素增删</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">append(x,y)</td><td style="text-align:center">若y是数组、列表或元组,就将y的元素添加进数组x得新数组。否则将y本身添加进数组x得新数组</td></tr><tr><td style="text-align:center">concatenate(…)</td><td style="text-align:center">拼接多个数组或列表,”axis=0”行增加,”axis=1”列增加</td></tr><tr><td style="text-align:center">delete(…)</td><td style="text-align:center">删除数组元素得新数组</td></tr></tbody></table></div><p>numpy数组一旦生成，元素就不能增删。 上面函数返回一个新的数组。</p><h2 id="numpy添加数组元素"><a href="#numpy添加数组元素" class="headerlink" title="numpy添加数组元素"></a>numpy添加数组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">#a是[1 2 3]</span></span><br><span class="line">b = np.append(a, <span class="number">10</span>) <span class="comment">#a不会发生变化</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[ 1 2 3 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.append(a, [<span class="number">10</span>, <span class="number">20</span>])) <span class="comment">#&gt;&gt;[ 1 2 3 10 20]</span></span><br><span class="line"></span><br><span class="line">c = np.zeros((<span class="number">2</span>, <span class="number">3</span>),dtype=<span class="built_in">int</span>) <span class="comment">#c是2行3列的全0数组</span></span><br><span class="line"><span class="built_in">print</span>(np.append(a, c)) <span class="comment">#&gt;&gt;[1 2 3 0 0 0 0 0 0]</span></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((a, [<span class="number">10</span>, <span class="number">20</span>], a)))</span><br><span class="line"><span class="comment">#&gt;&gt;[ 1 2 3 10 20 1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((c, np.array([[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]]))))</span><br><span class="line"><span class="comment">#c拼接一行[10,20,30]得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 0  0  0]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 0  0  0]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [10 20 30]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((c,np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">10</span>, <span class="number">20</span>]])), axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment">#c的第0行拼接了1,2两个元素、第1行拼接了10,20两个新元素后得到新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 0  0  0  1  2]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 0  0  0 10 20]]</span></span><br></pre></td></tr></table></figure><h2 id="numpy删除数组元素"><a href="#numpy删除数组元素" class="headerlink" title="numpy删除数组元素"></a>numpy删除数组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">b = np.delete(a,<span class="number">1</span>) <span class="comment">#删除a中下标为1的元素,a不会改变</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1 3 4]</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.delete(b,<span class="number">1</span>,axis=<span class="number">0</span>)) <span class="comment">#删除b的第1行得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1 2 3 4]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,<span class="number">1</span>,axis=<span class="number">1</span>)) <span class="comment">#删除b的第1列得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1  3  4]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 5  7  8]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,[<span class="number">1</span>,<span class="number">2</span>],axis=<span class="number">0</span>)) <span class="comment">#删除b的第1行和第2行得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[1 2 3 4]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,[<span class="number">1</span>,<span class="number">3</span>],axis=<span class="number">1</span>)) <span class="comment">#删除b的第1列和第3列得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1  3]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 5  7]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 11]]</span></span><br></pre></td></tr></table></figure><h2 id="在numpy数组中查找元素"><a href="#在numpy数组中查找元素" class="headerlink" title="在numpy数组中查找元素"></a>在numpy数组中查找元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">pos = np.argwhere(a==<span class="number">3</span>) <span class="comment">#pos是[[2] [4]]</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> a) <span class="comment">#&gt;&gt;True</span></span><br><span class="line"></span><br><span class="line">pos = np.argwhere(a==<span class="number">2</span>) <span class="comment">#pos是[[0 1] [1 2]]</span></span><br><span class="line">b = a[a&gt;<span class="number">2</span>] <span class="comment">#抽取a中大于2的元素形成一个一维数组</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[3 4 5]</span></span><br><span class="line">a[a &gt; <span class="number">2</span>] = -<span class="number">1</span> <span class="comment">#a变成[[ 1 2 -1] [-1 -1 2]]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组的数学运算"><a href="#numpy数组的数学运算" class="headerlink" title="numpy数组的数学运算"></a>numpy数组的数学运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">b = a + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[2 3 4 5]</span></span><br><span class="line"><span class="built_in">print</span>(a*b) <span class="comment">#&gt;&gt;[ 2 6 12 20] a,b对应元素相乘</span></span><br><span class="line"><span class="built_in">print</span>(a+b) <span class="comment">#&gt;&gt;[3 5 7 9] a,b对应元素相加</span></span><br><span class="line">c = np.sqrt(a*<span class="number">10</span>) <span class="comment">#a*10是[10 20 30 40]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#&gt;&gt;[ 3.16227766 4.47213595 5.47722558 6.32455532]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组的切片"><a href="#numpy数组的切片" class="headerlink" title="numpy数组的切片"></a>numpy数组的切片</h2><p>numpy数组的切片是“视图”，<br>是原数组的一部分，而非一部分的拷贝<br>对视图的修改会影响原数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>) <span class="comment">#a是[0 1 2 3 4 5 6 7]</span></span><br><span class="line">b = a[<span class="number">3</span>:<span class="number">6</span>] <span class="comment">#注意,b是a的一部分</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[3 4 5]</span></span><br><span class="line">c = np.copy(a[<span class="number">3</span>:<span class="number">6</span>]) <span class="comment">#c是a的一部分的拷贝</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">#会修改a</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[ 0 1 2 100 4 5 6 7]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#&gt;&gt;[3 4 5] c不受b影响</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],[<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>]])</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#b是&gt;&gt;[[ 6 7 8] [10 11 12]]</span></span><br></pre></td></tr></table></figure><h1 id="数据分析库pandas"><a href="#数据分析库pandas" class="headerlink" title="数据分析库pandas"></a>数据分析库pandas</h1><h2 id="pandas-简介"><a href="#pandas-简介" class="headerlink" title="pandas 简介"></a>pandas 简介</h2><ul><li>核心功能是在二维表格上做各种操作，如增删、修改、 求一列数据的和、方差、中<br>位数、平均数等</li><li>需要numpy支持</li><li>如果有openpyxl或xlrd或xlwt支持，还可以读写excel文档。</li><li>最关键的类： DataFrame，表示二维表格</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h2 id="pandas的重要类：-Series"><a href="#pandas的重要类：-Series" class="headerlink" title="pandas的重要类： Series"></a>pandas的重要类： Series</h2><p>Series是一维表格，每个元素带标签且有下标，兼具列表和字典的访问形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series(data=[<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>],index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment">#&gt;&gt;80 90 100</span></span><br><span class="line"><span class="built_in">print</span>(x,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;语文&#x27;</span>],s[<span class="number">1</span>]) <span class="comment">#&gt;&gt;80 90 标签和序号都可以作为下标来访问元素</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">2</span>][<span class="string">&#x27;数学&#x27;</span>]) <span class="comment">#&gt;&gt;90 s[0:2]是切片</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;数学&#x27;</span>:<span class="string">&#x27;英语&#x27;</span>][<span class="number">1</span>]) <span class="comment">#&gt;&gt;100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s.index)): <span class="comment">#&gt;&gt;语文 数学 英语</span></span><br><span class="line"><span class="built_in">print</span>(s.index[i],end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">s[<span class="string">&#x27;体育&#x27;</span>] = <span class="number">110</span> <span class="comment">#在尾部添加元素，标签为&#x27;体育&#x27;，值为110</span></span><br><span class="line">s.pop(<span class="string">&#x27;数学&#x27;</span>) <span class="comment">#删除标签为&#x27;数学’的元素</span></span><br><span class="line">s2 = s.append(pd.Series(<span class="number">120</span>,index = [<span class="string">&#x27;政治&#x27;</span>])) <span class="comment">#不改变s</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&#x27;语文&#x27;</span>],s2[<span class="string">&#x27;政治&#x27;</span>]) <span class="comment">#&gt;&gt;80 120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s2)) <span class="comment">#&gt;&gt;[80, 100, 110, 120]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.<span class="built_in">sum</span>(),s.<span class="built_in">min</span>(),s.mean(),s.median())</span><br><span class="line"><span class="comment">#&gt;&gt;290 80 96.66666666666667 100.0 输出和、最小值、平均值、中位数</span></span><br><span class="line"><span class="built_in">print</span>(s.idxmax(),s.argmax()) <span class="comment">#&gt;&gt;体育 2 输出最大元素的标签和下标</span></span><br></pre></td></tr></table></figure><p>切片是视图，是原来数据的一部分，修改了视图也会影响原来数据的变化。</p><h2 id="DataFrame的构造和访问"><a href="#DataFrame的构造和访问" class="headerlink" title="DataFrame的构造和访问"></a>DataFrame的构造和访问</h2><p>DataFrame是带行列标签的二维表格，的每一列都是一个Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#输出对齐方面的设置</span></span><br><span class="line">scores = [[<span class="string">&#x27;男&#x27;</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">97</span>],[<span class="string">&#x27;女&#x27;</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">105</span>],[<span class="string">&#x27;女&#x27;</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">130</span>],</span><br><span class="line">[<span class="string">&#x27;男&#x27;</span>,<span class="number">112</span>,<span class="number">80</span>,<span class="number">50</span>]]</span><br><span class="line">names = [<span class="string">&#x27;刘一哥&#x27;</span>,<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;张三妹&#x27;</span>,<span class="string">&#x27;李四弟&#x27;</span>]</span><br><span class="line">courses = [<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line">df = pd.DataFrame(data = scores, index = names, columns = courses)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.values[<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">type</span>(df.values))<span class="comment">#&gt;&gt;108 &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(df.index)) <span class="comment">#&gt;&gt;[&#x27;刘一哥&#x27;, &#x27;王二姐&#x27;, &#x27;张三妹&#x27;, &#x27;李四弟&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(df.columns)) <span class="comment">#&gt;&gt;[&#x27;性别&#x27;, &#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index[<span class="number">2</span>],df.columns[<span class="number">2</span>]) <span class="comment">#&gt;&gt;张三妹 数学</span></span><br><span class="line">s1 = df[<span class="string">&#x27;语文&#x27;</span>] <span class="comment">#s1是个Series,代表&#x27;语文&#x27;那一列</span></span><br><span class="line"><span class="built_in">print</span>(s1[<span class="string">&#x27;刘一哥&#x27;</span>],s1[<span class="number">0</span>]) <span class="comment">#&gt;&gt;108 108 刘一哥语文成绩</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>][<span class="string">&#x27;刘一哥&#x27;</span>]) <span class="comment">#&gt;&gt;108 列索引先写</span></span><br><span class="line">s2 = df.loc[<span class="string">&#x27;王二姐&#x27;</span>] <span class="comment">#s2也是个Series，代表“王二姐”那一行</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&#x27;性别&#x27;</span>],s2[<span class="string">&#x27;语文&#x27;</span>],s2[<span class="number">2</span>])</span><br><span class="line"><span class="comment">#&gt;&gt;女 115 87 王二姐的性别、语文和数学分数</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line">108 &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="line">[&#x27;刘一哥&#x27;, &#x27;王二姐&#x27;, &#x27;张三妹&#x27;, &#x27;李四弟&#x27;]</span><br><span class="line">[&#x27;性别&#x27;, &#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]</span><br><span class="line">张三妹 数学</span><br><span class="line">108 108</span><br><span class="line">108</span><br><span class="line">女 115 87</span><br></pre></td></tr></table></figure><h2 id="DataFrame的切片和统计"><a href="#DataFrame的切片和统计" class="headerlink" title="DataFrame的切片和统计"></a>DataFrame的切片和统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DataFrame的切片：</span></span><br><span class="line"><span class="comment">#iloc[行选择器, 列选择器] 用下标做切片</span></span><br><span class="line"><span class="comment">#loc[行选择器, 列选择器] 用标签做切片</span></span><br><span class="line"><span class="comment">#DataFrame的切片是视图</span></span><br><span class="line"></span><br><span class="line">df2 = df.iloc[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#行切片，是视图，选1,2两行</span></span><br><span class="line">df2 = df.loc[<span class="string">&#x27;王二姐&#x27;</span>:<span class="string">&#x27;张三妹&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[:,<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#列切片(是视图)，选0、 1、 2三列</span></span><br><span class="line">df2 = df.loc[:,<span class="string">&#x27;性别&#x27;</span>:<span class="string">&#x27;数学&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学</span><br><span class="line">刘一哥   男   108   115</span><br><span class="line">王二姐   女   115    87</span><br><span class="line">张三妹   女   100    60</span><br><span class="line">李四弟   男   112    80</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[:<span class="number">2</span>,[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#行列切片,只取第一列和第三列</span></span><br><span class="line">df2 = df.loc[:<span class="string">&#x27;王二姐&#x27;</span>,[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>]] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        语文  英语</span><br><span class="line">刘一哥   108    97</span><br><span class="line">王二姐   115   105</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[[<span class="number">1</span>,<span class="number">3</span>],<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#取第1、 3行，第2、 3列</span></span><br><span class="line">df2 = df.loc[[<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;李四弟&#x27;</span>],<span class="string">&#x27;数学&#x27;</span>:<span class="string">&#x27;英语&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        数学  英语</span><br><span class="line">王二姐    87   105</span><br><span class="line">李四弟    80    50</span><br></pre></td></tr></table></figure><h2 id="DataFrame的分析统计"><a href="#DataFrame的分析统计" class="headerlink" title="DataFrame的分析统计"></a>DataFrame的分析统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---下面是DataFrame的分析和统计---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.T) <span class="comment">#df.T是df的转置矩阵,即行列互换的矩阵</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&#x27;语文&#x27;</span>,ascending=<span class="literal">False</span>)) <span class="comment">#按语文成绩降序排列,不会改变原来的表格，会返回一个新的表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(df.sum()[&#x27;语文&#x27;],df.mean()[&#x27;数学&#x27;],df.median()[&#x27;英语&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>].<span class="built_in">sum</span>(),df[<span class="string">&#x27;数学&#x27;</span>].mean(),df[<span class="string">&#x27;英语&#x27;</span>].median())</span><br><span class="line"><span class="comment">#&gt;&gt;435 85.5 101.0 语文分数之和、数学平均分、英语中位数</span></span><br><span class="line"><span class="comment">#df.sum()返回一个Series，每一列的和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">min</span>()[<span class="string">&#x27;语文&#x27;</span>],df.<span class="built_in">max</span>()[<span class="string">&#x27;数学&#x27;</span>])</span><br><span class="line"><span class="comment">#&gt;&gt;100 115 语文最低分，数学最高分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(df.max(axis = 1)[&#x27;王二姐&#x27;]) #&gt;&gt;115 王二姐的最高分科目的分数</span></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">max</span>(axis = <span class="number">1</span>, numeric_only=<span class="literal">True</span>)[<span class="string">&#x27;王二姐&#x27;</span>]) <span class="comment">#&gt;&gt;115 王二姐的最高分科目的分数</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>].idxmax()) <span class="comment">#&gt;&gt;王二姐 语文最高分所在行的标签</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;数学&#x27;</span>].argmin()) <span class="comment">#&gt;&gt;2 数学最低分所在行的行号</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[(df[<span class="string">&#x27;语文&#x27;</span>] &gt; <span class="number">100</span>) &amp; (df[<span class="string">&#x27;数学&#x27;</span>] &gt;= <span class="number">85</span>)])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort_values(....inplace=<span class="literal">True</span>,axis=<span class="number">1.</span>...)</span><br><span class="line"><span class="comment">#inplace=True,原地排序，将各列排序,即改变原来的表格</span></span><br><span class="line"><span class="comment">#axis=1,列重新排序</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;上方为原始<span class="built_in">df</span></span></span><br><span class="line">     刘一哥 王二姐 张三妹 李四弟</span><br><span class="line">性别     男     女     女     男</span><br><span class="line">语文    108    115    100    112</span><br><span class="line">数学    115     87     60     80</span><br><span class="line">英语     97    105    130     50</span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">435 85.5 101.0</span><br><span class="line">100 115</span><br><span class="line">115</span><br><span class="line">王二姐</span><br><span class="line">2</span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br></pre></td></tr></table></figure><h2 id="DataFrame的修改和增删"><a href="#DataFrame的修改和增删" class="headerlink" title="DataFrame的修改和增删"></a>DataFrame的修改和增删</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---下面是DataFrame的增删和修改---&quot;</span>)</span><br><span class="line">df.loc[<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>] = df.iloc[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">150</span> <span class="comment">#修改王二姐英语和刘一哥语文成绩</span></span><br><span class="line">df[<span class="string">&#x27;物理&#x27;</span>] = [<span class="number">80</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">100</span>] <span class="comment">#为所有人添加物理成绩这一列</span></span><br><span class="line">df.insert(<span class="number">1</span>,<span class="string">&quot;体育&quot;</span>,[<span class="number">89</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">45</span>]) <span class="comment">#为所有人插入体育成绩到第1列</span></span><br><span class="line">df.loc[<span class="string">&#x27;李四弟&#x27;</span>] = [<span class="string">&#x27;男&#x27;</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>] <span class="comment">#修改李四弟全部信息</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;语文&#x27;</span>] = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>] <span class="comment">#修改所有人语文成绩</span></span><br><span class="line">df.loc[<span class="string">&#x27;钱五叔&#x27;</span>] = [<span class="string">&#x27;男&#x27;</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>] <span class="comment">#加一行</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;英语&#x27;</span>] += <span class="number">10</span> <span class="comment">#&gt;&gt;所有人英语加10分</span></span><br><span class="line">df.columns = [<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;体育&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;物理&#x27;</span>] <span class="comment">#改列标签</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;<span class="built_in">df</span>初始</span></span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line"></span><br><span class="line">       性别  体育  语文  数学  English  物理</span><br><span class="line">刘一哥   男    89    20   115      107    80</span><br><span class="line">王二姐   女    77    20    87      160    70</span><br><span class="line">张三妹   女    76    20    60      140    90</span><br><span class="line">李四弟   男   100    20   100      110   100</span><br><span class="line">钱五叔   男   100   100   100      110   100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.drop([<span class="string">&#x27;体育&#x27;</span>,<span class="string">&#x27;物理&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>) <span class="comment">#删除体育和物理成绩</span></span><br><span class="line"><span class="comment">#inplace=True,代表原数据中删除</span></span><br><span class="line">df.drop(<span class="string">&#x27;王二姐&#x27;</span>, axis = <span class="number">0</span>, inplace=<span class="literal">True</span>) <span class="comment">#删除 王二姐那一行</span></span><br><span class="line"><span class="comment">#axis = 0,代表作为行标签删除</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  English</span><br><span class="line">刘一哥   男    20   115      107</span><br><span class="line">张三妹   女    20    60      140</span><br><span class="line">李四弟   男    20   100      110</span><br><span class="line">钱五叔   男   100   100      110</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.drop([df.index[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)], axis = <span class="number">0</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#删除第1,2行</span></span><br><span class="line">df.drop([df.columns[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment">#删除第0到2列</span></span><br></pre></td></tr></table></figure><h1 id="数据分析库pandas读写excel和csv文档"><a href="#数据分析库pandas读写excel和csv文档" class="headerlink" title="数据分析库pandas读写excel和csv文档"></a>数据分析库pandas读写excel和csv文档</h1><h2 id="用pandas读excel文档"><a href="#用pandas读excel文档" class="headerlink" title="用pandas读excel文档"></a>用pandas读excel文档</h2><ul><li>需要openpyxl(对.xlsx文件)或xlrd或xlwt支持(老的.xls文件)</li><li>读取的每张工作表都是一个DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">dt = pd.read_excel(<span class="string">&quot;excel_sample.xlsx&quot;</span>, sheet_name=[<span class="string">&#x27;销售情况&#x27;</span>,<span class="number">1</span>], index_col=<span class="number">0</span>)<span class="comment">#读取第0和第1张工作表</span></span><br><span class="line">df = dt[<span class="string">&#x27;销售情况&#x27;</span>] <span class="comment">#dt是字典,df是DataFrame</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>,<span class="number">0</span>], df.loc[<span class="string">&#x27;睡袋&#x27;</span>,<span class="string">&#x27;数量&#x27;</span>]) <span class="comment">#&gt;&gt;4080 4080</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.isnull(df.loc[<span class="string">&#x27;彩盒&#x27;</span>,<span class="string">&#x27;销售额&#x27;</span>])) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">df.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>) <span class="comment">#空的数据值是NaN,将所有NaNa用0替换</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;彩盒&#x27;</span>,<span class="string">&#x27;销售额&#x27;</span>],df.iloc[<span class="number">2</span>,<span class="number">2</span>]) <span class="comment">#&gt;&gt;0.0 0.0</span></span><br></pre></td></tr></table></figure><h2 id="用pandas写excel文档"><a href="#用pandas写excel文档" class="headerlink" title="用pandas写excel文档"></a>用pandas写excel文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(filename,sheet_name=<span class="string">&quot;Sheet1&quot;</span>,na_rep=<span class="string">&#x27;&#x27;</span>,........)</span><br></pre></td></tr></table></figure><ul><li>将DataFrame对象df中的数据写入excel文档filename中的”Sheet1”工作表,NaN用’’代替。</li><li>会覆盖原有的filename文件</li><li>如果要在一个excel文档中写入多个工作表， 需要用<code>ExcelWrite</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(接上面程序）</span></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&quot;new.xlsx&quot;</span>) <span class="comment">#创建ExcelWriter对象</span></span><br><span class="line">df.to_excel(writer,sheet_name=<span class="string">&quot;S1&quot;</span>)</span><br><span class="line">df.T.to_excel(writer,sheet_name=<span class="string">&quot;S2&quot;</span>) <span class="comment">#转置矩阵写入</span></span><br><span class="line">df.sort_values(<span class="string">&#x27;销售额&#x27;</span>,ascending= <span class="literal">False</span>).to_excel(writer, sheet_name=<span class="string">&quot;S3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按销售额排序的新DataFrame写入工作表S3</span></span><br><span class="line">df[<span class="string">&#x27;销售额&#x27;</span>].to_excel(writer,sheet_name=<span class="string">&quot;S4&quot;</span>) <span class="comment">#只写入一列</span></span><br><span class="line">writer.save()</span><br></pre></td></tr></table></figure><blockquote><p>Pandas不可以指定单元格的样式openxl可以</p></blockquote><h2 id="用pandas读写csv文件"><a href="#用pandas读写csv文件" class="headerlink" title="用pandas读写csv文件"></a>用pandas读写csv文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&quot;result.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,na_rep=<span class="string">&#x27;NA&#x27;</span>,</span><br><span class="line">float_format=<span class="string">&quot;%.2f&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;result.csv&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="用matplotlib进行数据展示"><a href="#用matplotlib进行数据展示" class="headerlink" title="用matplotlib进行数据展示"></a>用matplotlib进行数据展示</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h1 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h1><h2 id="绘制基本直方图"><a href="#绘制基本直方图" class="headerlink" title="绘制基本直方图"></a>绘制基本直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#以后 plt 等价于 matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"><span class="comment">#设置中文支持,中文字体为简体黑体</span></span><br><span class="line">ax = plt.figure().add_subplot() <span class="comment">#建图，获取子图对象ax</span></span><br><span class="line">ax.bar(x = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), height = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), width = <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#x表示4个柱子中心横坐标分别是0.2,0.6,0.8,1</span></span><br><span class="line"><span class="comment">#height表示4个柱子高度分别是1,2,3,0.5</span></span><br><span class="line"><span class="comment">#width表示柱子宽度0.1</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;我的直方图&#x27;</span>) <span class="comment">#设置标题</span></span><br><span class="line">plt.show() <span class="comment">#显示绘图结果</span></span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%9F%BA%E6%9C%AC%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制基本直方图"><h2 id="绘制横向直方图"><a href="#绘制横向直方图" class="headerlink" title="绘制横向直方图"></a>绘制横向直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#纵向</span></span><br><span class="line">ax.bar(x = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), height = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), width = <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#横向</span></span><br><span class="line">ax.barh(y = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), width = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), height = <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E6%A8%AA%E5%90%91%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制横向直方图"><h2 id="绘制堆叠直方图"><a href="#绘制堆叠直方图" class="headerlink" title="绘制堆叠直方图"></a>绘制堆叠直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ax = plt.figure().add_subplot()</span><br><span class="line">labels = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>]</span><br><span class="line">num1 = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">35</span>] <span class="comment">#Dept1的数据</span></span><br><span class="line">num2 = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>] <span class="comment">#Dept2的数据</span></span><br><span class="line">cordx = <span class="built_in">range</span>(<span class="built_in">len</span>(num1)) <span class="comment">#x轴刻度位置</span></span><br><span class="line">rects1 = ax.bar(x = cordx, height=num1, width=<span class="number">0.5</span>, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&quot;Dept1&quot;</span>)</span><br><span class="line">rects2 = ax.bar(x = cordx, height=num2, width=<span class="number">0.5</span>, color=<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">label=<span class="string">&quot;Dept2&quot;</span>, bottom=num1)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">100</span>) <span class="comment">#y轴坐标范围</span></span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Profit&quot;</span>) <span class="comment">#y轴含义(标签)</span></span><br><span class="line">ax.set_xticks(cordx) <span class="comment">#设置x轴刻度位置</span></span><br><span class="line">ax.set_xticklabels(labels) <span class="comment">#设置x轴刻度下方文字</span></span><br><span class="line">ax.set_xlabel(<span class="string">&quot;In year 2020&quot;</span>) <span class="comment">#x轴含义(标签)</span></span><br><span class="line">ax.set_title(<span class="string">&quot;My Company&quot;</span>)</span><br><span class="line">ax.legend() <span class="comment">#在右上角显示图例说明</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%A0%86%E5%8F%A0%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制堆叠直方图"><h2 id="绘制对比直方图-有多组数据）"><a href="#绘制对比直方图-有多组数据）" class="headerlink" title="绘制对比直方图(有多组数据）"></a>绘制对比直方图(有多组数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>)).add_subplot()<span class="comment">#建图，获取子图对象ax</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">400</span>) <span class="comment">#指定y轴坐标范围</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">80</span>) <span class="comment">#指定x轴坐标范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是3组直方图的数据</span></span><br><span class="line">x1 = [<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">57</span>] <span class="comment">#第一组直方图每个柱子中心点的横坐标</span></span><br><span class="line">x2 = [<span class="number">13</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">43</span>, <span class="number">53</span>, <span class="number">63</span>] <span class="comment">#第二组直方图每个柱子中心点的横坐标</span></span><br><span class="line">x3 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>] <span class="comment">#第三组直方图每个柱子中心点的横坐标</span></span><br><span class="line">y1 = [<span class="number">41</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">69</span>, <span class="number">39</span>, <span class="number">14</span>] <span class="comment">#第一组直方图每个柱子的高度</span></span><br><span class="line">y2 = [<span class="number">123</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">105</span>, <span class="number">79</span>, <span class="number">37</span>] <span class="comment">#第二组直方图每个柱子的高度</span></span><br><span class="line">y3 = [<span class="number">124</span>, <span class="number">91</span>, <span class="number">204</span>, <span class="number">264</span>, <span class="number">221</span>, <span class="number">175</span>] <span class="comment">#第三组直方图每个柱子的高度</span></span><br><span class="line"></span><br><span class="line">rects1 = ax.bar(x1, y1, facecolor=<span class="string">&#x27;red&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Iphone&#x27;</span>)</span><br><span class="line">rects2 = ax.bar(x2, y2, facecolor=<span class="string">&#x27;green&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Huawei&#x27;</span>)</span><br><span class="line">rects3 = ax.bar(x3, y3, facecolor=<span class="string">&#x27;blue&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Xiaomi&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xticks(x3) <span class="comment">#x轴在x3中的各坐标点下面加刻度</span></span><br><span class="line">ax.set_xticklabels((<span class="string">&#x27;A1&#x27;</span>,<span class="string">&#x27;A2&#x27;</span>,<span class="string">&#x27;A3&#x27;</span>,<span class="string">&#x27;A4&#x27;</span>,<span class="string">&#x27;A5&#x27;</span>,<span class="string">&#x27;A6&#x27;</span>))</span><br><span class="line"><span class="comment">#指定x轴上每一刻度下方的文字</span></span><br><span class="line">ax.legend() <span class="comment">#显示右上角三组图的说明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">ax,rects</span>): <span class="comment">#在rects的每个柱子顶端标注数值</span></span><br><span class="line"><span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">height = rect.get_height()</span><br><span class="line">ax.text(rect.get_x() + rect.get_width()/<span class="number">2</span>, height+<span class="number">14</span>, <span class="built_in">str</span>(height), rotation=<span class="number">90</span>) <span class="comment">#文字旋转90度</span></span><br><span class="line">label(ax,rects1)</span><br><span class="line">label(ax,rects2)</span><br><span class="line">label(ax,rects3)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%AF%B9%E6%AF%94%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制对比直方图"><h2 id="绘制散点、折线图"><a href="#绘制散点、折线图" class="headerlink" title="绘制散点、折线图"></a>绘制散点、折线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math,random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawPlot</span>(<span class="params">ax</span>):</span><br><span class="line">    xs = [i / <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>)] <span class="comment">#1500个点的横坐标，间隔0.01</span></span><br><span class="line">    ys = [<span class="number">10</span>*math.sin(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">    <span class="comment">#对应曲线y=10*sin(x)上的1500个点的y坐标</span></span><br><span class="line">    ax.plot(xs, ys, <span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;Beijing&quot;</span>) <span class="comment">#画曲线y=10*sin(x)</span></span><br><span class="line">    ys = <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">18</span>, <span class="number">18</span>))</span><br><span class="line">    random.shuffle(ys)</span><br><span class="line">    ax.scatter(<span class="built_in">range</span>(<span class="number">16</span>), ys[:<span class="number">16</span>], c = <span class="string">&quot;blue&quot;</span>) <span class="comment">#画散点</span></span><br><span class="line">    ax.plot(<span class="built_in">range</span>(<span class="number">16</span>), ys[:<span class="number">16</span>], <span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;Shanghai&quot;</span>) <span class="comment">#画折线</span></span><br><span class="line">    ax.legend() <span class="comment">#显示右上角的各条折线说明</span></span><br><span class="line">    ax.set_xticks(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#x轴在坐标0,1...15处加刻度</span></span><br><span class="line">    ax.set_xticklabels(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#指定x轴每个刻度下方显示的文字</span></span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>),dpi=<span class="number">100</span>).add_subplot() <span class="comment">#图像长宽和清晰度</span></span><br><span class="line">drawPlot(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E6%8A%98%E7%BA%BF%E5%9B%BE.png" class="" title="绘制散点折线图"><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawPie</span>(<span class="params">ax</span>):</span><br><span class="line">lbs = (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>) <span class="comment">#四个扇区的标签</span></span><br><span class="line">sectors = [<span class="number">16</span>, <span class="number">29.55</span>, <span class="number">44.45</span>, <span class="number">10</span>] <span class="comment">#四个扇区的份额（百分比）</span></span><br><span class="line">expl = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment">#四个扇区的突出程度</span></span><br><span class="line">ax.pie(x=sectors, labels=lbs, explode=expl, autopct=<span class="string">&#x27;%.2f&#x27;</span>, shadow=<span class="literal">True</span>, labeldistance=<span class="number">1.1</span>, pctdistance=<span class="number">0.6</span>, startangle=<span class="number">90</span>)</span><br><span class="line">    <span class="comment">#autopct自动填充数字的格式，shadow是否有阴影，labeldistance扇区标签的距离，pctdistance饼内标签距离圆心距离是半径的多少倍，startangle画图的起始位置逆时针顺序</span></span><br><span class="line">ax.set_title(<span class="string">&quot;pie sample&quot;</span>) <span class="comment">#饼图标题</span></span><br><span class="line">ax = plt.figure().add_subplot()</span><br><span class="line">drawPie(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E9%A5%BC%E5%9B%BE.png" class="" title="绘制饼图"><h2 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>).reshape(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">#生成一个5行6列,元素[0,100]内的随机矩阵</span></span><br><span class="line">xlabels = [<span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Chengdu&#x27;</span>, <span class="string">&#x27;Guangzhou&#x27;</span>, <span class="string">&#x27;Hangzhou&#x27;</span>, <span class="string">&#x27;Wuhan&#x27;</span>]</span><br><span class="line">ylabels = [<span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>)).add_subplot()</span><br><span class="line">ax.set_yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(ylabels))) <span class="comment">#y轴在坐标[0,len(ylabels)) 处加刻度</span></span><br><span class="line">ax.set_yticklabels(ylabels) <span class="comment">#设置y轴刻度文字</span></span><br><span class="line">ax.set_xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(xlabels)))</span><br><span class="line">ax.set_xticklabels(xlabels)</span><br><span class="line"></span><br><span class="line">heatMp = ax.imshow(data, cmap=plt.cm.hot, aspect=<span class="string">&#x27;auto&#x27;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#imshow(data矩阵, cmap=plt.cm.cold冷图, aspect, vmin-vmx指明热力图的最大最小值 不写取数据最大最小)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#热力图写数据标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xlabels)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ylabels)):</span><br><span class="line">ax.text(i, j, data[j][i], ha=<span class="string">&quot;center&quot;</span>, va=<span class="string">&quot;center&quot;</span>, color=<span class="string">&quot;blue&quot;</span>, size=<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar(heatMp) <span class="comment">#绘制右边的颜色-数值对照柱</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>, ha=<span class="string">&quot;right&quot;</span>) <span class="comment">#将x轴刻度文字进行旋转，且水平方向右对齐</span></span><br><span class="line">plt.title(<span class="string">&quot;Sales Volume(ton)&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E7%83%AD%E5%8A%9B%E5%9B%BE.png" class="" title="绘制热力图"><h2 id="绘制雷达图"><a href="#绘制雷达图" class="headerlink" title="绘制雷达图"></a>绘制雷达图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams <span class="comment">#处理汉字用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawRadar</span>(<span class="params">ax</span>):</span><br><span class="line">    pi = <span class="number">3.1415926</span></span><br><span class="line">    labels = [<span class="string">&#x27;EQ&#x27;</span>,<span class="string">&#x27;IQ&#x27;</span>,<span class="string">&#x27;人缘&#x27;</span>,<span class="string">&#x27;魅力&#x27;</span>,<span class="string">&#x27;财富&#x27;</span>,<span class="string">&#x27;体力&#x27;</span>] <span class="comment">#6个属性的名称</span></span><br><span class="line">    attrNum = <span class="built_in">len</span>(labels) <span class="comment">#attrNum是属性种类数，此处等于6</span></span><br><span class="line">    data = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">2</span>] <span class="comment">#六个属性的值</span></span><br><span class="line">    angles = [<span class="number">2</span>*pi*i/attrNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(attrNum)]</span><br><span class="line">    <span class="comment">#angles是以弧度为单位的6个属性对应的6条半径线的角度</span></span><br><span class="line">    angles2 = [x * <span class="number">180</span>/pi <span class="keyword">for</span> x <span class="keyword">in</span> angles]</span><br><span class="line">    <span class="comment">#angles2是以角度为单位的6个属性对应的半径线的角度</span></span><br><span class="line">    ax.set_ylim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">#限定半径线上的坐标范围，限定模长</span></span><br><span class="line">    ax.set_thetagrids(angles2, labels, fontproperties=<span class="string">&quot;SimHei&quot;</span>)</span><br><span class="line">    <span class="comment">#绘制6个属性对应的6条半径(六条半径角度, 属性, 字体样式)</span></span><br><span class="line">    ax.fill(angles, data, facecolor=<span class="string">&#x27;g&#x27;</span>, alpha=<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment">#填充,facecolor=&#x27;g&#x27;绿色填充,alpha:透明度</span></span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"><span class="comment">#处理汉字</span></span><br><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&quot;polar&quot;</span>) <span class="comment">#生成极坐标形式子图</span></span><br><span class="line">drawRadar(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" class="" title="绘制雷达图"><h2 id="绘制多层雷达图"><a href="#绘制多层雷达图" class="headerlink" title="绘制多层雷达图"></a>绘制多层雷达图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line">labels = [<span class="string">&#x27;EQ&#x27;</span>, <span class="string">&#x27;IQ&#x27;</span>, <span class="string">&#x27;人缘&#x27;</span>, <span class="string">&#x27;魅力&#x27;</span>, <span class="string">&#x27;财富&#x27;</span>, <span class="string">&#x27;体力&#x27;</span>]  <span class="comment"># 6个属性的名称</span></span><br><span class="line">attrNum = <span class="built_in">len</span>(labels)</span><br><span class="line">names = (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>)</span><br><span class="line">data = [[<span class="number">0.40</span>, <span class="number">0.32</span>, <span class="number">0.35</span>], [<span class="number">0.85</span>, <span class="number">0.35</span>, <span class="number">0.30</span>],</span><br><span class="line">        [<span class="number">0.40</span>, <span class="number">0.32</span>, <span class="number">0.35</span>], [<span class="number">0.40</span>, <span class="number">0.82</span>, <span class="number">0.75</span>],</span><br><span class="line">        [<span class="number">0.14</span>, <span class="number">0.12</span>, <span class="number">0.35</span>], [<span class="number">0.80</span>, <span class="number">0.92</span>, <span class="number">0.35</span>]]  <span class="comment"># 三个人的数据</span></span><br><span class="line">angles = [<span class="number">2</span> * pi * i / attrNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(attrNum)]</span><br><span class="line">angles2 = [x * <span class="number">180</span> / pi <span class="keyword">for</span> x <span class="keyword">in</span> angles]</span><br><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&quot;polar&quot;</span>)</span><br><span class="line">ax.fill(angles, data, alpha=<span class="number">0.25</span>)</span><br><span class="line">ax.set_thetagrids(angles2, labels)</span><br><span class="line">ax.set_title(<span class="string">&#x27;三巨头人格分析&#x27;</span>, y=<span class="number">1.05</span>)  <span class="comment"># y指明标题垂直位置</span></span><br><span class="line">ax.legend(names, loc=(<span class="number">0.95</span>, <span class="number">0.9</span>))  <span class="comment"># 画出右上角不同人的颜色说明</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%A4%9A%E5%B1%82%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" class="" title="绘制多层雷达图"><h2 id="多子图绘制"><a href="#多子图绘制" class="headerlink" title="多子图绘制"></a>多子图绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序中的import、汉字处理及drawRadar、 drawPie、 drawPlot函数略，见前面程序</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 窗口分割成2*2，取位于第1个方格的子图</span></span><br><span class="line">drawPie(ax)</span><br><span class="line"></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, projection=<span class="string">&quot;polar&quot;</span>)</span><br><span class="line">drawRadar(ax)</span><br><span class="line"></span><br><span class="line">ax = plt.subplot2grid((<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 或写成: ax = fig.add_subplot(2,1,2)</span></span><br><span class="line">drawPlot(ax)</span><br><span class="line"></span><br><span class="line">plt.figtext(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="string">&#x27;subplot sample&#x27;</span>)  <span class="comment"># 显示左下角的图像标题</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E5%A4%9A%E5%AD%90%E5%9B%BE%E7%BB%98%E5%88%B6.png" class="" title="多子图绘制"><h1 id="词云的使用"><a href="#词云的使用" class="headerlink" title="词云的使用"></a>词云的使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Version:python3.6.0</span></span><br><span class="line"><span class="comment"># 添加自定义分词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path  <span class="comment"># 用来获取文档的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 词云</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 词云生成工具</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</span><br><span class="line"><span class="comment"># 需要对中文进行处理</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图</span></span><br><span class="line">bg = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;love.png&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前的项目文件加的路径</span></span><br><span class="line">d = path.dirname(__file__)</span><br><span class="line"><span class="comment"># 读取停用词表</span></span><br><span class="line">stopwords_path = <span class="string">&#x27;stopwords.txt&#x27;</span></span><br><span class="line"><span class="comment"># 添加需要自定以的分词</span></span><br><span class="line"><span class="comment"># jieba.add_word(&quot;叶文洁&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取要分析的文本</span></span><br><span class="line">text_path = <span class="string">&quot;sanguoyanyiutf8.txt&quot;</span></span><br><span class="line"><span class="comment"># 读取要分析的文本，读取格式</span></span><br><span class="line">text = <span class="built_in">open</span>(path.join(d, text_path), encoding=<span class="string">&quot;utf8&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义个函数式用于分词</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiebaclearText</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 定义一个空的列表，将去除的停用词的分词保存</span></span><br><span class="line">    mywordList = []</span><br><span class="line">    <span class="comment"># 进行分词</span></span><br><span class="line">    seg_list = jieba.cut(text, cut_all=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 将一个generator的内容用/连接</span></span><br><span class="line">    listStr = <span class="string">&#x27;/&#x27;</span>.join(seg_list)</span><br><span class="line">    <span class="comment"># 打开停用词表</span></span><br><span class="line">    f_stop = <span class="built_in">open</span>(stopwords_path, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    <span class="comment"># 读取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f_stop_text = f_stop.read()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f_stop.close()  <span class="comment"># 关闭资源</span></span><br><span class="line">    <span class="comment"># 将停用词格式化，用\n分开，返回一个列表</span></span><br><span class="line">    f_stop_seg_list = f_stop_text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># 对默认模式分词的进行遍历，去除停用词</span></span><br><span class="line">    <span class="keyword">for</span> myword <span class="keyword">in</span> listStr.split(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">        <span class="comment"># 去除停用词</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (myword.split()) <span class="keyword">in</span> f_stop_seg_list <span class="keyword">and</span> <span class="built_in">len</span>(myword.strip()) &gt; <span class="number">1</span>:</span><br><span class="line">            mywordList.append(myword)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(mywordList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text1 = jiebaclearText(text)</span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 设置背景为白色，默认为黑色</span></span><br><span class="line">    width=<span class="number">990</span>,  <span class="comment"># 设置图片的宽度</span></span><br><span class="line">    height=<span class="number">440</span>,  <span class="comment"># 设置图片的高度</span></span><br><span class="line">    margin=<span class="number">10</span>,  <span class="comment"># 设置图片的边缘</span></span><br><span class="line"></span><br><span class="line">    max_font_size=<span class="number">50</span>,</span><br><span class="line">    random_state=<span class="number">30</span>,</span><br><span class="line">    font_path=<span class="string">&#x27;C:/Windows/Fonts/simkai.ttf&#x27;</span>  <span class="comment"># 中文处理，用系统自带的字体</span></span><br><span class="line">).generate(text1)</span><br><span class="line"><span class="comment"># 为图片设置字体</span></span><br><span class="line">my_font = fm.FontProperties(fname=<span class="string">&#x27;C:/Windows/Fonts/simkai.ttf&#x27;</span>)</span><br><span class="line"><span class="comment"># 产生背景图片，基于彩色图像的颜色生成器</span></span><br><span class="line">image_colors = ImageColorGenerator(bg)</span><br><span class="line"><span class="comment"># 开始画图</span></span><br><span class="line">plt.imshow(wc)</span><br><span class="line"><span class="comment"># 为云图去掉坐标轴</span></span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line"><span class="comment"># 画云图，显示</span></span><br><span class="line"><span class="comment"># 保存云图</span></span><br><span class="line">wc.to_file(<span class="string">&quot;sgresult3.png&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十一章数据分析和展示</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十章玩转Python生态</title>
    <link href="http://hibiscidai.com/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/"/>
    <id>http://hibiscidai.com/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/</id>
    <published>2023-01-30T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81.png" class="" title="实用Python程序设计MOOC-第十章玩转Python生态"><p>实用Python程序设计MOOC-第十章玩转Python生态</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十章玩转Python生态"><a href="#实用Python程序设计MOOC-第十章玩转Python生态" class="headerlink" title="实用Python程序设计MOOC-第十章玩转Python生态"></a>实用Python程序设计MOOC-第十章玩转Python生态</h1><h1 id="使用Python的库"><a href="#使用Python的库" class="headerlink" title="使用Python的库"></a>使用Python的库</h1><ul><li>Python自带的库</li></ul><p>math，re，datetime，turtle，random</p><ul><li>无数第三方的库</li></ul><p>Pillow，jieba，request，matplotlib</p><h1 id="安装Python第三方库"><a href="#安装Python第三方库" class="headerlink" title="安装Python第三方库"></a>安装Python第三方库</h1><h2 id="cmd窗口安装"><a href="#cmd窗口安装" class="headerlink" title="cmd窗口安装"></a>cmd窗口安装</h2><p>1) 进入cmd命令行窗口<br>2) 进入安装Python的文件夹， 默认通常是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Loca1\Programs\Python\Python37</span><br></pre></td></tr></table></figure><p>不知道的话查找python.exe可以找到<br>3) 再进入scripts文件夹<br>4) pip install库名</p><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/python%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" class="" title="python安装目录"><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/pip%E5%91%BD%E4%BB%A4.png" class="" title="pip命令"><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/pip%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85pillow%E5%BA%93.png" class="" title="pip命令安装pillow库"><h2 id="pychram安装"><a href="#pychram安装" class="headerlink" title="pychram安装"></a>pychram安装</h2><p>file - seting - project:xxx - Projet interpreter/Python解释器 - 点加号 -搜索第三方库 - 安装</p><h1 id="Import的用法"><a href="#Import的用法" class="headerlink" title="Import的用法"></a>Import的用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle<span class="comment">#turtle是一个类</span></span><br><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">turtle.fd()</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tt<span class="comment">#此后tt等价于turtle</span></span><br><span class="line">tt.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">tt.fd(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image<span class="comment">#PIL.Image是类中的类</span></span><br><span class="line">img = PIL.Image.<span class="built_in">open</span>(<span class="string">&quot;C:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image<span class="comment">#从PIL库导入Image类进行图像处理</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image, PIL.ImageDraw, PIL.ImageFont</span><br><span class="line">img = PIL.Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br><span class="line">draw = PIL.ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img, 上画图、写字</span></span><br><span class="line">myFont = PIL.ImageFont.truetype(<span class="string">&quot;C:\\Windows\\Fonts\\simhei.ttf&quot;</span>，<span class="number">164</span>)</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>) <span class="comment">#将图像文件载入对象img</span></span><br><span class="line">draw = ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img,上画图、写字</span></span><br><span class="line">myFont = ImageFont.truetype(<span class="string">&quot;C:\\Windows\\Fonts\\simhei.ttf&quot;</span>, <span class="number">164</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, colors, Alignment</span><br><span class="line">boldRedFont = Font(size = <span class="number">18</span>, name = <span class="string">&#x27;Times New Roman&#x27;</span>, bold = <span class="literal">True</span>, color = colors.RED)</span><br><span class="line">alignment = Alignment(horizontal = <span class="string">&#x27;left&#x27;</span>, vertical = <span class="string">&#x27;center&#x27;</span> )</span><br></pre></td></tr></table></figure><ul><li><p>datetime库处理时间相关</p></li><li><p>random库处理随机数相关</p></li><li><p>jieba库进行分词</p></li><li><p>openpyxl处理excel文档</p></li><li><p>Pillow处理图像</p></li></ul><h1 id="用datetime库处理日期、时间"><a href="#用datetime库处理日期、时间" class="headerlink" title="用datetime库处理日期、时间"></a>用datetime库处理日期、时间</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime<span class="comment">#导入datetime模块</span></span><br><span class="line">dtBirth = datetime.date (<span class="number">2000</span>, <span class="number">9</span>, <span class="number">27</span>)<span class="comment">#创建日期对象，日期为2000年9月27日</span></span><br><span class="line"><span class="built_in">print</span>(dtBirth.weekday()) <span class="comment">#&gt;&gt;2 输出dtBirth代表的日期是星期几,0表示星期一</span></span><br><span class="line"></span><br><span class="line">dtNow = datetime.date.today() <span class="comment">#取今天日期,假设是2020年8月15日</span></span><br><span class="line"><span class="built_in">print</span> (dtBirth &lt; dtNow)<span class="comment">#&gt;&gt;True 日期可以比大小</span></span><br><span class="line"></span><br><span class="line">life = dtNow - dtBirth <span class="comment">#取两个日期的时间差</span></span><br><span class="line"><span class="built_in">print</span> (life.days, life.total_seconds()) <span class="comment">#&gt;&gt; 7262 627436800.0</span></span><br><span class="line"><span class="comment">#两个日期相差7262天，即627436800.0秒</span></span><br><span class="line"></span><br><span class="line">delta = datetime.timedelta(days = -<span class="number">10</span>) <span class="comment">#构造时间差对象，时间差为-10天</span></span><br><span class="line">newDate = dtNow + delta<span class="comment">#newDate代表的日期是dtNow的日期往前数10天</span></span><br><span class="line"><span class="built_in">print</span> (newDate.year, newDate.month, newDate.day, newDate.weekday())<span class="comment">#&gt;&gt;2020 8 5 2 2020年8月5日星期三</span></span><br><span class="line"><span class="built_in">print</span> (newDate.strftime(<span class="string">r&#x27;%m/%d/%Y&#x27;</span>)) <span class="comment">#&gt;&gt;08/05/2020</span></span><br><span class="line"></span><br><span class="line">newDate = datetime.datetime.strptime(<span class="string">&quot;2020.08.05&quot;</span>, <span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(newDate.strftime(<span class="string">&quot;%Y%m%d&quot;</span>))<span class="comment">#&gt;&gt;20200805</span></span><br></pre></td></tr></table></figure><h2 id="处理时刻"><a href="#处理时刻" class="headerlink" title="处理时刻"></a>处理时刻</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">tm = datetime.datetime.now()<span class="comment">#取当前时刻，精确到微秒</span></span><br><span class="line"><span class="built_in">print</span>(tm.year, tm.month, tm.day, tm.hour, tm.minute, tm.second, tm.microsecond)<span class="comment">#&gt;&gt;2020 8 15 20 32 53 899669 假设当前时刻是2020年8月15日20时32分53秒899669微秒</span></span><br><span class="line"></span><br><span class="line">tm = datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">0</span>)<span class="comment">#构造一个时刻,2017年8月10日15时56分10秒0微秒</span></span><br><span class="line"><span class="built_in">print</span>(tm.strftime(<span class="string">&quot;%Y%m%d %H:%M:%S&quot;</span>))<span class="comment">#&gt;&gt;20170810 15:56:10</span></span><br><span class="line"><span class="built_in">print</span>(tm.strftime(<span class="string">&quot;%Y%m%d %I:%M:%S %p&quot;</span>)) <span class="comment">#20170810 03:56:10 PM</span></span><br><span class="line"></span><br><span class="line">tm2 = datetime.datetime.strptime(<span class="string">&quot;2013.08.10 22:31:24&quot;</span>, <span class="string">&quot;%Y.%m.%d %H:%M:%S&quot;</span>)<span class="comment">#由字符串生成一个时间对象 </span></span><br><span class="line">delta = tm - tm2<span class="comment">#求两个时间的时间差</span></span><br><span class="line"><span class="built_in">print</span>(delta.days, delta.seconds, delta.total_seconds())</span><br><span class="line"><span class="comment">#&gt;&gt;1460 62686 126206686.0 #时间差是1460天零62686秒, 总共126206686.0秒</span></span><br><span class="line"></span><br><span class="line">delta = tm2 - tm</span><br><span class="line"><span class="built_in">print</span>(delta.days, delta.seconds, delta.total_seconds())<span class="comment">#&gt;&gt;-1461 23714 -126206686.0</span></span><br><span class="line">delta = datetime.timedelta(days = <span class="number">10</span>, hours = <span class="number">10</span>, minutes = <span class="number">30</span>, seconds = <span class="number">20</span>)<span class="comment">#构造一个时间差，10天10小时30分20秒</span></span><br><span class="line"></span><br><span class="line">tm2 = tm + delta</span><br><span class="line"><span class="built_in">print</span>(tm2.strftime(<span class="string">&quot;%Y%m%d %H:%M:%S&quot;</span>)) <span class="comment">#&gt;&gt;20170821 02:26:30</span></span><br></pre></td></tr></table></figure><blockquote><p>datetime局限<br>能处理的时间是公元1年至9999年</p></blockquote><h1 id="用random库处理随机事务"><a href="#用random库处理随机事务" class="headerlink" title="用random库处理随机事务"></a>用random库处理随机事务</h1><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">random.random()</td><td style="text-align:center">随机生成一个[0, 1]之间的数</td></tr><tr><td style="text-align:center">random.uniform(x, y)</td><td style="text-align:center">随机生成一个[x,y]之间的数(含两端，下同)。x,y可以是小数</td></tr><tr><td style="text-align:center">random.randint(x, y)</td><td style="text-align:center">随机生成个[x,y]之间的整数。x,y都是整数</td></tr><tr><td style="text-align:center">random.randrange(x, y, z)</td><td style="text-align:center">在range(x, y, z)中随机取一个数</td></tr><tr><td style="text-align:center">random.choice(x)</td><td style="text-align:center">从序列x中随机取一个元素。x可以是为列表、元组、字符串</td></tr><tr><td style="text-align:center">random.shuffle(x)</td><td style="text-align:center">将列表x的元素顺序随机打乱</td></tr><tr><td style="text-align:center">random.sample(x, n)</td><td style="text-align:center">从序列x中随机取一个长度为n的子序列。x可以是元组、列表、集合</td></tr><tr><td style="text-align:center">random.seed(x)</td><td style="text-align:center">设置随机种子为x。x可以是个数、元组、字符串</td></tr></tbody></table></div><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())<span class="comment">#&gt;&gt;0.5502568034876353</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.2</span>, <span class="number">7.8</span>))<span class="comment">#&gt;&gt;5.147405813383391</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randint(-<span class="number">20</span>, <span class="number">70</span>))<span class="comment">#&gt;&gt;20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>, <span class="number">20</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt;17 &quot;2 5 8 11 14 17 (20不算)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&quot;hello,world&quot;</span>)) <span class="comment">#&gt;&gt;d</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="number">34.6</span>, <span class="string">&#x27;jack&#x27;</span>]))<span class="comment">#&gt;&gt;ok</span></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[5, 3, 4, 2, 1, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.sample(lst, <span class="number">3</span>))<span class="comment">#&gt;&gt;[6, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="设置随机种子"><a href="#设置随机种子" class="headerlink" title="设置随机种子"></a>设置随机种子</h3><p>生活中真实的随机数是不可预测的，当计算机中初始条件设置后是可以预测的。<br>正常情况（缺省）运行random时候是以当前的时间来作为种子，当种子一样时候，生成的随机数是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">2</span>)<span class="comment">#或random.seed(&quot;ok&quot;)....种子可以是随便什么数、字符串...</span></span><br><span class="line"><span class="comment">#则下面程序每次运行结果都一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.2</span>, <span class="number">7.8</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randint(-<span class="number">20</span>, <span class="number">70</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>, <span class="number">30</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&quot;hello,world&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="number">34.6</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(random.sample(lst, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="实现4人玩牌的发牌模拟"><a href="#实现4人玩牌的发牌模拟" class="headerlink" title="实现4人玩牌的发牌模拟"></a>实现4人玩牌的发牌模拟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">cards = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>)]</span><br><span class="line">cards.extend(<span class="built_in">list</span>(<span class="string">&quot;JQKA&quot;</span>))  <span class="comment"># cards是[&#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;10&#x27;，&#x27;J&#x27;，&#x27;Q&#x27;, &#x27;K&#x27;, &#x27;A&#x27;]</span></span><br><span class="line">allCards = []  <span class="comment"># 一副牌</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">&quot;♣♦♥♠&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cards:</span><br><span class="line">        allCards.append(s + c)  <span class="comment"># allCards元素形式如:&#x27;♠3&#x27;</span></span><br><span class="line"></span><br><span class="line">random.shuffle(allCards)  <span class="comment"># 随机打乱52张牌</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    onePlayer = allCards[i::<span class="number">4</span>]  <span class="comment"># 每个玩家都是隔三张牌取一张</span></span><br><span class="line">    onePlayer.sort()  <span class="comment"># 扑克牌排序规则略复杂，这个排序不太完美</span></span><br><span class="line">    <span class="built_in">print</span>(onePlayer)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;♠4&#x27;, &#x27;♠8&#x27;, &#x27;♠K&#x27;, &#x27;♠Q&#x27;, &#x27;♣2&#x27;, &#x27;♣J&#x27;, &#x27;♥3&#x27;, &#x27;♥8&#x27;, &#x27;♥K&#x27;, &#x27;♦10&#x27;, &#x27;♦6&#x27;, &#x27;♦J&#x27;, &#x27;♦Q&#x27;]</span><br><span class="line">[&#x27;♠2&#x27;, &#x27;♠3&#x27;, &#x27;♠6&#x27;, &#x27;♠J&#x27;, &#x27;♣10&#x27;, &#x27;♣7&#x27;, &#x27;♣Q&#x27;, &#x27;♥10&#x27;, &#x27;♥4&#x27;, &#x27;♥5&#x27;, &#x27;♥A&#x27;, &#x27;♦2&#x27;, &#x27;♦8&#x27;]</span><br><span class="line">[&#x27;♠7&#x27;, &#x27;♠9&#x27;, &#x27;♣3&#x27;, &#x27;♣4&#x27;, &#x27;♣8&#x27;, &#x27;♣K&#x27;, &#x27;♥2&#x27;, &#x27;♥6&#x27;, &#x27;♥Q&#x27;, &#x27;♦3&#x27;, &#x27;♦7&#x27;, &#x27;♦9&#x27;, &#x27;♦A&#x27;]</span><br><span class="line">[&#x27;♠10&#x27;, &#x27;♠5&#x27;, &#x27;♠A&#x27;, &#x27;♣5&#x27;, &#x27;♣6&#x27;, &#x27;♣9&#x27;, &#x27;♣A&#x27;, &#x27;♥7&#x27;, &#x27;♥9&#x27;, &#x27;♥J&#x27;, &#x27;♦4&#x27;, &#x27;♦5&#x27;, &#x27;♦K&#x27;]</span><br></pre></td></tr></table></figure><h1 id="使用Jieba进行分词"><a href="#使用Jieba进行分词" class="headerlink" title="使用Jieba进行分词"></a>使用Jieba进行分词</h1><p>“买马上战场”应该分成”买 马 上 战场”还是”买 马上 战场”?<br>不容易解决，分词库jieba也不是总能解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba<span class="comment">#导入分词库</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;我们热爱中华人民共和国&quot;</span></span><br><span class="line">lst = jieba.lcut(s)<span class="comment">#分词的结果是一个列表</span></span><br><span class="line"><span class="comment">#默认用精确模式分词，分出的结果正好拼成原文</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华人民共和国&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s, cut_all = <span class="literal">True</span>))<span class="comment">#全模式分词,输出所有可能的词</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华&#x27;, &#x27;中华人民&#x27;, &#x27;中华人民共和国&#x27;, &#x27;华人&#x27;, &#x27;人民&#x27;, &#x27;人民共和国&#x27;, &#x27;共和&#x27;, &#x27;共和国&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut_for_search(s))<span class="comment">#搜索引擎模式分词</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华&#x27;, &#x27;华人&#x27;, &#x27;人民&#x27;, &#x27;共和&#x27;, &#x27;共和国&#x27;, &#x27;中华人民共和国&#x27;]</span></span><br><span class="line">s = <span class="string">&quot;拼多多是个网站&quot;</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;拼&#x27;, &#x27;多多&#x27;, &#x27;是&#x27;, &#x27;个&#x27;, &#x27;网站&#x27;]</span></span><br><span class="line">jieba.add_word(<span class="string">&quot;拼多多&quot;</span>)<span class="comment">#往词典添加新词</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;拼多多&#x27;, &#x27;是&#x27;, &#x27;个&#x27;, &#x27;网站&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;高克丝马微中&quot;</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s)) <span class="comment">#&gt;&gt;[&#x27;高克丝&#x27;, &#x27;马微&#x27;, &#x27;中&#x27;]</span></span><br><span class="line"></span><br><span class="line">jieba.load_userdict(<span class="string">&quot;C:/tmp/tmpdict.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;高克&#x27;, &#x27;丝马&#x27;, &#x27;微中&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(<span class="string">&quot;显微中，容不得一丝马虎。&quot;</span>))<span class="comment">#&gt;&gt;[&#x27;显微&#x27;, &#x27;中&#x27;, &#x27;容不得&#x27;, &#x27;一丝&#x27;, &#x27;马虎&#x27;, &#x27;。&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>c:/tmp/tmpdict.txt</code> 文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">高克</span><br><span class="line">丝马</span><br><span class="line">微中</span><br></pre></td></tr></table></figure><h2 id="用jieba库找出三国演义中出场次数最多的几个人"><a href="#用jieba库找出三国演义中出场次数最多的几个人" class="headerlink" title="用jieba库找出三国演义中出场次数最多的几个人"></a>用jieba库找出三国演义中出场次数最多的几个人</h2><p>分词后对所有词进行频率统计并输出出现最多的15个词(单个字的词去掉) :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">曹操 929, 孔明 825, 将军 756, 却说 646, 玄德 556, 关公 508, 丞相 484, 二人 459, 不可 432, 荆州 417, 孔明曰 383, 不能 380, 玄德日 380, 如此 375, 张飞 349,</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;&#x27;c:/tmp/三国演义utf8.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">text = f.read()<span class="comment">#字符串text就是全部三国演义文本</span></span><br><span class="line">f.close()</span><br><span class="line">words = jieba.lcut(text)<span class="comment">#word是分出来的所有词</span></span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;诸葛亮&quot;</span>, <span class="string">&quot;孔明曰&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;孔明&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;关公&quot;</span>, <span class="string">&quot;云长&quot;</span>, <span class="string">&quot;关云长&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;关羽&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;玄德&quot;</span>, <span class="string">&quot;玄德日&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;刘备&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;孟德&quot;</span>, <span class="string">&quot;操贼&quot;</span>, <span class="string">&quot;曹阿瞒&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">result[word] = result.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">noneNames = &#123;<span class="string">&#x27;将军&#x27;</span>, <span class="string">&#x27;却说&#x27;</span>, <span class="string">&#x27;荆州&#x27;</span>, <span class="string">&#x27;二人&#x27;</span>, <span class="string">&#x27;不可&#x27;</span>, <span class="string">&#x27;不能&#x27;</span>, <span class="string">&#x27;如此&#x27;</span>, <span class="string">&#x27;丞相&#x27;</span> ,<span class="string">&quot;商议&quot;</span>, <span class="string">&quot;如何&quot;</span>, <span class="string">&quot;主公&quot;</span>, <span class="string">&quot;军士&quot;</span>, <span class="string">&quot;左右&quot;</span>, <span class="string">&quot;军马&quot;</span>, <span class="string">&quot;引兵&quot;</span>, <span class="string">&quot;次日&quot;</span>&#125; <span class="comment">#用集合比列表、元组快</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> noneNames:<span class="comment">#删除noneName中的词</span></span><br><span class="line">result.pop(word)</span><br><span class="line">items = <span class="built_in">list</span>(result.items())</span><br><span class="line">items.sort(key = <span class="keyword">lambda</span> x : -x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line"><span class="built_in">print</span>(items[i][<span class="number">0</span>], items[i][<span class="number">1</span>], end=<span class="string">&quot;, &quot;</span>)<span class="comment">#输出 人名 出现次数，</span></span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">孔明 1366, 刘备 1204, 曹操 973, 关羽 814, 张飞 349, 吕布 299, 孙权 264, 大喜 262, 东吴 252, 天下 252, 赵云 251, 于是 250, 今日 242, 魏兵 234, 不敢 234,</span><br></pre></td></tr></table></figure></p><h1 id="用openpyxl处理excel文档"><a href="#用openpyxl处理excel文档" class="headerlink" title="用openpyxl处理excel文档"></a>用openpyxl处理excel文档</h1><h2 id="excel文档相关库"><a href="#excel文档相关库" class="headerlink" title="excel文档相关库"></a>excel文档相关库</h2><ul><li>office 2010前.xls文件</li></ul><p>用xlrd库读取<br>用xlwt库创建和修改</p><ul><li>office 2010及之后.xlsx文件</li></ul><p>用openpyxl库读写(官网: openpyxl.readthedocs.io)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl (不支持Python 3.5及以前版本)</span><br><span class="line">Python 3.5及以前: pip install openpyxl == 2.6.4</span><br></pre></td></tr></table></figure><h2 id="openpyxl读取excel文件内容"><a href="#openpyxl读取excel文件内容" class="headerlink" title="openpyxl读取excel文件内容"></a>openpyxl读取excel文件内容</h2><ul><li>获取工作表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sheet = book.active<span class="comment">#取活跃的工作表(缺省就是第0张工作表)</span></span><br><span class="line">sheet = book[<span class="string">&quot;price&quot;</span>]<span class="comment">#取名为&quot;price&quot;的工作表</span></span><br></pre></td></tr></table></figure><ul><li>遍历所有工作表， 并打出其名字:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets: <span class="comment">#worksheets是工作表构成的列表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.title)</span><br></pre></td></tr></table></figure><ul><li>单元格属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(ce11.value):<span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">str</span>, datetime.datetime</span><br><span class="line">ce1l.coordinate:<span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;E3&#x27;</span></span><br><span class="line">cell.col_idx:单元格列号</span><br><span class="line">cell.number_format:数的显示格式,<span class="string">&quot;General&quot;</span>, <span class="string">&quot;0.00%&quot;</span>, <span class="string">&quot;0.00E+00&quot;</span>等</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;c:/tmp/test.xlsx&quot;</span>)<span class="comment">#book就是整个excel文件</span></span><br><span class="line">sheet = book.worksheets[<span class="number">0</span>]<span class="comment">#取第0张工作表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.title)<span class="comment">#输出工作表名字(显示于工作表下方标签)</span></span><br><span class="line"><span class="built_in">print</span>(sheet.min_row, sheet.max_row) <span class="comment">#输出最小有效行号、最大有效行号</span></span><br><span class="line"><span class="built_in">print</span>(sheet.min_column, sheet.max_column)<span class="comment">#输出最小有效列号、最大有效列号</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:<span class="comment">#按行遍历整个工作表，从第1行到sheet.max_row行(含)</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:<span class="comment">#遍历一行的每个单元格。cell是一个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)<span class="comment">#cell.value是单元格的值，空单元格值是None</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheetp[<span class="string">&#x27;G&#x27;</span>]:<span class="comment">#遍历名为&#x27;G&#x27;的那一列</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheet[<span class="number">3</span>]:<span class="comment">#遍历第3行</span></span><br><span class="line"><span class="built_in">print</span>(cell.value, <span class="built_in">type</span>(cell.value), cell.coordinate, cell.col_idx, cell.number_format)</span><br><span class="line"><span class="built_in">print</span>(pxl.utils.get_colum_letter(<span class="number">5</span>))<span class="comment">#&gt;&gt;E 根据列号求列名</span></span><br><span class="line"><span class="built_in">print</span>(pxl.utils.column_index_from_string(<span class="string">&#x27;D&#x27;</span>))<span class="comment">#&gt;&gt;4 根据列名求列号</span></span><br><span class="line"><span class="built_in">print</span>(pxl.utils.column_index_from_string(<span class="string">&#x27;AC&#x27;</span>))<span class="comment">#&gt;&gt;29</span></span><br><span class="line">colRange = sheet[<span class="string">&#x27;C:F&#x27;</span>]<span class="comment">#colRange代表从第C列到第F列(含F列)</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> colRange:<span class="comment">#按列遍历第C列到第F列，col代表一列</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> col:<span class="comment">#cell是一个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line">rowRange = sheet[<span class="number">5</span>:<span class="number">10</span>]<span class="comment">#rowRange代表第5行到第10行(含第10行)</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;D2&#x27;</span>]:<span class="comment">#按行遍历左上角是A1右下角是D2的子表</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:<span class="comment">#row[i]也可以表示第i个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;C9&#x27;</span>].value)<span class="comment">#输出C9单元格的值</span></span><br><span class="line"><span class="built_in">print</span>(sheet.cell(row=<span class="number">8</span>, column=<span class="number">4</span>).value)<span class="comment">#输出第8行第4列单元格的值</span></span><br></pre></td></tr></table></figure><h2 id="读取公式的计算结果"><a href="#读取公式的计算结果" class="headerlink" title="读取公式的计算结果"></a>读取公式的计算结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&quot;C:/tmp/style.xlsx&quot;</span>, data_only = <span class="literal">True</span>)</span><br><span class="line">ws = wb.worksheets[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(ws[<span class="string">&#x27;A3&#x27;</span>].value)</span><br></pre></td></tr></table></figure><h1 id="openpyxl创建excel文件"><a href="#openpyxl创建excel文件" class="headerlink" title="openpyxl创建excel文件"></a>openpyxl创建excel文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">book = openpyxl.Workbook()<span class="comment">#在内存创建一个excel文档，注意W是大写</span></span><br><span class="line">sheet = book.active<span class="comment">#取第0个工作表</span></span><br><span class="line">sheet.title = <span class="string">&quot;sample1&quot;</span><span class="comment">#工作表取名为sample1</span></span><br><span class="line">dataRows = ((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40.5</span>), (<span class="number">100</span>, <span class="number">200</span>, <span class="string">&#x27;=sum(A1:B2)&#x27;</span>), [], [<span class="string">&#x27;1000&#x27;</span>, datetime.datetime.now(), <span class="string">&#x27;ok&#x27;</span>])</span><br><span class="line"><span class="comment">#时间显示是特别长的</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> dataRows:</span><br><span class="line">sheet.append(row)<span class="comment">#在工作表中添加一行</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;B&#x27;</span>].width = <span class="built_in">len</span>(<span class="built_in">str</span>(sheet[<span class="string">&#x27;B4&#x27;</span>].value))<span class="comment">#设置B列宽度,使其能完整显示B4单元格里的时间</span></span><br><span class="line">sheet[<span class="string">&#x27;E1&#x27;</span>].value = <span class="string">&quot;=sum(A1:D1)&quot;</span><span class="comment">#单元格值为公式</span></span><br><span class="line">sheet[<span class="string">&#x27;E2&#x27;</span>].value = <span class="number">12.5</span><span class="comment">#单元格值为小数</span></span><br><span class="line">sheet[<span class="string">&quot;E2&quot;</span>].number_format = <span class="string">&quot;0.00%&quot;</span><span class="comment">#单元格显示格式是百分比形式</span></span><br><span class="line">sheet[<span class="string">&#x27;F1&#x27;</span>].value = <span class="number">3500</span><span class="comment">#单元格值类型为int</span></span><br><span class="line">sheet[<span class="string">&#x27;F2&#x27;</span>].value =<span class="string">&quot;35.00&quot;</span><span class="comment">#单元格值类型为str</span></span><br><span class="line">sheet[<span class="string">&#x27;F3&#x27;</span>].value = datetime.datetime.today().date()</span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;F&#x27;</span>].width = <span class="built_in">len</span>(<span class="built_in">str</span>(sheet[<span class="string">&#x27;F3&#x27;</span>].value))</span><br><span class="line">sheet.row_dimensions[<span class="number">2</span>].height = <span class="number">48</span><span class="comment">#设置第2行高度为48points</span></span><br><span class="line">sheet2 = book.create_sheet(<span class="string">&quot;Sample2&quot;</span>)<span class="comment">#添加名为Sample2的工作表</span></span><br><span class="line">sheet2[<span class="string">&quot;A1&quot;</span>] = <span class="number">50</span></span><br><span class="line">sheet2 = book.create_sheet(<span class="string">&quot;Sample0&quot;</span>, <span class="number">0</span>)<span class="comment">#添加名为sample0的工作表</span></span><br><span class="line">sheet3 = book.copy_worksheet(sheet)<span class="comment">#添加一张新工作表,其为sheet的拷贝</span></span><br><span class="line">book.remove_sheet(book[<span class="string">&quot;Sample2&quot;</span>])<span class="comment">#删除名为Sample2的工作表</span></span><br><span class="line">book.save(<span class="string">&#x27;C:/tmp/sample.xlsx&#x27;</span>)<span class="comment">#保存文件</span></span><br></pre></td></tr></table></figure><h2 id="将所有文本形式的数转换为真正的数"><a href="#将所有文本形式的数转换为真正的数" class="headerlink" title="将所有文本形式的数转换为真正的数"></a>将所有文本形式的数转换为真正的数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;C:/tmp/test2.xlsx&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets:</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">v = cell.value</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">if</span> v.isdigit():<span class="comment">#如果v全部由数字组成</span></span><br><span class="line">cell.value = <span class="built_in">int</span>(v)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cell.value = <span class="built_in">float</span>(v) <span class="comment">#如果不是小数格式，转换会引发异常</span></span><br><span class="line"><span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">book.save(<span class="string">&quot;C:/tmp/test3.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="将真正的数转换为文本形式"><a href="#将真正的数转换为文本形式" class="headerlink" title="将真正的数转换为文本形式"></a>将真正的数转换为文本形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;c:/tmp/test2.xlsx&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets:</span><br><span class="line"><span class="keyword">for</span>row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row :</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(cell.value) == <span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(cell.value) == <span class="built_in">float</span>:</span><br><span class="line">cell.value = <span class="built_in">str</span>(cell.value)</span><br><span class="line">book.save(<span class="string">&quot;c:/tmp/test3.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="openpyxl指定单元格的样式"><a href="#openpyxl指定单元格的样式" class="headerlink" title="openpyxl指定单元格的样式"></a>openpyxl指定单元格的样式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, colors, PatternFill, Alignment, Side, Border</span><br><span class="line">book = openpyxl.Workbook() <span class="comment">#在内存创建一个excel文档，注意W是大写</span></span><br><span class="line">sheet = book.active <span class="comment">#取第0个工作表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): <span class="comment">#添加4行5列数据</span></span><br><span class="line">sheet.append([i*<span class="number">5</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line">side = Side(style=<span class="string">&quot;thin&quot;</span>) <span class="comment">#边线类型, 还可以是 &quot;thick&quot;,&quot;medium&quot;,&quot;dotted&quot;等</span></span><br><span class="line">border = Border(left=side, right=side, top=side, bottom=side) <span class="comment">#边框类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">cell.border = border <span class="comment">#为单元格设置边框类型</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>].fill = PatternFill(patternType=<span class="string">&#x27;solid&#x27;</span>, fgColor=<span class="string">&quot;00ff00&quot;</span>)</span><br><span class="line"><span class="comment">#纯色填充，单元格底色设置为绿色,00ff00表示红色分量0，绿色分量255,蓝色分量0</span></span><br><span class="line">a1 = sheet[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line">italicRedFont = Font(size=<span class="number">18</span>, name=<span class="string">&#x27;Times New Roman&#x27;</span>, bold=<span class="literal">True</span>, color=colors.RED)</span><br><span class="line">a1.font = italicRedFont <span class="comment">#设置单元格字体</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;A2&#x27;</span>].font = sheet[<span class="string">&#x27;A1&#x27;</span>].font.copy(italic = <span class="literal">True</span>)<span class="comment">#A2的字体和A1的字体一样，但是是斜体</span></span><br><span class="line"></span><br><span class="line">sheet.merge_cells(<span class="string">&#x27;C2:D3&#x27;</span>) <span class="comment">#从C2到D3合并为一个单元格，此后名为 C2</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;C2&#x27;</span>].alignment = Alignment(horizontal=<span class="string">&#x27;left&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)<span class="comment">#C2文字水平左对齐，垂直居中</span></span><br><span class="line">book.save(<span class="string">&quot;c:/tmp/style.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/openpyxl%E6%8C%87%E5%AE%9A%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E6%A0%B7%E5%BC%8F.png" class="" title="openpyxl指定单元格的样式"><h1 id="xlrd读取excel文件内容"><a href="#xlrd读取excel文件内容" class="headerlink" title="xlrd读取excel文件内容"></a>xlrd读取excel文件内容</h1><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlrd%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" class="" title="xlrd读取excel文件内容"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">book = xlrd.open_workbook(<span class="string">&quot;c:\\tmp\\sample.xlsx&quot;</span> ) <span class="comment">#打开指定文件</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> book.sheets(): <span class="comment">#遍历所有的工作表</span></span><br><span class="line"><span class="built_in">print</span> =(s.name) <span class="comment">#打出工作表名字</span></span><br><span class="line"></span><br><span class="line">sheet1 = book.sheet_by_index(<span class="number">0</span>) <span class="comment">#通过sheet索引获得sheet对象</span></span><br><span class="line">sheet1_name = book.sheet_names()[<span class="number">0</span>] <span class="comment"># 获得指定索引的sheet名称</span></span><br><span class="line"><span class="built_in">print</span>(sheet1_name) <span class="comment">#&gt;&gt;富豪记录</span></span><br><span class="line"></span><br><span class="line">sheet1 = book.sheet_by_name(sheet1_name) <span class="comment">#通过名字获得sheet对象</span></span><br><span class="line">nrows = sheet1.nrows <span class="comment">#总行数</span></span><br><span class="line">ncols = sheet1.ncols <span class="comment">#总列数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows): <span class="comment">#打印表中的内容</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">cell_value = sheet1.cell_value(i, j)</span><br><span class="line"><span class="built_in">print</span>(cell_value, end = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br>富豪记录<br>学生记录<br>富豪记录<br>姓名 资产（亿）<br>马云 2000.0<br>马化腾 2100.0</p><h1 id="xlwt创建excel文件"><a href="#xlwt创建excel文件" class="headerlink" title="xlwt创建excel文件"></a>xlwt创建excel文件</h1><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlwt%E5%88%9B%E5%BB%BAexcel%E6%96%87%E4%BB%B6.png" class="" title="xlwt创建excel文件"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="comment">#创建一个Wordbook对象，即创建一个Excel文件</span></span><br><span class="line">book = xlwt.Workbook(encoding = <span class="string">&quot;utf-8&quot;</span>, style_compression = <span class="number">0</span>)</span><br><span class="line"><span class="comment">#创建一个工作表</span></span><br><span class="line">sheet = book.add_sheet(<span class="string">&quot;成绩单&quot;</span>, cell_overwrite_ok = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#向表sheet中添加数据</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>) <span class="comment">#在第0行0列的单元格写入 &quot;姓名&quot;</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;绩点&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;王二&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;3.4&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;赵二&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;3.9&quot;</span>)</span><br><span class="line">sheet = book.add_sheet(<span class="string">&quot;名单&quot;</span>, cell_overwrite_ok = <span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;6656&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;Jone&quot;</span>)</span><br><span class="line">book.save(<span class="string">&quot;c:\\tmp\\sample2.xls&quot;</span>) <span class="comment">#sample2.xls如果本来存在，会被覆盖</span></span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加公式"><a href="#xlwt向单元格添加公式" class="headerlink" title="xlwt向单元格添加公式"></a>xlwt向单元格添加公式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment"># Outputs 5</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># Outputs 2</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">0</span>, xlwt.Formula(<span class="string">&#x27;A1*B1&#x27;</span>))</span><br><span class="line"><span class="comment"># Should output &quot;10&quot; (A1[5] * A2[2])</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">1</span>, xlwt.Formula(<span class="string">&#x27;SUM(A1,B1)&#x27;</span>))</span><br><span class="line"><span class="comment"># Should output &quot;7&quot; (A1[5] + A2[2])</span></span><br><span class="line">workbook.save(<span class="string">&#x27;c:\\tmp\\Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加日期"><a href="#xlwt向单元格添加日期" class="headerlink" title="xlwt向单元格添加日期"></a>xlwt向单元格添加日期</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">style = xlwt.XFStyle()</span><br><span class="line">style.num_format_str = <span class="string">&#x27;M/D/YY&#x27;</span></span><br><span class="line"><span class="comment"># Other options:</span></span><br><span class="line"><span class="comment">#D-MMM-YY, D-MMM, MMM-YY, h:mm, h:mm:ss,</span></span><br><span class="line"><span class="comment">#h:mm, h:mm:ss, M/D/YY h:mm, mm:ss, [h]:mm:ss, mm:ss.0</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, datetime.datetime.now(), style)</span><br><span class="line">workbook.save(<span class="string">&#x27;Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加一个超链接"><a href="#xlwt向单元格添加一个超链接" class="headerlink" title="xlwt向单元格添加一个超链接"></a>xlwt向单元格添加一个超链接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">xlwt.Formula(<span class="string">&#x27;HYPERLINK(&quot;http://www.pku.edu.cn&quot;;&quot;PKU&quot;)&#x27;</span>))</span><br><span class="line"><span class="comment"># Outputs the text &quot;Google&quot; linking to http://www.google.com</span></span><br><span class="line">workbook.save(<span class="string">&#x27;Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt合并单元格"><a href="#xlwt合并单元格" class="headerlink" title="xlwt合并单元格"></a>xlwt合并单元格</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;First Merge&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">&quot;ok1&quot;</span>)</span><br><span class="line"><span class="comment"># Merges row 0&#x27;s columns 0 through 3.</span></span><br><span class="line">font = xlwt.Font() <span class="comment"># Create Font</span></span><br><span class="line">font.bold = <span class="literal">True</span> <span class="comment"># Set font to Bold</span></span><br><span class="line">style = xlwt.XFStyle() <span class="comment"># Create Style</span></span><br><span class="line">style.font = font <span class="comment"># Add Bold Font to Style</span></span><br><span class="line">worksheet.write_merge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;Second Merge&#x27;</span>, style)</span><br><span class="line"><span class="comment"># Merges row 1 through 2&#x27;s columns 0 through 3.</span></span><br><span class="line">worksheet.write(<span class="number">2</span>,<span class="number">4</span>,<span class="string">&quot;ok2&quot;</span>)</span><br><span class="line">workbook.save(<span class="string">&#x27;c:\\tmp\\Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlwt%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.png" class="" title="xlwt合并单元格"> <h1 id="用Pillow处理图像"><a href="#用Pillow处理图像" class="headerlink" title="用Pillow处理图像"></a>用Pillow处理图像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><ul><li>图像缩放和旋转</li><li>图像加滤镜</li><li>图像切割</li><li>图像加水印</li><li>图像素描化</li><li>图像加文字</li></ul><h2 id="图像的常识"><a href="#图像的常识" class="headerlink" title="图像的常识"></a>图像的常识</h2><ul><li><p>图像由像素构成<br>屏幕上每个像素由3个距离非常近的点构成，分别显示红、绿、蓝三种颜色，每个像素可以由一个元组(r,g,b)表示， r,g,b通常是不超过255的整数</p></li><li><p>图像模式<br>RGB：一个像素有红、绿、蓝三个分量<br>RGBA：一个像素有红、绿、蓝三个分量，以及透明度分量<br>CYMK：一个像素有有青色（Cyan）、洋红色（Magenta）、黄色（Yellow）、黑色(K代表黑)四个分量，即每个像素用元组(c,y,m,k)表示，对应于彩色打印机或者印刷机的4种颜色的墨水。<br>L：黑白图像。每个像素就是一个整数，代表灰度。</p></li></ul><h1 id="图像的缩放"><a href="#图像的缩放" class="headerlink" title="图像的缩放"></a>图像的缩放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意，安装时 pip install pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment">#导入Image类进行图像处理</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>) <span class="comment">#将图像文件载入对象img</span></span><br><span class="line">w,h = img.size <span class="comment">#获取图像的宽和高（单位:像素),img.size是个元组</span></span><br><span class="line">newSize = (w//<span class="number">2</span>,h//<span class="number">2</span>) <span class="comment">#生成一个新的图像尺寸</span></span><br><span class="line">newImg = img.resize(newSize) <span class="comment">#得到一张原图像一半大小的新图像</span></span><br><span class="line"></span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass_half.jpg&quot;</span>) <span class="comment">#保存新图像文件</span></span><br><span class="line"></span><br><span class="line">newImg.thumbnail((<span class="number">128</span>,<span class="number">128</span>)) <span class="comment">#变成宽高各128像素的缩略图</span></span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass_thumb.png&quot;</span>, <span class="string">&quot;PNG&quot;</span>)</span><br><span class="line"><span class="comment">#保存新图像文件为png文件</span></span><br><span class="line">newImg.show() <span class="comment">#显示图像文件</span></span><br></pre></td></tr></table></figure><h1 id="图像的旋转、翻转图像、-和滤镜效果"><a href="#图像的旋转、翻转图像、-和滤镜效果" class="headerlink" title="图像的旋转、翻转图像、 和滤镜效果"></a>图像的旋转、翻转图像、 和滤镜效果</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFilter <span class="comment">#实现滤镜效果需要</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass_half.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.<span class="built_in">format</span>, img.mode) <span class="comment">#&gt;&gt;JPEG RGB</span></span><br><span class="line"></span><br><span class="line">newImg = img.rotate(<span class="number">90</span>, expand = <span class="literal">True</span>) <span class="comment">#图像逆时针旋转90度</span></span><br><span class="line">newImg.show()</span><br><span class="line">newImg = img.transpose(Image.FLIP_LEFT_RIGHT) <span class="comment">#左右翻转</span></span><br><span class="line">newImg = img.transpose(Image.FLIP_TOP_BOTTOM) <span class="comment">#上下翻转(颠倒)</span></span><br><span class="line">newImg = img.<span class="built_in">filter</span>(ImageFilter.BLUR) <span class="comment">#模糊效果</span></span><br></pre></td></tr></table></figure><p>滤镜效果：<br>ImageFilter.CONTOUR 轮廓效果<br>ImageFilter.EDGE_ENHANCE 边缘增强<br>ImageFilter.EMBOSS 浮雕<br>ImageFilter.SMOOTH 平滑<br>ImageFilter.SHARPEN 锐化</p><h1 id="图像的裁剪"><a href="#图像的裁剪" class="headerlink" title="图像的裁剪"></a>图像的裁剪</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)</span><br><span class="line">w,h = img.size[<span class="number">0</span>]//<span class="number">3</span>,img.size[<span class="number">1</span>]//<span class="number">3</span></span><br><span class="line">gap = <span class="number">10</span> <span class="comment">#九宫图中相邻两幅子图间的空白宽10像素</span></span><br><span class="line">newImg = Image.new(<span class="string">&quot;RGB&quot;</span>,(w * <span class="number">3</span> + gap * <span class="number">2</span>, h * <span class="number">3</span> + gap * <span class="number">2</span>),<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">clipImg = img.crop((j*w,i*h,(j+<span class="number">1</span>)*w,(i+<span class="number">1</span>)*h))</span><br><span class="line"><span class="comment">#crop((左上角横坐标，左上角纵坐标，右下角横坐标，右下角纵坐标))</span></span><br><span class="line">clipImg.save(<span class="string">&quot;c:/tmp/pic/grass%d%d.jpg&quot;</span> % (i,j))</span><br><span class="line">newImg.paste(clipImg,(j*(w + gap), i * ( h + gap)))</span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass9.jpg&quot;</span>) <span class="comment">#保存九宫图</span></span><br><span class="line">newImg.show()</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/%E5%9B%BE%E5%83%8F%E7%9A%84%E8%A3%81%E5%89%AA.png" class="" title="图像的裁剪"> <h1 id="图像的素描化"><a href="#图像的素描化" class="headerlink" title="图像的素描化"></a>图像的素描化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSketch</span>(<span class="params">img, threshold</span>):</span><br><span class="line">w, h = img.size</span><br><span class="line">img = img.convert(<span class="string">&#x27;L&#x27;</span>) <span class="comment">#图像转换成灰度模式</span></span><br><span class="line">pix = img.load() <span class="comment">#获取像素矩阵</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(pix[x,y] - pix[x+<span class="number">1</span>,y+<span class="number">1</span>]) &gt;= threshold:</span><br><span class="line">pix[x,y] = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pix[x,y] = <span class="number">255</span></span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/models2.jpg&quot;</span>)</span><br><span class="line">img = makeSketch(img, <span class="number">15</span>) <span class="comment">#阈值threshold为15</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><h1 id="给图像添加水印"><a href="#给图像添加水印" class="headerlink" title="给图像添加水印"></a>给图像添加水印</h1><ul><li>原理： paste时可以用“掩膜”指定img的每个像素粘贴过去的透明度。如果透明度为0，则完全透明，如果透明度为255，则完全遮盖imgSrc原来的像素。</li><li>mask参数即为掩膜，是个模式为”L”的图片(Image对象)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgSrc.paste(img, (x, y), mask = msk)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMask</span>(<span class="params">img,isTransparent,alpha</span>):<span class="comment">#（图像，什么像素是透明，其他像素的透明度）</span></span><br><span class="line"><span class="comment"># 返回由img变出来的掩膜</span></span><br><span class="line"><span class="keyword">if</span> img.mode != <span class="string">&quot;RGBA&quot;</span>:</span><br><span class="line">img = img.convert(<span class="string">&#x27;RGBA&#x27;</span>) <span class="comment">#转换成RGBA模式的图像</span></span><br><span class="line">w, h = img.size</span><br><span class="line">pixels = img.load() <span class="comment">#获取像素矩阵</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">p = pixels[x,y] <span class="comment">#p是一个四元素元组(r,g,b,a)</span></span><br><span class="line"><span class="keyword">if</span> isTransparent(p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>]): <span class="comment">#判断p是否应该变成透明像素</span></span><br><span class="line"><span class="comment">#p[0],p[1],p[2] 分别是红、绿、蓝分量</span></span><br><span class="line">pixels[x,y] = (p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>],<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pixels[x,y] = (p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>],alpha)</span><br><span class="line">r, g, b, a = img.split() <span class="comment"># 分离出img中的四个分量,a就是掩膜</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/pku.png&quot;</span>)</span><br><span class="line">msk = getMask(img, <span class="keyword">lambda</span> r,g,b: r &gt;<span class="number">245</span> <span class="keyword">and</span> g &gt; <span class="number">245</span> <span class="keyword">and</span> b &gt; <span class="number">245</span>, <span class="number">130</span>)</span><br><span class="line">imgSrc = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/iceland1.png&quot;</span>)</span><br><span class="line">imgSrc.paste(img,(imgSrc.size[<span class="number">0</span>] - img.size[<span class="number">0</span>] - <span class="number">30</span> , imgSrc.size[<span class="number">1</span>] - img.size[<span class="number">1</span>] - <span class="number">30</span>),mask = msk)</span><br><span class="line"><span class="comment">#粘贴透明图像img到imgSrc的右下角，用a做掩膜</span></span><br><span class="line">imgSrc.show()</span><br></pre></td></tr></table></figure><h1 id="在图像上绘图和写字"><a href="#在图像上绘图和写字" class="headerlink" title="在图像上绘图和写字"></a>在图像上绘图和写字</h1><p>照片的exif信息，存有照片的所有信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ExifTags </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">correctOrientation</span>(<span class="params">img</span>):</span><br><span class="line"><span class="comment">#根据exif判断,img里的图像如有颠倒或旋转则生成一幅将其摆正的图返回</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(img, <span class="string">&quot;_getexif&quot;</span>): <span class="comment">#判断img有没有_ getexif函数</span></span><br><span class="line">exif = img._getexif()<span class="comment">#获取图像exi f信息,返回值是个字典</span></span><br><span class="line"><span class="keyword">if</span> exif != <span class="literal">None</span>:</span><br><span class="line">orientation = exif[getExifKeyCode(<span class="string">&#x27;Orientation&#x27;</span>)]</span><br><span class="line"><span class="keyword">if</span> orientation == <span class="number">3</span>:<span class="comment">#手机顶部朝右拍</span></span><br><span class="line">img = img.rotate(<span class="number">180</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> orientation == <span class="number">6</span>:<span class="comment">#手机正常竖着拍(顶部朝上)</span></span><br><span class="line">img = img.rotate(<span class="number">270</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> orientation == <span class="number">8</span>:<span class="comment">#手机顶部朝下拍</span></span><br><span class="line">img = img.rotate(<span class="number">90</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getExifKeyCode</span>(<span class="params">keyStr</span>):<span class="comment">#根据属性名称字符串求属性代号</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ExifTags.TAGS.items():</span><br><span class="line"><span class="keyword">if</span> x[<span class="number">1</span>] == keyStr:</span><br><span class="line"><span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeTextToImage</span>(<span class="params">img, text, myFont</span>):</span><br><span class="line"><span class="comment">#在img中以字体myFont在右下角写入字符串text</span></span><br><span class="line"><span class="comment">#会改变img中的图像</span></span><br><span class="line">W, h = img.size</span><br><span class="line">fw, fh = myFont.getsize(text) <span class="comment">#求text显示出来的高度, 宽度</span></span><br><span class="line">draw = ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img, 上画图、写字</span></span><br><span class="line">x,y = w - fw - <span class="number">30</span>, h - fh - <span class="number">30</span><span class="comment">#计算text的左上角的位置</span></span><br><span class="line">draw.rectangle((x - <span class="number">5</span>, y - <span class="number">5</span>, x + fw + <span class="number">5</span>, y + fh + <span class="number">5</span>), outline= <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">draw.text((x ,y), text, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), font=myFont)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十章玩转Python生态</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-期末考试</title>
    <link href="http://hibiscidai.com/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    <id>http://hibiscidai.com/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</id>
    <published>2023-01-14T00:00:00.000Z</published>
    <updated>2023-01-14T14:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>实用Python程序设计MOOC-期末考试</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-期末考试"><a href="#实用Python程序设计MOOC-期末考试" class="headerlink" title="实用Python程序设计MOOC-期末考试"></a>实用Python程序设计MOOC-期末考试</h1><h1 id="001-好数坏数"><a href="#001-好数坏数" class="headerlink" title="001:好数坏数"></a>001:好数坏数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个正整数，如果是5和7的公倍数，就输出 best，如果不是7的倍数，但是是5的倍数就输出good，其它情况就输出bad。注意这些词都是小写</p></li><li><p>输入</p></li></ul><p>一个正整数n</p><ul><li>输出</li></ul><p>根据要求输出best,good或bad</p><ul><li>样例输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例#1</span><br><span class="line">35</span><br><span class="line">样例#2</span><br><span class="line">14</span><br><span class="line">样例#3</span><br><span class="line">10</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例#1</span><br><span class="line">best</span><br><span class="line">样例#2</span><br><span class="line">bad</span><br><span class="line">样例#3</span><br><span class="line">good</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span> ==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;best&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span> !=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;good&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>c8e2bd0b8c41c837477d97d171d2b0d18c94b1e12e165f267ba4eae0a9820feb</p><h1 id="002-买手办"><a href="#002-买手办" class="headerlink" title="002:买手办"></a>002:买手办</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>小明到了手办店非常开心，要大买特买。但他不是大富豪，所以只能买不超过60元手办。<br>现在知道若干手办的价钱，请计算小明一共要花掉多少钱。</p></li><li><p>输入<br>一行，若干个正整数，每个正整数表示一个手办的价钱</p></li><li><p>输出<br>小明会买下所有不超过60元的手办。输出他将要花掉多少钱</p></li><li><p>样例输入<br>120 60 60 30 50 10 100</p></li><li><p>样例输出<br>210</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inputs = <span class="built_in">input</span>()</span><br><span class="line">strs = inputs.split()</span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">    temp = <span class="built_in">int</span>(strs[i])</span><br><span class="line">    <span class="keyword">if</span> (temp &lt;= <span class="number">60</span>):</span><br><span class="line">        result += temp</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>38909039d002e176bb0d31314f80d7f412c6cfc1470a7b966f4375e61ffb47f0</p><h1 id="003-字符计数"><a href="#003-字符计数" class="headerlink" title="003:字符计数"></a>003:字符计数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个句子中有多个单词，单词之间可能有一个或多个空格。给定一个字符，请计算该字符在每个单词中的出现次数。 本题目不区分大小写字母。例如，字符A与字符a在单词Abandon中的出现次数都认为是2。 本题目有多组输入数据。</p></li><li><p>输入<br>第一行一个整数n，表示数据组数；<br>接下来共2n行，每两行为一组：<br>每组中第一行为给定的字符，保证为小写或大写字母；<br>每组中第二行为输入的句子，保证只由大小写字母或空格组成，且第一个单词前与最后一个单词后都没有空格。</p></li><li><p>输出<br>n行，每行若干个整数，表示句子的每个单词中，给定字符的出现次数。<br>每行的相邻整数之间用一个空格分隔。</p></li></ul><p>行末多输出了空格没有关系</p><ul><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">a</span><br><span class="line">Abandon that</span><br><span class="line">B</span><br><span class="line">Bob  is   the  BIG BOSS</span><br><span class="line">z</span><br><span class="line">Zelda   ZZZ</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">2 0 0 1 1</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zu = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(zu):</span><br><span class="line">    itChar = <span class="built_in">input</span>().lower()</span><br><span class="line"></span><br><span class="line">    comChar = <span class="built_in">input</span>().lower()</span><br><span class="line">    strs = comChar.split()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">        <span class="built_in">print</span>(strs[j].count(itChar), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>46eaa2d6f68b4a55bbeee44daf4e7dcf9959a3d39d9cf751dee5a7de05cd8aaa</p><h1 id="004-括号内的信息"><a href="#004-括号内的信息" class="headerlink" title="004:括号内的信息"></a>004:括号内的信息</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>程序填空</li></ul><p>对于给定的一行字符串，输出其中每一对小括号里的信息。如果找不到配对的小括号，就输出NONE。</p><p>“配对”指的是一个左括号与其右侧最近的右括号的匹配，例如”(a)(b)”里，第一个左括号与第一个右括号配对，第二个左括号与第二个右括号配对。</p><p>本题目保证配对的小括号里一定有内容，也就是不会出现”a()b”这样的字符串。</p><p>本题目保证配对的小括号不嵌套，也就是不会出现”xy(a(bc)def)z”这样的字符串。</p><p>注意，尽管类似”123(ab)cd(ef)gh(ij)k”这样的字符串中也存在”(…(…)…)”的模式，但此时“配对”的小括号没有嵌套，因此是满足题目限制的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">exit = <span class="number">10</span>   <span class="comment">#此句没用</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment">#填空内容应为 pt = &quot;XXXX&quot;，即写一个正则表达式pt</span></span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    k = re.findall(pt,s)</span><br><span class="line">    <span class="keyword">if</span> k:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> k:</span><br><span class="line">            <span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>输入<br>第一行一个整数n，表示输入字符串行数。<br>接下来n行里每行一个不包含空格的字符串s。</p></li><li><p>输出<br>输出共n行，每行若干个字符串，相邻字符串间用一个空格分隔，表示每行输入字符串中各个小括号里的内容。</p></li><li><p>样例输入</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1;!(#234)5@6(78)9(0)*</span><br><span class="line">0(a))(()(bcd)12</span><br><span class="line">)Nothing(</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">234 78 0</span></span><br><span class="line">a ( bcd</span><br><span class="line">NONE</span><br></pre></td></tr></table></figure><ul><li>提示<br>在正则表达式中没有分组时，re.findall返回所有匹配子串构成的列表。</li></ul><p>有且只有一个分组时，re.findall返回的是一个子串的列表，每个元素是一个匹配子串中分组对应的内容。</p><p>在正则表达式中有超过一个分组时，re.findall返回的是一个元组的列表，每个元组对应于一个匹配的子串，元组里的元素，依次是1号分组、2号分组、3号分组……匹配的内容</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt = <span class="string">&quot;[(](.*?)[)]&quot;</span></span><br></pre></td></tr></table></figure><p>432b8d97444ad359ec196959b7d8ea99dcf34e2bbc2643c5b327e6ed29bdbb42</p><h1 id="005-纸币兑换硬币"><a href="#005-纸币兑换硬币" class="headerlink" title="005:纸币兑换硬币"></a>005:纸币兑换硬币</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>用一张面值为x元的纸币换面值为y角、z角的硬币，每种硬币至少一枚，问有几种换法？请注意，纸币的单位是元，硬币的单位是角，一元等于10角。</p></li><li><p>输入<br>输入三个正整数x、y和z</p></li><li><p>输出<br>输出一个正整数，为换法的种数</p></li><li><p>样例输入</p></li></ul><p>样例#1<br>1 2 5<br>样例#2<br>2 2 4<br>样例#3<br>3 4 6</p><ul><li>样例输出</li></ul><p>样例#1<br>0<br>样例#2<br>4<br>样例#3<br>2</p><ul><li>提示<br>枚举y、z可能枚数的全部组合</li></ul><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inputs = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(inputs[<span class="number">0</span>])*<span class="number">10</span></span><br><span class="line">y = <span class="built_in">int</span>(inputs[<span class="number">1</span>])</span><br><span class="line">z = <span class="built_in">int</span>(inputs[<span class="number">2</span>])</span><br><span class="line">counts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x // y +<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x // z + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i * y + j * z == x:</span><br><span class="line">            counts += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(counts)</span><br></pre></td></tr></table></figure><p>ad18cfccb35e13c6240ec08fc75f7e4fdc032834913950a6930516ca93a441e0</p><h1 id="006-商品评分"><a href="#006-商品评分" class="headerlink" title="006:商品评分"></a>006:商品评分</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>购物网站上有许多商品。每个商品都会得到若干用户评分（为1-10的正整数），取这些评分的平均数作为商品总评分。 给出各个商品的名称及它们对应的若干用户评分，请按照商品总评分从高到低的顺序输出商品名称；如果两个商品总评分相同，则用户评分数量多的商品排在前面。</li></ul><p>题目保证商品名称各不相同，且不会出现两个总评分与用户评分数量完全相同的商品。 本题目有多组输入数据。</p><ul><li><p>输入<br>第一行一个整数n，表示数据组数；<br>接下来n组数据，每组数据中：<br>第一行一个整数m，表示该组数据中商品个数；<br>接下来m行，每行由一个字符串s（只含大小写字母）和若干个正整数（至多50个）组成，分别表示商品名称和用户评分。</p></li><li><p>输出<br>对于每组数据，按题目要求的排序结果，每行输出一个商品名称。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">Apple 10 8</span><br><span class="line">Banana 9 9 9</span><br><span class="line">Peach 10 9</span><br><span class="line">3</span><br><span class="line">Apple 10 8</span><br><span class="line">Banana 9 </span><br><span class="line">Peach 9 8</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Peach</span><br><span class="line">Banana</span><br><span class="line">Apple</span><br><span class="line">Apple</span><br><span class="line">Banana</span><br><span class="line">Peach</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">goodList</span>(<span class="params">good_list: <span class="built_in">list</span>, line: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(line)):</span><br><span class="line">        line[i] = <span class="built_in">int</span>(line[i])</span><br><span class="line">    good = &#123;&#125;</span><br><span class="line">    good[<span class="string">&#x27;name&#x27;</span>] = line[<span class="number">0</span>]</span><br><span class="line">    good[<span class="string">&#x27;scores&#x27;</span>] = line[<span class="number">1</span>:]</span><br><span class="line">    ave = <span class="built_in">sum</span>(good[<span class="string">&#x27;scores&#x27;</span>]) / <span class="built_in">len</span>(good[<span class="string">&#x27;scores&#x27;</span>])</span><br><span class="line">    people = <span class="built_in">len</span>(good[<span class="string">&#x27;scores&#x27;</span>])</span><br><span class="line">    good[<span class="string">&#x27;information&#x27;</span>] = [ave, people]</span><br><span class="line">    good_list.append(good)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">group</span>(<span class="params">num</span>):</span><br><span class="line">    good_li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        line = <span class="built_in">input</span>().split()</span><br><span class="line">        goodList(good_li, line)</span><br><span class="line">        good_li.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;information&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> good_li[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">        group(num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>d6233bd7ebd2278f96851a722e0fee4368a35a24b788179f89adedf50531ea9c</p><h1 id="007-物资统计"><a href="#007-物资统计" class="headerlink" title="007:物资统计"></a>007:物资统计</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>新冠肺炎肆虐全球，中国提供物资支援世界各国。现需统计世界各国总共收到的物资件数。</p></li><li><p>输入<br>第一行输入一个数n，代表中国援外航班数。<br>后面是n行，每行代表一个航班。<br>每个航班的信息包含一个整数，表示物资数量，以及一个国名。国名不含空格。</p></li><li><p>输出<br>各国的所接收到的物资总件数，按各国名称的字典序输出。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">10 USA</span><br><span class="line">20 Germany</span><br><span class="line">30 Japan</span><br><span class="line">40 Korea</span><br><span class="line">70 Japan</span><br><span class="line">20 USA</span><br><span class="line">40 Germany</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Germany 60</span><br><span class="line">Japan 100</span><br><span class="line">Korea 40</span><br><span class="line">USA 30</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">goods = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    str1 = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> str1[<span class="number">1</span>] <span class="keyword">in</span> goods:</span><br><span class="line">        goods[str1[<span class="number">1</span>]] += <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        goods[str1[<span class="number">1</span>]] = <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> goods.items():</span><br><span class="line">    results.append(x)</span><br><span class="line">results.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="built_in">print</span>(results[x][<span class="number">0</span>],results[x][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>572d3e00926e5407e2de4b9e15d5902c7ea2613deb938b146141f51fae0192ee</p><h1 id="008-医院负荷"><a href="#008-医院负荷" class="headerlink" title="008:医院负荷"></a>008:医院负荷</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>一家医院中，同时住院的患者人数称为医院的负荷。</li></ul><p>卫生部门获取到了大量的病人住院/出院记录，并希望能据此统计出，在所有时刻单个医院的最大负荷是多少。</p><p>住院记录的格式是一行两个正整数p和h，分别表示患者编号和医院编号。</p><p>出院记录的格式是一行一个正整数p和一个-1，其中p表示患者编号。</p><p>为简便起见，假设每家医院一开始都没有住院患者。</p><p>题目保证，每个患者只会住院一次并至多出院一次，且任何患者在出院之前一定会在某家医院住院。（不保证记录结束时，所有患者都已出院）</p><p>例如，对于下面的8条记录：</p><p>1 1<br>4 3<br>3 1<br>5 1<br>8 3<br>3 -1<br>1 -1<br>2 1</p><p>病人住院/出院过程如下：</p><p>①1号患者在1号医院住院，此时1号医院负荷变为1；</p><p>②4号患者在3号医院住院，此时3号医院负荷变为1；</p><p>③3号患者在1号医院住院，此时1号医院负荷变为2；</p><p>④5号患者在1号医院住院，此时1号医院负荷变为3；</p><p>⑤8号患者在3号医院住院，此时3号医院负荷变为2；</p><p>⑥3号患者出院，由于3号患者之前在1号医院住院，因此1号医院负荷变为2；</p><p>⑦1号患者出院，由于1号患者之前在1号医院住院，因此1号医院负荷变为1；</p><p>⑧2号患者在1号医院住院，此时1号医院负荷变为2。</p><p>在整个过程中，单个医院最大负荷量是3（1号医院在第4条记录时达到该负荷峰值）。</p><p>请编写程序来计算医院的最大负荷。</p><ul><li><p>输入<br>本题目有多组输入数据。<br>第一行一个整数n，表示输入数据的组数；<br>接下来共n组数据，每组数据中：<br>第一行为一个整数m，表示该组数据中住院/出院记录的条数；<br>接下来m行，每行为一条住院/出院记录，格式如上所述。</p></li><li><p>输出<br>对每组输入数据，输出一个整数，表示单个医院曾经达到的最大负荷</p></li><li><p>样例输入<br>2<br>8<br>1 1<br>4 3<br>3 1<br>5 1<br>8 3<br>3 -1<br>1 -1<br>2 1<br>1<br>1 2</p></li><li><p>样例输出<br>3<br>1</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xxx = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(xxx):</span><br><span class="line">    hospitai = &#123;&#125;</span><br><span class="line">    patient = &#123;&#125;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    fuhe = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">sum</span>):</span><br><span class="line">        temp = <span class="built_in">input</span>().split()</span><br><span class="line">        p = temp[<span class="number">0</span>]</span><br><span class="line">        h = temp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> patient:    <span class="comment">#找不到这个病人，需要住院</span></span><br><span class="line">            patient[p] = h</span><br><span class="line">            <span class="keyword">if</span> h <span class="keyword">in</span> hospitai:</span><br><span class="line">                hospitai[h] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hospitai[h] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment">#找到了这个病人，改病人需要出院</span></span><br><span class="line">            hospitai[patient[p]] -= <span class="number">1</span></span><br><span class="line">            patient[p] = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> hospitai.items():</span><br><span class="line">            results.append(x)</span><br><span class="line">        results.sort(key=<span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fuhe &lt; results[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">            fuhe = results[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(fuhe)</span><br></pre></td></tr></table></figure><p>9e2f4e192cca2730bd510c227c05a299a545050fb00f028601dda22cc03af043</p><h1 id="009-矩阵换行求边缘和"><a href="#009-矩阵换行求边缘和" class="headerlink" title="009:矩阵换行求边缘和"></a>009:矩阵换行求边缘和</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个整数矩阵，交换其中的两行，然后计算位于矩阵边缘的元素之和。所谓矩阵边缘的元素，就是第一行和最后一行的元素以及第一列和最后一列的元素。</p></li><li><p>输入<br>第一行分别为矩阵的行数m和列数n（m &lt; 100，n &lt; 100），两者之间以一个空格分开。<br>接下来输入的m行数据中，每行包含n个整数，整数之间以一个空格分开。<br>在接下来是两个整数x,y，表示需要将矩阵的第x行和第y行交换一下。</p></li><li><p>输出<br>输出交换行之后的矩阵的边缘元素和</p></li><li><p>样例输入<br>3 3<br>3 4 1<br>3 7 1<br>2 0 1<br>1 2</p></li><li><p>样例输出<br>18</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">line1 = <span class="built_in">input</span>().split()</span><br><span class="line">m = <span class="built_in">int</span>(line1[<span class="number">0</span>])</span><br><span class="line">n = <span class="built_in">int</span>(line1[<span class="number">1</span>])</span><br><span class="line">juzhen = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    hang = <span class="built_in">input</span>().split()</span><br><span class="line">    juzhen.append(hang)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(juzhen)</span></span><br><span class="line"></span><br><span class="line">line1 = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(line1[<span class="number">0</span>])</span><br><span class="line">y = <span class="built_in">int</span>(line1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">juzhen2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">if</span> i == x-<span class="number">1</span>:</span><br><span class="line">        juzhen2.append(juzhen[y-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> i == y-<span class="number">1</span>:</span><br><span class="line">        juzhen2.append(juzhen[x-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        juzhen2.append(juzhen[i])</span><br><span class="line"><span class="comment"># print(juzhen2)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">or</span> (i == m-<span class="number">1</span>) <span class="keyword">or</span> (j == <span class="number">0</span>) <span class="keyword">or</span> (j == n-<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span> += <span class="built_in">int</span>(juzhen2[i][j])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>80dbeddbb3e06e11cb1c5a9a3b9ceca97fab741baad9196d12391288deefdd00</p><h1 id="010-双重tag里的整数"><a href="#010-双重tag里的整数" class="headerlink" title="010:双重tag里的整数"></a>010:双重tag里的整数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>tag是形如<br>“<X>A</X>“的字符串，X是一个长度不为0且不超过5的字符串，由大小写字母构成。</li></ul><p>“<X>“ 和 “</X>“里面的X必须相同。<br>例如：</p><p><abc>xyd</abc> 是一个tag<br>但是  <abc>xyd&lt;/bc&gt; 不是一个tag。</p><p>双重tag形式如下：<br>“<X>A<Y>B</Y>C</X>“</p><p>X,Y都是一个长度不为0且不超过5的字符串，由大小写字母构成。<br>“<X>“ 和 “</X>“里面的X必须相同，<br>“<Y>“和”</Y>“里面的Y必须相同。</p><p>“<Y>B</Y>“称为内重tag。”<Y>“只和离他最近的”</Y>“构成内重tag。<br>A,B,C是任意长度不为0的字符串。</p><p>请找出B中的全部不超过4位的整数。00003 算超过4位。</p><ul><li><p>输入<br>若干行。数据保证一个tag内部最多只有一个tag</p></li><li><p>输出<br>对每行，依次输出双重tag中的所有不超过4位且没有前导0的整数。单个的0算没有前导0。如果找不到，就输出NONE</p></li><li><p>样例输入<br>bac<x><a>bb123<c>aaa 292 bbb 384 j 67477 0 dd 04 05hd</c>c12c</a>&lt;/y&gt;def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</x>&lt;/y&gt;k&lt;/x&gt;def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</y>k</x>def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</y></x>def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<abcdefg>d<y>3 4</y></abcdefg>def<br>k<a>1<c>12 35</a>78&lt;/a&gt;&lt;/c&gt;&lt;/B&gt;<x>d<y>3 4</y></x>def</p></li><li><p>样例输出<br>292 384 0<br>12 35 3 4<br>12 35 3 4<br>12 35<br>12 35<br>NONE</p></li><li><p>提示<br>读入若干行，需要用 try…except 来判断结束</p></li></ul><h1 id="011-跳水比赛计分"><a href="#011-跳水比赛计分" class="headerlink" title="011:跳水比赛计分"></a>011:跳水比赛计分</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>有若干个同学参加跳水比赛，每个同学都有若干位老师给他打分。 一共有m条打分记录，每一条记录的格式都是这样的：”id score”，表示编号为id的同学获得了score分。（id和score都是正整数） 现在这m条记录依次送到了你的手上，你想在每一条记录到达的时候，都快速地计算出这个编号为id的同学目前得到的平均分是多少。平均只取整数部分即可，小数部分直接去掉，不要四舍五入。</p></li><li><p>输入<br>第一行，一个整数m。(m &lt;= 100000)<br>接下来m行，每行两个正整数代表id和score.</p></li><li><p>输出<br>对每行的 id score, 输出id同学到目前为止的平均分</p></li><li><p>样例输入<br>4<br>1 100<br>2 90<br>2 95<br>1 70</p></li><li><p>样例输出<br>100<br>90<br>92<br>85</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">id_socre_group = &#123;&#125;</span><br><span class="line">id_count_group = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    temp1 = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">int</span>(temp1[<span class="number">0</span>])</span><br><span class="line">    score = <span class="built_in">int</span>(temp1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">in</span> id_socre_group:</span><br><span class="line">        id_socre_group[<span class="built_in">id</span>] += score</span><br><span class="line">        id_count_group[<span class="built_in">id</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        id_socre_group[<span class="built_in">id</span>] = score</span><br><span class="line">        id_count_group[<span class="built_in">id</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(id_socre_group[<span class="built_in">id</span>]/id_count_group[<span class="built_in">id</span>]))</span><br></pre></td></tr></table></figure><p>f785e4b4080eba8da831dbebd86c2cc76744af18d5fd0ed35ab82e4447e02860</p><h1 id="012-藏头诗"><a href="#012-藏头诗" class="headerlink" title="012:藏头诗"></a>012:藏头诗</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>雍正皇帝不能忍受任何人说清朝或者他坏话，以至于他大兴文字狱。因此老百姓书写任何东西都得很小心。诗人写诗也得担心。一些诗人发明了一种奇怪写诗方法，只有TA们朋友圈的人才能看懂。这样的诗统称为藏头诗。</li></ul><p>一首藏头诗，是一个N×N的字符矩阵，看起来杂乱无章没啥意思。但是，如果你用特定的顺序读这些字符，你就能看懂。正确的阅读顺序如下面左图所示：</p><img src="/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/012%E8%97%8F%E5%A4%B4%E8%AF%97.png" class="" title="012藏头诗"><p>顺着箭头读，你会看到“THISISAVERYGOODPOEMITHINK”,这就有点意思了。</p><p>过了一段时间后，诗人们发现，雍正的杀手，血滴子，也学会了读这样的诗。这很危险。所以诗人们发明了新的写诗顺序，如上面右图所示。</p><p>诗人想把所有的老写法的诗，都转成新写法的诗歌。请你帮助TA们。</p><ul><li><p>输入<br>一共不超过10组数据。<br>在每组数据里：<br>第一行是一个整数N ( 1 &lt;= N &lt;= 100), 表明诗是一个N×N 的字符矩阵，仅包含大写字母。<br>接下来是N行。每行是一个N个字符的字符串。这N行表示一首老写法的诗</p></li><li><p>输出<br>对每组数据，输出新写法的诗。</p></li><li><p>样例输入<br>5<br>THSAD<br>IIVOP<br>SEOOH<br>RGETI<br>YMINK<br>2<br>AB<br>CD<br>4<br>ABCD<br>EFGH<br>IJKL<br>MNOP</p></li><li><p>样例输出<br>THISI<br>POEMS<br>DNKIA<br>OIHTV<br>OGYRE<br>AB<br>DC<br>ABEI<br>KHLF<br>NPOC<br>MJGD</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="013-打印任意年份任意月份的日历"><a href="#013-打印任意年份任意月份的日历" class="headerlink" title="013:打印任意年份任意月份的日历"></a>013:打印任意年份任意月份的日历</h1><blockquote><p>时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定公元year年month月，打印该月月历</p></li><li><p>输入<br>第一行一个输入整数n，表示有n组数据。<br>后面n行，每行一组数据，是两个整数，分别代表year( 0 &lt; year &lt;= 100000）和month（数据合法，1&lt;=month&lt;=12），用空格隔开</p></li><li><p>输出<br>对于每组数据：<br>第一行输出月份（英文表示，首字母大写）和年份，用逗号隔开；<br>第二行输出星期几， Sun Mon Tue Wed Thu Fri Sat，用\t隔开；<br>接下来输出当月日期，日期用\t隔开，第一周缺天直接输出\t。<br>（行与行之间无空行，每组数据之间无空行）<br>行末多出来\t没有关系<br>12个月份的单词是：<br>“January”,”February”, “March”, “April”, “May”, “June”, “July”, “August”, “September”, “October”,”November”, “December”</p></li><li><p>样例输入<br>3<br>2019 12<br>403 5<br>23456 7</p></li><li><p>样例输出<br>December,2019<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat<br>1     2     3     4     5     6     7<br>8     9     10     11     12     13     14<br>15     16     17     18     19     20     21<br>22     23     24     25     26     27     28<br>29     30     31<br>May,403<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat</p><pre><code>          1     2     3     </code></pre><p>4     5     6     7     8     9     10<br>11     12     13     14     15     16     17<br>18     19     20     21     22     23     24<br>25     26     27     28     29     30     31<br>July,23456<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat</p><pre><code>  1     2     3     4     5     </code></pre><p>6     7     8     9     10     11     12<br>13     14     15     16     17     18     19<br>20     21     22     23     24     25     26<br>27     28     29     30     31</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="comment"># 判断是否为闰年</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_num_of_days_in_month</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 给定年月返回月份的天数</span></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">elif</span> is_leap_year(year):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_total_num_of_day</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 自1800年1月1日以来过了多少天</span></span><br><span class="line">    days = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1800</span>, year):</span><br><span class="line">        <span class="keyword">if</span> is_leap_year(y):</span><br><span class="line">            days += <span class="number">366</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            days += <span class="number">365</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, month):</span><br><span class="line">        days += get_num_of_days_in_month(year, m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> days</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_start_day</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 返回当月1日是星期几，由1800.01.01是星期三推算</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + get_total_num_of_day(year, month) % <span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 月份与名称对应的字典</span></span><br><span class="line">month_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;January&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;February&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;March&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;April&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;May&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;June&#x27;</span>,</span><br><span class="line">              <span class="number">7</span>: <span class="string">&#x27;July&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;August&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;September&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;October&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;November&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;December&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_name</span>(<span class="params">month</span>):</span><br><span class="line">    <span class="comment"># 返回当月的名称</span></span><br><span class="line">    <span class="keyword">return</span> month_dict[month]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_month_title</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 打印日历的首部</span></span><br><span class="line">    <span class="built_in">print</span>(get_month_name(month),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(year)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Sun\tMon\tTue\tWed\tThu\tFri\tSat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_month_body</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印日历正文</span></span><br><span class="line"><span class="string">    格式说明：空两个空格，每天的长度为5</span></span><br><span class="line"><span class="string">    需要注意的是print加逗号会多一个空格</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    i = get_start_day(year, month)</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">7</span>:</span><br><span class="line">        <span class="comment"># print(&#x27;    &#x27; * i,end=&quot;&quot;)   # 从星期几开始则空5*几个空格</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 从星期几开始则空5*几个空格</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, get_num_of_days_in_month(year, month)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;%4d&#x27; %j,end=&quot;&quot;) # 宽度控制，4+1=5</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d&#x27;</span> % j,end=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 宽度控制，4+1=5</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:  <span class="comment"># i用于计数和换行</span></span><br><span class="line">            <span class="built_in">print</span>()   <span class="comment"># 每换行一次行首继续空格</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#   主函数部分</span></span><br><span class="line">int1 = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int1):</span><br><span class="line">    str1 = <span class="built_in">input</span>().split()</span><br><span class="line">    year = <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line">    month = <span class="built_in">int</span>(str1[<span class="number">1</span>])</span><br><span class="line">    print_month_title(year, month)</span><br><span class="line">    print_month_body(year, month)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-期末考试</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</title>
    <link href="http://hibiscidai.com/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://hibiscidai.com/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-10-11T00:00:00.000Z</published>
    <updated>2022-10-21T02:25:45.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93.png" class="" title="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"><p>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"><a href="#实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库" class="headerlink" title="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"></a>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</h1><h1 id="文本文件读写"><a href="#文本文件读写" class="headerlink" title="文本文件读写"></a>文本文件读写</h1><h2 id="文本文件读写概述"><a href="#文本文件读写概述" class="headerlink" title="文本文件读写概述"></a>文本文件读写概述</h2><ul><li>open函数打开文件，将返回值放入一个变量，例如f</li><li>用<code>f.write</code>函数写入文件</li><li>用<code>f.readlines</code>函数读取全部文件内容</li><li>用<code>f.readline</code>函数读取文件- 行</li><li>用<code>f.close()</code>函数关闭文件</li><li>用<code>f.read()</code>读取全部文件内容。返回一个字符串，包含文件全部内容</li></ul><h2 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)<span class="comment">#文件夹c:\tmp必须事先存在</span></span><br><span class="line"><span class="comment">#&quot;w&quot;表示写入,用此种方式打开文件,若文件本来存在,就会被覆盖</span></span><br><span class="line">a.write(<span class="string">&quot;good\n&quot;</span>)</span><br><span class="line">a.write(<span class="string">&quot;好啊\n&quot;</span>)</span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure><p>运行后文件<code>c:\tmp\t.txt</code>内容：<br>good<br>好啊</p><h2 id="文本文件读写-1"><a href="#文本文件读写-1" class="headerlink" title="文本文件读写"></a>文本文件读写</h2><h3 id="读取现有文件"><a href="#读取现有文件" class="headerlink" title="读取现有文件"></a>读取现有文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)<span class="comment">#&quot;r&quot;表示读取</span></span><br><span class="line">lines = f.readlines() <span class="comment">#每一行都带结尾的换行符&quot;\n&quot;</span></span><br><span class="line">f.close()<span class="comment">#lines是个字符串列表，每个元素是一行</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br>good<br>好啊</p><h3 id="读取现有文件-1"><a href="#读取现有文件-1" class="headerlink" title="读取现有文件"></a>读取现有文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不用readlines也行</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> f:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="用readline读文件中的一行"><a href="#用readline读文件中的一行" class="headerlink" title="用readline读文件中的一行"></a>用readline读文件中的一行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data1 = infile.readline() <span class="comment">#data1带结尾的换行符&quot;\n&quot;。空行也有一个字符，就是&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">if</span> data1 == <span class="string">&quot;&quot;</span>:<span class="comment">#此条件满足就代表文件结束</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">data1 = data1.strip() <span class="comment">#去掉两头空格，包括结尾的&quot;\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line"></span><br><span class="line">infile.close()</span><br></pre></td></tr></table></figure><ul><li>如果要读取的文件不存在会引发异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\ts.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)<span class="comment">#若文件不存在，会产生异常，跳到except后面执行</span></span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)<span class="comment">#&gt;&gt; [Errno 2] No such file or directory: &#x27;c:\\tmp\\ts. txt &#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加文件内容"><a href="#添加文件内容" class="headerlink" title="添加文件内容"></a>添加文件内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)<span class="comment">#&quot;a&quot;要打开文件添加内容。若文件本来不存在，就创建文件</span></span><br><span class="line">f.write(<span class="string">&quot;新增行\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;ok\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>good<br>好啊<br>新增行<br>ok</p><h1 id="文本文件的编码"><a href="#文本文件的编码" class="headerlink" title="文本文件的编码"></a>文本文件的编码</h1><ul><li>常见编码有gbk和utf-8两种。打开文件时如果编码不对，则不能正确读取文件</li><li>ANSI对应gbk</li><li>写入文件时， 如果不指定编码，则用操作系统的缺省编码</li></ul><p>Windows：gbk，可能从win10开始是utf-8.<br>Linux，MacOs：utf-8</p><h2 id="python程序的编码"><a href="#python程序的编码" class="headerlink" title="python程序的编码"></a>python程序的编码</h2><p>py文件必须存成utf-8格式，才能运行如果存成ansi格式，则应该在文件开头写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建文件和读取文件时都可以指定编码"><a href="#创建文件和读取文件时都可以指定编码" class="headerlink" title="创建文件和读取文件时都可以指定编码"></a>创建文件和读取文件时都可以指定编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outfile = <span class="built_in">open</span>(<span class="string">&quot;C:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#若打开文件用于写入时不指定编码，则使用系统缺省编码，win10下也可能是Ansi(gbk)</span></span><br><span class="line">outfile.write(<span class="string">&quot;这很好ok\n&quot;</span>)</span><br><span class="line">outfile.write(<span class="string">&quot;这ok&quot;</span>)</span><br><span class="line">outfile.close()</span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">lines = infile.readlines()</span><br><span class="line">infile.close()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x.strip())</span><br></pre></td></tr></table></figure><h1 id="文件的路径"><a href="#文件的路径" class="headerlink" title="文件的路径"></a>文件的路径</h1><h2 id="open文件名参数的相对路径形式和绝对路径形式"><a href="#open文件名参数的相对路径形式和绝对路径形式" class="headerlink" title="open文件名参数的相对路径形式和绝对路径形式"></a>open文件名参数的相对路径形式和绝对路径形式</h2><h3 id="相对路径形式-文件名没有包含盘符"><a href="#相对路径形式-文件名没有包含盘符" class="headerlink" title="相对路径形式:文件名没有包含盘符"></a>相对路径形式:文件名没有包含盘符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹(当前路径)下</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;tmp/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#&quot;/&quot;写成&quot;\\&quot;效果也一样</span></span><br><span class="line"><span class="comment">#文件在当前文件夹下的tmp文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;tmp/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹下的tmp文件夹里面的test文件夹下面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上一层文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../../readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上两层文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../tmp2/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上一层的tmp2文件夹的test文件夹里面</span></span><br><span class="line"><span class="comment">#tmp2和当前文件夹是平级的</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;/tmp3/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前盘符的根文件夹下的tmp3/test/里面</span></span><br></pre></td></tr></table></figure><h3 id="绝对路径形式-文件名包含盘符"><a href="#绝对路径形式-文件名包含盘符" class="headerlink" title="绝对路径形式:文件名包含盘符"></a>绝对路径形式:文件名包含盘符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;d:/tmp/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">路径也叫文件夹，或者目录(path, folder, directory)</span><br></pre></td></tr></table></figure><h3 id="Python程序的“当前文件夹-当前路径，当前目录"><a href="#Python程序的“当前文件夹-当前路径，当前目录" class="headerlink" title="Python程序的“当前文件夹(当前路径，当前目录)"></a>Python程序的“当前文件夹(当前路径，当前目录)</h3><ul><li>程序运行时，会有一个”当前文件夹”，open打开文件时，如果文件名不是绝对路径形式，则都是相对于当前文件夹的。</li><li>一般情况下，<code>.py</code>文件所在的文件夹，就是程序运行时的当前文件夹。在Pycharm里面运行程序，就是如此。</li><li>程序可以获取当前文件夹:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())<span class="comment">#os.getcdw()获取当前文件夹</span></span><br><span class="line"><span class="comment">#&gt;&gt;c:\tmp5\test</span></span><br></pre></td></tr></table></figure><ul><li>在命令行方式运行程序时，cmd窗口的当前文件夹，就是程序的当前文件夹，不论程序存在哪里。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:\tmp5\test\t1.py如下:</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：C:\WINDOWS\system32\cmd.exe</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;python c:\tmp5\test\tl.py</span><br><span class="line">C:\music\violin</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;</span><br></pre></td></tr></table></figure><ul><li>程序运行期间可以改变当前文件夹</li></ul><p>c:\tmp5\test\t1.py如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line">os.chdir(<span class="string">&quot;c:/tmp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure></p><p>则:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：C:WINDOWS\system32\cmd.exe</span><br><span class="line">C:\music\violin&gt;python c:\tmp5\test\t1.py</span><br><span class="line">C:\music\violin</span><br><span class="line">C:\tmp</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;</span><br></pre></td></tr></table></figure><h1 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h1><h2 id="Python的文件夹操作函数"><a href="#Python的文件夹操作函数" class="headerlink" title="Python的文件夹操作函数"></a>Python的文件夹操作函数</h2><h3 id="os库和shutil库"><a href="#os库和shutil库" class="headerlink" title="os库和shutil库"></a>os库和shutil库</h3><p>os库和shutil库中有一些函数可以用来操作文件和文件夹(文件夹也称为“目录”)</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">函数作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>os.chdir(x)</code></td><td style="text-align:center">将程序的当前文件夹设置为x</td></tr><tr><td style="text-align:center"><code>os.getcwd()</code></td><td style="text-align:center">求程序的当前文件夹</td></tr><tr><td style="text-align:center"><code>os.listdir(x)</code></td><td style="text-align:center">返回一个列表，里面是文件夹x中的所有文件和子文件夹的名字</td></tr><tr><td style="text-align:center"><code>os.mkdir(x)</code></td><td style="text-align:center">创建文件夹x</td></tr><tr><td style="text-align:center"><code>os.path.getsize(x)</code></td><td style="text-align:center">获取文件x的大小(单位:字节)</td></tr><tr><td style="text-align:center"><code>os.path.isfile(x)</code></td><td style="text-align:center">判断x是不是文件</td></tr><tr><td style="text-align:center"><code>os.remove(x)</code></td><td style="text-align:center">删除文件x</td></tr><tr><td style="text-align:center"><code>os.rmdir(x)</code></td><td style="text-align:center">删除文件夹x。x必须是空文件夹才能删除成功</td></tr><tr><td style="text-align:center"><code>os.rename(x,y)</code></td><td style="text-align:center">将文件或文件夹x改名为y。不但可以改名,还可以起到移动文件或文件夹的作用。例如os.rename(“c:/tmp/a”, “c:/tmp2/b”)可以将文件夹或文件” c:/tmp/a”移动到”c:/tmp2/“文件夹下面,并改名为b。前提是tmp2必须存在。</td></tr><tr><td style="text-align:center"><code>shutil.copyfile(x,y)</code></td><td style="text-align:center">拷贝文件x到文件y。若y本来就存在，会被覆盖</td></tr></tbody></table></div><h3 id="删除文件夹的递归函数"><a href="#删除文件夹的递归函数" class="headerlink" title="删除文件夹的递归函数"></a>删除文件夹的递归函数</h3><p>（删除文件夹没有办法恢复）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">powerRmDir</span>(<span class="params">path</span>): <span class="comment"># 连根删除文件夹path</span></span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">actualFileName = path + <span class="string">&quot;/&quot;</span> + x<span class="comment">#x不包括路径,例如a. txt</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(actualFileName): <span class="comment">#actualFileName是文件</span></span><br><span class="line">os.remove(actualFileName)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">powerRmDir(actualFileName) <span class="comment">#actualFileName是文件夹</span></span><br><span class="line">os.rmdir(path)</span><br><span class="line"></span><br><span class="line">powerRmDir(<span class="string">&quot;c:/tmp/ttt&quot;</span>)</span><br><span class="line">powerRmDir(<span class="string">&quot;tmp/ttt&quot;</span>)<span class="comment">#删除当前文件夹下的tmp文件夹下的ttt文件夹</span></span><br></pre></td></tr></table></figure><h3 id="获取文件夹总大小的递归函数"><a href="#获取文件夹总大小的递归函数" class="headerlink" title="获取文件夹总大小的递归函数"></a>获取文件夹总大小的递归函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTotalSize</span>(<span class="params">path</span>):</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">actualFileName = path + <span class="string">&quot;/&quot;</span> + x<span class="comment">#x不包括路径</span></span><br><span class="line"><span class="keyword">if</span> OS.path.isfile(actualFileName):</span><br><span class="line">total += OS.path.getsize(actualEileName)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">total += getTotalSize(actualFileName)</span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h1 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h1><h2 id="以命令行方式运行python程序"><a href="#以命令行方式运行python程序" class="headerlink" title="以命令行方式运行python程序"></a>以命令行方式运行python程序</h2><p>每次运行Python程序，都要从Pycharm里运行，显然不方便。</p><p>因此有时需要以命令行方式(命令脚本方式)运行python程序</p><p>具体做法：</p><p>在命令行窗口(mac叫“终端”)敲:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python xxx.py</span><br><span class="line">就能运行xxx.py</span><br></pre></td></tr></table></figure></p><p>Windows下，Win+R键，可以弹出左边”运行”窗口，敲”cmd”确定，就能弹出右边cmd窗口(命令行窗口)</p><p>Mac上相应操作，是从launchPad里面启动”终端”</p><h2 id="命令行参数-1"><a href="#命令行参数-1" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>如果编写了一-个程序hello.py，功能是合并两个文件<br>希望在命令行敲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py a1.txt a2.txt</span><br></pre></td></tr></table></figure><p>就能完成把a2.txt合并到a1.txt上面。<br>hello.py运行时，如何知道要处理的文件是a1.txt和a2.txt呢?<br>a1.txt，a2.txt都是”命令行参数”。因此程序内应该有获得命令行参数的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sys.argv:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>在命令行窗口以如下方式运行该程序，假设程序存为hello.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py this is &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello.py</span><br><span class="line">this</span><br><span class="line">is</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>则在程序中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys.argv[0]就是 &#x27;hello.py&#x27;</span><br><span class="line">sys.argv[1]就是 &#x27;this&#x27;</span><br><span class="line">sys.argv[2]就是 &#x27;is&#x27;</span><br><span class="line">sys.argv[3]就是 &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><h2 id="程序以命令行运行时的当前文件夹"><a href="#程序以命令行运行时的当前文件夹" class="headerlink" title="程序以命令行运行时的当前文件夹"></a>程序以命令行运行时的当前文件夹</h2><p>程序以命令行方式启动时，当前文件夹就是命令提示符表示的文件夹，而不是python程序文件所在的文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:/tmp5/test/t.py</span><br><span class="line">import os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：选择C:\WINDOWS\system32\cmd.exe</span><br><span class="line"></span><br><span class="line">C:\diskd&gt;python c:\tmp5\test\t.py</span><br><span class="line">C:\diskd</span><br><span class="line"></span><br><span class="line">C:\diskd&gt;</span><br></pre></td></tr></table></figure><h1 id="文件处理实例"><a href="#文件处理实例" class="headerlink" title="文件处理实例"></a>文件处理实例</h1><h2 id="程序1-统计文章中的单词词频"><a href="#程序1-统计文章中的单词词频" class="headerlink" title="程序1:统计文章中的单词词频"></a>程序1:统计文章中的单词词频</h2><ul><li>程序名: countfile.py</li></ul><p>用命令行方式启动该程序：<br><code>python countfile.py</code> 源文件 结果文件</p><p>例如:<br><code>python countfile.py a1.txt r1.txt</code><br><code>python countfile.py c:\tmp\a4.txt d:\tmp\r4.txt</code></p><p>对”源文件”进行单词词频(出现次数)分析，分析结果写入”结果文件”，单词按照字典序排列</p><p>文章文件<code>a1.txt</code>的格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When many couples decide to expand their family，they often take into consideration the different genetic traits that they may pass on to their children. For example, if someone has a history of heart problems, they might be concerned about passing that on to their chi Idren as well.</span><br><span class="line">Treacher Collins syndrome, or TCS, ?is a rare facial disfigurement that</span><br><span class="line">greatly: slows: the deve lopment of bones and other t issues that make up the human face. As a result, most people living?with TCS have?under developed cheek bones, a small jaw, and an undersized chin.</span><br></pre></td></tr></table></figure><ul><li>统计的结果结果文件<code>r1.txt</code>格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a8</span><br><span class="line">about2</span><br><span class="line">an1</span><br><span class="line">and4</span><br><span class="line">are1</span><br><span class="line">around1</span><br><span class="line">as2</span><br><span class="line">backlash1</span><br><span class="line">be4</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>1)命令行参数<code>sys.argv[1]</code>就是源文件，<code>sys.argv[2]</code>就是结果文件。<br>2)要从<code>a1.txt</code>中分割出单词，然后用字典记录单词的出现频率。<br>3)分割单词时的分隔字符多种多样，因此要统计<code>a1.txt</code>中出现了哪些非字母的字符，非字母的字符都是分隔串。<br>4)要用<code>re.split()</code>来分割。</p><ul><li>回顾:通过正则表达式用多个分隔串进行分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.split(x,s)</span><br></pre></td></tr></table></figure><p>用正则表达式x里面的分隔串分割s<br>x里面不同分隔串用”|”隔开，形如:<br><code>&#39;;||, | \* |\n| \? |ok|8&#39;</code><br>一些特殊字符，比如:<code>? ! &quot;&#39;()|*$\[]^&#123;&#125;. ,</code><br>在正则表达式里出现时，前面需要加<code>\</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&#x27;Beautiful, is; beoktter*than\nugly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;;| |,|\*|\n|ok&#x27;</span>,a)) <span class="comment">#分隔串用 | 隔开]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;;&#x27; &#x27; &#x27; &#x27;,&#x27; &#x27;*&#x27; &#x27;\n&#x27; &#x27;ok&#x27;都被看作分隔串</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;Beautiful&#x27;, &#x27; &#x27;, &#x27;is&#x27;, &#x27;&#x27;, &#x27;be&#x27;, &#x27;tter&#x27;, &#x27;than&#x27;, &#x27;ugly&#x27;]</span></span><br><span class="line"><span class="comment">#两个相邻的分隔串之间，会隔出一个空串</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, words</span>):  <span class="comment"># 对filename文件进行词频分析，分析结果记在词典words里</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)<span class="comment">#文件为缺省编码。根据实际情况可以加参数 encoding=&quot;utf-8&quot; 或 encoding = &quot;gbk&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    txt = f.read()<span class="comment">#全部文件内容存入字符串txt</span></span><br><span class="line">    f.close()</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])  <span class="comment">#分割串的集合</span></span><br><span class="line">    <span class="comment"># 下面找出既有文性中非宝母的字符，作为分服串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span>  <span class="comment"># 用无 re.split的正则表达式</span></span><br><span class="line">    <span class="comment"># 该正则表达式形式类似于:&quot;，|：| |-&quot;之类两个紧线之间的字符串就是分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\l&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 上面这些字符比较特殊，加到splitChars 里面的时候要在前面加“&quot;\,”</span></span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span>  <span class="comment"># python字符中里面。\\其实就是\ )</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        splitStr += <span class="string">&quot;&quot;</span>  <span class="comment"># &#x27;|&#x27;后面必须要有东西，空格多写一遍没关系</span></span><br><span class="line">        lst = re.split(splitStr, txt)  <span class="comment"># lst是分隔后的单词列表</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="keyword">if</span> x == <span class="string">&quot;&quot;</span>:  <span class="comment"># 两个相部分领患之间会分割出来一个空患。 不理它</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx <span class="keyword">in</span> words:</span><br><span class="line">            words[lx] += <span class="number">1</span><span class="comment">#如果在词典里，则该词出现次数+1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            words[lx] = <span class="number">1</span><span class="comment">#如果不在词典里，则该词加入词典，出现次数为1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">result = &#123;&#125;  <span class="comment"># 结果宝典。 格式为&#123;&#x27;a&#x27;:2, &#x27;about&#x27;:3, ...&#125;</span></span><br><span class="line"><span class="keyword">if</span> countFile(sys.argv[<span class="number">1</span>], result) == <span class="number">0</span>:  <span class="comment"># argv[1]是源文件,..分析績果记在result.黑面</span></span><br><span class="line">    exit()</span><br><span class="line">lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">lst.sort()  <span class="comment"># 单词按字典序排庄</span></span><br><span class="line">f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>)  <span class="comment">#argv[2] 是结果文件，文件为缺省编码， &quot;w&quot;表示写入</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">    f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="程序2-统计多个文件累计单词频率"><a href="#程序2-统计多个文件累计单词频率" class="headerlink" title="程序2:统计多个文件累计单词频率"></a>程序2:统计多个文件累计单词频率</h2><ul><li><p>程序名<code>countfiles.py</code></p></li><li><p>用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python countfiles.py结果文件</span><br></pre></td></tr></table></figure></li><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python countfiles.py result.txt</span><br></pre></td></tr></table></figure></li></ul><p>对当前文件夹(<code>countfiles.py</code>文件所在文件夹)下全部文件名是字母a打头的<code>.txt</code>文件进行词频统计，统计的总的结果写入”结果文件”<code>result.txt</code>。</p><ul><li>思路</li></ul><p>要获得.py程序所在文件夹下的所有a打头，. txt结尾的文件。对每个文件，调用上面<br>程序1的处理单个文件的函数进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os<span class="comment">#ython自带os库</span></span><br><span class="line">os.listdir()<span class="comment">#可以获得当前文件夹下所有文件和文件夹的列表。列表中元素是文件或文件夹名字，不带路径(目录)</span></span><br><span class="line">os.path.isfile(x)<span class="comment">#可以判断x是不是一个文件(文件夹不是文件)</span></span><br></pre></td></tr></table></figure><ul><li><code>os.listdir</code>示例</li></ul><p>假设<code>c:\tmp</code>文件夹下有文件<code>t.py</code>，<code>a.txt</code>，<code>b.txt</code>和文件夹<code>hello</code></p><p>程序<code>t.py</code>如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.listdir())</span><br></pre></td></tr></table></figure><p>则运行<code>t.py</code>输出结果为:<br><code>[&#39;a.txt&#39;, &#39;b.txt&#39;, &#39;hello&#39;, &#39;t.py&#39;]</code></p><ul><li>实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = &#123;&#125;</span><br><span class="line">lst = os.listdir()<span class="comment">#列出当前文件夹下所有文件和文件夹的名字</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(x) : <span class="comment">#如果x是文件</span></span><br><span class="line"><span class="keyword">if</span> x.lower().endswith(<span class="string">&quot;.txt&quot;</span>) <span class="keyword">and</span> x.lower().startswith(<span class="string">&quot;a&quot;</span>):<span class="comment">#x是&#x27;a&#x27;开头, .txt结尾</span></span><br><span class="line">countFile(x, result) <span class="comment">#countFile是程序1中统计一个文件的函数</span></span><br></pre></td></tr></table></figure><h2 id="程序3-准确统计文章中的单词词频"><a href="#程序3-准确统计文章中的单词词频" class="headerlink" title="程序3:准确统计文章中的单词词频"></a>程序3:准确统计文章中的单词词频</h2><ul><li>程序名：<code>countfile_novary.py</code></li><li>用法：</li></ul><p><code>python countfile_novary.py 源文件 结果文件</code></p><p>对”源文件”进行单词词频分析，分析结果写入”结果文件”如果碰到单词的变化形式，则转换成原型再统计</p><ul><li>单词原型-变化 词汇表在文件<code>word_varys.txt</code>里面，格式：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">act</span><br><span class="line">acted|acting|acts</span><br><span class="line">action</span><br><span class="line">actions</span><br><span class="line">active</span><br><span class="line">actively|activeness</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>1)同样需要一个字典来统计单词及其出现次数。</p><p>2)读取<code>word_varys.txt</code>文件，构造一个字典<code>dt</code>。 元素形式为:<code>&#123;acted:act, acting:act, acts:act, actions:action, ...&#125;</code>键是单词的变化形式，值是单词的原型。</p><p>3)对每个”源文件”里的单词w，查找dt中键为w的元素x。如果x不存在，则w就是原型，统计其词频。如果x存在，则值x[1]是原型，将x[1]的出现次数加1。</p><ul><li>实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeVaryWordsDict</span>():</span><br><span class="line">    vary_words = &#123;&#125;  <span class="comment"># 元素形式： 变化形式：原型 例如&#123;acts:act,acting:act,boys:boy....&#125;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;word_varys.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    L = <span class="built_in">len</span>(lines)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, L, <span class="number">2</span>):  <span class="comment"># 每两行是一个单词的原型及变化形式</span></span><br><span class="line">        word = lines[i].strip()  <span class="comment"># 单词原型</span></span><br><span class="line">        varys = lines[i + <span class="number">1</span>].strip().split(<span class="string">&quot;|&quot;</span>)  <span class="comment"># 变形</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> varys:</span><br><span class="line">            vary_words[w] = word  <span class="comment"># 加入变化形式：原型 , w的原型是 word</span></span><br><span class="line">    <span class="keyword">return</span> vary_words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSplitStr</span>(<span class="params">txt</span>):</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])</span><br><span class="line">    <span class="comment"># 下面找出所有文件中非字母的字符，作为分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成用于 re.split的分隔符字符串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">    splitStr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> splitStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, vary_word_dict</span>):</span><br><span class="line">    <span class="comment"># 分析 filename 文件，返回一个词典作为结果。到 vary_word_dict里查单词原型</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    txt = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    splitStr = makeSplitStr(txt)</span><br><span class="line">    words = &#123;&#125;</span><br><span class="line">    lst = re.split(splitStr, txt)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> lx <span class="keyword">in</span> vary_word_dict:  <span class="comment"># 如果在原型词典里能查到原型，就变成原型再统计</span></span><br><span class="line">            lx = vary_word_dict[lx]</span><br><span class="line">        <span class="comment"># 直接写这句可以替换上面 if 语句  lx = vary_word_dict.get(lx,lx)</span></span><br><span class="line">        words[lx] = words.get(lx, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = countFile(sys.argv[<span class="number">1</span>], makeVaryWordsDict())</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">None</span> <span class="keyword">and</span> result != &#123;&#125;:</span><br><span class="line">    lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">    lst.sort()</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="程序4-countfile-nocet4-py"><a href="#程序4-countfile-nocet4-py" class="headerlink" title="程序4:countfile_nocet4.py"></a>程序4:<code>countfile_nocet4.py</code></h2><ul><li>用法</li></ul><p><code>python countfile_nocet4.py 源文件 结果文件</code></p><p>对”源文件”进行单词词频分析，只抽取不在四级单词列表中的单词，将分析结果写入”结果文件”</p><ul><li>四级单词列表在文件<code>cet4words.txt</code>中，单词都是单独一行，以$打头</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">abandon</span></span><br><span class="line">[?&#x27;b?nd?n]</span><br><span class="line">vt.遗弃；放弃；放纵(自己)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ability</span></span><br><span class="line">[?&#x27;b?l?t?]</span><br><span class="line">n.能力，才能</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">able</span></span><br><span class="line">[&#x27;e?bl]</span><br><span class="line">a.有的能力；有本事的，能干的</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">aboard</span></span><br><span class="line">[?&#x27;b?:d]</span><br><span class="line">ad.&amp;prep.在船(飞机、车)上；ad.上船(飞机)</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>读取<code>cet4words.txt</code>中的单词，存放到一个集合里面。碰到源文件里的单词，先查查在不在集合里面，如果在，则抛弃。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeFilterSet</span>():</span><br><span class="line">    cet4words = <span class="built_in">set</span>([])</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;cet4words.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">&quot;$&quot;</span>:</span><br><span class="line">            cet4words.add(line[<span class="number">1</span>:])  <span class="comment"># 将四级单词加入集合</span></span><br><span class="line">    <span class="keyword">return</span> cet4words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSplitStr</span>(<span class="params">txt</span>):</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])</span><br><span class="line">    <span class="comment"># 下面找出所有文件中非字母的字符，作为分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成用于 re.split的分隔符字符串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">    splitStr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> splitStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, filterdict</span>):  <span class="comment"># 词频统计，要去掉在 filterdict集合里的单词</span></span><br><span class="line">    words = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    txt = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    splitStr = makeSplitStr(txt)</span><br><span class="line">    lst = re.split(splitStr, txt)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> lx <span class="keyword">in</span> filterdict:  <span class="comment"># 去掉在 filterdict里的单词</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        words[lx] = words.get(lx, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = countFile(sys.argv[<span class="number">1</span>], makeFilterSet())</span><br><span class="line"><span class="keyword">if</span> result != &#123;&#125;:</span><br><span class="line">    lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">    lst.sort()</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h1 id="数据库和SQL语言"><a href="#数据库和SQL语言" class="headerlink" title="数据库和SQL语言"></a>数据库和SQL语言</h1><h2 id="数据库的概念"><a href="#数据库的概念" class="headerlink" title="数据库的概念"></a>数据库的概念</h2><ul><li>数据库可以用来存放大量数据，并且提供了方便的快速检索手段</li><li>便于快速找出符合某种条件的数据。比如：工作年限超过三年，工资超过10000元的北京籍员工</li><li>一个数据库可以是一个文件，比如<code>c:/tmp/students.db</code></li></ul><h2 id="数据库中的表"><a href="#数据库中的表" class="headerlink" title="数据库中的表"></a>数据库中的表</h2><ul><li>一个数据库文件里可以有多张表。比如students.db里包含”学生信息表”和”课程信息表”</li><li>表由记录构成，比如”学生信息表”里的每个记录，代表一个学生的信息。</li><li>记录由字段构成，描述一个事物的多个属性。比如学生记录，可以由name, id, age, gender, gpaa 等字段构成</li></ul><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>字段是有”类型”的。比如</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数据类型</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">text</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">gpa</td><td style="text-align:center">real</td><td style="text-align:center">小数</td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">integer</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">profile</td><td style="text-align:center">text</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">photo</td><td style="text-align:center">blob</td><td style="text-align:center">二进制数据(如图片)</td></tr><tr><td style="text-align:center">birthday</td><td style="text-align:center">date</td><td style="text-align:center">日期(本质上就是text)</td></tr><tr><td style="text-align:center">registertime</td><td style="text-align:center">datetime</td><td style="text-align:center">日期+时间(本质上就是text)</td></tr></tbody></table></div><h2 id="SQL数据库查询语句"><a href="#SQL数据库查询语句" class="headerlink" title="SQL数据库查询语句"></a>SQL数据库查询语句</h2><p>参考: <a href="http://www.w3school.com.cn/sql/sql_syntax.asp">http://www.w3school.com.cn/sql/sql_syntax.asp</a></p><p>SQL命令:用于进行数据库操作的标准语句</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">CREATE TABLE</td><td style="text-align:center">创建表</td></tr><tr><td style="text-align:center">INSERT INTO</td><td style="text-align:center">在表中插入记录</td></tr><tr><td style="text-align:center">UPDATE</td><td style="text-align:center">在表中更新记录</td></tr><tr><td style="text-align:center">SELECT</td><td style="text-align:center">在表中进行查询</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">从表中删除记录</td></tr></tbody></table></div><blockquote><p>不区分大小写</p></blockquote><h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> if <span class="keyword">not</span> <span class="keyword">exists</span> students (id <span class="type">integer</span> <span class="keyword">primary</span> key, name text, gpa <span class="type">real</span>, birthday <span class="type">date</span>, age <span class="type">integer</span>, picture <span class="type">blob</span>)</span><br></pre></td></tr></table></figure><p>创建了一张名为students的表，有以下字段:</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数据类型</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">integer</td><td style="text-align:center">primary key表示不可重复</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">text</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">gpa</td><td style="text-align:center">real</td><td style="text-align:center">小数</td></tr><tr><td style="text-align:center">birthday</td><td style="text-align:center">date</td><td style="text-align:center">日期(本质上就是text)</td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">integer</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">picture</td><td style="text-align:center">blob</td><td style="text-align:center">二进制数据(如图片)</td></tr></tbody></table></div><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span>(<span class="number">1000</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">3.81</span>, <span class="string">&#x27;2000-09-12&#x27;</span>, <span class="number">18</span>, <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><p>在表students中插入一个记录，该记录暂无照片(nulI)</p><p>VALUES(每个字段的值)</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><h2 id="创建数据库并写入数据"><a href="#创建数据库并写入数据" class="headerlink" title="创建数据库并写入数据"></a>创建数据库并写入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c: /tmp/test2.db&quot;</span>)  <span class="comment"># 连接数据库， 若不存在则自动创建</span></span><br><span class="line"><span class="comment"># 文件夹c:/tmp 必须事先存在, connect不会创建文件夹</span></span><br><span class="line">cur = db.cursor()  <span class="comment"># 获取光标，要操作数据库一般要通过光标进行</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE if not exists students (id integer primary key ,</span></span><br><span class="line"><span class="string">name text, gpa real, birthday date, age integer, picture blob) &#x27;&#x27;&#x27;</span>  <span class="comment"># 如果表students不存在就创建它</span></span><br><span class="line">cur.execute(sql)  <span class="comment"># 执行sQL命令</span></span><br><span class="line">cur.execute(<span class="string">&quot;insert into students values (1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, null)&quot;</span>)  <span class="comment"># 插入一个记录</span></span><br><span class="line"></span><br><span class="line">mylist = [(<span class="number">1700</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&quot;3.25&quot;</span>, <span class="string">&#x27;2001-12-01&#x27;</span>, <span class="number">17</span>, <span class="literal">None</span>), (<span class="number">1800</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&quot;3.35&quot;</span>, <span class="string">&#x27;1999-01-01&#x27;</span>, <span class="number">19</span>, <span class="literal">None</span>)]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> mylist:  <span class="comment"># 依次插入mylist中的每个记录</span></span><br><span class="line">    cur.execute(<span class="string">&#x27;INSERT INTO students VALUES(?,?,?,?,?,?) &#x27;</span>, (s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>], s[<span class="number">4</span>], s[<span class="number">5</span>]))  <span class="comment"># ?对应于后面某项</span></span><br><span class="line">db.commit()  <span class="comment"># 真正写入，写入操作都需要这个</span></span><br><span class="line">cur.close()  <span class="comment"># 关闭光标</span></span><br><span class="line">db.close()  <span class="comment"># 关闭数据库</span></span><br></pre></td></tr></table></figure><h1 id="数据库查询和修改"><a href="#数据库查询和修改" class="headerlink" title="数据库查询和修改"></a>数据库查询和修改</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">#检索students表中全部记录</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age</span><br><span class="line">#检索students表中全部记录，并按年龄排序</span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> students</span><br><span class="line">#检索students表中全部记录，但每个记录只取name和age字段</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">#检索students表中全部name字段为张三的记录,<span class="keyword">WHERE</span>表示检索条件</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name<span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">AND</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span></span><br><span class="line">#检索students表中全部名为张三且年龄大于<span class="number">20</span>的人，结果按年龄降序排列</span><br></pre></td></tr></table></figure><h2 id="检索数据库"><a href="#检索数据库" class="headerlink" title="检索数据库"></a>检索数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;C:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from students&#x27;</span> <span class="comment">#检索全部记录</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchone() <span class="comment">#fetchone取满足条件的第一条记录</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#=&gt;(1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, None)</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>])<span class="comment">#=&gt;张三</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> cur.fetchall(): <span class="comment">#fetchall取得所有满足条件的记录</span></span><br><span class="line"><span class="built_in">print</span>(x[:-<span class="number">2</span>]) <span class="comment">#age和picture字段不打出</span></span><br><span class="line">cur.execute(<span class="string">&quot;SELECT * FROM students WHERE name= &#x27;Jack&#x27;&quot;</span>)</span><br><span class="line">x = cur.fetchone()</span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can&#x27;t find Jack&quot;</span>)</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, None)</span><br><span class="line">张三</span><br><span class="line">(1700, &#x27;李四&#x27;, 3.25, &#x27;2001-12-01&#x27;)</span><br><span class="line">(1800, &#x27;王五&#x27;, 3.35, &#x27;1999-01-01&#x27;)</span><br><span class="line">can&#x27;t find Jack</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">检索数据库</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select name, gpa, age from students where gpa &gt; 3.3 order by age desc&#x27;</span><span class="comment">#查找gpa &gt; 3.3的记录,题取其中三个字段,按年龄降序排列</span></span><br><span class="line"></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">if</span> x != []:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total: &quot;</span>, <span class="built_in">len</span>(x)) <span class="comment">#=&gt;2</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total:2</span><br><span class="line">(&#x27;王五&#x27;, 3.35, 19)</span><br><span class="line">(&#x27;张三&#x27;, 3.81, 18)</span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> gpa <span class="operator">=</span> <span class="number">3.9</span></span><br><span class="line">#将所有记录的gpa设置成<span class="number">3.9</span></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> gpa <span class="operator">=</span> <span class="number">3.9</span>, age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">#修改 李四 的gpa和年龄</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;UPDATE students SET gpa =?, age = ? WHERE name = ?&#x27;</span></span><br><span class="line">cur.execute(sql, (<span class="number">4.0</span>, <span class="number">20</span>, <span class="string">&#x27;李四&#x27;</span>)) <span class="comment">#元组三个元素分别对应三个?</span></span><br><span class="line"><span class="comment">#修改李四的gpa和年龄。若李四不存在，则无效果</span></span><br><span class="line">db.commit() <span class="comment">#写入操作必须</span></span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">18</span></span><br><span class="line">#删除年龄小于<span class="number">18</span>的记录</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students</span><br><span class="line">#删除全部记录</span><br><span class="line">#别忘了最后<span class="keyword">commit</span></span><br></pre></td></tr></table></figure><h2 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> students</span><br><span class="line">#删除students表</span><br></pre></td></tr></table></figure><p>别忘了最后commit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;DROP TABLE IF EXISTS students&quot;</span>)</span><br><span class="line">db.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cur.execute(<span class="string">&quot;select * from students&quot;</span>)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line"><span class="built_in">print</span>(r[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;no table&quot;</span>)<span class="comment">#=&gt; no table</span></span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="列出数据库中所有的表和表的结构"><a href="#列出数据库中所有的表和表的结构" class="headerlink" title="列出数据库中所有的表和表的结构"></a>列出数据库中所有的表和表的结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test3.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;CREATE TABLE if not exists table2(id integer, name text)&#x27;</span></span><br><span class="line">cur.execute(sql) <span class="comment">#执行SQL命令</span></span><br><span class="line">sq| = <span class="string">&#x27;CREATE TABLE if not exists table1(id integer, schook text)&#x27;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;select name from SQLITE_MASTER where type=&quot;table&quot; order by NAME&#x27;</span>)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">if</span> x != []:</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"></span><br><span class="line">cur.execute (<span class="string">&quot;PRAGMA TABLE_INFO (table1)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchall())</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;table1&#x27;, ), (&#x27;table2&#x27;, )]</span><br><span class="line">[(0, &#x27;id&#x27;, &#x27;integer&#x27;, 0, None, 0), (1, &#x27;schook&#x27;, &#x27;text&#x27;, 0, None, 0)]</span><br></pre></td></tr></table></figure><blockquote><p>对于修改表的操作，如插入，删除，更新，关闭数据库前不要忘了commit， 否则可能无效<br>必要时用try… except语句来避免数据库不存在，表不存在时的导致的runtime error</p></blockquote><h1 id="数据库二进制字段"><a href="#数据库二进制字段" class="headerlink" title="数据库二进制字段"></a>数据库二进制字段</h1><h2 id="设置blob字段（二进制字段）的值："><a href="#设置blob字段（二进制字段）的值：" class="headerlink" title="设置blob字段（二进制字段）的值："></a>设置blob字段（二进制字段）的值：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#访问网络资源</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;c:/tmp/tmp.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)<span class="comment">#二进制方式打开图片</span></span><br><span class="line">img = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&quot;UPDATE students SET picture=? WHERE name = &#x27;李四&#x27;&quot;</span></span><br><span class="line">cur.execute(sq|, (img,)) <span class="comment">#设置李四的照片。img对应于?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imgUrl = <span class="string">&quot;https://img5.duitang.com/uploads/item/201605/19/20160519224441_VfMWRjpeg&quot;</span> <span class="comment">#从网络获取图片</span></span><br><span class="line">imgStream = requests.get(imgUrl, stream=<span class="literal">True</span>)</span><br><span class="line">sql = <span class="string">&quot;UPDATE students SET picture=? WHERE name = &#x27;张三&#x27; &quot;</span></span><br><span class="line">cur.execute(sql, (imgStream.content, )) <span class="comment">#设置张三的照片。img对应于?</span></span><br><span class="line">db.commit()</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="读取blob字段-二进制字段-的值"><a href="#读取blob字段-二进制字段-的值" class="headerlink" title="读取blob字段(二进制字段)的值"></a>读取blob字段(二进制字段)的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sq|ite3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sq| = <span class="string">&quot;select name, picture from students WHERE name = &#x27;张三&#x27; or name = &#x27; 李四&#x27;&quot;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x: <span class="comment"># r[0]是姓名,r[1]是图片文件数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:/tmp/&quot;</span> + r[<span class="number">0</span>] + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="comment">#照片写入张三.jpg和李四.jpg</span></span><br><span class="line">f.write(r[<span class="number">1</span>])</span><br><span class="line">f.close()</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第七章字典和集合</title>
    <link href="http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</id>
    <published>2022-10-06T00:00:00.000Z</published>
    <updated>2022-10-11T12:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88.png" class="" title="实用Python程序设计MOOC-第七章字典和集合"><p>实用Python程序设计MOOC-第七章字典和集合</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第七章字典和集合"><a href="#实用Python程序设计MOOC-第七章字典和集合" class="headerlink" title="实用Python程序设计MOOC-第七章字典和集合"></a>实用Python程序设计MOOC-第七章字典和集合</h1><h1 id="字典的基本概念"><a href="#字典的基本概念" class="headerlink" title="字典的基本概念"></a>字典的基本概念</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典的每个元素是由”键:值”两部分组成，可以根据”键”进行快速查找</li><li>格式:<code>d = &#123;key1 : value1, key2 : value2&#125;</code></li><li>字典元素的值是可赋值的，因此也是指针</li><li>所有元素的键都不相同</li><li>键必须是不可变的数据类型，比如字符串、整数、小数、元组。列表、集合、字典等可变的数据类型，不可作为字典元素的键。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;Jack&#x27;</span>:<span class="number">18</span>, <span class="string">&#x27;Mike&#x27;</span>:<span class="number">19</span>, <span class="number">128</span>:<span class="number">37</span>, (<span class="number">1</span>, <span class="number">2</span>):[<span class="number">4</span>, <span class="number">5</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;Jack&#x27;</span>])<span class="comment">#&gt;&gt;18键为&#x27;Jack&#x27;的元素值是18</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="number">128</span>])<span class="comment">#&gt;&gt;37键为128的元素值是37</span></span><br><span class="line"><span class="built_in">print</span>(dt[(<span class="number">1</span>, <span class="number">2</span>)])<span class="comment">#&gt;&gt;[4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;c&#x27;</span>])<span class="comment">#不存在键为&#x27;c&#x27;的元素，产生异常，导致运行时错误</span></span><br><span class="line">dt[<span class="string">&#x27;Mike&#x27;</span>] = <span class="string">&#x27;ok&#x27;</span><span class="comment">#将键为&#x27;Mike&#x27;的元素的值改为&#x27;ok&#x27;</span></span><br><span class="line">dt[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;Pku&quot;</span><span class="comment">#添加键为&#x27;school&#x27;的元素，其值为&#x27;Pku&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4, 5], &#x27;Jack&#x27;:18, &#x27;Mike&#x27;:&#x27;ok&#x27;, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> dt[<span class="string">&#x27;Mike&#x27;</span>]<span class="comment">#删除键为&#x27;Mike&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4 , 5], &#x27;Jack&#x27;:18, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">scope = &#123; &#125;<span class="comment">#空字典</span></span><br><span class="line">scope[<span class="string">&#x27;a&#x27;</span>] = <span class="number">3</span><span class="comment">#添加元素&#x27;a&#x27; :3</span></span><br><span class="line">scope[<span class="string">&#x27;b&#x27;</span>] = <span class="number">4</span><span class="comment">#添加元素&#x27;b&#x27; :4</span></span><br><span class="line"><span class="built_in">print</span>(scope)<span class="comment">#&gt;&gt;&#123;&#x27;a&#x27;:3, &#x27;b&#x27;:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> scope)<span class="comment">#&gt;&gt;True判断是否有元素键为&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#get(key, v):如果键key存在，则返回键为key的元素的值，否则返回v</span></span><br><span class="line"><span class="built_in">print</span> (scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;1</span></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;2</span></span><br></pre></td></tr></table></figure><p>键值对的数据查找时间和数据长度无关，列表查找和数据长度有关</p><h1 id="字典的键不可重复"><a href="#字典的键不可重复" class="headerlink" title="字典的键不可重复"></a>字典的键不可重复</h1><ul><li>字典的键不可重复，指的是字典的键的内容不能一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">d = &#123;a:<span class="number">60</span>, b:<span class="number">70</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):<span class="number">80</span>， (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">50</span> &#125;<span class="comment">#d中实际上只有一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d[a])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[b])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="comment">#此循环只输出一个(1, 2, 3):50</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;jack&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>], <span class="number">100</span>:(<span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">18</span>] = <span class="number">31</span></span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">100</span>] = <span class="number">31</span></span><br><span class="line">dt = &#123;[<span class="number">1</span>, <span class="number">2</span>]: <span class="number">3</span>, <span class="string">&#x27;jack&#x27;</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典的构造"><a href="#字典的构造" class="headerlink" title="字典的构造"></a>字典的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">items = [(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Gumby&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">42</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>(items)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Gumby&#x27;</span>, age=<span class="number">42</span>, height=<span class="number">1.76</span>)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;height&#x27;:1.76, &#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"><span class="comment">#python3.5之前构造遍历字典顺序和加入顺序不同</span></span><br><span class="line"><span class="comment">#python3.6及之后版本，哪个元素先加入，就在前</span></span><br></pre></td></tr></table></figure><h2 id="字典相关函数"><a href="#字典相关函数" class="headerlink" title="字典相关函数"></a>字典相关函数</h2><p><code>clear()</code> 清空字典<br><code>keys()</code> 取字典的键的序列<br><code>items()</code> 取字典的元素的序列，可用于遍历字典<br><code>values()</code> 取字典的值序列<br><code>pop(x)</code> 删除键为x的元素，如果不存在，产生异常<br>上述”序列”，不是list, tuple或set<br><code>copy()</code> 浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">d  = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Gumby&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;GPA&#x27;</span>:<span class="number">3.5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;age&#x27;</span>])<span class="comment">#&gt;&gt;42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;(&#x27;name&#x27;, &#x27;Gumby&#x27;),(&#x27;age&#x27;, 42),(&#x27;GPA&#x27;, 3.5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(k, v, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name Gumby,age 42,GPA 3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="number">1978</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">y = x.copy()</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh &#x27;</span></span><br><span class="line">y[<span class="number">1978</span>].remove(<span class="number">2</span>)<span class="comment">#删除元素2</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">x.pop(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#删除键为&#x27;username&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字典的深拷贝"><a href="#字典的深拷贝" class="headerlink" title="字典的深拷贝"></a>字典的深拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>]&#125;</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh&#x27;</span></span><br><span class="line">y[<span class="string">&#x27;machines&#x27;</span>].remove(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;baz&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;bar&#x27;,&#x27;baz&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><ul><li>items<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x.items():</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><p><strong>遍历字典时，在python3. 5及以前，顺序不确定。在python 3. 6及以后，顺序同元素加入字典的顺序</strong></p><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><ul><li><p>输入<br>若干行，每行一个单词。</p></li><li><p>输出<br>按单词出现次数从高到低打出所有单词。次数相同的，按照字典序从小到大排</p></li><li><p>输入样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">about</span><br><span class="line">send</span><br><span class="line">about</span><br><span class="line">me</span><br></pre></td></tr></table></figure></li><li><p>输出样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 about</span><br><span class="line">1 me</span><br><span class="line">1 send</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> wd <span class="keyword">in</span> dt:  <span class="comment"># 如果有元素键为wd</span></span><br><span class="line">            dt[wd] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dt[wd] = <span class="number">1</span>  <span class="comment"># 加入键为wd的元素，其值是1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key = <span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">dt[wd] = dt.get(wd, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#若在dt里有键位wd的元素，则get返回其值，否则返回0</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key=<span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合-set-的概念和特点"><a href="#集合-set-的概念和特点" class="headerlink" title="集合(set)的概念和特点"></a>集合(set)的概念和特点</h2><p>集合(set)的概念同数学上的集合</p><ul><li>元素类型可以不同。</li><li>不会有重复元素。</li><li>可以增删元素。</li><li>整数、小数、复数、字符串、元组都可以作为集合的元素。但是列表、字典和集合等可变的数据类型不可作为集合的元素。</li><li>集合的作用是快速判断某个东西是否在一堆东西里面(用in)。</li></ul><h2 id="集合的构造"><a href="#集合的构造" class="headerlink" title="集合的构造"></a>集合的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([])) <span class="comment">#&gt;&gt;set() 集合可由列表转换得到,set([])是空字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, (<span class="number">1</span>,<span class="number">3</span>) &#125;<span class="comment">#自动去重</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;2, 1, &#x27;ok&#x27;, (1, 3) &#125;</span></span><br><span class="line"></span><br><span class="line">b = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">c = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, <span class="number">2</span>, b, c))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)<span class="comment">#&gt;&gt;ok 1 2 (3, 4)</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">#&gt;&gt;字符串转集合</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(&#123;<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>:<span class="number">3</span>, (<span class="number">3</span>,<span class="number">4</span>):<span class="number">4</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, &#x27;ok&#x27;, (3，4)&#125; 只取键</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>])<span class="comment">#错误，集合元素没有顺序，不能用下标访问</span></span><br></pre></td></tr></table></figure><p>集合的元素是无序的</p><h2 id="集合常用函数"><a href="#集合常用函数" class="headerlink" title="集合常用函数"></a>集合常用函数</h2><p><code>add(x)</code> 添加元素x。如果x已经存在，则不添加<br><code>clear()</code> 清空集合<br><code>copy()</code> 返回自身的浅拷贝<br><code>remove(x)</code> 删除元素x。如果不存在元素x，则引发异常<br><code>update(x)</code> 将序列x中的元素加入到集合</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>a, b是集合</p><p><code>x in a</code> x是否在集合a中<br><code>a | b</code> 求a和b的并<br><code>a &amp; b</code> 求a和b的交<br><code>a - b</code> 求a和b的差，即在a中而不在b中的元素<br><code>a ^ b</code> 求a和b的对称差，等价于<code>(a|b) - (a&amp;b)</code></p><p><code>a == b</code> a是否元素和b一样<br><code>a != b</code> a是否元素和b不一样</p><p><code>a &lt;= b</code> a是否是b的子集(a有的元素，b都有)<br><code>a &lt; b</code>a是否是b的真子集(a有的元素，b都有，且b还包含a中没有的元素)<br><code>a &gt;= b</code>b是否是a的子集<br><code>a &gt; b</code> b是否是a的真子集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>([])<span class="comment">#a是空集合</span></span><br><span class="line">b = <span class="built_in">set</span>([])</span><br><span class="line">a.add(<span class="number">1</span>)<span class="comment">#添加元素1</span></span><br><span class="line">a.update([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])<span class="comment">#将列表元素添加进a</span></span><br><span class="line">b.update([<span class="string">&#x27;ok&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;&#123;2, 3, 100, &#x27;ok&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4, 100, &#x27;ok&#x27;&#125; 求并</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)<span class="comment">#&gt;&gt;&#123;2, 3&#125;求交</span></span><br><span class="line"><span class="built_in">print</span>(a - b)<span class="comment">#&gt;&gt;&#123;1，4&#125;求差</span></span><br><span class="line">a -= b<span class="comment">#在a中删除b中有的元素</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line">a ^= &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">544</span>&#125; <span class="comment">#对称差</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544，1，3&#125;</span></span><br><span class="line"></span><br><span class="line">a.update(<span class="string">&quot;take&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544, 1, 3, &#x27;e&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">544</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a.remove(<span class="number">544</span>)<span class="comment">#删除元素，若元素不存在，会出错</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 3, &#x27;a&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;e&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a &gt; b)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)<span class="comment">#&gt;&gt;True b是a的子集</span></span><br><span class="line"><span class="built_in">print</span>(b &lt; a)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br></pre></td></tr></table></figure><h2 id="集合例题"><a href="#集合例题" class="headerlink" title="集合例题"></a>集合例题</h2><p>输入一些单词，统计不重复的单词一共有多少个。</p><ul><li><p>输入样例<br>about<br>take<br>about<br>zoo<br>take</p></li><li><p>输出样例<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="built_in">set</span>([])</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">wd = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> wd <span class="keyword">in</span> words:<span class="comment">#不用判断</span></span><br><span class="line">words.add(wd)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(words))</span><br></pre></td></tr></table></figure><p>用列表做，比用集合慢很多很多!单词达到10万，就会非常明显。</p><h1 id="程序或算法的时间复杂度"><a href="#程序或算法的时间复杂度" class="headerlink" title="程序或算法的时间复杂度"></a>程序或算法的时间复杂度</h1><ul><li><p>一个程序或算法的时间效率，也称”时间复杂度”，有时简称”复杂度”</p></li><li><p>复杂度常用大的字母O和小写字母n来表示，比如$O(n)$, $O(n^2)$等。n代表问题的规模，$O(X)$就表示解决问题的时间和X成正比关系。</p></li><li><p>时间复杂度是用算法运行过程中，某种时间固定的操作需要被执行的次数和n的关系来度量的。在无序数列中查找某个数，复杂度是$O(n)$。</p></li><li><p>计算复杂度的时候，只统计执行次数最多的(n足够大时)那种固定操作的次数比如某个算法需要执行加法$n^2$次，除法10000n次， 那么就记其复杂度是$O(n^2)$的。</p></li><li><p>如果复杂度是多个n的函数之和，则只关心随n的增长增长得最快的那个函数</p></li></ul><script type="math/tex; mode=display">O(n^3 + n^2) => O(n^3)</script><script type="math/tex; mode=display">O(2^n + n^3) => O(2^n)</script><script type="math/tex; mode=display">O(n! + 3^n) => O(n!)</script><ul><li>常数复杂度: $O(1)$ 时间(操作次数)和问题的规模无关</li><li>对数复杂度: $O(log(n))$</li><li>线性复杂度: $O(n)$</li><li>多项式复杂度: $O(n^k)$</li><li>指数复杂度: $O(a^n)$</li><li><p>阶乘复杂度: $O(n!)$</p></li><li><p>在无序数列中查找某个数(顺序查找) $O(n)$</p></li><li>插入排序、选择排序等笨排序方法 $O(n^2)$</li><li>快速排序 $O(n * log(n))$</li><li>二分查找 $O(log(n))$</li></ul><h2 id="in用于列表和用于字典、集合的区别"><a href="#in用于列表和用于字典、集合的区别" class="headerlink" title="in用于列表和用于字典、集合的区别"></a>in用于列表和用于字典、集合的区别</h2><p><code>a in b</code></p><p>若b是列表，字符串或元组，则该操作时间复杂度$O(n)$，即时间和b的元素个数成正比</p><p>若b是字典或集合，则该操作时间复杂度$O(1)$，即时间基本就是常数，和b里元素个数无关</p><p>因此集合用于需要经常判断某个东西是不是在一堆东西里的情况此种场合用列表替代集合，容易导致超时!!!!</p><h2 id="一些操作的时间复杂度总结"><a href="#一些操作的时间复杂度总结" class="headerlink" title="一些操作的时间复杂度总结"></a>一些操作的时间复杂度总结</h2><p>$O(1)$：集合、字典增删元素，查找元素，以关键字作为下标访问字典元素的值，列表添加元素到末尾(append) ，列表、字符串、元组根据下标访问元素<br>$O(n)$：列表、元组查找元素(in, index)， 列表插入元素(insert)、删除元素(remove)计算出现次数(count)<br>$O(n log(n))$：python 自带排序sort, sorted<br>$O(log(n))$：在排好序的列表或元组上进行二分查找(初始的查找区间是整个元组或列表，每次和查找区间中点比较大小，并缩小查找区间到原来的一半。类似于查英语词典)有序就会找得快!</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第七章字典和集合</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-OpenJudge</title>
    <link href="http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/"/>
    <id>http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/</id>
    <published>2022-10-04T00:00:00.000Z</published>
    <updated>2023-01-14T13:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge.png" class="" title="实用Python程序设计MOOC-OpenJudge"><p>实用Python程序设计MOOC-OpenJudge</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-OpenJudge"><a href="#实用Python程序设计MOOC-OpenJudge" class="headerlink" title="实用Python程序设计MOOC-OpenJudge"></a>实用Python程序设计MOOC-OpenJudge</h1><h1 id="Python程序设计基础及实践-慕课版-教材题集-94题"><a href="#Python程序设计基础及实践-慕课版-教材题集-94题" class="headerlink" title="Python程序设计基础及实践(慕课版)教材题集(94题)"></a>Python程序设计基础及实践(慕课版)教材题集(94题)</h1><h2 id="001-A-B问题"><a href="#001-A-B问题" class="headerlink" title="001:A+B问题"></a>001:A+B问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>在一行输入两个整数，请输出它们的和。</p></li><li><p>输入<br>一行，两个整数</p></li><li><p>输出<br>两个整数的和</p></li><li><p>样例输入<br>3 14</p></li><li><p>样例输出<br>17</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">0</span>])+<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="002-字符三角形"><a href="#002-字符三角形" class="headerlink" title="002:字符三角形"></a>002:字符三角形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个底边长5个字符，高3个字符的等腰字符三角形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的等腰三角形，底边长5个字符，高3个字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  &quot;</span> + a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + a*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="003-计算-a-b-c的值"><a href="#003-计算-a-b-c的值" class="headerlink" title="003:计算(a+b)*c的值"></a>003:计算(a+b)*c的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>给定3个整数a、b、c，计算表达式(a+b)*c的值。</p><ul><li><p>输入<br>输入仅一行，包括三个整数a、b、c, 数与数之间以一个空格分开。(-10,000&lt; a,b,c &lt;10,000)</p></li><li><p>输出<br>输出一行，即表达式的值</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>((a+b)*c)</span><br></pre></td></tr></table></figure><h2 id="004-反向输出一个三位数"><a href="#004-反向输出一个三位数" class="headerlink" title="004:反向输出一个三位数"></a>004:反向输出一个三位数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>将一个三位数反向输出。</p></li><li><p>输入<br>一个三位数n。</p></li><li><p>输出<br>反向输出n。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">001</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">int</span>(n/<span class="number">100</span>)</span><br><span class="line">b = <span class="built_in">int</span>((n-a*<span class="number">100</span>)/<span class="number">10</span>)</span><br><span class="line">c = (n-a*<span class="number">100</span>-b*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(a))</span><br></pre></td></tr></table></figure><h2 id="005-判断子串"><a href="#005-判断子串" class="headerlink" title="005:判断子串"></a>005:判断子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="005-字符菱形"><a href="#005-字符菱形" class="headerlink" title="005:字符菱形"></a>005:字符菱形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两行字符串，要求判断第一行 字符串是不是第二行的子串</p></li><li><p>输入<br>两行字符串。字符串长度不超过100。</p></li><li><p>输出<br>如果第一行是第二行的子串，就输出 “YES”，否则输出”NO”。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">this is hello world, it is ok.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure></li><li><p>提示<br>python中每使用调用一次 input()，就输入一行的内容。输入内容有几行，就要用几次 input()。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="006-输出第二个整数"><a href="#006-输出第二个整数" class="headerlink" title="006:输出第二个整数"></a>006:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="007-求三个数的和"><a href="#007-求三个数的和" class="headerlink" title="007:求三个数的和"></a>007:求三个数的和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入三个整数或小数，输出它们的和</li></ul><p>如果结果是整数，就保留小数点后面一位的0(用python写则不用特别处理，程序自然会如此) </p><ul><li><p>输入<br>输入三个整数或小数</p></li><li><p>输出<br>和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2.3 4.7</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.0</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b+c)</span><br></pre></td></tr></table></figure></li></ul><h2 id="008-字符串交换"><a href="#008-字符串交换" class="headerlink" title="008:字符串交换"></a>008:字符串交换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为4的字符串，交换这两个字符串的前两个字符后输出</p></li><li><p>输入<br>两个长度为4的字符串</p></li><li><p>输出<br>交换这两个字符串的前两个字符后输出</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCD </span><br><span class="line">1234</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12CD</span><br><span class="line">AB34 </span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1,str2 = <span class="built_in">input</span>(),<span class="built_in">input</span>()</span><br><span class="line">a,b,c,d = str1[<span class="number">0</span>],str1[<span class="number">1</span>],str1[<span class="number">2</span>],str1[<span class="number">3</span>]</span><br><span class="line">e,f,g,h = str2[<span class="number">0</span>],str2[<span class="number">1</span>],str2[<span class="number">2</span>],str2[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(e+f+c+d)</span><br><span class="line"><span class="built_in">print</span>(a+b+g+h)</span><br></pre></td></tr></table></figure><h2 id="009-字符串中的整数求和"><a href="#009-字符串中的整数求和" class="headerlink" title="009:字符串中的整数求和"></a>009:字符串中的整数求和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为3的字符串，每个串前两个字符是数字,后一个字符是字母。 求这两个串中的整数的和</p></li><li><p>输入<br>一行，两个字符串</p></li><li><p>输出<br>两个字符串中整数的和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12B 34D</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><h2 id="010-计算2的幂"><a href="#010-计算2的幂" class="headerlink" title="010:计算2的幂"></a>010:计算2的幂</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定非负整数n，求2^n。</p></li><li><p>输入<br>一个整数n。0 &lt;= n &lt; 31。</p></li><li><p>输出<br>一个整数，即2的n次方。</p></li><li><p>样例输入<br>3</p></li><li><p>样例输出<br>8</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**inp)</span><br></pre></td></tr></table></figure><h2 id="011-计算多项式的值"><a href="#011-计算多项式的值" class="headerlink" title="011:计算多项式的值"></a>011:计算多项式的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>对于多项式f(x) = ax^3 + bx^2 + cx + d 和给定的a, b, c, d, x，计算f(x)的值。</p></li><li><p>输入<br>输入仅一行，包含5个实数，分别是x，及参数a、b、c、d的值，每个数都是绝对值不超过100的双精度浮点数。数与数之间以一个空格分开。</p></li><li><p>输出<br>输出一个实数，即f(x)的值，保留到小数点后7位。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.31 1.2 2 2 3</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">33.0838692</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x,a,b,c,d = <span class="built_in">float</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">2</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">3</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % <span class="built_in">float</span>(a*x**<span class="number">3</span>+b*x**<span class="number">2</span>+c*x+d))</span><br></pre></td></tr></table></figure><h2 id="012-奇偶数判断"><a href="#012-奇偶数判断" class="headerlink" title="012:奇偶数判断"></a>012:奇偶数判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数，判断该数是奇数还是偶数。</p></li><li><p>输入<br>输入仅一行，一个大于零的正整数n。</p></li><li><p>输出<br>输出仅一行，如果n是奇数，输出odd；如果n是偶数，输出even。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出<br>odd</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;even&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="013-点和正方形的关系"><a href="#013-点和正方形的关系" class="headerlink" title="013:点和正方形的关系"></a>013:点和正方形的关系</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>有一个正方形，四个角的坐标（x,y)分别是（1，-1），（1，1），（-1，-1），（-1，1），x是横轴，y是纵轴。写一个程序，判断一个给定的点是否在这个正方形内（包括正方形边界）。</p></li><li><p>输入<br>输入一行，包括两个整数x、y，以一个空格分开，表示坐标(x,y)。</p></li><li><p>输出<br>输出一行，如果点在正方形内，则输出yes，否则输出no。</p></li><li><p>样例输入<br>1 1</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> x&gt;=-<span class="number">1</span> <span class="keyword">and</span> x&lt;=<span class="number">1</span> <span class="keyword">and</span> y&gt;=-<span class="number">1</span> <span class="keyword">and</span> y&lt;=<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="014-三角形判断"><a href="#014-三角形判断" class="headerlink" title="014:三角形判断"></a>014:三角形判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数，分别表示三条线段的长度，判断这三条线段能否构成一个三角形。</p></li><li><p>输入<br>输入共一行，包含三个正整数，分别表示三条线段的长度，数与数之间以一个空格分开。</p></li><li><p>输出<br>如果能构成三角形，则输出“yes” ，否则输出“no”。</p></li><li><p>样例输入<br>3 4 5</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> c+b&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="015-计算邮资"><a href="#015-计算邮资" class="headerlink" title="015:计算邮资"></a>015:计算邮资</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>根据邮件的重量和用户是否选择加急计算邮费。计算规则：重量在1000克以内(包括1000克), 基本费8元。超过1000克的部分，每500克加收超重费4元，不足500克部分按500克计算；如果用户选择加急，多收5元。</p></li><li><p>输入<br>输入一行，包含整数和一个字符，以一个空格分开，分别表示重量（单位为克）和是否加急。如果字符是y，说明选择加急；如果字符是n，说明不加急。</p></li><li><p>输出<br>输出一行，包含一个整数，表示邮费。</p></li><li><p>样例输入<br>1200 y</p></li><li><p>样例输出<br>17</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), str1.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a&lt;=<span class="number">1000</span>:</span><br><span class="line">    out+=<span class="number">8</span></span><br><span class="line"><span class="keyword">elif</span> a&lt;=<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line"><span class="keyword">elif</span> a&gt;<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line">    out+=(<span class="built_in">int</span>((a-<span class="number">1500</span>)//<span class="number">500</span>)+<span class="number">1</span>)*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;y&quot;</span> == b:</span><br><span class="line">    out+=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure></li></ul><h2 id="016-分段函数"><a href="#016-分段函数" class="headerlink" title="016:分段函数"></a>016:分段函数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>编写程序，计算下列分段函数y=f(x)的值。</li></ul><p>y=-x+2.5；0 &lt;=x&lt; 5<br>y=2-1.5(x-3)(x-3)；5&lt;= x&lt;10<br>y=x/2-1.5；10&lt;=x&lt; 20</p><ul><li><p>输入<br>一个浮点数N，0&lt;=N&lt; 20</p></li><li><p>输出<br>输出N对应的分段函数值：f(N)。结果保留到小数点后三位。</p></li><li><p>样例输入<br>1.0</p></li><li><p>样例输出<br>1.500</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>().split()[<span class="number">0</span>])</span><br><span class="line">y = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;<span class="number">5</span>:</span><br><span class="line">    y=-x+<span class="number">2.5</span></span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">5</span> <span class="keyword">and</span> x&lt;<span class="number">10</span>:</span><br><span class="line">    y=<span class="number">2</span>-<span class="number">1.5</span>*(x-<span class="number">3</span>)*(x-<span class="number">3</span>)</span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">10</span> <span class="keyword">and</span> x&lt;<span class="number">20</span>:</span><br><span class="line">    y=x/<span class="number">2</span>-<span class="number">1.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.3f&quot;</span> % y)</span><br></pre></td></tr></table></figure></li></ul><h2 id="017-简单计算器"><a href="#017-简单计算器" class="headerlink" title="017:简单计算器"></a>017:简单计算器</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个最简单的计算器，支持<code>+, -, *, /</code> 四种运算。仅需考虑输入输出为整数的情况(除法结果就是商，忽略余数）</p></li><li><p>输入<br>输入只有一行，共有三个参数，其中第1、2个参数为整数，第3个参数为操作符<code>（+,-,*,/）</code>。</p></li><li><p>输出</p></li></ul><p>输出只有一行，一个整数，为运算结果。然而：</p><ol><li>如果出现除数为0的情况，则输出：Divided by zero!</li><li>如果出现无效的操作符(即不为<code>+, -, *, /</code> 之一），则输出：Invalid operator!</li></ol><ul><li><p>样例输入<br>1 2 +</p></li><li><p>样例输出<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), str1.split()[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;+&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;-&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;*&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;/&quot;</span> == c:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Divided by zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(a/b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid operator!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="018-大象喝水"><a href="#018-大象喝水" class="headerlink" title="018:大象喝水"></a>018:大象喝水</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。</p></li><li><p>输入<br>输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深h和底面半径r，单位都是厘米。</p></li><li><p>输出<br>输出一行，包含一个整数，表示大象至少要喝水的桶数。</p></li><li><p>样例输入<br>23 11</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>如果一个圆桶的深为h厘米，底面半径为r厘米，那么它最多能装Pi <em> r </em> r * h立方厘米的水。(设Pi=3.14159)1升 = 1000毫升，1毫升 = 1 立方厘米</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">20</span>//(<span class="number">3.14159</span>*b*b*a/<span class="number">1000</span>))+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="019-苹果和虫子2"><a href="#019-苹果和虫子2" class="headerlink" title="019:苹果和虫子2"></a>019:苹果和虫子2</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>你买了一箱n个苹果，很不幸的是买完时箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时你还有多少个完整的苹果？</p></li><li><p>输入<br>输入仅一行，包括n，x和y（均为整数）。</p></li><li><p>输出<br>输出也仅一行，剩下的苹果个数</p></li><li><p>样例输入<br>10 4 9</p></li><li><p>样例输出<br>7</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>==y%x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y/x))</span><br><span class="line"><span class="keyword">elif</span> y//x&gt;=<span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y//x-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="020-求整数的和与均值"><a href="#020-求整数的和与均值" class="headerlink" title="020:求整数的和与均值"></a>020:求整数的和与均值</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>读入n (1 &lt;= n &lt;= 10000)个整数，求它们的和与均值。</p></li><li><p>输入</p></li></ul><p>输入第一行是一个整数n，表示有n个整数。<br>第2~n+1行每行包含1个整数。每个整数的绝对值均不超过10000。</p><ul><li><p>输出<br>输出一行，先输出和，再输出平均值(保留到小数点后5位)，两个数间用单个空格分隔。</p></li><li><p>样例输入<br>4<br>344<br>222<br>343<br>222</p></li><li><p>样例输出<br>1131 282. 75000</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">a += <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;%.5f&quot;</span> % a/n)</span><br></pre></td></tr></table></figure><h2 id="021-整数序列的元素最大跨度值"><a href="#021-整数序列的元素最大跨度值" class="headerlink" title="021:整数序列的元素最大跨度值"></a>021:整数序列的元素最大跨度值</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个长度为n的非负整数序列，请计算序列的最大跨度值(最大跨度值=最大值减去最小值)。</p></li><li><p>输入<br>一共2行，第一行为序列的个数n (1 &lt;= n &lt;= 1000),第二行为序列的n个不超过1000的非负整数，整数之间以一个空格分隔。</p></li><li><p>输出<br>输出一行，表示序列的最大跨度值。</p></li><li><p>样例输入<br>6<br>3 0 8 7 5 9</p></li><li><p>样例输出<br>9</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">int</span>(s[i])</span><br><span class="line"><span class="keyword">if</span> a &gt;= temp:</span><br><span class="line">a = temp</span><br><span class="line"><span class="keyword">if</span> b &lt;= temp:</span><br><span class="line">b = temp</span><br><span class="line"><span class="built_in">print</span>(b - a)</span><br></pre></td></tr></table></figure><h2 id="022-奥运奖牌计数"><a href="#022-奥运奖牌计数" class="headerlink" title="022:奥运奖牌计数"></a>022:奥运奖牌计数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>2008年北京奥运会，A国的运动员参与了n天的决赛项目(1 ≤ n ≤ 17)。现在要统计一下A国所获得的金、银、铜牌数目及总奖牌数。</p></li><li><p>输入<br>输入n+1行，第1行是A国参与决赛项目的天数n，其后n行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。</p></li><li><p>输出<br>输出1行，包括4个整数，为A国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。</p></li><li><p>样例输入<br>3<br>1 0 3<br>3 1 0<br>0 3 0</p></li><li><p>样例输出<br>4 4 3 11</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a += <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">b += <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">c += <span class="built_in">int</span>(temp[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a, b, c, a+b+c)</span><br></pre></td></tr></table></figure><h2 id="023-鸡尾酒疗法"><a href="#023-鸡尾酒疗法" class="headerlink" title="023:鸡尾酒疗法"></a>023:鸡尾酒疗法</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>鸡尾酒疗法，原指“高效抗逆转录病毒治疗”(HAART) ，由美籍华裔科学家何大一于1996年提出，是通过三种或三种以上的抗病毒药物联合使用来治疗艾滋病。该疗法的应用可以减少单一用药产生的抗药性， 最大限度地抑制病毒的复制，使被破坏的机体免疫功能部分甚至全部恢复，从而延缓病程进展，延长患者生命，提高生活质量。人们在鸡尾酒疗法的基础上又提出了很多种改进的疗法。为了验证这些治疗方法是否在疗效上比鸡尾酒疗法更好，可用通过临床对照实验的方式进行。假设鸡尾酒疗法的有效率为x，新疗法的有效率为y，如果y-x大于5%，则效果更好，如果x-y大于5%，则效果更差，否则称为效果差不多。下面给出n组临床对照实验，其中第一组采用鸡尾酒疗法， 其他n-1组为各种不同的改进疗法。请写程序判定各种改进疗法效果如何。</p></li><li><p>输入<br>第一行为整数n(1 &lt; n &lt;= 20)；<br>其余n行每行两个整数，第一个整数是临床实验的总病例数(小于等于10000)，第二个疗效有效的病例数。<br>这n行数据中，第一行为鸡尾酒疗法的数据，其余各行为各种改进疗法的数据。</p></li><li><p>输出<br>有n-1行输出，分别表示对应改进疗法的效果:<br>如果效果更好，输出better；如果效果更差，输出worse；否则输出same</p></li><li><p>样例输入<br>5<br>125 99<br>112 89<br>145 99<br>9997<br>23 98</p></li><li><p>样例输出<br>same<br>worse<br>better<br>same</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(a[<span class="number">1</span>]) / <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">y = <span class="built_in">int</span>(temp[<span class="number">1</span>]) / <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">res = x - y</span><br><span class="line"><span class="keyword">if</span> res &gt; <span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;worse&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> res &lt; -<span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;better&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;same&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="024-角谷猜想"><a href="#024-角谷猜想" class="headerlink" title="024:角谷猜想"></a>024:角谷猜想</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>所谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘3加1，如果是偶数，则除以2，得到的结果再按照上述规则重复处理，最终总能够得到1。<br>如，假定初始整数为5，计算过程分别为16、8、4、2、1。<br>程序要求输入一个整数，将经过处理得到1的过程输出来。</p></li><li><p>输入<br>一个正整数N(N &lt;= 2,000,000)</p></li><li><p>输出<br>从输入整数到1的步骤，每一步为一行，每部中描述计算过程。最后一行输出”End”。如果输入为1，直接输出”End”。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5*3+1=16</span><br><span class="line">16/2=8</span><br><span class="line">8/2=4</span><br><span class="line">4/2=2</span><br><span class="line">2/2=1</span><br><span class="line">End</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span>(N == <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d/2=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d*3+1=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="025-正常血压"><a href="#025-正常血压" class="headerlink" title="025:正常血压"></a>025:正常血压</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>监护室每小时测量一次病人的血压， 若收缩压在90-140之间并且舒张压在60-90之间(包含端点值)则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。</p></li><li><p>输入<br>第一行为一个正整数n, n &lt; 100<br>后有n行，每行2个正整数，分别为一次测量的收缩压和舒张压，中间以一个空格分隔。</p></li><li><p>输出<br>输出仅一行，血压连续正常的最长小时数。</p></li><li><p>样例输入<br>4<br>100 80<br>90 50<br>120 60<br>140 90</p></li><li><p>样例输出<br>2</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">90</span> <span class="keyword">and</span> a &lt;= <span class="number">140</span>) <span class="keyword">and</span> (b &gt;= <span class="number">60</span> <span class="keyword">and</span> b &lt;= <span class="number">90</span>):</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= y:</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="026-数字反转"><a href="#026-数字反转" class="headerlink" title="026:数字反转"></a>026:数字反转</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数， 请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零(参见样例2)。</p></li><li><p>输入<br>输入共1行，一个整数N。<br>-1,000,000,000≤N≤1,0000000。</p></li><li><p>输出<br>输出共1行，一个整数，示反转后的新数。</p></li><li><p>样例输入<br>样例#1:<br>123<br>样例#2<br>-380</p></li><li><p>样例输出<br>样例#1:<br>321<br>样例#2:<br>-83</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">input</span>()<span class="comment">#输入字符串</span></span><br><span class="line">length1 = <span class="built_in">int</span>(<span class="built_in">len</span>(N))<span class="comment">#转为数组的长度</span></span><br><span class="line">n = <span class="built_in">int</span>(N)</span><br><span class="line">res = <span class="number">0</span><span class="comment">#最终结果</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;&gt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1-i-<span class="number">1</span>]) * <span class="number">10</span>**(length1-i-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;=0&quot;)</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#print(&quot;&lt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1-<span class="number">1</span>):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1 - i - <span class="number">1</span>]) * <span class="number">10</span> ** (length1 - i - <span class="number">2</span>)</span><br><span class="line">res *= -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="027-求特殊自然数"><a href="#027-求特殊自然数" class="headerlink" title="027:求特殊自然数"></a>027:求特殊自然数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个十进制自然数，它的七进制与九进制表示都是三位数，且七进制与九进制的三位数码表示顺序正好相反。编程求此自然数,并输出显示。</p></li><li><p>输入<br>无</p></li><li><p>输出<br>三行:<br>第一行是此自然数的十进制表示;<br>第二行是此自然数的七进制表示;<br>第三行是此自然数的九进制表示。</p></li><li><p>样例输入<br>(无)</p></li><li><p>样例输出<br>(不提供)</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最小的三位数是九进制的100，对应十进制是1*9**2</span></span><br><span class="line"><span class="comment">#最大的三位数是七进制的666，对应十进制是6*7**2+6*7**1+6*7**0</span></span><br><span class="line">a = <span class="number">9</span>**<span class="number">2</span>  <span class="comment">#循环左边界</span></span><br><span class="line">b = <span class="number">6</span> * <span class="number">7</span>**<span class="number">2</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">1</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">0</span>    <span class="comment">#循环右边界</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">    <span class="comment">#求取七进制</span></span><br><span class="line">    lst = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    lst[<span class="number">0</span>] = i // (<span class="number">7</span>**<span class="number">2</span>)</span><br><span class="line">    lst[<span class="number">2</span>] = i - lst[<span class="number">0</span>] * <span class="number">7</span>**<span class="number">2</span></span><br><span class="line">    lst[<span class="number">1</span>] = lst[<span class="number">2</span>] // <span class="number">7</span></span><br><span class="line">    lst[<span class="number">2</span>] -= lst[<span class="number">1</span>] * <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#反推九进制和十进制对比</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span>**<span class="number">2</span> * lst[<span class="number">2</span>] + <span class="number">9</span> * lst[<span class="number">1</span>] + lst[<span class="number">0</span>]) == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">0</span>], lst[<span class="number">1</span>], lst[<span class="number">2</span>], sep=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">2</span>], lst[<span class="number">1</span>], lst[<span class="number">0</span>], sep=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="028-数字统计"><a href="#028-数字统计" class="headerlink" title="028:数字统计"></a>028:数字统计</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>请统计某个给定范围[L, R]的所有整数中，数字2出现的次数。<br>比如给定范围[2, 22]，数字2在数2中出现了1次，在数12中出现1次，在数20中出现1次，在数21中出现1次，在数22中出现2次，所以数字2在该范围内一共出现了6次。</p></li><li><p>输入<br>输入共1行，为两个正整数L和R，之间用一个空格隔开。</p></li><li><p>输出<br>输出共1行，示数字2出现的次数。</p></li><li><p>样例输入<br>样例 #1:<br>2 22<br>样例 #2:<br>2 100</p></li><li><p>样例输出<br>样例 #1:<br>6<br>样例 #2:<br>20</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">temp2 = <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp2)):</span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> == <span class="built_in">int</span>(temp2[j]):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="029-求最大公约数问题"><a href="#029-求最大公约数问题" class="headerlink" title="029:求最大公约数问题"></a>029:求最大公约数问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定两个正整数，求它们的最大公约数。</p></li><li><p>输入<br>输入一行，包含两个正整数(&lt;1,000,000,000)。</p></li><li><p>输出<br>输出一个正整数，即这两个正整数的最大公约数。</p></li><li><p>样例输入<br>6 9</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>求最大公约数可以使用辗转相除法：<br>假设a &gt; b &gt; 0，那么a和b的最大公约数等于b和a%b的最大公约数，然后把b和a%b作为新一轮的输入。<br>由于这个过程会一直递减，直到a%b等于0的时候，b的值就是所要求的最大公约数。<br>比如：<br>9和6的最大公约数等于6和9%6=3的最大公约数。<br>由于6%3==0，所以最大公约数为3。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1, int2 = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fuc</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == a % b):</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = b</span><br><span class="line">        b = a % b</span><br><span class="line">        a = temp</span><br><span class="line">        fuc(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(int1 &gt;= int2):</span><br><span class="line">    fuc(int1, int2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fuc(int2, int1)</span><br></pre></td></tr></table></figure><h2 id="030-多少种取法"><a href="#030-多少种取法" class="headerlink" title="030:多少种取法"></a>030:多少种取法</h2><blockquote><p>总时间限制: 2000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数m，n，s<br>问从1到m这m个数里面取n个不同的数，使它们和是s，有多少种取法</p></li><li><p>输入<br>多组数据<br>输入的第一行是整数t，表示有t组数据<br>此后有t行，每行是一组数据<br>每组数据就是三个正整数，m，n，s ( n &lt;= 10,s &lt;= 20)</p></li><li><p>输出<br>对每组数据，输出答案</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">13 4 20</span><br><span class="line">12 5 18</span><br><span class="line">1 1 1</span><br><span class="line">1 2 1</span><br><span class="line">119 3 20</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">24</span><br></pre></td></tr></table></figure></li><li><p>提示<br>用函数ways(m, n, s)表示 从1到m这m个数里面取n个不同的数，使它们和是s的取法总数<br>显然，必须取m个数，不能不取(除非m == 0)</p></li></ul><p>1) 考虑如果 m &gt; s, 问题可以等价于什么？<br>2) 对于m&lt;= s的情况，把所有的取法分成两类:<br>第一类： 取m。则取m后，剩下的问题变成什么？<br>第二类： 不取m，那么剩下的问题变成什么？<br>3) 注意边界条件（即递归终止条件，即不需要递归的条件）<br>边界条件一般是 n,m,s = 0, = 1 之类的情况。</p><p>例如：从1-m这m个数里面，取0个数，使得它们的和是0，有几种取法? 答案是1。<br>从1到m这m个数里面，取0个数，使得它们的和是s(s&gt;0)，有几种取法? 答案是0。无解对应的答案就是0.<br>当 m &lt; n时，答案是0，因为没法取n个数<br>当 m = 0时，只要m和s有一个不是0，ways(m,n,s)就应该返回0。</p><p>递归的时候，函数的参数会减少，如果会出现某个参数一直没完没了减少下去，那就不对了。因此,边界条件一定要考虑周全，确保递归可以终止。</p><p>边界条件可以有多种写法。</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ways</span>(<span class="params">m, n, s</span>):</span><br><span class="line">    <span class="comment"># 第一类，各种特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">0</span> <span class="keyword">or</span> n &lt; <span class="number">0</span> <span class="keyword">or</span> m &lt;= <span class="number">0</span>:  <span class="comment"># 当输入数据小于0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当n==0且s==0时，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s &gt; <span class="number">0</span>:  <span class="comment"># 当取0个，但是s&gt;0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:  <span class="comment"># 判断n=1的情况</span></span><br><span class="line">        <span class="keyword">if</span> m &gt;= s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 若m&gt;=s,只有1种取法</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 若m&lt;s,则取法为0</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt;= n <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当m&gt;=n 并且 s=0时 ，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> s == <span class="number">1</span>:  <span class="comment"># 当n&gt;1且s=0时 ，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二类，讨论大类</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt; s:  <span class="comment"># 当m&gt;s时</span></span><br><span class="line">        <span class="keyword">if</span> n == s <span class="keyword">or</span> n &gt; s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">1</span> &lt; n &lt; s:</span><br><span class="line">            <span class="keyword">return</span> ways(s - <span class="number">1</span>, n, s)</span><br><span class="line">    <span class="keyword">elif</span> m &lt; s:  <span class="comment"># 当m&lt;s时</span></span><br><span class="line">        <span class="keyword">return</span> ways(m - <span class="number">1</span>, n - <span class="number">1</span>, s - m) + ways(m - <span class="number">1</span>, n, s)  <span class="comment"># 当取m时与不取m时的和</span></span><br><span class="line">    <span class="keyword">elif</span> m == s:  <span class="comment"># 当m=s时</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; m:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ways(m - <span class="number">1</span>, n, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">    m, n, s = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(ways(m, n, s))</span><br></pre></td></tr></table></figure><h2 id="031-石头剪刀布"><a href="#031-石头剪刀布" class="headerlink" title="031:石头剪刀布"></a>031:石头剪刀布</h2><blockquote><p>总时间限制：1000ms 内存限制：65536kB</p></blockquote><ul><li>描述<br>石头剪刀布是常见的猜拳游戏。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出拳一样，则不分胜负。</li></ul><p>一天，小A和小B正好在玩石头剪刀布。已知他们的出拳都是有周期性规律的，比如：“石头-布-石头-剪刀-石头-布-石头-剪刀……”，就是以“石头-布-石头-剪刀”为周期不断循环的。请问，小A和小B比了N轮之后，谁赢的轮数多？</p><ul><li><p>输入<br>输入包含三行。<br>第一行包含三个整数：N，NA，NB，分别表示比了N轮，小A出拳的周期长度，小B出拳的周期长度。0 &lt; N， NA， NB &lt; 100。<br>第二行包含NA个整数，表示小A出拳的规律。<br>第三行包含NB个整数，表示小B出拳的规律。<br>其中，0表示”石头”，2表示”剪刀”，5表示”布”。相邻两个整数之间用单个空格隔开。</p></li><li><p>输出<br>输出一行，如果小A赢的轮数多，输出A；如果小B赢的轮数多，输出B；如果两人打平，输出draw。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 3 4</span><br><span class="line">0 2 5</span><br><span class="line">0 5 0 2</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提示<br>对于测试数据，猜拳过程为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A：0 2 5 0 2 5 0 2 5 0</span><br><span class="line">B：0 5 0 2 0 5 0 2 0 5</span><br></pre></td></tr></table></figure><p>A赢了4轮，B赢了2轮，双方打平4轮，所以A赢的轮数多。</p></li><li><p>提交代码</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0</th><th style="text-align:center">2</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">平(0)</td><td style="text-align:center">B(2)</td><td style="text-align:center">A(5)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">A(2)</td><td style="text-align:center">平(4)</td><td style="text-align:center">B(7)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">B(5)</td><td style="text-align:center">A(7)</td><td style="text-align:center">平(10)</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">str1, strA, strB = <span class="built_in">input</span>(), <span class="built_in">input</span>(), <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">N, NA, NB = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line">A, B = strA.split(), strB.split()</span><br><span class="line"></span><br><span class="line">countA, countB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    temp = <span class="built_in">int</span>(A[i % NA]) + <span class="built_in">int</span>(B[i % NB])</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == temp <span class="keyword">or</span> <span class="number">4</span> == temp <span class="keyword">or</span> <span class="number">10</span> == temp):</span><br><span class="line">        countA += <span class="number">1</span></span><br><span class="line">        countB += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">2</span> == temp <span class="keyword">or</span> <span class="number">7</span> == temp):</span><br><span class="line">        <span class="keyword">if</span>(A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">5</span> == temp):</span><br><span class="line">        <span class="keyword">if</span> (A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(countA &gt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA &lt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA == countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draw&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="032-统计数字字符个数"><a href="#032-统计数字字符个数" class="headerlink" title="032:统计数字字符个数"></a>032:统计数字字符个数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一行字符，统计出其中数字字符的个数。</p></li><li><p>输入<br>一行字符串，总长度不超过255。</p></li><li><p>输出<br>输出为1行，输出字符串里面数字字符的个数。</p></li><li><p>样例输入<br>Peking University is set up at 1898.</p></li><li><p>样例输出<br>4</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].isdigit():</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="033-大小写字母互换"><a href="#033-大小写字母互换" class="headerlink" title="033:大小写字母互换"></a>033:大小写字母互换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>把一个字符串中所有出现的大写字母都替换成小写字母，同时把小写字母替换成大写字母。</p></li><li><p>输入<br>输入一行：待互换的字符串。</p></li><li><p>输出<br>输出一行：完成互换的字符串（字符串长度小于80）。</p></li><li><p>样例输入<br>If so, you already have a Google Account. You can sign in on the right. </p></li><li><p>样例输出<br>iF SO, YOU ALREADY HAVE A gOOGLE aCCOUNT. yOU CAN SIGN IN ON THE RIGHT. </p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].islower():</span><br><span class="line">        str2 += str1[i].upper()</span><br><span class="line">    <span class="keyword">elif</span> str1[i].isupper():</span><br><span class="line">        str2 += str1[i].lower()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="034-过滤多余的空格"><a href="#034-过滤多余的空格" class="headerlink" title="034:过滤多余的空格"></a>034:过滤多余的空格</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个句子中也许有多个连续空格，过滤掉多余的空格，只留下一个空格。</p></li><li><p>输入<br>一行，一个字符串（长度不超过200），句子的头和尾都没有空格。</p></li><li><p>输出<br>过滤之后的句子。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello      world.This is    c language.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world.This is c language.</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split()</span><br><span class="line">str2 = str1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    str2 += <span class="string">&quot; &quot;</span></span><br><span class="line">    str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="035-找第一个只出现一次的字符"><a href="#035-找第一个只出现一次的字符" class="headerlink" title="035:找第一个只出现一次的字符"></a>035:找第一个只出现一次的字符</h2><blockquote><p>总时间限制: 1000ms 内存限制：65536kB</p></blockquote><ul><li><p>描述<br>给定一个只包含小写字母的字符串，请你找到第一个仅出现一次的字符。如果没有，输出no。</p></li><li><p>输入<br>一个字符串，长度小于100000。</p></li><li><p>输出<br>输出第一个仅出现一次的字符，若没有则输出no。</p></li><li><p>样例输入<br>abcabd</p></li><li><p>样例输出<br>c</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1 = <span class="number">0</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    char1 = str1[i]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str1[j] == str1[i] <span class="keyword">and</span> i != j:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        int1 = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int1 == <span class="number">0</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(str1[int1])</span><br></pre></td></tr></table></figure><h2 id="036-判断字符串是否为回文"><a href="#036-判断字符串是否为回文" class="headerlink" title="036:判断字符串是否为回文"></a>036:判断字符串是否为回文</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个字符串，输出该字符串是否回文。回文是指顺读和倒读都一样的字符串。</p></li><li><p>输入<br>输入为一行字符串（字符串中没有空白字符，字符串长度不超过100）。</p></li><li><p>输出<br>如果字符串是回文，输出yes；否则，输出no。</p></li><li><p>样例输入<br>abcdedcba</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(str1)/<span class="number">2</span>)):</span><br><span class="line">    str2 += str1[i]</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">if</span> (str2[i] != str1[<span class="built_in">len</span>(str1)-i-<span class="number">1</span>]):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="037-字符串最大跨距"><a href="#037-字符串最大跨距" class="headerlink" title="037:字符串最大跨距"></a>037:字符串最大跨距</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>有三个字符串S,S1,S2，其中，S长度不超过300，S1和S2的长度不超过10。想检测S1和S2是否同时在S中出现，且S1位于S2的左边，并在S中互不交叉（即，S1的右边界点在S2的左边界点的左侧）。计算满足上述条件的最大跨距（即，最大间隔距离：最右边的S2的起始点与最左边的S1的终止点之间的字符数目）。如果没有满足条件的S1，S2存在，则输出-1。</p><p>例如，S = “abcd123ab888efghij45ef67kl”, S1=”ab”, S2=”ef”，其中，S1在S中出现了2次，S2也在S中出现了2次，最大跨距为：18。</p><ul><li><p>输入<br>三个串：S, S1, S2，其间以逗号间隔（注意，S, S1, S2中均不含逗号和空格）；</p></li><li><p>输出<br>S1和S2在S最大跨距；若在S中没有满足条件的S1和S2，则输出-1。</p></li><li><p>样例输入<br>abcd123ab888efghij45ef67kl,ab,ef</p></li><li><p>样例输出<br>18</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">S, S1, S2 = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">StartS1, StartS2 = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">StartS1 = S.find(S1)</span><br><span class="line">StartS2 = <span class="built_in">len</span>(S) - S[::-<span class="number">1</span>].find(S2[::-<span class="number">1</span>]) - <span class="built_in">len</span>(S2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> StartS1 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS2 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS1 + <span class="built_in">len</span>(S1) &gt; StartS2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(StartS2 - (StartS1 + <span class="built_in">len</span>(S1)))</span><br></pre></td></tr></table></figure><h2 id="038-找出全部子串位置"><a href="#038-找出全部子串位置" class="headerlink" title="038:找出全部子串位置"></a>038:找出全部子串位置</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入两个串s1，s2，找出s2在s1中所有出现的位置</li></ul><p>两个子串的出现不能重叠。例如’aa’在 aaaa 里出现的位置只有0,2</p><ul><li><p>输入<br>第一行是整数n<br>接下来有n行，每行两个不带空格的字符串s1，s2</p></li><li><p>输出<br>对每行，从小到大输出s2在s1中所有的出现位置。位置从0开始算<br>如果s2没出现过，输出 “no”<br>行末多输出空格没关系</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">ababcdefgabdefab ab</span><br><span class="line">aaaaaaaaa a</span><br><span class="line">aaaaaaaaa aaa </span><br><span class="line">112123323 a</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 2 9 14 </span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br><span class="line">0 3 6 </span><br><span class="line">no</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s[<span class="number">0</span>]:</span><br><span class="line">        a = s[<span class="number">0</span>].find(s[<span class="number">1</span>],m)</span><br><span class="line">        <span class="keyword">if</span> a == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> total == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            m = a + <span class="built_in">len</span>(s[<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(a,<span class="string">&quot;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="039-万年历"><a href="#039-万年历" class="headerlink" title="039:万年历"></a>039:万年历</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定年月日，求星期几。已知2020年11月18日是星期三。另外，本题有公元0年，这个和真实的纪年不一样</p></li><li><p>输入<br>第一行是n(n&lt;=30)，表示有n组数据<br>接下来n行，每行是一组数据。<br>每行三个整数y，m，d，分别代表年，月，日。(-1000000&lt;=y&lt;=1000000)</p></li></ul><p>若今年是2017年，则往前就是2016年，2015年….一直数到2年，1年，再往前就是0年，-1年，-2年…..</p><ul><li>输出<br>对每组数据，输出星期几，星期几分别用</li></ul><p>“Sunday”,”Monday”,”Tuesday”,”Wednesday”,”Thursday”, “Friday”,”Saturday” 表示</p><p>如果月份和日期不合法，输出”Illegal”</p><ul><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2017 2 29</span><br><span class="line">2017 13 2</span><br><span class="line">0 1 1</span><br><span class="line">-2 3 4</span><br><span class="line">2017 10 18</span><br><span class="line">2015 12 31</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Illegal</span><br><span class="line">Illegal</span><br><span class="line">Saturday</span><br><span class="line">Wednesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">judge_week</span>(<span class="params">year, month, day</span>):</span><br><span class="line">    lst1 = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    lst2 = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    date = days = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    lst_days = [<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">29</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">28</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> year &gt;= <span class="number">1</span>:  <span class="comment">#1年1月1日为星期一</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, year):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>    <span class="comment">#累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month-<span class="number">1</span>):</span><br><span class="line">                date += lst2[i]    <span class="comment">#累加整月数</span></span><br><span class="line">        total=date+day+days</span><br><span class="line">        x=total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[x])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(year + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>  <span class="comment"># 累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst2[i]  <span class="comment"># 累加整月数</span></span><br><span class="line">        total = date - day + <span class="number">1</span> + days</span><br><span class="line">        x = total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[(<span class="number">8</span> - x)%<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    year, month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    judge_week(year, month, day)</span><br></pre></td></tr></table></figure><h2 id="040-成绩排序"><a href="#040-成绩排序" class="headerlink" title="040:成绩排序"></a>040:成绩排序</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。</p></li><li><p>输入<br>第一行为n (0 &lt; n &lt; 20)，表示班里的学生数目；<br>接下来的n行，每行为每个学生的名字和他的成绩, 中间用单个空格隔开。名字只包含字母且长度不超过20，成绩为一个不大于100的非负整数。</p></li><li><p>输出<br>把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Kitty 80</span><br><span class="line">Hanmeimei 90</span><br><span class="line">Joey 92</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Joey 92</span><br><span class="line">Hanmeimei 90 </span><br><span class="line">Kitty 80</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">student = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    temp1 = [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])]</span><br><span class="line">    student.append(temp1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -x[<span class="number">1</span>], x[<span class="number">0</span>]</span><br><span class="line">student.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(student[i][<span class="number">0</span>], student[i][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="041-图像模糊处理"><a href="#041-图像模糊处理" class="headerlink" title="041:图像模糊处理"></a>041:图像模糊处理</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定n行m列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：<br>1.四周最外侧的像素点灰度值不变；<br>2.中间各像素点新灰度值为该像素点及其上下左右相邻四个像素点原灰度值的平均（舍入到最接近的整数）。</p></li><li><p>输入<br>第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 &lt;= n &lt;= 100，1 &lt;= m &lt;= 100。<br>接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。</p></li><li><p>输出<br>n行，每行m个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">100 0 100 0 50</span><br><span class="line">50 100 200 0 0</span><br><span class="line">50 50 100 100 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100 0 100 0 50</span><br><span class="line">50 80 100 60 0</span><br><span class="line">50 80 100 90 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#print(n,m)</span></span><br><span class="line"></span><br><span class="line">picture = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    str1 = <span class="built_in">input</span>()</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        temp += [<span class="built_in">int</span>(str1.split()[j])]</span><br><span class="line">    picture.append(temp)</span><br><span class="line"><span class="comment">#print(picture)</span></span><br><span class="line"><span class="comment">#print(picture[0][1])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">outpicture = copy.deepcopy(picture)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m-<span class="number">1</span>):</span><br><span class="line">            temp = (picture[i-<span class="number">1</span>][j] + picture[i+<span class="number">1</span>][j] + picture[i][j] + picture[i][j-<span class="number">1</span>] + picture[i][j+<span class="number">1</span>]) / <span class="number">5</span></span><br><span class="line">            outpicture[i][j] = <span class="built_in">round</span>(temp)</span><br><span class="line"><span class="comment">#print(outpicture)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">print</span>(outpicture[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="042-向量点积计算"><a href="#042-向量点积计算" class="headerlink" title="042:向量点积计算"></a>042:向量点积计算</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>在线性代数、计算几何中，向量点积是一种十分重要的运算。</li></ul><p>给定两个n维向量 $a=(a_1, a_2, …, a_n)$ 和 $ b=(b_1, b_2, …, b_n) $，求点积$ a·b=a_1 b_1+a_2 b_2+…+a_n b_n $。</p><ul><li><p>输入<br>第一行是一个整数n。1 &lt;= n &lt;= 1000。<br>第二行包含n个整数$ a_1, a_2, …, a_n $。<br>第三行包含n个整数$ b_1, b_2, …, b_n $。<br>相邻整数之间用单个空格隔开。每个整数的绝对值都不超过1000。</p></li><li><p>输出<br>一个整数，即两个向量的点积结果。</p></li><li><p>样例输入<br>3<br>1 4 6<br>2 1 5</p></li><li><p>样例输出<br>36</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">stra = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">strb = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    result += <span class="built_in">int</span>(stra[i]) * <span class="built_in">int</span>(strb[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="043-病人排队"><a href="#043-病人排队" class="headerlink" title="043:病人排队"></a>043:病人排队</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：</li></ul><ol><li>老年人（年龄 &gt;= 60岁）比非老年人优先看病。</li><li>老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</li><li>非老年人按登记的先后顺序看病。</li></ol><ul><li><p>输入<br>第1行，输入一个小于100的正整数，表示病人的个数；<br>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。</p></li><li><p>输出<br>按排好的看病顺序输出病人的ID，每行一个。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">021075 40</span><br><span class="line">004003 15</span><br><span class="line">010158 67</span><br><span class="line">021033 75</span><br><span class="line">102012 30</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">021033</span><br><span class="line">010158</span><br><span class="line">021075</span><br><span class="line">004003</span><br><span class="line">102012</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">patient = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    patient.append(temp)</span><br><span class="line"></span><br><span class="line">patientA, patientB = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(patient[i][<span class="number">1</span>]) &gt;= <span class="number">60</span>:</span><br><span class="line">        patientA.append(patient[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        patientB.append(patient[i])</span><br><span class="line"><span class="comment">#print(patientA)</span></span><br><span class="line"><span class="comment">#print(patientB)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -<span class="built_in">int</span>(x[<span class="number">1</span>])</span><br><span class="line">patientA.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientA)):</span><br><span class="line">    <span class="built_in">print</span>(patientA[i][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientB)):</span><br><span class="line">    <span class="built_in">print</span>(patientB[i][<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="044-矩阵乘法"><a href="#044-矩阵乘法" class="headerlink" title="044:矩阵乘法"></a>044:矩阵乘法</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>计算两个矩阵的乘法。<code>n * m</code> 阶的矩阵A乘以 <code>m * k</code> 阶的矩阵B得到的矩阵C是 <code>n * k</code> 阶的，且<code>C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + …… +A[i][m-1] * B[m-1][j]</code> (<code>C[i][j]</code> 表示C矩阵中第i行第j列元素)。</p></li><li><p>输入<br>第一行为n, m, k，表示A矩阵是n行m列，B矩阵是m行k列，n, m, k均小于100<br>然后先后输入A和B两个矩阵，A矩阵n行m列，B矩阵m行k列，矩阵中每个元素的绝对值不会大于1000。</p></li><li><p>输出<br>输出矩阵C，一共n行，每行k个整数，整数之间以一个空格分开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tempstr = <span class="built_in">input</span>()</span><br><span class="line">n, m, k = <span class="built_in">int</span>(tempstr.split()[<span class="number">0</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">1</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">A, B, C, CC = [], [], [], <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    D = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">           d += <span class="built_in">int</span>(A[i][l]) * <span class="built_in">int</span>(B[l][j])</span><br><span class="line">        D.append(d)</span><br><span class="line">    C = C + D</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n*k):</span><br><span class="line">    CC = CC + <span class="built_in">str</span>(C[i])</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % k==<span class="number">0</span>:</span><br><span class="line">        CC += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        CC += <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(CC)</span><br></pre></td></tr></table></figure></li></ul><h2 id="045-回文子串"><a href="#045-回文子串" class="headerlink" title="045:回文子串"></a>045:回文子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>给定一个字符串，输出所有长度至少为2的回文子串。</li></ul><p>回文子串即从左往右输出和从右往左输出结果是一样的字符串，比如：abba，cccdeedccc都是回文字符串。</p><ul><li><p>输入<br>一个字符串，由字母或数字组成。长度500以内。</p></li><li><p>输出<br>输出所有的回文子串，每个子串一行。<br>子串长度小的优先输出，若长度相等，则出现位置靠左的优先输出。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123321125775165561</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">33</span><br><span class="line">11</span><br><span class="line">77</span><br><span class="line">55</span><br><span class="line">2332</span><br><span class="line">2112</span><br><span class="line">5775</span><br><span class="line">6556</span><br><span class="line">123321</span><br><span class="line">165561</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span> - i):</span><br><span class="line">        temp = str1[j:j + i]</span><br><span class="line">        <span class="keyword">if</span> temp == temp[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure></li></ul><h2 id="046-校园食宿预订系统"><a href="#046-校园食宿预订系统" class="headerlink" title="046:校园食宿预订系统"></a>046:校园食宿预订系统</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>某校园为方便学生订餐，推出食堂预定系统。食宿平台会在前一天提供菜单，学生在开饭时间前可订餐。 食堂每天会推出m个菜，每个菜有固定的菜价和总份数，售卖份数不能超过总份数。 假设共有n个学生点餐，每个学生固定点3个菜，当点的菜售罄时, 学生就买不到这个菜了。 请根据学生预定记录，给出食堂总的预定收入 数据满足1 &lt;= n &lt;= 6000，3 &lt;= m &lt;= 6000，单品菜价不大于1000元，每个菜的配额不超过3000</p></li><li><p>输入<br>第一行两个整数n和m，代表有n个学生订餐，共有m个可选的菜<br>下面m行，每行三个元素，分别是菜名、售价和可提供量，保证菜名不重合，菜价为整数<br>下面n行，每行三个元素，表示这个学生点的三个菜的菜名</p></li><li><p>输出<br>一个整数，表示食堂的收入</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">yangroupaomo 13 10</span><br><span class="line">jituifan 7 5</span><br><span class="line">luosifen 16 3</span><br><span class="line">xinlamian 12 20</span><br><span class="line">juruo_milktea 999 1</span><br><span class="line">yangroupaomo luosifen juruo_milktea</span><br><span class="line">luosifen xinlamian jituifan</span><br><span class="line">yangroupaomo jituifan juruo_milktea</span><br><span class="line">jituifan xinlamian luosifen</span><br><span class="line">yangroupaomo yangroupaomo yangroupaomo</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p></li></ul><p>1157</p><ul><li><p>提示<br>如果用python做，要用字典，<br>如果用其它语言做，也要用类似的数据结构<br>否则会超时<br>名字长度范围没有给出，长度不会太离谱。请自己选用合适的办法确保这不是个问题</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])</span><br><span class="line">A, B, C = <span class="built_in">dict</span>(), <span class="built_in">dict</span>(), <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment"># 菜谱A：&#123;菜名:[售价,现在数量]&#125;</span></span><br><span class="line"><span class="comment"># 学生B：&#123;学生编号:[菜名0,菜名1,菜名2]&#125;</span></span><br><span class="line"><span class="comment"># 菜谱C：&#123;菜名:[售价,原始数量]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜谱读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    A.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line">    C.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生选菜读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    B.update(&#123;i: [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历学生点菜</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> B.values():</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">0</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">0</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">1</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">1</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">1</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">2</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">2</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">2</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"><span class="comment">#print(C)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="comment"># 遍历菜谱计算价格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A.keys():</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> C:</span><br><span class="line">        <span class="built_in">sum</span> += (C[i][<span class="number">1</span>] - A[i][<span class="number">1</span>]) * C[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="047-找出所有整数"><a href="#047-找出所有整数" class="headerlink" title="047:找出所有整数"></a>047:找出所有整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>给一段文字，可能有中文，把里面的所有非负整数都找出来，不需要去掉前导0。如果碰到 “012.34”这样的就应该找出两个整数012和34，碰到0.050，就找出0和050</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m, s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>一段文字</p><ul><li>输出</li></ul><p>按顺序输出所有整数，每个整数一行</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给一段文字,可能有中文,把里面的所有整数都找出来,不需要去掉前导0去。如果碰到 &quot;012.34&quot;这样的就应该找出两个整数012和34,碰到0.050,就找出0和050</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">012</span><br><span class="line"><span class="number">34</span></span><br><span class="line">012</span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">050</span><br><span class="line"><span class="number">0</span></span><br><span class="line">050</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">&#x27;\d+&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="048-找出所有整数和小数"><a href="#048-找出所有整数和小数" class="headerlink" title="048:找出所有整数和小数"></a>048:找出所有整数和小数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>给一段文字，可能有中文，把里面的所有非负整数和小数找出来，不需要去掉前导0或小数点后面多余的0， 然后依次输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m,s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li><p>输入<br>一段文字</p></li><li><p>输出<br>按顺序输出所有整数和小数，每个整数一行</p></li><li><p>样例输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给一段文字，可能有中文，把里面的0所有78..76数都.12找出来。0334.0000</span><br><span class="line">如果碰到 &quot;0012.3400&quot;这样0的就24.23应该找出两个0.34400整数 00.00和00.4455340000,碰到 00.050</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">78</span><br><span class="line">76</span><br><span class="line">12</span><br><span class="line">0334.0000</span><br><span class="line">0012.3400</span><br><span class="line">0</span><br><span class="line">24.23</span><br><span class="line">0.34400</span><br><span class="line">00.00</span><br><span class="line">00.4455340000</span><br><span class="line">00.050</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">r&#x27;\d+\.\d+|\d+&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="049-找出小于100的整数"><a href="#049-找出小于100的整数" class="headerlink" title="049:找出小于100的整数"></a>049:找出小于100的整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>有给定的两行输入，在每一行的输入中提取在[0,100)内的整数(不包括100)并依次输出。注意要排除负数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = <span class="string">r&quot;(^|[^0-9-])(\d&#123;1,2&#125;)([^0-9]|$)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m,s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">// 在此处补充你的代码</span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>12高兴-23大小256的数1234好啊24对的好0这个1这个2这个12这个134这个0123这个12<br>123高兴-23大小256的数1234好啊24对的23这</p><ul><li><p>输出<br>12<br>24<br>0<br>1<br>2<br>12<br>12<br>23</p></li><li><p>样例输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12高兴-23大小256的数1234好啊24对的好0这个1这个2这个12这个134这个0123这个12</span><br><span class="line">123高兴-23大小256的数1234好啊24对的23这</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">24</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">12</span><br><span class="line">12</span><br><span class="line">24</span><br><span class="line">23</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="050-密码判断"><a href="#050-密码判断" class="headerlink" title="050:密码判断"></a>050:密码判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>用户密码的格式是： 1） 以大写或小写字母开头 2) 至少要有8个字符，最长不限 3) 由字母、数字、下划线或 ‘-‘ 组成 输入若干字符串，判断是不是符合密码的条件。如果是，输出 yes 如果不是，输出 no</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> re.match(m,s) != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>若干行</p><ul><li>输出</li></ul><p>对每行输入，判断其是否符合密码格式，相应地输出 yes 或no</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abdc</span><br><span class="line">a223_b-cdef</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">&#x27;^[a-zA-Z][\w-]&#123;7,&#125;$&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="051-寻找h3"><a href="#051-寻找h3" class="headerlink" title="051:寻找h3"></a>051:寻找h3</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>程序填空，输出指定结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = \</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span>  re.findall(m,<span class="string">&quot;cdef&lt;h3&gt;abd&lt;/h3&gt;&lt;h3&gt;bcK&lt;/h3&gt;&lt;h3&gt;123&lt;/h3&gt;KJM&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><ul><li><p>输入<br>无</p></li><li><p>输出<br>abd<br>bcK<br>123</p></li><li><p>样例输入<br>无</p></li><li><p>样例输出</p></li></ul><p>abd<br>bcK<br>123</p><ul><li>提示</li></ul><p>请注意，同一行的代码要在中间换行，在python 里的写法是加 “\”<br>如<br>x = \<br>3<br>即为<br>x = 3</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&quot;(?&lt;=&lt;h3&gt;)\w+(?=&lt;/h3&gt;)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="052-找-lt-gt-中的数"><a href="#052-找-lt-gt-中的数" class="headerlink" title="052:找 &lt; &gt; 中的数"></a>052:找 &lt; &gt; 中的数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>输入一串字符，将输入中的，在 &lt; &gt; 里面的，没有前导0的少于4位的整数依次输出。单独的0也要输出。</p><ul><li>输入</li></ul><p>第一行是整数n，表示后面一共有n个字符串<br>接下来有n行字符串</p><ul><li>输出</li></ul><p>对每个字符串，输出题目要求的结果</p><ul><li>样例输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">abc&lt;<span class="number">123</span>&gt;cd&lt;0456&gt;,<span class="number">78</span>,<span class="number">123</span>&lt;<span class="number">3554</span>&gt;1a&lt;<span class="number">38</span>&gt;ab&lt;08&gt;,<span class="number">1</span>&lt;<span class="number">0</span>&gt;111cd&lt;<span class="number">3</span>&gt;</span><br><span class="line">&lt;<span class="number">12</span>&gt;cd&lt;<span class="number">77347</span>&gt;</span><br><span class="line">&lt;&gt;</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123 38 0 3</span><br><span class="line">12</span><br><span class="line">NONE</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;\&lt;(0|[1-9]\d&#123;0,2&#125;)\&gt;&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    lst = re.findall(m, s)</span><br><span class="line">    <span class="keyword">if</span> lst == []:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NONE&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(*lst)</span><br></pre></td></tr></table></figure><h2 id="053-电话号码"><a href="#053-电话号码" class="headerlink" title="053:电话号码"></a>053:电话号码</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在一串文字中抽取tag及其里面包含的电话号码的区号。</span><br><span class="line">tag的定义:</span><br><span class="line">&quot;&lt;X&gt;&quot;和它右边离他最近的那个&quot;&lt;/X&gt;&quot;构成一个tag。 &quot;&lt;X&gt;&quot;和&quot;&lt;/X&gt;&quot;之间可以有</span><br><span class="line">任何文字。</span><br><span class="line">X是一个任意长度不为0的字符串，由小写宇母组成。&quot;&lt;X&gt;&quot;和&quot;&lt;/X&gt;&quot; 里面的X必须相</span><br><span class="line">同。比如:</span><br><span class="line">&lt;abc&gt;this is .ds &lt;/abc&gt;</span><br><span class="line">就是一个tag,但:</span><br><span class="line">&lt;abc&gt;this is .,ds &lt;/bc&gt;</span><br><span class="line">不是一个tag。.</span><br><span class="line">电话号码由括号里的1到2个数字(表示区号)加&#x27;-&#x27;再加3个数字构成。</span><br><span class="line">(01)-737</span><br><span class="line">(1)-849</span><br><span class="line">(20)-784</span><br><span class="line">上面这些都是电话号码</span><br><span class="line">注意,电话号码中最后一个数字的右边，不能是数字。如:</span><br><span class="line">(10)-1234</span><br><span class="line">不是电话号码，也不能认为其中的(10)-123 是一个电话号码</span><br><span class="line">给定-行文本，请抽取出其中的tag及其包含的电话号码中的区号。一个tag里面可能有多</span><br><span class="line">个电话号码，则输出时，tag 里面的区号用逗号隔开。</span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>有多组数据，每组一行</p><ul><li>输出</li></ul><p>对每组数据， 抽取出其中的tag及其包含的电话号码中的区号输出。每个tag输出为一行。tag外的电话号码不用理会。<br>如果找不到tag及其包含的电话号码， 则输出NONE<br>数据保证不会出现两个tag重叠的情况。</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">&lt;bb&gt;(01)-123&lt;a&gt;bbb(02)-2784KK&lt;/a&gt;&lt;xy&gt;stk(1)-123(03)-345b&lt;/xy&gt;(04)-123&lt;/xy&gt;&lt;z&gt;(05)-123&lt;/zz&gt;zz&lt;yy&gt;(06)-123&lt;/yy&gt;</span><br><span class="line">&lt;bb&gt;(01)-123&lt;a&gt;&lt;k&gt;1223&lt;/k&gt;&lt;a&gt;(01)-12&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;xy&gt;1,03&lt;/xy&gt;</span><br><span class="line">&lt;yy&gt;06&lt;/yy&gt;</span><br><span class="line">NONE </span><br></pre></td></tr></table></figure><ul><li>提示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1） tag中间可以有任何文字，比如  &lt; ab &gt;xddd&lt; /cd&gt;&lt; /ab&gt;也是一个合法tag</span><br><span class="line">2） 在分组的右边可以通过分组的编号引用该分组所匹配的子串</span><br><span class="line">m = r&#x27;(((ab*)c)d)e\3&#x27; #要求 ab*cde后面跟着第三分组的内容</span><br><span class="line">r = re.match(m,&quot;abbbcdeabbbkfg&quot;) # 后面的bbb少一个b则不能匹配，因为第三分组是abbb</span><br><span class="line">print(r.group(3)) # abbb</span><br><span class="line">print(r.group()) # abbbcdeabbb</span><br><span class="line">3) 如果一个正则表达式搞不定，可以先用一个正则表达式抽取某个中间结果，再在中间结果里面手工或者用另外的正则表达式进一步分析</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = <span class="string">r&#x27;(&lt;([a-z]+)&gt;.+?&lt;/)\2&gt;&#x27;</span></span><br><span class="line">n = <span class="string">r&#x27;\((\d&#123;1,2&#125;)\)-\d&#123;3&#125;(?=[^\d])&#x27;</span></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    falg1 = <span class="number">0</span></span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    l1 = re.findall(m, s)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> l2 <span class="keyword">in</span> l1:</span><br><span class="line">            l3 = <span class="built_in">list</span>(re.findall(n, l2[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(l3) != <span class="number">0</span>:</span><br><span class="line">                time = <span class="built_in">len</span>(l3)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&lt;&#x27;</span> + l2[<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(l3[<span class="number">0</span>], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, time):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span> + l3[x], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&lt;/&#x27;</span> + l2[<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">                falg1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> falg1 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="054-时间处理"><a href="#054-时间处理" class="headerlink" title="054:时间处理"></a>054:时间处理</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>求从给定时刻开始过了给定时间后的时刻。</p></li><li><p>输入<br>有若干组数据。<br>每组数据有2行，第一行是给定时刻，可能有两种格式<br>格式1) 年 月 日 时 分(时是24小时制)<br>格式2) 月-日-年 时:分 上下午 （时是12小时制,注意没有秒)<br>第二行是时间增量，也可能有两种格式<br>格式1) 一个整数，代表多少秒<br>格式2) 日 时 分</p></li><li><p>输出<br>对每组数据，输出给定时刻加上时间增量后的新时刻,24小时制<br>格式如： 1982-12-10 12:12:28</p></li><li><p>样例输入<br>1982 12 1 23 0<br>737848<br>1982 12 1 23 15<br>180 2 18<br>12-01-1982 1:23 AM<br>737848</p></li><li><p>样例输出<br>1982-12-10 11:57:28<br>1983-05-31 01:33:00<br>1982-12-09 14:20:28</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getapm</span>(<span class="params">s,ss</span>): <span class="comment">#这个函数作用主要是转换pm数据</span></span><br><span class="line">    lt=s.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ss==<span class="string">&#x27;PM&#x27;</span>:</span><br><span class="line">        s4=<span class="built_in">int</span>(lt[<span class="number">0</span>])+<span class="number">12</span></span><br><span class="line">        s5=<span class="built_in">int</span>(lt[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s4 = <span class="built_in">int</span>( lt[<span class="number">0</span>] )</span><br><span class="line">        s5 = <span class="built_in">int</span>( lt[<span class="number">1</span>] )</span><br><span class="line">    <span class="keyword">return</span> s4,s5</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">a</span>): <span class="comment">#这个函数作用是得到‘10-11-2000’这种日期（月-日-年）</span></span><br><span class="line">    lt=a.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    lt.reverse()</span><br><span class="line">    s1,s2,s3=<span class="built_in">int</span>(lt[<span class="number">0</span>]),<span class="built_in">int</span>(lt[<span class="number">2</span>]),<span class="built_in">int</span>(lt[<span class="number">1</span>]) <span class="comment">#注意这里的位置</span></span><br><span class="line">    <span class="keyword">return</span> s1,s2,s3</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deter</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">3</span>: <span class="comment">#计算含有AMPM的数列</span></span><br><span class="line">        s1,s2,s3=getd(a[<span class="number">0</span>])</span><br><span class="line">        s4, s5=getapm(a[<span class="number">1</span>],a[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#计算非AMPM数列</span></span><br><span class="line">        s1,s2,s3,s4,s5=<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>]),<span class="built_in">int</span>(a[<span class="number">2</span>]),<span class="built_in">int</span>(a[<span class="number">3</span>]),<span class="built_in">int</span>(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> s1,s2,s3,s4,s5</span><br><span class="line"> </span><br><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> t&lt;<span class="number">5</span>: <span class="comment">#循环五次。</span></span><br><span class="line">    a=<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>).split() <span class="comment">#给定时刻</span></span><br><span class="line">    s1,s2,s3,s4,s5=deter(a) <span class="comment">#调用函数判断格式，得到五个数据年、月、日、小时、分钟</span></span><br><span class="line">    t1=datetime.datetime(s1,s2,s3,s4,s5) <span class="comment">#转换为秒，得到t1</span></span><br><span class="line"> </span><br><span class="line">    n2=<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>).split() <span class="comment">#输入时间增量</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(n2)==<span class="number">1</span>: <span class="comment">#判断格式</span></span><br><span class="line">        shu=<span class="built_in">int</span>(n2[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(n2)==<span class="number">3</span>: <span class="comment">#如果是三个数值需要算出相应的秒</span></span><br><span class="line">        shu=<span class="built_in">int</span>(n2[<span class="number">0</span>])*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>+<span class="built_in">int</span>(n2[<span class="number">1</span>])*<span class="number">60</span>*<span class="number">60</span>+<span class="built_in">int</span>(n2[<span class="number">2</span>])*<span class="number">60</span></span><br><span class="line">    newt=t1+datetime.timedelta(seconds=shu) <span class="comment">#新的时间=t1+新的秒shu</span></span><br><span class="line">    <span class="built_in">print</span>(newt)</span><br><span class="line">    t+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="程序设计与算法（一）测验汇总-2022夏季-63题"><a href="#程序设计与算法（一）测验汇总-2022夏季-63题" class="headerlink" title="程序设计与算法（一）测验汇总(2022夏季)(63题)"></a>程序设计与算法（一）测验汇总(2022夏季)(63题)</h1><h2 id="001-输出第二个整数"><a href="#001-输出第二个整数" class="headerlink" title="001:输出第二个整数"></a>001:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStr = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(inputStr.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="002-字符菱形"><a href="#002-字符菱形" class="headerlink" title="002:字符菱形"></a>002:字符菱形</h2><p>总时间限制: 1000ms 内存限制: 65536kB</p><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="003-打印ASCII码"><a href="#003-打印ASCII码" class="headerlink" title="003:打印ASCII码"></a>003:打印ASCII码</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个除空格以外的可见字符（保证在函数scanf中可使用格式说明符%c读入），输出其ASCII码。</p></li><li><p>输入<br>一个除空格以外的可见字符。</p></li><li><p>输出<br>一个十进制整数，即该字符的ASCII码。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(a))</span><br></pre></td></tr></table></figure></li></ul><h2 id="004-打印字符"><a href="#004-打印字符" class="headerlink" title="004:打印字符"></a>004:打印字符</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个ASCII码，输出对应的字符。</p></li><li><p>输入<br>一个整数，即字符的ASCII码，保证存在对应的可见字符。</p></li><li><p>输出<br>一行，包含相应的字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(a)))</span><br></pre></td></tr></table></figure></li></ul><h2 id="005-整型数据类型存储空间大小"><a href="#005-整型数据类型存储空间大小" class="headerlink" title="005:整型数据类型存储空间大小"></a>005:整型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义int，short类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提示<br>使用sizeof函数可以得到一个特定变量的存储空间大小。例如：对于int型变量x，sizeof(x)的值为4，即x的存储空间为4字节。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="built_in">int</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(a))</span><br></pre></td></tr></table></figure><h2 id="006-浮点型数据类型存储空间大小"><a href="#006-浮点型数据类型存储空间大小" class="headerlink" title="006:浮点型数据类型存储空间大小"></a>006:浮点型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义float，double类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提交代码</p></li></ul><p>同上</p><h1 id="程序设计与算法（二）测验汇总-2022夏季-26题"><a href="#程序设计与算法（二）测验汇总-2022夏季-26题" class="headerlink" title="程序设计与算法（二）测验汇总(2022夏季)(26题)"></a>程序设计与算法（二）测验汇总(2022夏季)(26题)</h1><h1 id="程序设计与算法（三）测验和作业题汇总-2022夏季-45题"><a href="#程序设计与算法（三）测验和作业题汇总-2022夏季-45题" class="headerlink" title="程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)"></a>程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)</h1><h1 id="练习-47题"><a href="#练习-47题" class="headerlink" title="练习(47题)"></a>练习(47题)</h1>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-OpenJudge</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第六章列表</title>
    <link href="http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/"/>
    <id>http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/</id>
    <published>2022-10-03T00:00:00.000Z</published>
    <updated>2022-10-04T08:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8.png" class="" title="实用Python程序设计MOOC-第六章列表"><p>实用Python程序设计MOOC-第六章列表</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第六章列表"><a href="#实用Python程序设计MOOC-第六章列表" class="headerlink" title="实用Python程序设计MOOC-第六章列表"></a>实用Python程序设计MOOC-第六章列表</h1><h1 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h1><h2 id="列表的增删和修改"><a href="#列表的增删和修改" class="headerlink" title="列表的增删和修改"></a>列表的增删和修改</h2><ul><li>列表可以增删元素，列表的元素可以修改，列表元素可以是任何类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">empty = []<span class="comment">#[]表示空表</span></span><br><span class="line">list1 = [<span class="string">&#x27;Pku&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>];</span><br><span class="line">list1[<span class="number">1</span>] = <span class="number">100</span> <span class="comment">#列表元素可以赋值</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 1997, 2000]</span></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]<span class="comment">#删除元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000]</span></span><br><span class="line">list1 += [<span class="number">100</span>, <span class="number">110</span>]<span class="comment">#添加另一列表的元素100和110，在list1原地添加，没有新建一个列表</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110]</span></span><br><span class="line">list1.append(<span class="number">200</span>) <span class="comment">#添加元素200,append用于添加单个元素，括号的内容被认为是一个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200]</span></span><br><span class="line">list1.append([<span class="string">&#x27;ok&#x27;</span>, <span class="number">123</span>])<span class="comment">#添加单个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200, [&#x27;ok&#x27;, 123]]</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = [a, n]<span class="comment">#a若变，x也变</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;[[1, &#x27;b&#x27;, &#x27;c&#x27;], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>])<span class="comment">#&gt;&gt;[1, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">1</span>])<span class="comment">#&gt;&gt;b</span></span><br></pre></td></tr></table></figure><h2 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h2><ul><li>列表相加可以得到新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span><span class="comment">#此时c已经是新建的列表，并没有和a建立联系，所以和a没有关系</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="列表和"><a href="#列表和" class="headerlink" title="列表和+="></a>列表和+=</h2><ul><li>对列表来说，<code>a += b</code> 和<code>a = a + b</code>不同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a += [<span class="number">3</span>]<span class="comment">#b和a指向相同地方,在a末尾添加元素,b也受影响</span></span><br><span class="line"><span class="built_in">print</span>(a, b)<span class="comment">#&gt;&gt;[1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a = a + [<span class="number">4</span>, <span class="number">5</span>] <span class="comment">#对a重新赋值,不会影响到b</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="列表乘法"><a href="#列表乘法" class="headerlink" title="列表乘法"></a>列表乘法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="literal">True</span>] * <span class="number">3</span>)<span class="comment">#&gt;&gt;[True, True, True]</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([a * <span class="number">3</span>])<span class="comment">#&gt;&gt;[[1, 2, 1, 2, 1, 2]]</span></span><br><span class="line"></span><br><span class="line">c = [a] *<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2], [1, 2], [1, 2]]</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2, 3], [1, 2, 3], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br></pre></td></tr></table></figure><p><strong>重点题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">0</span>]] * <span class="number">2</span> + [[<span class="number">0</span>]] * <span class="number">2</span><span class="comment">#&gt;&gt;[[0], [0], [0], [0]]</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[[5], [5], [0], [0]]</span></span><br></pre></td></tr></table></figure><img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8%E4%B9%98%E6%B3%95.png" class="" title="列表乘法"><h2 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h2><ul><li>列表的切片返回新的列表，用法和字符串切片相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[2, 3]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[100，3]</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>]) <span class="comment">#&gt;&gt;[4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])<span class="comment">#[2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">x = <span class="number">100</span><span class="comment">#不会修改列表的元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">lst[i] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#[100, 100, 100, 100]</span></span><br></pre></td></tr></table></figure><h2 id="列表比大小"><a href="#列表比大小" class="headerlink" title="列表比大小"></a>列表比大小</h2><ul><li>两个列表比大小，就是逐个元素比大小，直到分出胜负。</li><li>如果有两个对应元素不可比大小，则出runtime error。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">12</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &gt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="string">&#x27;ab&#x27;</span> , <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#runtime error</span></span><br></pre></td></tr></table></figure><h1 id="列表应用例题-校门外的树"><a href="#列表应用例题-校门外的树" class="headerlink" title="列表应用例题:校门外的树"></a>列表应用例题:校门外的树</h1><p>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，…. L，都种有一棵树。<br>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树(包括区域端点处的两棵树)移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><ul><li><p>输入<br>第一行有两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)，L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。</p></li><li><p>输出<br>包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">500 3</span><br><span class="line">150 300</span><br><span class="line">100 200</span><br><span class="line">470 471</span><br></pre></td></tr></table></figure></li><li><p>样例输出<br>298</p></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">L, M = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">good = [<span class="literal">True</span>] * (L + <span class="number">1</span>) <span class="comment">#good[i] 为True表示坐标i的树还在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    start, end = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            good[k] = <span class="literal">False</span> <span class="comment">#坐标k处的树被移走了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(good))    <span class="comment">#sum是python函数，可以求列表元素和，True是1，False是0</span></span><br></pre></td></tr></table></figure><h1 id="列表的朴素排序"><a href="#列表的朴素排序" class="headerlink" title="列表的朴素排序"></a>列表的朴素排序</h1><p>如果有N个元素需要排序，那么首先从N个元素中找到最小的那个(称为第0小的)放在第0个位子上(和原来的第0个位子上的元素交换位置)，然后再从剩下的N-1个元素中找到最小的放在第1个位子上，然后再从剩下的N-2个元素中找到最小的放在第2个位子…..直到所有的元素都就位。</p><p>选择排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SelectionSort</span>(<span class="params">a</span>): <span class="comment">#选择排序</span></span><br><span class="line"><span class="comment">#将列表a从小到大排序</span></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):<span class="comment">#每次从a[i]及其右边的元素里选出最小的，放在a[i]这个位置</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):<span class="comment">#依次考察a[i]及其右边元素</span></span><br><span class="line"><span class="keyword">if</span> a[i] &gt; a[j]:</span><br><span class="line">a[i], a[j] = a[j], a[i]</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">SelectionSort(lst)<span class="comment">#&gt;&gt;[1，2，4，6，12，56]</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><p>选择排序：时间复杂度 $ O(n^2) $，即对有n个元素的列表(数组)，需要做 $ n^2 $ 次比较<br>冒泡排序、插入排序时间复杂度都是$ O(n^2) $</p><p>好的排序算法，比如归并排序，快速排序，复杂度是$ O(n<em>log(n)) $<br>python自带的排序功能，复杂度是$ O(n</em>log(n)) $<br>可以认为排序这件事，复杂度就是$ O(n*log(n)) $</p><h1 id="用排序函数对简单列表排序"><a href="#用排序函数对简单列表排序" class="headerlink" title="用排序函数对简单列表排序"></a>用排序函数对简单列表排序</h1><h2 id="简单顺序排序"><a href="#简单顺序排序" class="headerlink" title="简单顺序排序"></a>简单顺序排序</h2><ul><li><code>a.sort()</code>可以对列表a从小到大排序，改变a的内存结构</li><li><code>sorted(a)</code>返回a经过从小到大排序后的新列表，a不变，创建新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort()<span class="comment">#[1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(a)<span class="comment">#b:[1, 2, 3, 4, 5, 6, 7], a不变</span></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br><span class="line">b = <span class="built_in">sorted</span>(a, reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="默认多组对比顺序排列"><a href="#默认多组对比顺序排列" class="headerlink" title="默认多组对比顺序排列"></a>默认多组对比顺序排列</h2><p>元组比大小是按照元组需要比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>),<span class="comment">#姓名, 成绩, 年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort()<span class="comment">#先按姓名, 再按成绩, 再按年龄排序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;Mike&#x27;, &#x27;C&#x27;, 19)]</span></span><br></pre></td></tr></table></figure><h2 id="自定义比较排序"><a href="#自定义比较排序" class="headerlink" title="自定义比较排序"></a>自定义比较排序</h2><p>自定义比较函数key<br>比较的不是元素本身，而是元素调用key的函数得到的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myKey</span>(<span class="params">x</span>): <span class="comment">#自定义比较函数</span></span><br><span class="line"><span class="keyword">return</span> x % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(key = myKey)</span><br><span class="line"><span class="comment"># key是函数, sort按对每个元素调用该函数的返回值从小到大排序</span></span><br><span class="line"><span class="comment"># [1, 2, 33, 4, 25, 16, 7]按个位数排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(<span class="string">&quot;This is a test string from Andrew&quot;</span>.split(), key = <span class="built_in">str</span>.lower)</span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;Andrew&#x27;, &#x27;from&#x27;, &#x27;is&#x27;, &#x27;string&#x27;, &#x27;test&#x27;, &#x27;This&#x27;]不区分大小写排序</span></span><br></pre></td></tr></table></figure><h1 id="复杂列表的自定义排序"><a href="#复杂列表的自定义排序" class="headerlink" title="复杂列表的自定义排序"></a>复杂列表的自定义排序</h1><ul><li>用不同关键字排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), <span class="comment">#姓名，成绩，年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">2</span>]) <span class="comment">#按年龄排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">0</span>]) <span class="comment">#按姓名排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br></pre></td></tr></table></figure><h2 id="Iambda表达式"><a href="#Iambda表达式" class="headerlink" title="Iambda表达式"></a>Iambda表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x : x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>表示一个函数，参数是x，返回值是x[2]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="keyword">lambda</span> x, y : x + y <span class="comment">#k是一个函数，参数是x, y, 返回值是x+y.</span></span><br><span class="line"><span class="built_in">print</span>(k(<span class="number">4</span>, <span class="number">5</span>))<span class="comment">#&gt;&gt;9</span></span><br></pre></td></tr></table></figure><p>当关键字相同，排序前哪个在前面，排完之后就在前</p><h2 id="多级排序"><a href="#多级排序" class="headerlink" title="多级排序"></a>多级排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>，<span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort(key = f)<span class="comment">#先按年龄从高到低，再按成绩从高到低，再按姓名字典序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12)，( &#x27;Mike&#x27;, &#x27;C&#x27;, 12)，(&#x27;Bom&#x27;，&#x27;D&#x27;， 10) ]</span></span><br></pre></td></tr></table></figure><h2 id="Python元组的排序"><a href="#Python元组的排序" class="headerlink" title="Python元组的排序"></a>Python元组的排序</h2><ul><li>元组不能修改，因此无sort函数，可以用<code>sorted</code>得到新的排序后的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = ((<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>))<span class="comment">#students是元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(students, key = f))<span class="comment">#sorted的结果是列表</span></span><br><span class="line"><span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 19), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 12), (&#x27;Bom&#x27;, &#x27;D&#x27;, 10)]</span></span><br></pre></td></tr></table></figure><h1 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h1><p><code>append(x)</code>添加元素x到尾部<br><code>extend(x)</code>添加列表x中的元素到尾部<br><code>insert(i,x)</code>将元素x插入到下标i处<br><code>remove(x)</code>删除元素x<br><code>del(i)</code>删除下标为i的元素<br><code>reverse()</code>颠倒整个列表<br><code>index(x)</code>查找元素x，找到则返回第一次出现的下标，找不到则引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a, b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.append(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 6]]</span></span><br><span class="line"></span><br><span class="line">b.insert(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6]]</span></span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">1</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">3</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="string">&#x27;K&#x27;</span>)<span class="comment">#只会删掉第一个K</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[6, 100, 5, [5, 100, 6], 3, &#x27;K&#x27;, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;K&#x27;</span>))<span class="comment">#&gt;&gt;5</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;m&#x27;</span>)) <span class="comment">#找不到&#x27;m&#x27;,会引发异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)<span class="comment">#&gt;&gt;&#x27;m&#x27; is not in list</span></span><br></pre></td></tr></table></figure><h2 id="列表映射"><a href="#列表映射" class="headerlink" title="列表映射"></a>列表映射</h2><ul><li><code>map(function, sequence)</code>， 可用于将一个序列（列表、元组、集合…）映射到另一个序列</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))<span class="comment">#&gt;&gt;123[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a延时操作已经没有结果了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(a))<span class="comment">#&gt;&gt;()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般是执行中进行</span></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="number">2</span> * x, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[4, 6, 8]</span></span><br></pre></td></tr></table></figure><ul><li>map用于输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br><span class="line">输入:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br><span class="line">输出:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><ul><li><code>filter(function, sequence)</code>，抽取序列中令<code>function(x)</code>为True的元素x</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lst = tup1e(<span class="built_in">filter</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))<span class="comment">#抽取出偶数</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;(2, 4)</span></span><br></pre></td></tr></table></figure><h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment">#=&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line"></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment">#=&gt;[4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br><span class="line"></span><br><span class="line">[[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>] <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[[&#x27;AX&#x27;, &#x27;BX&#x27;, &#x27;CX&#x27;], [&#x27;AY&#x27;, &#x27;BY&#x27;, &#x27;CY&#x27;], [&#x27;AZ&#x27;, &#x27;BZ&#x27;, &#x27;CZ&#x27;]]</span></span><br><span class="line"></span><br><span class="line">L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>)]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line">[s <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">int</span>)]</span><br><span class="line"><span class="comment">#=&gt;[18]</span></span><br></pre></td></tr></table></figure><h1 id="元组生成式"><a href="#元组生成式" class="headerlink" title="元组生成式"></a>元组生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line"><span class="comment">#&gt;&gt;(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)</span></span><br></pre></td></tr></table></figure><h1 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h1><ul><li><p>二维列表a可以看作是矩阵，<code>a[i][j]</code>就是第i行第j列的元素</p></li><li><p>错误生成二维列表的方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = [a] * <span class="number">3</span><span class="comment">#b有三个元素，都是指针，都和a指向同一地方</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 1, 100], [0, 1, 100], [0, 1, 100]]</span></span><br></pre></td></tr></table></figure><ul><li>正确生成二维列表的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">2</span>], matrix[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">#&gt;&gt;6 9</span></span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 100, 6], [7, 8, 9]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>) ]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 1, 2], [3, 4, 5]]</span></span><br></pre></td></tr></table></figure><ul><li>生成一个3行4列的矩阵，所有元素都是0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">lst.append([<span class="number">0</span>] * <span class="number">4</span>)</span><br><span class="line">lst[<span class="number">0</span>][<span class="number">0</span>] = lst[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="built_in">print</span>(lst[i][j], end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((1, 2, 3), (4, 5, 6), (7, 8, 9))</span></span><br><span class="line"></span><br><span class="line">matrix = <span class="built_in">tuple</span>(<span class="built_in">tuple</span>(<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((0, 0, 0), (0, 0, 0), (0, 0, 0))</span></span><br></pre></td></tr></table></figure><h1 id="列表拷贝"><a href="#列表拷贝" class="headerlink" title="列表拷贝"></a>列表拷贝</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]<span class="comment">#是a的拷贝,b和a不是同一个对象,指向不同东西</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">b += [<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4, 10]</span></span><br></pre></td></tr></table></figure><h2 id="列表深拷贝"><a href="#列表深拷贝" class="headerlink" title="列表深拷贝"></a>列表深拷贝</h2><ul><li>列表浅拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = a[:]</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[1, [2, 3]] </span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2, 3], 4]</span></span><br></pre></td></tr></table></figure><p>未能进行深拷贝!</p><p><code>浅拷贝</code>：只拷贝指针，并没有拷贝指针指向的内容<br><code>深拷贝</code>：不仅拷贝指针，还拷贝指针指向的内容</p><ul><li>列表深拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a= [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br></pre></td></tr></table></figure><h1 id="元组和列表互转"><a href="#元组和列表互转" class="headerlink" title="元组和列表互转"></a>元组和列表互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">tuple</span>(a)<span class="comment">#b:(1,2,3)</span></span><br><span class="line">c = <span class="built_in">list</span>(b)<span class="comment">#c:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">(a, b, c) = t<span class="comment">#a=1, b=3, c=2</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[a, b, c] = s<span class="comment">#a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><h1 id="元组、列表和字符串互转"><a href="#元组、列表和字符串互转" class="headerlink" title="元组、列表和字符串互转"></a>元组、列表和字符串互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;he1lo&quot;</span>))<span class="comment">#&gt;&gt;[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;] </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]))<span class="comment">#&gt;&gt;a44c</span></span><br><span class="line"><span class="built_in">print</span> (tup1e (<span class="string">&quot;hello&quot;</span>) )<span class="comment">#&gt;&gt;(&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>))) <span class="comment">#&gt;&gt;a44c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第六章列表</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第五章字符串和元组</title>
    <link href="http://hibiscidai.com/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/"/>
    <id>http://hibiscidai.com/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/</id>
    <published>2022-09-30T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84.png" class="" title="实用Python程序设计MOOC-第五章字符串和元组"><p>实用Python程序设计MOOC-第五章字符串和元组</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第五章字符串和元组"><a href="#实用Python程序设计MOOC-第五章字符串和元组" class="headerlink" title="实用Python程序设计MOOC-第五章字符串和元组"></a>实用Python程序设计MOOC-第五章字符串和元组</h1><h1 id="Python变量的指针本质"><a href="#Python变量的指针本质" class="headerlink" title="Python变量的指针本质"></a>Python变量的指针本质</h1><h2 id="Python的数据类型"><a href="#Python的数据类型" class="headerlink" title="Python的数据类型"></a>Python的数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>int，float，complex</p><h3 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h3><p>字符串：str<br>元组：tuple<br>列表：list<br>字典：dict<br>集合：set</p><h2 id="isinstance函数"><a href="#isinstance函数" class="headerlink" title="isinstance函数"></a>isinstance函数</h2><p><code>isinstance(x, y)</code> 函数查询数据x是否是类型y</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;1233&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">str</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">int</span>))<span class="comment">#&gt;&gt;False</span></span><br><span class="line">b = (<span class="number">1</span>, <span class="number">3</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, <span class="built_in">tuple</span>))<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="len函数"><a href="#len函数" class="headerlink" title="len函数"></a>len函数</h2><p>len函数可以用来求组合数据类型的元素个数 (长度)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;12345&quot;</span>))<span class="comment">#&gt;&gt;5求字符串十</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment">#&gt;&gt;4求列表长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))<span class="comment">#&gt;&gt;3求元组长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;))<span class="comment">#&gt;&gt;3求集合元素个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(&#123;<span class="string">&#x27;tom&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;jack&#x27;</span>:<span class="number">3</span>&#125;))<span class="comment">#&gt;&gt;求字典元素个数</span></span><br></pre></td></tr></table></figure><h2 id="Python变量的指针本质-1"><a href="#Python变量的指针本质-1" class="headerlink" title="Python变量的指针本质"></a>Python变量的指针本质</h2><ul><li>Pyhton中的变量都是指针</li><li>Python中所有可赋值的东西，即可以出现在赋值号”=”左边的东西，都是指针</li><li>指针即代表内存单元的地址</li><li><p>将指针称作”箭头”， 更容易理解。所有变量都是箭头，指向内存某处</p></li><li><p>对变量进行赋值的本质，就是让该变量(箭头)指向某个地方</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span><span class="comment">#a → 3</span></span><br><span class="line">b = <span class="number">4</span><span class="comment">#b → 4</span></span><br></pre></td></tr></table></figure><ul><li>用一个变量对另一个变量赋值意味着让两个变量指向同一个地方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b<span class="comment">#a ↘ 3</span></span><br><span class="line"><span class="comment">#b → 4</span></span><br></pre></td></tr></table></figure><h2 id="is运算符和-的区别"><a href="#is运算符和-的区别" class="headerlink" title="is运算符和==的区别"></a>is运算符和==的区别</h2><p><code>a is b</code> 为True说a和b指向同一个地方</p><p><code>a == b</code>为True说明a和b指向的地方放的的东西相同，但是a和b不一定指向相同的地方</p><p><code>a = b</code> 会使得a和b指向同一个地方</p><p><code>x is y</code> 表示x和y是否指向同一个地方<br><code>x == y</code> 表示x和y的内容是否相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">#a → [1,2,3,4]</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">#b → [1,2,3,4]</span></span><br><span class="line"><span class="built_in">print</span>(a == b)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"></span><br><span class="line">c == a</span><br><span class="line"><span class="built_in">print</span>(a == c)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>] = <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, &#x27;ok&#x27;, 4]</span></span><br><span class="line"><span class="comment">#因为a和c指向同一个地方，所以修改a[2]，c[2] 也变。a[2]和c[2]是同一个东西</span></span><br></pre></td></tr></table></figure><ul><li><p>对int，float，complex，str，tuple类型的变量a和b，只需关注<code>a == b</code>是否成立，关注<code>a is b</code>是否成立无意义。因这些数据本身都不会更改，不会产生a指向的东西改了b指向的东西也跟着变的情况。数据类型不可能改变的。</p></li><li><p>对list，dict，set类型的变量a和b，<code>a == b</code>和<code>a is b</code>的结果都需要关注。因这些数据本身会改变。改别了a指向的内容，说不定b指向的内容也变了。该数据类型可能改变的。</p></li></ul><h2 id="列表元素的指针本质"><a href="#列表元素的指针本质" class="headerlink" title="列表元素的指针本质"></a>列表元素的指针本质</h2><p>列表的元素也可以赋值，因此也是指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><img src="/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E7%9A%84%E6%8C%87%E9%92%88%E6%9C%AC%E8%B4%A8.png" class="" title="列表元素的指针本质"><h1 id="字符串的转义字符"><a href="#字符串的转义字符" class="headerlink" title="字符串的转义字符"></a>字符串的转义字符</h1><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><code>\</code>及其后面的某些字符会构成转义字符，即两个字符当一个字符看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;hello\nworld\tok\&quot;1\\2&quot;</span>) <span class="comment">#\n \t \&quot; \\都是“转义字符”代表换行，制表符，双引号，斜杠</span></span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world ok&quot;1\2</span><br></pre></td></tr></table></figure></p><p>字符，包括\n这样的转义字符，只能出现在字符串里面，必须用引号括起来!</p><p><code>print(a\nb)</code> 不合法，不会打出a的值，然后换行，再打出b的值</p><ul><li>规定 <code>\</code> 不转义的字符串</li></ul><p><code>print(r&#39;ab\ncd&#39;)    #&gt;&gt;ab\ncd</code></p><p><code>r</code>表示字符串里面的\就是\，不会和后面的字符合并起来看待</p><h1 id="字符串的切片-子串"><a href="#字符串的切片-子串" class="headerlink" title="字符串的切片(子串)"></a>字符串的切片(子串)</h1><ul><li>字符串的切片( 也叫子串，即连续的一部分)</li></ul><p><code>a[x:y]</code>表示字符串a里从下标x到下标y那一部分的子串(不包括下标y的那个字符)，<strong>左闭右开</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">2</span>])<span class="comment">#&gt;&gt;B区间是`左闭右开`，终点不算</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt;ABC</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">3</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt;BC</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])<span class="comment">#&gt;&gt;CD终点省略就是一直取到最后一个字符</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">3</span>])<span class="comment">#&gt;&gt;ABC起点省略就是从头开始取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abcd&quot;</span>[<span class="number">2</span>:<span class="number">3</span>])<span class="comment">#&gt;&gt;c</span></span><br></pre></td></tr></table></figure><p><code>a[x:y:z]</code>表示，从<code>a[x]</code>取到<code>a[y]</code> (<code>a[y]</code>不算)，每z个字符取一个，最后拼起来。<br>z为负数则代表倒着取，<strong>左开右闭</strong>。<br>x, y可以省略。x, y全省略表示从头取到尾或从尾取到头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1234&quot;</span>[<span class="number">3</span>:<span class="number">1</span>:-<span class="number">1</span>]) <span class="comment">#&gt;&gt;43</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abcde&quot;</span>[::-<span class="number">1</span>])<span class="comment">#&gt;&gt;edcba可用于反转字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345678&quot;</span>[<span class="number">1</span>:<span class="number">7</span>:<span class="number">2</span>])<span class="comment">#&gt;&gt;246</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345678&quot;</span>[<span class="number">7</span>:<span class="number">1</span>:-<span class="number">2</span>])<span class="comment">#&gt;&gt;864</span></span><br></pre></td></tr></table></figure><p>字符串切片的用法也适用于元组和列表！</p><h1 id="字符串的分割-split"><a href="#字符串的分割-split" class="headerlink" title="字符串的分割(split)"></a>字符串的分割(split)</h1><h2 id="split函数详解"><a href="#split函数详解" class="headerlink" title="split函数详解"></a>split函数详解</h2><p><code>s.split(x)</code> 用字符串x做分隔符分割字符串s，得到分隔后的列表</p><p>两个相邻分隔符之间会被分隔出一个空串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;12..34.5346...a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;..&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12&#x27;, &#x27;34.5346&#x27;,&#x27;.a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;.&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12&#x27;, &#x27;&#x27;，&#x27;34&#x27;, &#x27;5346`, &#x27;&#x27;, &#x27;&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;34&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12..&#x27;, &#x27;&#x27;.5&#x27;, &#x27;6...a&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="字符串高级分割"><a href="#字符串高级分割" class="headerlink" title="字符串高级分割"></a>字符串高级分割</h2><ul><li>用多个分隔串进行分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re<span class="comment">#正则表达式包</span></span><br><span class="line">a = <span class="string">&#x27;Beautiful, is; better*than\nugly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;;| |,|\*|\n&#x27;</span>, a)) <span class="comment">#分隔串用|隔开]</span></span><br><span class="line"><span class="comment">#&#x27;;&#x27;</span></span><br><span class="line"><span class="comment">#&#x27; &#x27;</span></span><br><span class="line"><span class="comment">#&#x27;,&#x27;</span></span><br><span class="line"><span class="comment">#&#x27;*&#x27; \*代表*</span></span><br><span class="line"><span class="comment">#&#x27;\n&#x27; 都被看做分隔符</span></span><br><span class="line"><span class="comment">#&gt;&gt; [&#x27;Beautiful&#x27;, &#x27;&#x27;, &#x27;is&#x27;, &#x27;&#x27;, &#x27;better&#x27;, &#x27;than&#x27;, &#x27;ugly&#x27;]</span></span><br></pre></td></tr></table></figure><p>两个相邻的分隔串之间，会隔出一个空串</p><h1 id="字符串的函数"><a href="#字符串的函数" class="headerlink" title="字符串的函数"></a>字符串的函数</h1><ul><li><code>count</code>求子串出现次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;thisAAbb AA&#x27;</span></span><br><span class="line">s.count(<span class="string">&#x27;AA&#x27;</span>)<span class="comment">#返回2,AA出现2次</span></span><br></pre></td></tr></table></figure><ul><li><code>len</code>字符串长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="built_in">len</span>(s)<span class="comment">#4</span></span><br></pre></td></tr></table></figure><ul><li><code>upper</code>，<code>lower</code>转大写、小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())<span class="comment">#&gt;&gt;ABC</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;abc</span></span><br></pre></td></tr></table></figure><ul><li><code>find</code>，<code>rfind</code>，<code>index</code>，<code>rindex</code></li></ul><p>在字符串中查找子串，返回找到的位置(下标)。<br>找不到的话，find返回-1，index引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;ab&quot;</span>))<span class="comment">#&gt;&gt;4,&quot;ab&quot;第一次出现在下标4</span></span><br><span class="line"><span class="built_in">print</span>(s.rfind(<span class="string">&quot;ab&quot;</span>))<span class="comment">#&gt;&gt;10</span></span><br><span class="line"><span class="comment">#find从头开始找,rfind从尾巴开始找。返回第一个找到的位置</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s.index(<span class="string">&quot;afb&quot;</span>) <span class="comment">#找不到&quot;afb&quot;因此会产生异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment">#&gt;&gt;substring not found</span></span><br></pre></td></tr></table></figure><ul><li><code>find</code>还可以指定查找起点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;12&quot;</span>, <span class="number">4</span>))<span class="comment">#&gt;&gt;13指定从下标4处开始查找</span></span><br></pre></td></tr></table></figure><p>如果想要找到所有的子串，需要写一个循环，规定指针</p><ul><li><code>replace</code>替换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line">b = s.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;FGHI&quot;</span>) <span class="comment">#b由把s里所有abc换成FGHI而得</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;1234FGHI567FGHI12</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;1234abc567abc12</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="comment">#&gt;&gt;123456712</span></span><br></pre></td></tr></table></figure><ul><li><code>isdigit()</code>，<code>islower()</code>，<code>isupper()</code> 判断字符串是否是数，是否全是小写，是否全是大写等</li><li><code>startswith</code>，<code>endswith</code> 判断字符串是否以某子串开头、结尾</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123.4&quot;</span>.isdigit())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>.isdigit())<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a123.4&quot;</span>.isdigit())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ab123&quot;</span>.islower())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ab123&quot;</span>.islower())<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li><code>strip()</code> 返回除去头尾空白字符(空格，<code>\r</code>  <code>\t</code> <code>\n</code>)后的字符串</li><li><code>lstrip()</code> 返回除去头部(左端)空白字符后的字符串</li><li><code>rstrip()</code> 返回除去尾部(右端)空白字符后的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot; \t12 34 \n&#x27;&quot;</span>.strip())<span class="comment">#&gt;&gt;12 34</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; \t12 34 5&quot;</span>.lstrip())<span class="comment">#&gt;&gt;12 34 5</span></span><br></pre></td></tr></table></figure><p><code>strip(s)</code>，<code>lstrip(s)</code>，<code>rstrip(s)</code>返回除去两端、左端、右端在s中出现的字符后的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="string">&quot;takeab \n&quot;</span>.strip(<span class="string">&quot;ba \n&quot;</span>))<span class="comment">#&gt;&gt;take</span></span><br><span class="line"><span class="comment">#去除两端&#x27;b&#x27;, &#x27;a&#x27;, &#x27; &#x27;, &#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;cd\t12 34 5&quot;</span>.lstrip(<span class="string">&quot;d\tc&quot;</span>) ) <span class="comment">#&gt;&gt;12 34 5</span></span><br><span class="line"><span class="comment">#去除左端&#x27;d&#x27;, &#x27;\t&#x27;, &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字符串的编码和格式化"><a href="#字符串的编码和格式化" class="headerlink" title="字符串的编码和格式化"></a>字符串的编码和格式化</h1><p>字符串的编码在内存中的编码是unicode的，虽然写入文件时可能是gbk或者utf-8的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))<span class="comment">#&gt;&gt;97</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;好&quot;</span>))<span class="comment">#&gt;&gt;22920</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">22900</span>))<span class="comment">#&gt;&gt;奴</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))<span class="comment">#&gt;&gt;a</span></span><br></pre></td></tr></table></figure><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;He1lo &#123;0&#125; &#123;1:10&#125;, you get $&#123;2:0.4f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Mr.&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">3.2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;Hello Mr. Jack      , you get $3.2000</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;Hello &#123;0&#125; &#123;1:&gt;10&#125;, you get $&#123;2:0.4f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Mr.&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">3.2</span>)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#Hello Mr.       Jack, you get $3.2000</span></span><br></pre></td></tr></table></figure><p><code>&#123;序号:宽度.精度 类型&#125;</code> 宽度可以是0<br><code>&gt;</code> : 右对齐<br><code>&lt;</code> : 左对齐<br><code>^</code> : 中对齐</p><p>如<code>&#123;0:&gt;10.4f&#125;</code>表示第0项是小数，以宽度至少是10字符，右对齐(宽度不足时空格补在左边)，保留小数点后面4位的方式输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Today is %s.%d.&quot;</span> % (<span class="string">&#x27;May&#x27;</span>, <span class="number">21</span>))<span class="comment">#Today is May.21.</span></span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li>一个元组由数个逗号分隔的值组成，前后可加括号</li><li>元组不能修改，即不可增删元素，不可对元素赋值，不可修改元素顺序(如排序)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;he1lo!&#x27;</span><span class="comment">#t是一个元组</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])<span class="comment">#&gt;&gt;12345</span></span><br><span class="line"><span class="built_in">print</span>(t)<span class="comment">#&gt;&gt;(12345, 54321, &#x27;hello!&#x27;)</span></span><br><span class="line">u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)<span class="comment">#u有两个元素，都是元组</span></span><br><span class="line"><span class="built_in">print</span>(u)<span class="comment">#&gt;&gt;((12345, 54321, &#x27;hello!&#x27;), (1, 2, 3, 4, 5))</span></span><br><span class="line"><span class="built_in">print</span>(u[<span class="number">0</span>][<span class="number">1</span>])<span class="comment">#&gt;&gt;54321</span></span><br><span class="line"><span class="built_in">print</span>(u[<span class="number">1</span>][<span class="number">2</span>])<span class="comment">#&gt;&gt;3</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">88888</span><span class="comment">#运行错误,元组的元素不能赋值</span></span><br></pre></td></tr></table></figure><ul><li>元组的元素的内容有可能被修改。<br>例如，如果元素是列表，就可以修改该列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = (<span class="string">&quot;he11o&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]) <span class="comment">#[1, 2, 3]是列表</span></span><br><span class="line">v[<span class="number">1</span>] = <span class="number">32</span> <span class="comment">#运行错误，元组元素不可修改成指向别的</span></span><br><span class="line">v[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&#x27;world&#x27;</span> <span class="comment">#可以</span></span><br><span class="line"><span class="built_in">print</span>(v)<span class="comment">#&gt;&gt;(&#x27;hello&#x27;, [&#x27;world&#x27;, 2, 3], [3, 2, 1])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(v))<span class="comment">#&gt;&gt;3求长度，</span></span><br></pre></td></tr></table></figure><h2 id="元组元素的指针本质"><a href="#元组元素的指针本质" class="headerlink" title="元组元素的指针本质"></a>元组元素的指针本质</h2><ul><li>元组的元素都是指针。元组元素不可修改，是指不可改变元组元素的指向，但是元组元素指向的内容，是有可能被修改的</li></ul><p>所谓的元组元素不可改成别的，类似于组建了一只球队，规定球队人员不可更改。但是队员换个发型，增加体重，受伤缺胳膊少腿了，都是可以的</p><h2 id="单元素的元组"><a href="#单元素的元组" class="headerlink" title="单元素的元组"></a>单元素的元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">empty = ()<span class="comment">#空元组</span></span><br><span class="line">singleton = <span class="string">&#x27;hello&#x27;</span>,<span class="comment">#注意末尾的,如果没有，就不是元组而是字符串了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(empty))<span class="comment">#&gt;&gt;0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(singleton))<span class="comment">#&gt;&gt;1</span></span><br><span class="line">x = (<span class="string">&#x27;hello&#x27;</span>,)<span class="comment">#无逗号则x为字符串</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;(&#x27;hello&#x27;,)</span></span><br></pre></td></tr></table></figure><h2 id="用下标访问元组，以及元组切片"><a href="#用下标访问元组，以及元组切片" class="headerlink" title="用下标访问元组，以及元组切片"></a>用下标访问元组，以及元组切片</h2><p>用法和字符串一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1[<span class="number">0</span>])<span class="comment">#&gt;&gt;Google</span></span><br><span class="line"><span class="built_in">print</span>(tup2[<span class="number">1</span>:<span class="number">5</span>])<span class="comment">#&gt;&gt;(2, 3, 4, 5)</span></span><br><span class="line"><span class="built_in">print</span>(tup2[::-<span class="number">1</span>])<span class="comment">#&gt;&gt;(7, 6, 5, 4, 3, 2, 1)</span></span><br><span class="line"><span class="built_in">print</span>(tup2[-<span class="number">1</span>:<span class="number">0</span>:-<span class="number">2</span>])<span class="comment">#&gt;&gt;(7, 5, 3)</span></span><br></pre></td></tr></table></figure><h2 id="可以对元组进行连接组合"><a href="#可以对元组进行连接组合" class="headerlink" title="可以对元组进行连接组合"></a>可以对元组进行连接组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>);</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2;</span><br><span class="line"><span class="built_in">print</span>(tup3)<span class="comment">#&gt;&gt;(12, 34.56, &#x27;abc&#x27;, &#x27;xyz&#x27;)</span></span><br><span class="line">tup3 += (<span class="number">10</span>, <span class="number">20</span>)<span class="comment">#等价于tup3 = tup3 + (10, 20), 新建了一个元组</span></span><br><span class="line"><span class="built_in">print</span>(tup3)<span class="comment">#&gt;&gt;(12, 34.56, &#x27;abc&#x27;, &#x27;xyz&#x27;, 10, 20)</span></span><br></pre></td></tr></table></figure><h2 id="元组运算和迭代"><a href="#元组运算和迭代" class="headerlink" title="元组运算和迭代"></a>元组运算和迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;(1, 2, 3, 1, 2, 3, 1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line"><span class="built_in">print</span>(i, end = <span class="string">&quot;&quot;</span>)<span class="comment">#&gt;&gt;123</span></span><br></pre></td></tr></table></figure><h2 id="元组赋值"><a href="#元组赋值" class="headerlink" title="元组赋值"></a>元组赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = x</span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> x) <span class="comment"># true is 表示两个操作数是否指向同一个东西,即是否是同一个对象</span></span><br><span class="line"><span class="comment"># 指针指向同一个地方</span></span><br><span class="line"></span><br><span class="line">x += (<span class="number">100</span>,)<span class="comment">#等价于x = x + (100,)新建了一个元组</span></span><br><span class="line"><span class="comment"># 执行完之后x和b不在指向同一个指针</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#(1, 2, 3, 100)</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3)</span></span><br></pre></td></tr></table></figure><h2 id="元组比大小"><a href="#元组比大小" class="headerlink" title="元组比大小"></a>元组比大小</h2><ul><li>两个元组比大小，就是逐个元素比大小，直到分出胜负</li><li>如果有两个对应元素不可比大小，则出<code>runtime error</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">12</span> ) &lt; (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>) &lt; (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">13</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>) &gt; (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>) &lt; (<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>) )<span class="comment">#runtime error</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">t = (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">#可执行</span></span><br><span class="line">t[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;a&quot;</span><span class="comment">#可执行</span></span><br><span class="line">t += (<span class="number">1</span>, <span class="number">2</span>)<span class="comment">#可执行</span></span><br></pre></td></tr></table></figure><p><strong>重点例题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = (a, a)<span class="comment">#([1, 2, 3], [1, 2, 3])</span></span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span><span class="comment">#([1, 100, 3], [1, 100, 3])</span></span><br><span class="line"><span class="comment">#直接修改了a的内存空间</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment">#[1, 100, 3], ([1, 100, 3], [1, 100, 3])</span></span><br></pre></td></tr></table></figure><h1 id="用元组-列表-取代复杂分支结构"><a href="#用元组-列表-取代复杂分支结构" class="headerlink" title="用元组(列表)取代复杂分支结构"></a>用元组(列表)取代复杂分支结构</h1><ul><li>输入1-7，输出星期几</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">weekdays = <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>, <span class="string">&quot;Sunday&quot;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">7</span> <span class="keyword">or</span> n &lt; <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Illegal&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(weekdays[n - <span class="number">1</span>]) </span><br></pre></td></tr></table></figure><h2 id="万年历"><a href="#万年历" class="headerlink" title="万年历"></a>万年历</h2><ul><li><p>例题<br>已知2012年1月25日是星期三，编写一个程序，输入用”年月日”表示的一个2012年1月25日以后的期，输出该日期是星期几(星期天输出0)。</p></li><li><p>Sample Input<br>2015 11 02</p></li><li><p>Sample Output<br>1</p></li><li><p>思路</p></li></ul><p>2012年1月22日是星期天。算出给定日期是从改天起过了x天，然后输出x%7</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">monthDays = [-<span class="number">1</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]<span class="comment">#十二个月的天数</span></span><br><span class="line">days = <span class="number">0</span> <span class="comment">#从2012-01-22开始过了多少天</span></span><br><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">year, month, date = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>]), <span class="built_in">int</span>(lst[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2012</span>, year): <span class="comment">#先累加过掉的整年的天数</span></span><br><span class="line"><span class="keyword">if</span> y%<span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> y%<span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> y%<span class="number">400</span> == <span class="number">0</span>:<span class="comment">#闰年</span></span><br><span class="line">days += <span class="number">366</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">days += <span class="number">365</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year%<span class="number">4</span> ==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year%<span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">monthDays[<span class="number">2</span>] = <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, month):<span class="comment">#再累加year那年过掉的整月的天数</span></span><br><span class="line">days += monthDays [i]</span><br><span class="line"></span><br><span class="line">days += date <span class="comment">#累加year年month那个月的天数</span></span><br><span class="line">days -= <span class="number">22</span> <span class="comment">#2012年1月22日是星期天。扣掉2012年的前22天</span></span><br><span class="line"><span class="built_in">print</span>(days % <span class="number">7</span>) <span class="comment">#星期天算一周的第0天</span></span><br></pre></td></tr></table></figure><ul><li>下面的方法可以更快算出过掉的整年的总天数，不必逐年累加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">days = <span class="number">0</span></span><br><span class="line">days += (year - <span class="number">2012</span>) * <span class="number">365</span></span><br><span class="line"><span class="keyword">if</span> year &gt; <span class="number">2012</span> :</span><br><span class="line">days += (year - <span class="number">2012</span> - <span class="number">1</span>) // <span class="number">4</span> +<span class="number">1</span><span class="comment">#补上闰年多的一天</span></span><br><span class="line">days -= (year - <span class="number">2000</span> - <span class="number">1</span>) // <span class="number">100</span> - (year - <span class="number">2000</span> - <span class="number">1</span>) // <span class="number">400</span><span class="comment">#扣掉把100的整数倍都当作闰年而多加的天数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第五章字符串和元组</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第四章函数和递归</title>
    <link href="http://hibiscidai.com/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/"/>
    <id>http://hibiscidai.com/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/</id>
    <published>2022-09-23T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92.png" class="" title="实用Python程序设计MOOC-第四章函数和递归"><p>实用Python程序设计MOOC-第四章函数和递归</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第四章函数和递归"><a href="#实用Python程序设计MOOC-第四章函数和递归" class="headerlink" title="实用Python程序设计MOOC-第四章函数和递归"></a>实用Python程序设计MOOC-第四章函数和递归</h1><h1 id="函数的概念和用法"><a href="#函数的概念和用法" class="headerlink" title="函数的概念和用法"></a>函数的概念和用法</h1><h2 id="为什么需要函数？"><a href="#为什么需要函数？" class="headerlink" title="为什么需要函数？"></a>为什么需要函数？</h2><p>写了一段平方根的代码，程序里面无数地方都要求平方根，难道需要的地方都把这段代码拷贝一遍?</p><p>数百个程序员如何合写一个程序?都在一个. py文件上操作吗?不同程序员实现不同功能，一个程序员要使用另一个程序员写的功能时怎么办?</p><p>“函数”：将实现了某一功能，并需要在程序中多处使用的代码包装起来形成一个功能模块(即写成一个”函数”)，那么当程序中需要使用该项功能时，只需写一条语句，调用实现该功能的”函数”即可。</p><p>不同的程序员可以分别写不同的函数，拼起来形成一个大程序。</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2.</span>...</span>):</span><br><span class="line">语句体(函数体)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">语句体(即<span class="string">&quot;函数体&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数调用和return语句"><a href="#函数调用和return语句" class="headerlink" title="函数调用和return语句"></a>函数调用和return语句</h2><h3 id="调用函数："><a href="#调用函数：" class="headerlink" title="调用函数："></a>调用函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><p>对函数的调用，也是一个表达式。函数调用表达式的值，由函数内部的return语句决定。return语句语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>return语句的功能是结束函数的执行，并将”返回值”作为结果返回。”返回值”是常量、变量或复杂的表达式均可。如果函数不需要返回值，return语句就直接写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>return语句作为函数的出口，可以在函数中多次出现。多个return语句的”返回值”可以不同。在哪个return语句结束函数的执行，函数的返回值就和哪个return语句里面的”返回值”相等。</p><h3 id="函数使用实例1-Max函数"><a href="#函数使用实例1-Max函数" class="headerlink" title="函数使用实例1 : Max函数"></a>函数使用实例1 : Max函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Max</span>(<span class="params">x,y</span>):<span class="comment">#传入形参</span></span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line"><span class="keyword">return</span> X</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"><span class="comment">#函数到此结束</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = Max(<span class="number">4</span>, <span class="number">6</span>)<span class="comment">#传入实参</span></span><br><span class="line"><span class="built_in">print</span>(n, Max(<span class="number">20</span>, n)</span><br><span class="line"><span class="built_in">print</span>(Max(<span class="string">&quot;about&quot;</span>, <span class="string">&quot;take&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 20</span><br><span class="line">take</span><br></pre></td></tr></table></figure><h3 id="函数使用实例2-判断是否是素数的函数"><a href="#函数使用实例2-判断是否是素数的函数" class="headerlink" title="函数使用实例2 :判断是否是素数的函数"></a>函数使用实例2 :判断是否是素数的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">IsPrime</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">or</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> n != <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n, <span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> i * i &gt; n:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"><span class="keyword">if</span>(IsPrime(i)):</span><br><span class="line"><span class="built_in">print</span>(i, end = <span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span><br></pre></td></tr></table></figure><h3 id="不返回值的函数"><a href="#不返回值的函数" class="headerlink" title="不返回值的函数"></a>不返回值的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrawCircle</span>(<span class="params">x, y, r</span>):</span><br><span class="line"><span class="comment">#下面的代码在屏幕上以(x,y)点为圆心，r为半径画圆</span></span><br><span class="line"><span class="keyword">return</span><span class="comment">#没有也可以</span></span><br></pre></td></tr></table></figure><p>调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DrawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sumAndDifference</span>(<span class="params">x, y</span>):</span><br><span class="line"><span class="keyword">return</span> x+y, x-y</span><br><span class="line">s, d = sumAndDifference(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s, d)</span><br></pre></td></tr></table></figure><p>=&gt;155</p><h2 id="函数中的变量"><a href="#函数中的变量" class="headerlink" title="函数中的变量"></a>函数中的变量</h2><ul><li>一个函数内部定义(赋值)的变量，在这个函数外部不能使用</li><li>不同函数中的同名变量不会互相影响</li><li>函数中的变量和全局变量(在函数外面定义的变量)同名的情况(假设都叫x)：<br>  1)如果没有对x赋值，函数中的x就是全局的x<br>  2)如果对x赋值，且没有特别声明，则在函数中全局的x不起作用，函数中的x就是只在函数内部起作用的x<br>  3)函数内部可以用global x声明函数里的x就是全局变量x</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">4</span><span class="comment">#全局的x </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f0</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f0:&quot;</span>, x) <span class="comment">#这个x是全局的x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">x = <span class="number">8</span><span class="comment">#这个x是局部的x，不会改变全局的x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f1:&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line"><span class="keyword">global</span> x<span class="comment">#说明本函数中的x都是全局的x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f2:&quot;</span>, x)</span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f2:&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f3=&quot;</span>, x)<span class="comment">#会出错。因后面有赋值而被当作局部的x，此处没赋值就先使用了，不行</span></span><br><span class="line">x = <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f0() #&gt;&gt; x in f0:4</span><br><span class="line">f1() #&gt;&gt; x in f1:8</span><br><span class="line">print(x) #&gt;&gt;4</span><br><span class="line">f2()</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt;&gt; x <span class="keyword">in</span> f2:4</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt;&gt; x <span class="keyword">in</span> f2:5</span></span><br><span class="line">print(x) #&gt;&gt; 5</span><br><span class="line">f3() #调用f3会出错</span><br></pre></td></tr></table></figure><h2 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x)</span><br><span class="line"><span class="built_in">float</span>(x)</span><br><span class="line"><span class="built_in">str</span>(x)</span><br><span class="line"><span class="built_in">ord</span>(x)</span><br><span class="line"><span class="built_in">chr</span>(x)</span><br><span class="line"><span class="built_in">abs</span>(x)</span><br><span class="line"><span class="built_in">len</span>(x) </span><br><span class="line"><span class="built_in">len</span>(<span class="string">&quot;123&quot;</span>) </span><br><span class="line"><span class="built_in">len</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">max</span>(x)</span><br><span class="line">x是列表，如<span class="built_in">max</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">min</span>(x)</span><br><span class="line">x是列表，如<span class="built_in">min</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">max</span>(x1, x2, x3...)</span><br><span class="line"><span class="built_in">min</span>(x1, x2, x3...)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt; 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;af&quot;</span>))<span class="comment">#&gt;&gt;ab</span></span><br></pre></td></tr></table></figure><h1 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h1><ul><li>一个概念的定义中用到了这个概念本身，这就叫递归</li></ul><p>用递归的方式定义”n的阶乘”</p><p>1) “1的阶乘”是1<br>2）”n的阶乘”就是n乘以”(n-1)的阶乘”</p><p>第二句中用到了阶乘这个需要定义的概念</p><ul><li>一个函数，自己调用自己，就是递归。</li><li>和调用别的函数无本质区别，可以看作是调用另一个同名同功能函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Factorial</span>(<span class="params">n</span>):<span class="comment">#函数返回n的阶乘</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> <span class="comment">#终止条件</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> n * Factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(Factorial(<span class="number">4</span>))<span class="comment">#&gt;&gt;24</span></span><br><span class="line"><span class="built_in">print</span>(Factoria1(<span class="number">5</span>))<span class="comment">#&gt;&gt;120 </span></span><br></pre></td></tr></table></figure><ul><li>递归函数需要有终止条件，否则就会无穷递归导致程序无法终止甚至崩溃</li><li>递归定义也需要有终止条件，否则无法让人明表。例如”n的阶乘”的定义中的：<br>  1) “1的阶乘”是1</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/Factorial%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" class="" title="Factorial函数执行过程"><ul><li>求斐波那契数列第n项的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Fib</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> Fib(n-<span class="number">1</span>) + Fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n,m</span>):</span><br><span class="line"><span class="keyword">if</span>n== <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> n &gt;= m:</span><br><span class="line"><span class="keyword">return</span> f(m, n-m) + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> f(n, m-n) + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#&gt;&gt; 7</span></span><br></pre></td></tr></table></figure><h1 id="递归例题-上台阶"><a href="#递归例题-上台阶" class="headerlink" title="递归例题:上台阶"></a>递归例题:上台阶</h1><p>上台阶问题：有n级台阶，每步可以走一级或两级，问有多少种不同的走法？</p><blockquote><p>先做一步，剩下问题和原问题形式相同，规模变小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ways</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> ways(n-<span class="number">1</span>) + ways(n-<span class="number">2</span>)<span class="comment">#第一步走一级的走法+第一步走2两级的走法</span></span><br><span class="line"><span class="built_in">print</span>(ways(<span class="number">4</span>))<span class="comment">#&gt;&gt; 5</span></span><br></pre></td></tr></table></figure><h1 id="递归例题-汉诺塔-Hanoi"><a href="#递归例题-汉诺塔-Hanoi" class="headerlink" title="递归例题:汉诺塔(Hanoi)"></a>递归例题:汉诺塔(Hanoi)</h1><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98.png" class="" title="汉诺塔问题"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hanoi</span>(<span class="params">n, src, mid, dest</span>):<span class="comment">#将src座上的n个盘子,以mid座为中转,移动到dest座</span></span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>):<span class="comment">#只需移动一个盘子</span></span><br><span class="line"><span class="comment">#直接将盘子从src移动到dest即可</span></span><br><span class="line"><span class="built_in">print</span>(src + <span class="string">&quot;-&gt;&quot;</span> + dest)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">#递归终止</span></span><br><span class="line">Hanoi(n-<span class="number">1</span>, src, dest, mid)<span class="comment">#先将n-1个盘子从src移动到mid</span></span><br><span class="line"><span class="built_in">print</span>(src + <span class="string">&quot;-&gt;&quot;</span> + dest) <span class="comment">#再将一个盘子从src移动到dest</span></span><br><span class="line">Hanoi(n-<span class="number">1</span>, mid, src, dest) <span class="comment">#最后将n-1个盘子从mid移动到d</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">Hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">B</span></span><br><span class="line"><span class="meta prompt_">C-&gt;</span><span class="language-bash">B</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">B-&gt;</span><span class="language-bash">A</span></span><br><span class="line"><span class="meta prompt_">B-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br></pre></td></tr></table></figure><p>n个盘子需要2^n-1次</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E6%B1%89%E8%AF%BA%E5%A1%94%E6%89%8B%E5%B7%A5%E8%A7%A3%E6%B3%95.png" class="" title="汉诺塔手工解法"><h1 id="递归例题-绘制雪花曲线-科赫曲线"><a href="#递归例题-绘制雪花曲线-科赫曲线" class="headerlink" title="递归例题:绘制雪花曲线(科赫曲线)"></a>递归例题:绘制雪花曲线(科赫曲线)</h1><p>雪花曲线的递归定义<br>1)长为size，方向为x(x是角度)的0阶雪花曲线，是方向x上一根长为size的线段<br>2)长为size，方向为x的n阶雪花曲线，由以下四部分依次拼接组成：<br>1.长为size/3，方向为x的n-1阶雪花曲线<br>2.长为size/3，方向为x+60的n-1阶雪花曲线<br>3.长为size/3，方向为x-60的n-1阶雪花曲线<br>4.长为size/3，方向为x的n-1阶雪花曲线</p><p>size是整体长度</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="1阶0度雪花曲线"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="2阶0度雪花曲线"><p>四段一阶的雪花曲线构成<br>1.长度为size/3，方向为0°的1阶雪花曲线<br>2.长度为size/3，方向为60°的1阶雪花曲线<br>3.长度为size/3，方向为-60°的1阶雪花曲线<br>4.长度为size/3，方向为0°的1阶雪花曲线</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="3阶0度雪花曲线"><p>四段二阶的雪花曲线构成<br>1.长度为size/3，方向为0°的2阶雪花曲线<br>2.长度为size/3，方向为60°的2阶雪花曲线<br>3.长度为size/3，方向为-60°的2阶雪花曲线<br>4.长度为size/3，方向为0°的2阶雪花曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle<span class="comment">#曲图要用这个turtle包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snow</span>(<span class="params">n,size</span>): <span class="comment">#n是阶数目，size是长度 从当前起点出发，在当前方向画一个丧度为size，阶为n的雪花曲线</span></span><br><span class="line"><span class="keyword">if</span> n== <span class="number">0</span>:</span><br><span class="line">turtle.fd(size) <span class="comment"># 笔沿着当前方向前进size</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]: <span class="comment">#对列表中的每个元素angle:</span></span><br><span class="line">turtle.left(angle) <span class="comment">#笔左转ang1e度 ，turtle .1t (ang1e)也可</span></span><br><span class="line">snow(n-<span class="number">1</span>, size/<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">600</span>)<span class="comment">#窗口缺省位于屏幕正中间，宽高800*600像素，窗口中央坐标(0,0)</span></span><br><span class="line"><span class="comment">#初始笔的前进方向是0度。正东方是0度，正北是90度</span></span><br><span class="line">turtle.penup() <span class="comment">#抬起笔</span></span><br><span class="line">turtle.goto(-<span class="number">300</span>, -<span class="number">50</span>) <span class="comment">#将笔移动到-300, -50位置</span></span><br><span class="line">turtle.pendown() <span class="comment">#放下笔</span></span><br><span class="line">turtle.pensize(<span class="number">3</span>) <span class="comment">#笔的粗度是3</span></span><br><span class="line">snow(<span class="number">3</span>, <span class="number">600</span>)<span class="comment">#绘制长度为600 ,阶为3的雪花曲线，方向水平</span></span><br><span class="line">turtle.done()<span class="comment">#保持绘图窗口</span></span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.gif" class="" title="3阶0度雪花曲线"><p>窗口正中心位置是(0, 0)<br>画图要有画笔，画笔需要有方向<br>雪花曲线画完之后笔的方向和初始方向一样</p><ul><li>画整个雪花</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%85%A8%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="3阶全雪花曲线"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">800</span>)</span><br><span class="line">turtle.speed(<span class="number">1000</span>)</span><br><span class="line">turtle.penup() </span><br><span class="line">turtle.goto(-<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">level = <span class="number">3</span></span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.right(<span class="number">120</span>) <span class="comment">#右拐120度</span></span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.right(<span class="number">120</span>)</span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%85%A8%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.gif" class="" title="3阶全雪花曲线"><ul><li>递归问题解法</li></ul><p>1.先做一步，观察剩下问题是否和原问题相同，规模更小<br>2.将一个大问题分解成若干个子问题，有些子问题和原问题都是形式相同，规模更小的<br>3.选取合适的边界条件</p><h1 id="奇异三角形"><a href="#奇异三角形" class="headerlink" title="奇异三角形"></a>奇异三角形</h1><p>一个边长为x的0阶奇异三角形，是一个边长为x的等边三角形<br>一个边长为x的n阶奇异三角形，是一个边长为x的等边三角形，三个角上分别是一个边长为x/2的n-1阶奇异三角形</p><ul><li>0阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/0%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="0阶奇异三角形"><ul><li>1阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="1阶奇异三角形"><ul><li>2阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="2阶奇异三角形"><ul><li><p>输入整数n，(0&lt;=n&lt;=5)，绘制n阶奇异三角形</p></li><li><p>提示</p></li></ul><p>1) turtle.left(x) 可以向左拐 x 度<br>2) turtle.right(x)可以向右拐 x 度<br>3) pos = turtle.pos() 可以取得画笔当前位置， 以后 turtle.goto(pos)就可以移动画笔到那个位置<br>4) turtle.seth(x)可以设置画笔方向为角度 x<br>5) 绘图完成后调用 turtle.done() 可以保持绘图窗口</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">intn = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">san</span>(<span class="params">n, x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == n:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">60</span>, -<span class="number">120</span>, -<span class="number">120</span>]:</span><br><span class="line">            turtle.left(angle)</span><br><span class="line">            turtle.fd(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos = turtle.pos()</span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line">        turtle.penup()</span><br><span class="line"></span><br><span class="line">        turtle.goto(pos)  <span class="comment">#-180</span></span><br><span class="line">        turtle.right(<span class="number">120</span>)</span><br><span class="line">        turtle.fd(x / <span class="number">2</span>)</span><br><span class="line">        turtle.right(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        turtle.pendown()</span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line">        turtle.penup()</span><br><span class="line"></span><br><span class="line">        turtle.goto(pos)</span><br><span class="line">        turtle.right(<span class="number">180</span>)</span><br><span class="line">        turtle.fd(x / <span class="number">2</span>)</span><br><span class="line">        turtle.pendown()</span><br><span class="line"></span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">turtle.setup(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">san(intn, <span class="number">200</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="1阶奇异三角形"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="2阶奇异三角形"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="3阶奇异三角形">]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第四章函数和递归</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第三章循环语句</title>
    <link href="http://hibiscidai.com/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://hibiscidai.com/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-09-16T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.png" class="" title="实用Python程序设计MOOC-第三章循环语句"><p>实用Python程序设计MOOC-第三章循环语句</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第三章循环语句"><a href="#实用Python程序设计MOOC-第三章循环语句" class="headerlink" title="实用Python程序设计MOOC-第三章循环语句"></a>实用Python程序设计MOOC-第三章循环语句</h1><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>有时，需要重复多次执行一系列语句，因此需要循环语句</p><h2 id="for循环语句语法"><a href="#for循环语句语法" class="headerlink" title="for循环语句语法"></a>for循环语句语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">&lt;statements <span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;statements <span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>依次对sequence中的每个值，执行<statements 1>然后再执行<statements 2>。通常不需要else部分<br>sequence可以是range(..)，也可以是字符串、列表、元组、字典、集合</p><ul><li>for循环语句测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#[0,5)</span></span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>): <span class="comment">#[5,9)</span></span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure></p><ul><li>for循环语句测试2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):<span class="comment">#步长3</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">9</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">10</span>, -<span class="number">100</span>, -<span class="number">30</span>) :</span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-10</span><br><span class="line">-40</span><br><span class="line">-70</span><br></pre></td></tr></table></figure></p><ul><li>for循环语句测试3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>):</span><br><span class="line"><span class="built_in">print</span>(i,<span class="string">&quot; &quot;</span>,end=<span class="string">&quot;&#x27;)</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 6 9</span><br></pre></td></tr></table></figure></p><h2 id="for循环遍历列表"><a href="#for循环遍历列表" class="headerlink" title="for循环遍历列表"></a>for循环遍历列表</h2><ul><li>写法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):<span class="comment">#len,求列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(i, a[i])</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 Google</span><br><span class="line">1 Baidu</span><br><span class="line">2 IBM</span><br><span class="line">3 Taobao</span><br><span class="line">4 QQ</span><br></pre></td></tr></table></figure></p><p>len也可以用来求字符串长度，元组、集合、字典元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;abc&quot;</span>))<span class="comment">#&gt;&gt;3</span></span><br></pre></td></tr></table></figure><ul><li>写法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Google</span><br><span class="line">Baidu</span><br><span class="line">IBM</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure></p><h2 id="for循环遍历字符串"><a href="#for循环遍历字符串" class="headerlink" title="for循环遍历字符串"></a>for循环遍历字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Taobao&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T</span><br><span class="line">a</span><br><span class="line">o</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;IBM&quot;</span>, <span class="string">&quot;Taobao&quot;</span>] </span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line"><span class="keyword">if</span> site == <span class="string">&quot;IBM&quot;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;site: &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No break&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">site: Baidu</span><br><span class="line">site: Google</span><br><span class="line">OK</span><br><span class="line">site: IBM</span><br><span class="line">site: Taobao</span><br><span class="line">No break</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Goog1e&quot;</span>, <span class="string">&quot;IBM&quot;</span>, <span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:<span class="comment">#对sites中的每个值site</span></span><br><span class="line"><span class="keyword">if</span> site == <span class="string">&quot;IBM&quot;</span> :</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="keyword">break</span><span class="comment">#跳出循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;site: &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No break&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><p>else子句在循环结束时会执行，但是如果break了，则不会执行</p><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site: Baidu</span><br><span class="line">site: Google</span><br><span class="line">OK</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27; Taobao&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> letter == <span class="string">&#x27;o&#x27;</span>:<span class="comment">#字母为o时跳过输出</span></span><br><span class="line"><span class="keyword">continue</span><span class="comment">#直接跳到下次循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前字母:&#x27;</span>, letter)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前字母: T</span><br><span class="line">当前字母: a</span><br><span class="line">当前字母: b</span><br><span class="line">当前字母: a</span><br></pre></td></tr></table></figure></p><h2 id="连续输出26个字母"><a href="#连续输出26个字母" class="headerlink" title="连续输出26个字母"></a>连续输出26个字母</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>abcdefghi jklmnopqrstuvwxyz<br>字母的ASCII编码是连续的</p><h3 id="字符的编码"><a href="#字符的编码" class="headerlink" title="字符的编码"></a>字符的编码</h3><p><code>ord(x)</code> 求字符x的编码(字符就是长度为1的字符串)<br><code>chr(x)</code> 求编码为x的字符</p><p>可以用8个连续的0或1(即1个字节)来表示一个字母、数字或标点符号，比如用”00100000”表示空格，用”01100001”表示字母”a”，用”01100010”表示字母”b”，用”01100011”表示字母”c”……。由8个0或者1的组成的串，一共有2^8即256种不同的组合，这就足以表示10个阿拉伯数字以及英语中用到的所有字母和标点符号了。此即为ASCII编码方案。</p><h2 id="连续输出0-9"><a href="#连续输出0-9" class="headerlink" title="连续输出0-9"></a>连续输出0-9</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>0123456789<br>‘0’-‘9’的ASCII编码是连续的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>) + <span class="number">4</span>))<span class="comment">#E</span></span><br></pre></td></tr></table></figure><h1 id="for循环简单例题"><a href="#for循环简单例题" class="headerlink" title="for循环简单例题"></a>for循环简单例题</h1><h2 id="例题1-输入n个整数求和"><a href="#例题1-输入n个整数求和" class="headerlink" title="例题1 输入n个整数求和"></a>例题1 输入n个整数求和</h2><ul><li><p>输入<br>第一行是整数n，n&gt;=1，后面有n行，每行一个整数</p></li><li><p>输出<br>输出后面那n个整数的和</p></li><li><p>样例输入<br>3<br>1<br>2</p></li><li><p>样例输出<br>11</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#做n次</span></span><br><span class="line">total += <span class="built_in">int</span>(<span class="built_in">input</span>())<span class="comment">#每次读入一行</span></span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><h2 id="例题2-从小到大输出n的因子"><a href="#例题2-从小到大输出n的因子" class="headerlink" title="例题2 从小到大输出n的因子"></a>例题2 从小到大输出n的因子</h2><p>输入一个正整数，从小到大输出它的所有因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">1 3 5 15</span><br></pre></td></tr></table></figure><h2 id="例题3-从大到小输出n的因子"><a href="#例题3-从大到小输出n的因子" class="headerlink" title="例题3 从大到小输出n的因子"></a>例题3 从大到小输出n的因子</h2><p>输入一个正整数m，从大到小输出它的所有因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):<span class="comment">#步长-1</span></span><br><span class="line"><span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">15 5 3 1</span><br></pre></td></tr></table></figure><h1 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h1><p>循环可以嵌套，形成多重循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">...<span class="comment">#内重循环的执行次数一共是n×m次</span></span><br></pre></td></tr></table></figure><h2 id="多重循环例题1-多次求n个数的和"><a href="#多重循环例题1-多次求n个数的和" class="headerlink" title="多重循环例题1 多次求n个数的和"></a>多重循环例题1 多次求n个数的和</h2><ul><li><p>输入<br>第一行是整数m，m&gt;=1, 表示有m组数据，接下来就是m组数据<br>对于每组数据：<br>第一行是整数n，n&gt;= 1<br>接下来是n行，每行一个整数</p></li><li><p>输出<br>对每组数据，输出后面那n个整数的和</p></li><li><p>样例输入<br>2<br>3<br>1<br>2<br>3<br>2<br>10<br>20</p></li><li><p>样例输出<br>6<br>30</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):<span class="comment">#m组数据，所以要处理m次</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#n个数，每个一行，所以要input n次</span></span><br><span class="line">total += <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><h2 id="多重循环例题2-取两个数"><a href="#多重循环例题2-取两个数" class="headerlink" title="多重循环例题2 取两个数"></a>多重循环例题2 取两个数</h2><p>给定正整数n和m，在1至n这n个数中，取出两个不同的数，使得其和是m的因子，问有多少中不同的取法。输出这些取法。</p><p>思路：穷举1-n这n个数中取两个数的所有取法，对每一种取法，判断其和是不是m的因子</p><p>第一个数取1，第二个数分别取2, 3…..n<br>第一个数取2，第二个数分别取3, 4…..n<br>….<br>第一个数取n-2，第二个数分别取n-1，n<br>第一个数取n-1，第二个数取n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span><span class="comment">#取法总数</span></span><br><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">n, m = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):<span class="comment">#取第一个数i，共n-1中取法</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n+<span class="number">1</span>):<span class="comment">#第二个数要比第一个数大，以免取法重复</span></span><br><span class="line"><span class="keyword">if</span> m % (i+j) == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(i, j)</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">9 18↙</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">1 8</span><br><span class="line">2 4</span><br><span class="line">2 7</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">7</span><br></pre></td></tr></table></figure></p><h2 id="多重循环中的break"><a href="#多重循环中的break" class="headerlink" title="多重循环中的break"></a>多重循环中的break</h2><p>只会跳出当前那重循环，不会跳出多重循环</p><ul><li>例题：给定正整数n和m，在1至n这n个数中，取出两个不同的数x、y，使得x&lt;y且x+y是m的因子。要求输出的数对里面，x不重复，且y尽可能小。输出这些取法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">n, m = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):<span class="comment">#取第一个数i,共n-1种取法</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n+<span class="number">1</span>):<span class="comment">#第二个数要比第一个数大,以免取法重复</span></span><br><span class="line"><span class="keyword">if</span> m % (i+j) == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(i,j)</span><br><span class="line"><span class="keyword">break</span><span class="comment">#后面的j不用再取了，直接换下一个i</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9 18↙</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure></p><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li>while循环语法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 逻辑表达式exp: </span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><p>1)判断 exp 是否为真，若为真，转2)，若为假，转3)<br>2)执行 语句组1，回到 1)<br>3)执行 语句组2<br>4)继续往下执行…….</p><ul><li>while循环语法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 逻辑表达式exp:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>1)判断 exp 是否为真，若为真，转2)，若为假，转3)<br>2)执行语句组1，回到1)<br>3)继续往下执行……</p><ul><li>while循环例题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(count, <span class="string">&quot;小于5&quot;</span>)</span><br><span class="line">count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(count, <span class="string">&quot;大于或等于5&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0小于5</span><br><span class="line">1小于5</span><br><span class="line">2小于5</span><br><span class="line">3小于5</span><br><span class="line">4小于5</span><br><span class="line">5大于或等于5</span><br></pre></td></tr></table></figure></p><ul><li>while循环语法3-break</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> exp:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不停执行，直到exp为真时跳出循环</p><ul><li>连续输出26个字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">26</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>abcdefqhijklmnoparstuvwxvz 字母的ASCII编码是连续的</p><ul><li>例题：输入一个正整数n，从小到大输出它的所有因子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">X = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x&lt;=n:</span><br><span class="line"><span class="keyword">if</span> n&amp;x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">x += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">1 3 5 15</span><br></pre></td></tr></table></figure></p><ul><li>例题：提示用户输入密码，密码不正确则提示不正确，然后要求输入，密码正确则提示成功，然后结束。密码是pku</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>) != <span class="string">&quot;pku&quot;</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码不正确!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码输入成功!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入密码:bba↙</span><br><span class="line">密码不正确!</span><br><span class="line">请输入密码:std↙</span><br><span class="line">密码不正确!</span><br><span class="line">请输入密码:pku↙</span><br><span class="line">密码输入成功!</span><br></pre></td></tr></table></figure></p><ul><li>输入三个整数，求它们的最小公倍数</li></ul><p>枚举法，一个个试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>):</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = m = <span class="built_in">max</span>(x, y, z)<span class="comment">#从三者里面最大的开始试</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">n = n + m<span class="comment">#没必要一个个试，而是每间隔m个试一下(还可进一步改进)</span></span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="用whi-le语句和异常处理进行输入"><a href="#用whi-le语句和异常处理进行输入" class="headerlink" title="用whi le语句和异常处理进行输入"></a>用whi le语句和异常处理进行输入</h2><p>在0penjudge做题时，有些题目，输入数据没有结束标志，也不告诉你有多少数据。</p><p>例如:</p><p>输入若干行，每行若干整数，求所有整数的最大值</p><p>输入样例:<br>152393<br>87 6<br>34</p><p>输出样例:<br>87</p><p>如何判断输入结束，就是需要解决的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">lst = s.split()</span><br><span class="line">maxV = <span class="built_in">int</span>(lst[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">lst = s.split()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">maxV = <span class="built_in">max</span>(maxV, <span class="built_in">int</span>(x))</span><br><span class="line">s = <span class="built_in">input</span>()<span class="comment">#输入数据已经没有了还执行input，会产生异常</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span><span class="comment">#pass语句啥也不做</span></span><br><span class="line"><span class="built_in">print</span>(maxV)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">15 23 6↙</span><br><span class="line">15 5 3 1↙</span><br><span class="line">3 4↙</span><br><span class="line">Ctrl+Z↙代表输入停止</span><br><span class="line"></span><br><span class="line">23</span><br></pre></td></tr></table></figure></p><h2 id="异常处理结构"><a href="#异常处理结构" class="headerlink" title="异常处理结构"></a>异常处理结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句组<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">&lt;语句组<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>如果在&lt;语句组1&gt;执行过程中出现了异常(runtime error)， 程序立即从语句组1中跳出，去执行&lt;语句组2&gt;，然后再继续往下执行。如果&lt;语句组1&gt;执行正常完，则程序继续往下执行，不会执行&lt;语句组2&gt;</p><p>常见的异常有:<br>1)不合适的转换，例如int(“abc”) int(“23. 34”) float (“abc”)<br>2)输入已经结束(已经没有输入数据了)后，还执行input()，在openjudge做题常见<br>3)除法除数为0<br>4)整数和字符串相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">a = <span class="number">100</span>/n</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5↙</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">20.2</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0↙</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">error</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abc↙</span><br><span class="line"></span><br><span class="line">error</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="循环综合例题"><a href="#循环综合例题" class="headerlink" title="循环综合例题"></a>循环综合例题</h2><h3 id="例题1-求斐波那契数列第k项"><a href="#例题1-求斐波那契数列第k项" class="headerlink" title="例题1.求斐波那契数列第k项"></a>例题1.求斐波那契数列第k项</h3><p>菲波那契数列是指这样的数列：数列的第一个和第二个数都为1，接下来每个数都等于前面2个数之和。给出一个正整数k，要求菲波那契数列中第k个数是多少。</p><ul><li><p>输入<br>输入一行，包含一个正整数k。</p></li><li><p>输出：<br>输出一行，包含一个正整数，表示菲波那契数列中第k个数的大小。</p></li><li><p>样例输入<br>19</p></li><li><p>样例输出<br>4181</p></li><li><p>解法一，迭代，不停地由已知推未知</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> <span class="keyword">or</span> k == <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a1 = a2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">2</span>):</span><br><span class="line">a1,a2 = a2, a1+a2</span><br><span class="line"><span class="built_in">print</span>(a2)</span><br></pre></td></tr></table></figure><h2 id="例题2-求阶乘的和"><a href="#例题2-求阶乘的和" class="headerlink" title="例题2.求阶乘的和"></a>例题2.求阶乘的和</h2><p>给定正整数n，求不大于n的正整数的阶乘的和(即求1!+2!+3!+…+n!)</p><ul><li><p>输入<br>输入有一行，包含一个正整数n (1 &lt; n &lt; 12)。</p></li><li><p>输出<br>输出有一行：阶乘的和。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出<br>153</p></li><li><p>解法1</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line">f = <span class="number">1</span><span class="comment">#存放i阶乘</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, i+<span class="number">1</span>):</span><br><span class="line">f *= j<span class="comment">#此操作一共做1+2+3+...+n次</span></span><br><span class="line">s += f</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>重复计算多。比如算3!时算了一遍1<em>2</em>3，算4!时又算一遍1<em>2</em>3<br>改进: 1<em>2</em>3只要算一遍就应该记下来，下次算4!直接用它</p><ul><li>解法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s,f = <span class="number">0</span>,<span class="number">1</span><span class="comment">#s是第几个数，f表示阶乘</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">f *= i</span><br><span class="line">s += f</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">f值变化过程: <span class="number">1</span>*<span class="number">2</span>, <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>, <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">4</span> ......</span><br></pre></td></tr></table></figure><h2 id="例题3-输入正整数n-n-gt-2-，求不大于n的全部质数"><a href="#例题3-输入正整数n-n-gt-2-，求不大于n的全部质数" class="headerlink" title="例题3.输入正整数n(n&gt;=2)，求不大于n的全部质数"></a>例题3.输入正整数n(n&gt;=2)，求不大于n的全部质数</h2><ul><li>解法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):<span class="comment">#每次判断i是否是质数</span></span><br><span class="line">ok = <span class="literal">True</span><span class="comment">#开始假设i是质数</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i)</span><br><span class="line"><span class="keyword">if</span> i % k == <span class="number">0</span></span><br><span class="line">ok == <span class="literal">False</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>此解法做了没必要的尝试，偶数，以及k大于i的平方根后就不必再试</p><ul><li>解法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">ok = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, i, <span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i % k == <span class="number">0</span>:</span><br><span class="line">ok = <span class="literal">False</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> k*k &gt;i:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第三章循环语句</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</title>
    <link href="http://hibiscidai.com/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/"/>
    <id>http://hibiscidai.com/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/</id>
    <published>2022-09-09T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6.png" class="" title="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"><p>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"><a href="#实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制" class="headerlink" title="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"></a>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</h1><h1 id="算术运算、逻辑运算和分支语句"><a href="#算术运算、逻辑运算和分支语句" class="headerlink" title="算术运算、逻辑运算和分支语句"></a>算术运算、逻辑运算和分支语句</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><code>+</code> 加法<br><code>-</code> 减法(双操作数)，取相反数(单操作数)<br><code>*</code> 乘法<br><code>/</code> 除法，结果是小数。即便能整除也是小数。<br><code>%</code> 取模(求余数)<br><code>//</code> 求商，结果是整数<br><code>**</code> 求幂</p><h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">3</span>+<span class="number">2</span>)*(<span class="number">6</span>-<span class="number">3</span>) / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;7.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>/<span class="number">8</span>)<span class="comment">#&gt;&gt;1.25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1088</span>)<span class="comment">#&gt;&gt;2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span>/<span class="number">4</span>)<span class="comment">#&gt;&gt;3.75</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span>//<span class="number">4</span>)<span class="comment">#&gt;&gt;3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.4</span>/<span class="number">2.2</span>)<span class="comment">#&gt;&gt;1.5454545454545452</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.4</span>//<span class="number">2.2</span>)<span class="comment">#&gt;&gt;1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">3</span>)<span class="comment">#&gt;&gt;8</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">9</span>//<span class="number">4</span>)<span class="comment">#&gt;&gt;-3 往小里取整</span></span><br></pre></td></tr></table></figure><h2 id="算术表达式-1"><a href="#算术表达式-1" class="headerlink" title="算术表达式"></a>算术表达式</h2><ul><li><code>/</code>计算的结果都是小数，哪怕能整除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">10</span>/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;5.0</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">10</span><span class="comment">#-x相当于0-x</span></span><br><span class="line"><span class="built_in">print</span>(-a) <span class="comment">#&gt;&gt;-10</span></span><br><span class="line"><span class="built_in">print</span>(-a*<span class="number">3</span>)<span class="comment">#&gt;&gt;-30等价于(-a)*3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+-<span class="number">5</span>)<span class="comment">#&gt;&gt;-2</span></span><br></pre></td></tr></table></figure><ul><li>有小数的算术表达式，结果就是小数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">10.0</span>-<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;0.0</span></span><br><span class="line">z=<span class="number">7.5</span>-<span class="number">2.5</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;5.0 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>+<span class="number">0</span>*<span class="number">4.5</span>)<span class="comment">#&gt;&gt;2.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>+<span class="number">10</span>/<span class="number">5</span>)<span class="comment">#&gt;&gt;4.0</span></span><br></pre></td></tr></table></figure><ul><li>算术运算符优先级</li></ul><p>第一级: <code>**</code><br>第二级: <code>*///%</code><br>第三级: <code>+-</code></p><p>可以用<code>( )</code>指定计算顺序: <code>(3+4)*(1+2)</code><br>记不得优先级就用( )</p><ul><li>算术运算的同时赋值</li></ul><p><code>+=</code>：a+=b等价于a=a+b<br><code>-=</code>：a-=b 等价于a=a-b<br><code>*=</code>：…<br><code>/=</code>：…<br><code>%=</code>：…<br><code>//=</code>：…<br><code>**=</code>：…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">6</span></span><br><span class="line">a/=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;2.0</span></span><br><span class="line">a**=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;8.0</span></span><br></pre></td></tr></table></figure><ul><li>常见问题或注意事项</li></ul><p>数学上的运算符号或代数式写法，不是拿到程序里就能直接用的!</p><p>比如|x| 在程序里并不能求x的绝对值，而是没定义，会出错!</p><p>2(x+3) (4+x)这样的表达式也不能在程序里写!</p><p>应该写:<code>2*(x+3)*(4+x)</code></p><p>乘法就一定要用<code>*</code></p><p>/的结果一定是小数。一个算术表达式，只要有一个操作数是小数，其结果就一定是小数。</p><p>如果x是小数print(x)就会打出小数形式，哪怕x = 4/2。如果题目要求是整数，就要注意了，不要把整数当小数打出来。</p><p>print(4/2)打出2. 0</p><p>/是÷不是分数线</p><p><code>a/b*c</code>是<code>a÷b×c</code>，不是<code>a/(b*c)</code></p><h2 id="关系运算符和booI类型"><a href="#关系运算符和booI类型" class="headerlink" title="关系运算符和booI类型"></a>关系运算符和booI类型</h2><ul><li>六种关系运算符用于数值的比较</li></ul><p>相等 <code>==</code><br>不等 <code>!=</code><br>大于 <code>&gt;</code><br>小于 <code>&lt;</code><br>大于等于 <code>&gt;=</code><br>小于等于 <code>&lt;=</code></p><ul><li>比较的结果是bool类型，成立则为True，反之为False</li><li>bool类型数据只有两种取值，True或False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span>&lt;<span class="number">5</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>!=<span class="number">7</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a=<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a&lt;<span class="number">6</span>&lt;<span class="number">8</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a==<span class="number">4</span>&lt;<span class="number">6</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a&gt;<span class="number">5</span>)<span class="comment">#&gt;&gt;False&#x27;</span></span><br><span class="line">b=a&lt;<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="comment">#1为true，0为false</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">1</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">2</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line">b=a&gt;<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">0</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a=<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li>关系运算符也能比较字符串(按字典序，大小写相关)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;k&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;k&quot;</span>)<span class="comment">#&gt;&gt; True</span></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;abc&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;Abc&quot;</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &lt; <span class="string">&quot;acd&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &lt; <span class="string">&quot;abcd&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &gt; <span class="string">&quot;Abc&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符和逻辑表达式"><a href="#逻辑运算符和逻辑表达式" class="headerlink" title="逻辑运算符和逻辑表达式"></a>逻辑运算符和逻辑表达式</h2><ul><li><p>逻辑运算符用于表达式的逻辑操作，有and or not 三种，操作的结果是True或False</p></li><li><p><code>与:exp1 and exp2</code></p></li></ul><p>当且仅当exp1和exp2的值都为True(或相当于True)时，结果为True(或相当于True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">n &gt; <span class="number">4</span> <span class="keyword">and</span> n &lt; <span class="number">5</span><span class="comment">#false</span></span><br><span class="line">n &gt;= <span class="number">2</span> <span class="keyword">and</span> n &lt; <span class="number">5</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span><span class="comment">#true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">and</span> <span class="literal">False</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">and</span> <span class="literal">True</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li>什么相当于True或False </li></ul><p>●<code>0</code>，<code>&quot;&quot;</code>(空字符串)，<code>[]</code> (空表)都相当于False (但除0以外都不等于False)<br>●非0的数，非空的字符串和非空列表，都相当于True (但除1以外，都不等于True)<br>●True 可以看作1，False 可以看作0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> == <span class="number">1</span><span class="comment">#True</span></span><br><span class="line"><span class="literal">False</span> == <span class="number">0</span><span class="comment">#True</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">False</span><span class="comment">#False</span></span><br><span class="line"><span class="number">2</span>==<span class="literal">True</span><span class="comment">#False</span></span><br><span class="line">[] == <span class="literal">False</span><span class="comment">#False</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>] == <span class="literal">True</span><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><code>或:exp1 or exp2</code></p><p>当且仅当exp1和exp2的值都为False(或相当于False) 时，结果为False(或相当于False)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">n &gt; <span class="number">4</span> <span class="keyword">or</span> n &lt; <span class="number">5</span><span class="comment">#True</span></span><br><span class="line">n &lt;= <span class="number">2</span> <span class="keyword">or</span> n &gt; <span class="number">5</span><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><code>非:not exp</code></p><p>exp值为True (或相当于True)时，结果为False (或相当于False)<br>exp值为False (或相当于False)时，结果为True (或相当于True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span><span class="comment">#False</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">5</span><span class="comment">#False </span></span><br><span class="line"><span class="keyword">not</span> <span class="number">0</span><span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> <span class="string">&quot;abc&quot;</span><span class="comment">#False</span></span><br><span class="line"><span class="keyword">not</span> <span class="string">&quot;&quot;</span><span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">4</span> &gt; <span class="number">6</span><span class="comment">#False 先not后and</span></span><br><span class="line"><span class="keyword">not</span> []<span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> [<span class="number">1</span>]<span class="comment">#False</span></span><br></pre></td></tr></table></figure><ul><li>逻辑运算符的优先级</li></ul><p><code>not &gt; and &gt; or</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">1</span> &gt; <span class="number">2</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span>)and1 &gt; <span class="number">2</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">4</span> &gt;<span class="number">6</span> 即 (<span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>) <span class="keyword">and</span> (<span class="number">4</span> &gt; <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>逻辑表达式是短路计算的，即对逻辑表达式的计算，在整个表达式的值已经能够断<br>定的时候即会停止</p><p><code>exp1 and exp2</code>：如果已经算出表达式exp1为假，那么整个表达式的值肯定为假，于是表达式exp2就不需要再计算</p><p><code>exp1 or exp2</code>：如果已经算出exp1为真，那么整个表达式必定为真，于是exp2也不必计算</p><ul><li>各种运算符的优先级</li></ul><p>从高到低</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">●算术运算符 ** * / // % + -</span><br><span class="line">●关系运算符 &lt; &gt; == != &lt;= &gt;=</span><br><span class="line">●逻辑运算符 <span class="keyword">not</span> <span class="keyword">and</span> <span class="keyword">or</span></span><br><span class="line">记不得就勤用()</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+<span class="number">2</span>&lt;<span class="number">5</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+(<span class="number">2</span>&lt;<span class="number">5</span>))<span class="comment">#&gt;&gt;4,因2&lt;5相当于1 </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( [] == <span class="literal">False</span>)<span class="comment">#&gt;&gt;false</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> [])<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="number">0</span> == <span class="literal">False</span>)<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="number">1</span> == <span class="literal">True</span>)<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="string">&quot;&quot;</span>)<span class="comment">#&gt;&gt;true</span></span><br></pre></td></tr></table></figure><h1 id="条件分支语句-if语句"><a href="#条件分支语句-if语句" class="headerlink" title="条件分支语句(if语句)"></a>条件分支语句(if语句)</h1><p>有时，并非所有的程序语句都要被顺序执行到，会希望满足某种条件就执行这部分语句，满足另一条件就执行另一部分语句。这就需要“条件分支语句”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 逻辑表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 逻辑表达式<span class="number">2</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br><span class="line">...<span class="comment">#可以有多种个elif</span></span><br><span class="line"><span class="keyword">elif</span> 逻辑表达式n: </span><br><span class="line">语句组n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>依次计算逻辑表达式1、逻辑表达式2…只要碰到一个表达式i为真，则执行语句组i( 前面为假的表达式对应的语句组不会被执行) ，且后面的表达式不再计算，后面的语句组也都不会被执行。</p><p>若所有表达式都为假，则执行语句组n+1</p><p>注意，缩进的前一行末尾有<code>:</code></p><ul><li>可以没有elif, 也可以没有else， 也可以都没有</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>Python程序的语句前面不能加空格或制表符，除非：</li></ul><ol><li>它在if语句中的某个”语句组”里面</li><li>在for，while….等语句的语句组里面</li><li>在函数体里面</li></ol><h2 id="if缩进对齐"><a href="#if缩进对齐" class="headerlink" title="if缩进对齐"></a>if缩进对齐</h2><ul><li>if语句中的语句组，每条语句左边必须缩进，且缩进情况必须一样(对齐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入: 5，输出: ab<br>输入: 4，无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入: 4，输出：b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>出错！没有对齐的缩进！</p><ul><li>什么相当于True或False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;ok&quot;</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;ok&quot;</span>)<span class="comment">#&gt;&gt;ok</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;null string&quot;</span>)<span class="comment">#无输出</span></span><br><span class="line">a = [<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="built_in">print</span> (a)<span class="comment">#&gt;&gt;[4,2]</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">20</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="number">20</span>)<span class="comment">#&gt;&gt;20</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="number">0</span>)<span class="comment">#无输出</span></span><br></pre></td></tr></table></figure><h2 id="if语句嵌套"><a href="#if语句嵌套" class="headerlink" title="if语句嵌套"></a>if语句嵌套</h2><ul><li>在一条if语句的某个分支(语句组)里，还可以再写if语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入：4，输出: bad<br>输入：3，输出: good<br>输入：-1，无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入：4，无输出<br>输入：3，输出: good<br>输入：-1，无输出</p><h2 id="if语句实例"><a href="#if语句实例" class="headerlink" title="if语句实例"></a>if语句实例</h2><ul><li>例:输入密码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="string">&quot;python&quot;</span></span><br><span class="line">userInput = <span class="built_in">input</span>()<span class="comment">#等待用户输入密码</span></span><br><span class="line"><span class="keyword">if</span> userInput == password:<span class="comment"># ==判断两边的表达式值是否相等</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对了!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;错了&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>if语句实例:温度转换程序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tmpStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值:&quot;</span>) <span class="comment">#tmpStr是变量名,随便取啥都行</span></span><br><span class="line"><span class="keyword">if</span> tmpStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]: <span class="comment">#如果输入华氏温度</span></span><br><span class="line">C = ((<span class="built_in">float</span>(tmpStr[<span class="number">0</span>:-<span class="number">1</span>])) - <span class="number">32</span> ) / <span class="number">1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&quot;</span> + <span class="built_in">str</span>(C) + <span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> tmpStr[-<span class="number">1</span>] <span class="keyword">in</span> <span class="string">&quot;Cc&quot;</span>: <span class="comment">#如果输入摄氏温度</span></span><br><span class="line">F = <span class="number">1.8</span> * <span class="built_in">eval</span>(tmpStr[<span class="number">0</span>:-<span class="number">1</span>]) + <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&quot;</span> + <span class="built_in">str</span>(F) + <span class="string">&quot;F&quot;</span>) <span class="comment">#str将F转字符串</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)<span class="comment">#用float替代eval也可以</span></span><br></pre></td></tr></table></figure><p>请输入带有符号的温度值：45F<br>转换后的温度是7.22222222222222C<br>请输入带有符号的温度值：8.2C<br>转换后的温度是46.76F</p><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><p>若s是一个字符串，则:<br><code>s[x:y]</code>是s的从下标x到下标y的左边那个字符构成的子串(切片)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;12345&quot;</span>[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#&gt;&gt;23</span></span><br><span class="line">a = <span class="string">&quot;abcdef&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt; cde</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">6</span>])<span class="comment">#&gt;&gt; abcdef</span></span><br></pre></td></tr></table></figure><ul><li><p>常见错误</p></li><li><p>不要把if …eIse或if…elif…else 写成多个if</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">...</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">...</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; xxx&quot;</span>)</span><br><span class="line">a =<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> a &lt;= <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>两段代码不一样</p><p>…中可能把a的值改成了&lt;= 5。写多个if，哪些代码会被执行，哪些不会被执行，很容易搞错。</p><p>例题：请写一个程序，该程序输入一个年份，根据该年份是否是建国整十周年、建党整十周年以及是否是闰年给出不同的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span> (<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Illegal year&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Legal year.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> year &gt; <span class="number">1949</span> <span class="keyword">and</span> (year - <span class="number">1949</span>) % <span class="number">10</span> == <span class="number">0</span>:<span class="comment">#建国整十</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Luky year.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> year &gt; <span class="number">1921</span> <span class="keyword">and</span> <span class="keyword">not</span> ((year - <span class="number">1921</span>) % <span class="number">10</span>) :<span class="comment">#建党整十</span></span><br><span class="line"><span class="comment">#只是为了演示not的用法，没必要这么写</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good year.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line"><span class="comment"># year % 100若不为0，则year % 100就相当于True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Leap year.&quot;</span>) <span class="comment">#闰年</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Common year.&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-2</span><br><span class="line">Illegal year.</span><br><span class="line"></span><br><span class="line">1959</span><br><span class="line">Legal year.</span><br><span class="line">Luky year.</span><br><span class="line"></span><br><span class="line">1931</span><br><span class="line">Legal year.</span><br><span class="line">Good year.</span><br><span class="line"></span><br><span class="line">2008</span><br><span class="line">Legal year.</span><br><span class="line">Leap year.</span><br></pre></td></tr></table></figure><h2 id="输出格式控制"><a href="#输出格式控制" class="headerlink" title="输出格式控制"></a>输出格式控制</h2><ul><li>字符串中的格式控制符:</li></ul><p><code>%s</code> 表示此处要输出一个字符串<br><code>%d</code> 表示此处要输出一个整数<br><code>%f</code> 表示此处要输出一个小数<br><code>%.nf</code> 表示此处要输出一个小数， 保留小数点后面n位，四舍六入，五则可能入也可能舍。</p><p>格式控制符只能出现在字符串中!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">1.746</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is %s, I am %.2fm tall.&quot;</span> % (<span class="string">&quot;tom&quot;</span>, h))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My age is %d.&quot;</span> % <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d%s&quot;</span> % (<span class="number">18</span>, <span class="string">&quot;he1lo&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f, %.2f&quot;</span> % (<span class="number">5.225</span>, <span class="number">5.325</span>)) <span class="comment">#&gt;&gt; 5.22,5.33 四舍六入，遇到五会有一般舍去，一半进位</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">My name is tom, I am 1.75m tall.</span><br><span class="line">My age is 18.</span><br><span class="line">18hello</span><br><span class="line">5.22, 5.33</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">h = <span class="number">1.746</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;My name is %s, I am %.2f m tall.&quot;</span> % (<span class="string">&quot;tom&quot;</span>, h)</span><br><span class="line"></span><br><span class="line">是个字符串。比下面这个等价字符串简洁:</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;My name is %s&quot;</span> % name + <span class="string">&quot;I am %.2f m tall.&quot;</span> % h</span><br></pre></td></tr></table></figure><ul><li>题目：在一行输入两个小数x，y，请输出(x+y) * x的值，保留小数点后面5位</li></ul><p>错误解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y = <span class="built_in">float</span>(s[<span class="number">0</span>]) , <span class="built_in">float</span>(s[<span class="number">1</span>])</span><br><span class="line">m = <span class="string">&#x27;%.5f&#x27;</span> % (x+y)</span><br><span class="line">z = <span class="built_in">float</span>(m) * x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.5f&quot;</span> % z)</span><br></pre></td></tr></table></figure><p>x+y本来就是小数没有必要先转成字符串，又转成小数。结果要保留小数点后面5位，并非中间的计算过程也要保留小数点后面5位</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第一章Python初探</title>
    <link href="http://hibiscidai.com/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/"/>
    <id>http://hibiscidai.com/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/</id>
    <published>2022-09-02T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2.png" class="" title="实用Python程序设计MOOC-第一章Python初探"><p>实用Python程序设计MOOC-第一章Python初探</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第一章Python初探"><a href="#实用Python程序设计MOOC-第一章Python初探" class="headerlink" title="实用Python程序设计MOOC-第一章Python初探"></a>实用Python程序设计MOOC-第一章Python初探</h1><h1 id="Python语言来历"><a href="#Python语言来历" class="headerlink" title="Python语言来历"></a>Python语言来历</h1><h2 id="常见程序设计语言"><a href="#常见程序设计语言" class="headerlink" title="常见程序设计语言"></a>常见程序设计语言</h2><ul><li>Java：使用最广泛的语言。主要用于互联网服务器端应用和Android手机App开发</li><li>C/C++：开发对速度要求较高的系统软件，以及大型端游</li><li>C#：微软公司程序设计语言，网站开发，桌面应用开发</li><li>PHP：网站开发</li><li>JavaScript：网站前端开发。在浏览器中运行</li><li>Swift：苹果公司语言，用于开发iPhone App和Mac桌面应用程序</li></ul><h2 id="为什么学Python"><a href="#为什么学Python" class="headerlink" title="为什么学Python"></a>为什么学Python</h2><ul><li>简单易学</li><li>有众多的库支持，功能强大</li><li>编程效率高</li><li>跨平台(Windows, Linux，Mac OS…)</li></ul><p>库：别人写好的功能模块</p><h2 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h2><p>Python的作者，Guido von Rossum，荷兰人。</p><p>1982年，Guido从阿姆斯特丹大学(University of Amsterdam) 获得了数学和计算机硕士学位。</p><p>之所以选中Python (大蟒蛇的意思)作为该编程语言的名字，是因为他是一个叫Monty Python的喜剧团体的爱好者。</p><p><code>www.python.org</code></p><p>Python雏形 1991年<br>Python 1. 0 1994年11月<br>Python 2. 0 2000年<br>Python 2. 7.13是Python 2的最后版本<br>Python 3. 0 2008年<br>Python 3 不向后兼容Python2</p><p>目前: Python 3. 6.2</p><h1 id="Python的开发环境搭建"><a href="#Python的开发环境搭建" class="headerlink" title="Python的开发环境搭建"></a>Python的开发环境搭建</h1><h2 id="搭建Python开发环境"><a href="#搭建Python开发环境" class="headerlink" title="搭建Python开发环境"></a>搭建Python开发环境</h2><p>1、 下载并安装Python 3. x<br>2、下载并安装pycharm -community-4. 0.4<br>(非必需，但强烈推荐)<br><a href="http://www">http://www</a>. jetbra ins. com/ pycharm/ down I oad/ #sect i on=w indows<br>3、配置pycharm<br>4、在pycharm建工程<br>5、编写、运行python程序</p><blockquote><p>安装时候选择为所有用户安装，并且添加Python到path。</p></blockquote><h2 id="以命令行方式运行python程序"><a href="#以命令行方式运行python程序" class="headerlink" title="以命令行方式运行python程序"></a>以命令行方式运行python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`hello.py`</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><blockquote><p>使用pycharm解释器设置。</p></blockquote><h1 id="Python语言的基本要素"><a href="#Python语言的基本要素" class="headerlink" title="Python语言的基本要素"></a>Python语言的基本要素</h1><p>程序中的所有字符都必须是英文(半角)字符，不能是中文(全角)字符，注意.,(,”之类的，都必须是英文字符!</p><p>除非就是要输出中文文字，才会在”字符串”中使用中文</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>并非需要执行的指令，只是为了编程者方便理解程序之.用<br>单行注释: “#” 开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b</span><br><span class="line"><span class="comment">#让a和b的值相同</span></span><br></pre></td></tr></table></figure><p>Pycharm中，选中若干行， <code>Ctrl + &#39;/&#39;</code>可将这些行都变成注释/都由注释变为非注释。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量有名字，可以用来存储数据。其值可变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = a <span class="comment">#让b的值变得和a一样</span></span><br><span class="line"><span class="built_in">print</span> (a+b)</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p><h2 id="变量的命名办法"><a href="#变量的命名办法" class="headerlink" title="变量的命名办法"></a>变量的命名办法</h2><ul><li>变量由大小写字母、数字和下划线构成，中间不能有空格，长度不限，不能以数字开头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">_doorNum</span><br><span class="line">x1</span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line">a2</span><br><span class="line">A</span><br><span class="line">number_of_students MYTYPE</span><br></pre></td></tr></table></figure><ul><li><p>变量名最好能够体现变量的含义</p></li><li><p>多单词的变量名，最好第一个单词小写，后面单词首字母大写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dateOfBirth</span><br><span class="line">numOfDogs</span><br><span class="line">bookPrice</span><br></pre></td></tr></table></figure><ul><li>变量名是大小写相关的</li></ul><p>a和A,name和Name是不同的变量。</p><ul><li>有些名字Python预留了,不可用作变量的名字</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">as</span><br><span class="line">assert</span><br><span class="line">break</span><br><span class="line">class</span><br><span class="line">continue</span><br><span class="line">def</span><br><span class="line">del</span><br><span class="line">elif</span><br><span class="line">else</span><br><span class="line">except</span><br><span class="line">exec</span><br><span class="line">for</span><br><span class="line">finally</span><br><span class="line">from</span><br><span class="line">global</span><br><span class="line">if</span><br><span class="line">import</span><br><span class="line">in</span><br><span class="line">is</span><br><span class="line">lambda</span><br><span class="line">not</span><br><span class="line">or</span><br><span class="line">pass</span><br><span class="line">print</span><br><span class="line">raise</span><br><span class="line">return</span><br><span class="line">try</span><br><span class="line">while</span><br><span class="line">with</span><br><span class="line">yield</span><br></pre></td></tr></table></figure><p>如果不小心用了，python会报错</p><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量=表达式</span><br></pre></td></tr></table></figure><p>将变量的值变得和”表达式”的值一样</p><p>变量、数、字符串……都是“表达式”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;he&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &gt;&gt;he</span></span><br><span class="line">b=<span class="number">3</span>+<span class="number">2</span></span><br><span class="line">a=b<span class="comment"># a的值变得和b一样</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># &gt;&gt;5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &gt;&gt;5</span></span><br><span class="line">b=b+a<span class="comment"># b的值改为原来b的值加a</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># &gt;&gt;10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="string">&quot;he&quot;</span>,<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment"># &gt;&gt;he 12</span></span><br><span class="line">a,b = b,a<span class="comment">#交换a,b的值</span></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment"># &gt;&gt;12 he</span></span><br><span class="line">c,a,b = a,b,a</span><br><span class="line"><span class="built_in">print</span>(a,b,c)<span class="comment"># &gt;&gt;he 12 12</span></span><br><span class="line">a=b=c=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)<span class="comment">#&gt;&gt;10 10 10</span></span><br></pre></td></tr></table></figure><h2 id="程序顶格书写"><a href="#程序顶格书写" class="headerlink" title="程序顶格书写"></a>程序顶格书写</h2><p>程序每行前面不能留空格</p><h1 id="初步认识字符串"><a href="#初步认识字符串" class="headerlink" title="初步认识字符串"></a>初步认识字符串</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="可以且必须用单引号、双引号或三引号括起来"><a href="#可以且必须用单引号、双引号或三引号括起来" class="headerlink" title="可以且必须用单引号、双引号或三引号括起来"></a>可以且必须用单引号、双引号或三引号括起来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;I said: &#x27;hello&#x27; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># &gt;&gt;1 said:&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I said: &quot;hello&quot; &#x27;</span>) <span class="comment">#&gt;&gt;| said:&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;I said: &#x27;he said &quot;hello&quot;&#x27;.&#x27;&#x27;&#x27;</span>) <span class="comment">#&gt;&gt;I said:&#x27;he said&quot;hello&quot;&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;this \</span></span><br><span class="line"><span class="string">is \</span></span><br><span class="line"><span class="string">good&quot;</span>)<span class="comment">#&gt;&gt;this is good 字符串太长时，自己看起来分行，输出不分行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello, word)<span class="comment">#错!没有用引号括起来</span></span><br></pre></td></tr></table></figure><h3 id="字符串里面不会包含变量"><a href="#字符串里面不会包含变量" class="headerlink" title="字符串里面不会包含变量"></a>字符串里面不会包含变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">1.75</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;1.75</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am s m tall&quot;</span>)<span class="comment">#&gt;&gt;I am s m tall</span></span><br><span class="line"><span class="comment"># 字符串中的s就是个字符，和前面的变量s没有关系!!!</span></span><br><span class="line"><span class="comment"># 字符串必须用引号括起来，用引号括起来的就是字符串!</span></span><br><span class="line">a=<span class="number">4</span></span><br><span class="line">b=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a+b&quot;</span>)<span class="comment">#&gt;&gt; a+b 不会打出9!!!!!</span></span><br></pre></td></tr></table></figure><h3 id="三双引号字符串中可以包含换行符、制表符以及其他特殊字符。"><a href="#三双引号字符串中可以包含换行符、制表符以及其他特殊字符。" class="headerlink" title="三双引号字符串中可以包含换行符、制表符以及其他特殊字符。"></a>三双引号字符串中可以包含换行符、制表符以及其他特殊字符。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">para_str= <span class="string">&quot;&quot;&quot;多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB(\t)。</span></span><br><span class="line"><span class="string">也可以使用换行符[ \n ]。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class="line"><span class="string">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class="line"><span class="string">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class="line"><span class="string">&lt;/BODY&gt; &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(para <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB()。</span><br><span class="line">也可以使用换行符[</span><br><span class="line">]。</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="line">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="line">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="line">ONCLICK= =&quot;window . history .back() &quot;&gt;&lt;/FORM&gt;</span><br><span class="line">&lt;/BODY&gt; &lt;/HTML&gt;</span><br></pre></td></tr></table></figure></p><h3 id="字符串的下标"><a href="#字符串的下标" class="headerlink" title="字符串的下标"></a>字符串的下标</h3><p>有n个字符的字符串，其中的每个字符都是长度为1的字符串：</p><p>从左到右依次编号为0,1,2…n-1<br>从右到左依次编号为-1,-2…-n</p><p>编号就是下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>]) <span class="comment">#&gt;&gt;D</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>]) <span class="comment">#&gt;&gt;A</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>]) <span class="comment">#&gt;&gt;C</span></span><br></pre></td></tr></table></figure><h3 id="用”-”连接字符串"><a href="#用”-”连接字符串" class="headerlink" title="用”+”连接字符串"></a>用”+”连接字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line">b=<span class="string">&quot;1234&quot;</span></span><br><span class="line">a=a+b</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;ABCD1234</span></span><br><span class="line"></span><br><span class="line">a=a+a[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;ABCD1234B</span></span><br></pre></td></tr></table></figure><h3 id="不可以修改字符串中的字符"><a href="#不可以修改字符串中的字符" class="headerlink" title="不可以修改字符串中的字符"></a>不可以修改字符串中的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line">a[<span class="number">2</span>]=<span class="string">&#x27;k&#x27;</span><span class="comment">#错，字符串中的字符不能修改</span></span><br></pre></td></tr></table></figure><h3 id="用in-not-in判断子串"><a href="#用in-not-in判断子串" class="headerlink" title="用in,not in判断子串"></a>用in,not in判断子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;Hello&quot;</span></span><br><span class="line">b=<span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;el&quot;</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt; True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;th&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> b)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lot&quot;</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt;False</span></span><br></pre></td></tr></table></figure><h1 id="字符串和数的转换"><a href="#字符串和数的转换" class="headerlink" title="字符串和数的转换"></a>字符串和数的转换</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x)<span class="comment">#把字符串转换成整数,(x不会变成整数，int (x)这个表达式的值是整数)</span></span><br><span class="line"><span class="built_in">float</span>(x)<span class="comment">#把字符串x转换成小数</span></span><br><span class="line"><span class="built_in">str</span>(x)<span class="comment">#把x转换成字符串</span></span><br><span class="line"><span class="built_in">eval</span>(x)<span class="comment">#把字符串x看作一个python表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求其值初学者程序出现runtime error,多半是由于做了不合法的转换，如int(x)而x为&quot;a12&quot;或&quot;12.34&#x27;,float(x)而x为&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">15</span></span><br><span class="line">b=<span class="string">&quot;12&quot;</span></span><br><span class="line">c=a+b<span class="comment">#错误的语句,字符串和整数无法相加</span></span><br><span class="line"><span class="built_in">print</span>(a+<span class="built_in">int</span>(b))<span class="comment">#&gt;&gt;27 b没有变成整数int(b)这个表达式的值是个整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a)+b)<span class="comment">#&gt;&gt;1512</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">1</span>+<span class="built_in">float</span>(<span class="string">&quot;3.5&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;4.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+<span class="built_in">eval</span>(<span class="string">&quot;4.5&quot;</span>)) <span class="comment">#&gt;&gt;7.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;3+2&quot;</span>))<span class="comment">#&gt;&gt;5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;3+a&quot;</span>))<span class="comment">#&gt;&gt;18</span></span><br></pre></td></tr></table></figure><ul><li>小数到整数的转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x) <span class="comment">#x是小数,则去尾取整</span></span><br><span class="line"><span class="built_in">int</span>(<span class="number">3.2</span>)<span class="comment">#3</span></span><br><span class="line"><span class="built_in">int</span>(<span class="number">3.9</span>)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><h2 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">-</th><th style="text-align:center">-</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">整数</td><td style="text-align:center">123456</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">小数</td><td style="text-align:center">3.2</td></tr><tr><td style="text-align:center">complex</td><td style="text-align:center">复数1+2j</td></tr><tr><td style="text-align:center">Str</td><td style="text-align:center">字符串</td><td style="text-align:center">“he1lo”</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">列表</td><td style="text-align:center">[1,2, ‘ok’ ,4.3]</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">元组</td><td style="text-align:center">(1,2, ‘ok’ ,4.3)</td></tr><tr><td style="text-align:center">bool</td><td style="text-align:center">布尔</td><td style="text-align:center">True False</td></tr><tr><td style="text-align:center">dict</td><td style="text-align:center">字典</td><td style="text-align:center">{“tom” :20, “jack” :30}</td></tr><tr><td style="text-align:center">set</td><td style="text-align:center">集合</td><td style="text-align:center">{“tom” ,18, 71}</td></tr></tbody></table></div><h1 id="最简单的输入输出"><a href="#最简单的输入输出" class="headerlink" title="最简单的输入输出"></a>最简单的输入输出</h1><h2 id="输出语句print"><a href="#输出语句print" class="headerlink" title="输出语句print"></a>输出语句print</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x,y,z....)</span><br><span class="line"><span class="comment">#连续输出多项，以空格分隔，然后换行</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z....,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#连续输出多项，以空格分隔，不换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)<span class="comment">#&gt;&gt;1 2 3ok</span></span><br></pre></td></tr></table></figure><h2 id="输入语句input"><a href="#输入语句input" class="headerlink" title="输入语句input"></a>输入语句input</h2><p>格式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">input</span>(y)</span><br><span class="line"><span class="comment">#x是变量</span></span><br><span class="line"><span class="comment">#y是字符串，或任何值为字符串的表达式</span></span><br><span class="line"><span class="comment">#输出y，并等待输入。敲回车后输入的字符串被赋值给x</span></span><br></pre></td></tr></table></figure></p><ul><li>最简单的能处理输入的Python程序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s+<span class="string">&quot;,你好! &quot;</span>)</span><br></pre></td></tr></table></figure><p>注意:以后做OpenJudge作业的时候，input里面不要写任何东西，<code>s=input()</code></p><blockquote><p>input()每次输入一行，如果有多行输入，就用多次input()<br>如果输入已经结束(后面没有输入数据了)，再进行input()，就会产生runtime error</p></blockquote><h1 id="初步认识列表"><a href="#初步认识列表" class="headerlink" title="初步认识列表"></a>初步认识列表</h1><h2 id="列表可以有0到任意多个元素，元素可以通过下标访问"><a href="#列表可以有0到任意多个元素，元素可以通过下标访问" class="headerlink" title="列表可以有0到任意多个元素，元素可以通过下标访问"></a>列表可以有0到任意多个元素，元素可以通过下标访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">empty=[]<span class="comment">#空表</span></span><br><span class="line">list1=[<span class="string">&#x27;Goog1e&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>,<span class="number">1997</span>,<span class="number">2000</span>]</span><br><span class="line">list2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1[0]:&quot;</span>，list1[<span class="number">0</span>]) <span class="comment">#&gt;&gt;1ist1[0] : Google</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">2001</span><span class="comment">#更改了列表中下标为2的元素。</span></span><br><span class="line">a=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后的第三个元素为:&quot;</span>,list1[a]) <span class="comment">#变量也能做下标</span></span><br><span class="line"><span class="comment">#&gt;&gt;更新后的第三个元素为:2001</span></span><br></pre></td></tr></table></figure><h2 id="用in判断列表是否包含某个元素"><a href="#用in判断列表是否包含某个元素" class="headerlink" title="用in判断列表是否包含某个元素"></a>用in判断列表是否包含某个元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;4&quot;</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> lst,<span class="number">3</span> <span class="keyword">in</span> lst,<span class="string">&quot;4&quot;</span> <span class="keyword">in</span> lst)<span class="comment">#&gt;&gt;False True True</span></span><br></pre></td></tr></table></figure><ul><li>实例:输入两个整数求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line">numbers=s.split()<span class="comment">#s分割后得到的列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(numbers[<span class="number">0</span>])+<span class="built_in">int</span>(numbers[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>若输入:3 4<br>则:s为:”3 4”<br>numbers为: [“3”, “4”]<br>输出: 7</p><h2 id="字符分割成列表"><a href="#字符分割成列表" class="headerlink" title="字符分割成列表"></a>字符分割成列表</h2><p>若x是字符串，则<code>x.split()</code>的值是一个列表，包含字符串x经空格、制表符、换行符分隔得到的所有子串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;34\t\t45\n7&quot;</span>.split()) <span class="comment">#&gt;&gt;[&#x27;34&#x27;,&#x27;45&#x27;,&#x27;7&#x27;]</span></span><br><span class="line"><span class="comment">#\t是制表符，\n是换行符号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ab cd hello&quot;</span>.split()) <span class="comment">#&gt;&gt;[&#x27;ab&#x27;,&#x27;cd&#x27;,&#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">&quot;1234&quot;</span></span><br><span class="line">lst = s.split ()</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment">#&gt;&gt;[ &#x27;12&#x27;，&#x27;34&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第一章Python初探</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>主要岩石矿物密度</title>
    <link href="http://hibiscidai.com/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/"/>
    <id>http://hibiscidai.com/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/</id>
    <published>2022-05-20T10:00:00.000Z</published>
    <updated>2022-05-20T10:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6.png" class="" title="主要岩石矿物密度"><p>主要岩石矿物密度</p><span id="more"></span><p>[TOC]</p><h1 id="主要岩石矿物密度"><a href="#主要岩石矿物密度" class="headerlink" title="主要岩石矿物密度"></a>主要岩石矿物密度</h1><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">密度范围</th></tr></thead><tbody><tr><td style="text-align:center">纯橄榄岩</td><td style="text-align:center">2.5 - 3.3</td></tr><tr><td style="text-align:center">锰矿</td><td style="text-align:center">3.4 - 6.0</td></tr><tr><td style="text-align:center">橄榄岩</td><td style="text-align:center">2.6 - 3.6</td></tr><tr><td style="text-align:center">钨酸钙矿</td><td style="text-align:center">5.9 - 6.2</td></tr><tr><td style="text-align:center">玄武岩</td><td style="text-align:center">2.6 - 3.3</td></tr><tr><td style="text-align:center">铬铁矿</td><td style="text-align:center">3.2 - 4.4</td></tr><tr><td style="text-align:center">辉长岩</td><td style="text-align:center">2.7 - 3.4</td></tr><tr><td style="text-align:center">赤铁矿</td><td style="text-align:center">5.1 - 5.2</td></tr><tr><td style="text-align:center">安山岩</td><td style="text-align:center">2.5 - 3.8</td></tr><tr><td style="text-align:center">磁铁矿</td><td style="text-align:center">4.8 - 5.2</td></tr><tr><td style="text-align:center">辉绿岩</td><td style="text-align:center">2.9 - 3.3</td></tr><tr><td style="text-align:center">黄铁矿</td><td style="text-align:center">4.9 - 5.2</td></tr><tr><td style="text-align:center">玢岩</td><td style="text-align:center">2.6 - 3.9</td></tr><tr><td style="text-align:center">黄铜矿</td><td style="text-align:center">4.1 - 4.3</td></tr><tr><td style="text-align:center">花岗岩</td><td style="text-align:center">2.4 - 3.1</td></tr><tr><td style="text-align:center">钛铁矿</td><td style="text-align:center">4.5 - 5.0</td></tr><tr><td style="text-align:center">石英岩</td><td style="text-align:center">2.6 - 2.9</td></tr><tr><td style="text-align:center">磁黄铁矿</td><td style="text-align:center">4.3 - 4.8</td></tr><tr><td style="text-align:center">流纹岩</td><td style="text-align:center">2.3 - 2.9</td></tr><tr><td style="text-align:center">表土</td><td style="text-align:center">1.1 - 2.0</td></tr><tr><td style="text-align:center">片麻岩</td><td style="text-align:center">2.4 - 2.9</td></tr><tr><td style="text-align:center">粘土</td><td style="text-align:center">1.5 - 2.2</td></tr><tr><td style="text-align:center">云母岩</td><td style="text-align:center">2.5 - 3.0</td></tr><tr><td style="text-align:center">铝钒上</td><td style="text-align:center">2.4 - 2.5</td></tr><tr><td style="text-align:center">干枚岩</td><td style="text-align:center">2.7 - 2.8</td></tr><tr><td style="text-align:center">砂</td><td style="text-align:center">1.4 - 1.7</td></tr><tr><td style="text-align:center">蛇纹岩</td><td style="text-align:center">2.6 - 3.2</td></tr><tr><td style="text-align:center">白垩</td><td style="text-align:center">1.8 - 2.6</td></tr><tr><td style="text-align:center">大理岩</td><td style="text-align:center">2.6 - 2.9</td></tr><tr><td style="text-align:center">硬石膏</td><td style="text-align:center">2.7 - 3.0</td></tr><tr><td style="text-align:center">白云岩</td><td style="text-align:center">2.4 - 2.9</td></tr><tr><td style="text-align:center">石膏</td><td style="text-align:center">2.2 - 2.4</td></tr><tr><td style="text-align:center">页岩</td><td style="text-align:center">2.1 - 2.8</td></tr><tr><td style="text-align:center">煤</td><td style="text-align:center">1.2 - 1.7</td></tr><tr><td style="text-align:center">石灰岩</td><td style="text-align:center">2.3 - 3.0</td></tr><tr><td style="text-align:center">褐煤</td><td style="text-align:center">1.1 - 1.3</td></tr><tr><td style="text-align:center">砂岩</td><td style="text-align:center">1.8 - 2.8</td></tr><tr><td style="text-align:center">钾盐</td><td style="text-align:center">1.9 - 2.0</td></tr><tr><td style="text-align:center">闪长岩</td><td style="text-align:center">2.7 - 3.0</td></tr><tr><td style="text-align:center">盐岩</td><td style="text-align:center">2.1 - 2.2</td></tr><tr><td style="text-align:center">重晶石</td><td style="text-align:center">4.4 - 4.7</td></tr><tr><td style="text-align:center">刚玉</td><td style="text-align:center">3.9 - 4.0</td></tr><tr><td style="text-align:center">氟石</td><td style="text-align:center">3.1 - 3.2</td></tr></tbody></table></div><h1 id="常见重矿物类型"><a href="#常见重矿物类型" class="headerlink" title="常见重矿物类型"></a>常见重矿物类型</h1><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">常见</th></tr></thead><tbody><tr><td style="text-align:center">稳定重矿物</td><td style="text-align:center">石榴子石、错石、刚玉、电气石、锡石、金红石、白钛矿、磁铁矿、榍石、十字石、蓝晶石、独居石</td></tr><tr><td style="text-align:center">不稳定重矿物</td><td style="text-align:center">重晶石、磷灰石、绿帘石、黝帘石、阳起石、符山石、红柱石、硅线石、黄铁矿、透闪石、普通角闪石、透辉石、普通辉石、斜方辉石、橄榄石、黑云母</td></tr></tbody></table></div><h1 id="不同母岩类型的重矿物组合"><a href="#不同母岩类型的重矿物组合" class="headerlink" title="不同母岩类型的重矿物组合"></a>不同母岩类型的重矿物组合</h1><div class="table-container"><table><thead><tr><th style="text-align:center">母岩</th><th style="text-align:center">重矿物组合</th></tr></thead><tbody><tr><td style="text-align:center">酸性岩浆岩</td><td style="text-align:center">磷灰岩、普通角闪石、独居石、金红石、榍石、锆石、电气石(粉红)、锡石、黑云母</td></tr><tr><td style="text-align:center">伟晶岩</td><td style="text-align:center">锡石、萤石、白云母、黄玉、电气石、黑钨矿</td></tr><tr><td style="text-align:center">中性及基性岩浆岩</td><td style="text-align:center">普通辉石、紫苏辉石、普通角闪石、透辉石、磁铁矿、钛铁矿</td></tr><tr><td style="text-align:center">变质岩</td><td style="text-align:center">红柱石、石榴石、硬绿泥石、蓝闪石、蓝晶石、硅线石、十字石、绿帘石、黝帘石、镁电气石(黄、褐色)黑云母，白云母、硅灰石、董青</td></tr><tr><td style="text-align:center">再改造的沉积岩</td><td style="text-align:center">锆石(圆)、电气石(圆)、金红石</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">主要岩石矿物密度</summary>
    
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/categories/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/tags/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    <category term="石油地质" scheme="http://hibiscidai.com/tags/%E7%9F%B3%E6%B2%B9%E5%9C%B0%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</title>
    <link href="http://hibiscidai.com/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/"/>
    <id>http://hibiscidai.com/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/</id>
    <published>2022-03-20T01:00:00.000Z</published>
    <updated>2022-03-23T05:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81.png" class="" title="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"><p>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</p><span id="more"></span><h1 id="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"><a href="#白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码" class="headerlink" title="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"></a>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文有关《白云凹陷珠江组-恩平组高温高压低渗气层测井评价》附录1软件核心代码展示；</p><p>内容仅供学习参考，引用参考请标明本文代码来源，对本文代码进行恶意盗用或占用知识产权，本人及团队追究其法律责任。</p><h1 id="泥质含量计算关键源码"><a href="#泥质含量计算关键源码" class="headerlink" title="泥质含量计算关键源码"></a>泥质含量计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal0</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> GR = <span class="keyword">this</span>._gr.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"><span class="built_in">double</span> IGR = (GR - <span class="keyword">this</span>._grmin) / (<span class="keyword">this</span>._grmax - <span class="keyword">this</span>._grmin);</span><br><span class="line"></span><br><span class="line">VSH = (Math.Pow(<span class="number">2</span>, <span class="keyword">this</span>._gcur * IGR) - <span class="number">1</span>) / (Math.Pow(<span class="number">2</span>, <span class="keyword">this</span>._gcur) - <span class="number">1</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> GR = <span class="keyword">this</span>._gr.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">VSH = <span class="keyword">this</span>._shgr1 * GR + <span class="keyword">this</span>._shgr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> TH = <span class="keyword">this</span>._th.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">VSH = (TH - <span class="keyword">this</span>._thmin) / (<span class="keyword">this</span>._thmax - <span class="keyword">this</span>._thmin) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectVSH</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == VSH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> corVSH = VSH;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corVSH)</span><br><span class="line">corVSH = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corVSH)</span><br><span class="line">corVSH = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corVSH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="孔隙度计算关键源码"><a href="#孔隙度计算关键源码" class="headerlink" title="孔隙度计算关键源码"></a>孔隙度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal0</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = ((AC - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma) / <span class="keyword">this</span>._cp - (VSH / <span class="number">100</span>) * (<span class="keyword">this</span>._poracsh - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma)) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AC+<span class="function">PORAC2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porac1 * AC + <span class="keyword">this</span>._porac2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal2</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = (CNL - VSH / <span class="number">100</span> * <span class="keyword">this</span>._porcnlsh) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal3</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porcnl1 * CNL + <span class="keyword">this</span>._porcnl2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal4</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = ((DEN - <span class="keyword">this</span>._pordenma4) / (<span class="keyword">this</span>._pordenf4 - <span class="keyword">this</span>._pordenma4) - (VSH / <span class="number">100</span>) * (<span class="keyword">this</span>._pordensh - <span class="keyword">this</span>._pordenma4) / (<span class="keyword">this</span>._pordenf4 - <span class="keyword">this</span>._pordenma4)) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal5</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porden1 * DEN + <span class="keyword">this</span>._porden2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal6</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PORDEN = (DEN - <span class="keyword">this</span>._pordenf6) / (<span class="keyword">this</span>._pordenma6 - <span class="keyword">this</span>._pordenf6);</span><br><span class="line"><span class="built_in">double</span> PORCNL = (CNL - <span class="keyword">this</span>._porcnlf) / (<span class="keyword">this</span>._porcnlma - <span class="keyword">this</span>._porcnlf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = Math.Pow((Math.Pow(PORDEN, <span class="number">2</span>) + Math.Pow(PORCNL, <span class="number">2</span>)) / <span class="number">2</span>, <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal7</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poracden1 * AC + <span class="keyword">this</span>._poracden2 * DEN + <span class="keyword">this</span>._poracden3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal8</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poraccnl1 * AC + <span class="keyword">this</span>._poraccnl2 * CNL + <span class="keyword">this</span>._poraccnl3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal9</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porcnlden1 * CNL + <span class="keyword">this</span>._porcnlden2 * DEN + <span class="keyword">this</span>._porcnlden3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal10</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poraccnlden1 * AC + <span class="keyword">this</span>._poraccnlden2 * CNL + <span class="keyword">this</span>._poraccnlden3 * DEN + <span class="keyword">this</span>._poraccnlden4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectPOR</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> corPOR = POR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == corPOR)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corPOR)</span><br><span class="line">    corPOR = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPOR)</span><br><span class="line">    corPOR = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corPOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._porvshc1 &lt;= <span class="keyword">this</span>._porvshc2)</span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._porvshc1;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._porvshc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._porvshc2;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._porvshc1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = (vsh2 - VSH) / (vsh2 - vsh1) * corPOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corPOR)</span><br><span class="line">    corPOR = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPOR)</span><br><span class="line">    corPOR = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="渗透率计算关键源码"><a href="#渗透率计算关键源码" class="headerlink" title="渗透率计算关键源码"></a>渗透率计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal0</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line">PERM = <span class="keyword">this</span>._permpor1 * Math.Pow(Math.E, <span class="keyword">this</span>._permpor2 * CPOR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal1</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line">PERM = <span class="keyword">this</span>._permti1 * Math.Pow(CPOR, <span class="keyword">this</span>._permti2) / Math.Pow(<span class="keyword">this</span>._swb, <span class="keyword">this</span>._permti3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal2</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> FZI = <span class="number">0</span>;</span><br><span class="line">FZI = <span class="keyword">this</span>._permfzi1 + <span class="keyword">this</span>._permfzi2 * AC + <span class="keyword">this</span>._permfzi3 * CNL + <span class="keyword">this</span>._permfzi4 * DEN;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> FZI1 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">double</span> FZI2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._permfzib1 &gt;= <span class="keyword">this</span>._permfzib2)</span><br><span class="line">&#123;</span><br><span class="line">    FZI1 = <span class="keyword">this</span>._permfzib1;</span><br><span class="line">    FZI2 = <span class="keyword">this</span>._permfzib2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    FZI1 = <span class="keyword">this</span>._permfzib2;</span><br><span class="line">    FZI2 = <span class="keyword">this</span>._permfzib1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FZI1 &lt;= FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi1f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi1f2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FZI2 &lt;= FZI &amp;&amp; FZI1 &gt; FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi2f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi2f2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FZI2 &gt; FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi3f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi3f2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal3</span>(<span class="params"><span class="built_in">double</span> CPOR, <span class="built_in">double</span> CVSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DTST = <span class="keyword">this</span>._dtst.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">PERM = Math.Pow(<span class="number">10</span>, <span class="keyword">this</span>._permdtst1f1) * Math.Pow(CPOR, <span class="keyword">this</span>._permdtst1f2) * Math.Pow(DTST, <span class="keyword">this</span>._permdtst1f3) * Math.Pow(CVSH, <span class="keyword">this</span>._permdtst1f4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal4</span>(<span class="params"><span class="built_in">double</span> CPOR, <span class="built_in">double</span> CVSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DTST = <span class="keyword">this</span>._dtst.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">PERM = Math.Pow(<span class="number">10</span>, <span class="keyword">this</span>._permdtst2f1 + <span class="keyword">this</span>._permdtst2f2 * CPOR + <span class="keyword">this</span>._permdtst2f3 * DTST + <span class="keyword">this</span>._permdtst2f4 * CVSH);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectPERM</span>(<span class="params"><span class="built_in">double</span> PERM, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == PERM)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> corPERM = PERM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPERM)</span><br><span class="line">    corPERM = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._permshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corPERM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._permshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._permvshc1 &lt;= <span class="keyword">this</span>._permvshc2)</span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._permvshc1;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._permvshc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._permvshc2;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._permvshc1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = (vsh2 - VSH) / (vsh2 - vsh1) * corPERM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPERM)</span><br><span class="line">    corPERM = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corPERM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="含水饱和度计算关键源码"><a href="#含水饱和度计算关键源码" class="headerlink" title="含水饱和度计算关键源码"></a>含水饱和度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal0</span>(<span class="params"><span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = Math.Pow(<span class="keyword">this</span>._swaa * <span class="keyword">this</span>._swab * <span class="keyword">this</span>._swarw / RT / Math.Pow(POR / <span class="number">100</span>, <span class="keyword">this</span>._swam), <span class="number">1</span> / <span class="keyword">this</span>._swan) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal1</span>(<span class="params"><span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> m = <span class="number">1.911</span>;</span><br><span class="line">    <span class="built_in">double</span> n = <span class="number">1.663</span>;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    <span class="built_in">double</span> T = <span class="number">120</span>;</span><br><span class="line">    <span class="built_in">double</span> P = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> swa2thd = <span class="keyword">this</span>._manager.CurrentIndexValue;</span><br><span class="line">    <span class="built_in">float</span> swa2php = <span class="keyword">this</span>._manager.CurrentIndexValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2tflag)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">this</span>._swa2t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//T = T_sur + G_t×H_d / 100</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2tflag)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">this</span>._swa2ttsur + <span class="keyword">this</span>._swa2tgt * swa2thd / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="keyword">this</span>._swa2p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P=G_p×H_p</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="keyword">this</span>._swa2pgp * swa2php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a = <span class="keyword">this</span>._swa2a;</span><br><span class="line"></span><br><span class="line">    b = <span class="keyword">this</span>._swa2b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2zjsm1 + (<span class="keyword">this</span>._swa2zjsm2 * T + <span class="keyword">this</span>._swa2zjsm3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjsm4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2zjxm1 + (<span class="keyword">this</span>._swa2zjxm2 * T + <span class="keyword">this</span>._swa2zjxm3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjxm4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(T ≤ 150℃，P ≤ 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &gt;= T &amp;&amp; <span class="number">40</span> &gt;= P) &#123;</span><br><span class="line">            m = <span class="keyword">this</span>._swa2epm1 + (<span class="keyword">this</span>._swa2epm2 * T + <span class="keyword">this</span>._swa2epm3) * Math.Log(P) + <span class="keyword">this</span>._swa2epm4 * T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(T &gt; 150℃，P &gt; 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &lt; T &amp;&amp; <span class="number">40</span> &lt; P) &#123;</span><br><span class="line">            m = <span class="keyword">this</span>._swa2epm5 + (<span class="keyword">this</span>._swa2epm6 * T + <span class="keyword">this</span>._swa2epm7) * Math.Log(P) + <span class="keyword">this</span>._swa2epm8 * T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2zjsn1 + (<span class="keyword">this</span>._swa2zjsn2 * T + <span class="keyword">this</span>._swa2zjsn3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjsn4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2zjxn1 + (<span class="keyword">this</span>._swa2zjxn2 * T + <span class="keyword">this</span>._swa2zjxn3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjxn4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(T ≤ 150℃，P ≤ 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &gt;= T &amp;&amp; <span class="number">40</span> &gt;= P)</span><br><span class="line">        &#123;</span><br><span class="line">            n = <span class="keyword">this</span>._swa2epn1 + (<span class="keyword">this</span>._swa2epn2 * T + <span class="keyword">this</span>._swa2epn3) * Math.Log(P) + <span class="keyword">this</span>._swa2epn4 * T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(T &gt; 150℃，P &gt; 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &lt; T &amp;&amp; <span class="number">40</span> &lt; P)</span><br><span class="line">        &#123;</span><br><span class="line">            n = <span class="keyword">this</span>._swa2epn5 + (<span class="keyword">this</span>._swa2epn6 * T + <span class="keyword">this</span>._swa2epn7) * Math.Log(P) + <span class="keyword">this</span>._swa2epn8 * T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SW = Math.Pow(a * b * <span class="keyword">this</span>._swarw / RT / Math.Pow(POR / <span class="number">100</span>, m), <span class="number">1</span> / n) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal2</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> C = <span class="number">1</span> - (VSH / <span class="number">100</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = Math.Pow((<span class="number">1</span> / RT * Math.Pow((Math.Pow(VSH / <span class="number">100</span>, C) / <span class="keyword">this</span>._swyrsh) + (POR / <span class="number">100</span> / Math.Pow(<span class="keyword">this</span>._swya * <span class="keyword">this</span>._swyrw, <span class="number">0.5</span>)), <span class="number">2</span>)), <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal3</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = <span class="number">0.4</span> * <span class="keyword">this</span>._swsrw / Math.Pow(POR / <span class="number">100</span>, <span class="number">2</span>) * (Math.Pow((<span class="number">5</span> * Math.Pow(POR / <span class="number">100</span>, <span class="number">2</span>) / RT / <span class="keyword">this</span>._swsrw + Math.Pow(VSH / <span class="number">100</span> / <span class="keyword">this</span>._swsrsh, <span class="number">2</span>)), <span class="number">0.5</span>) - VSH / <span class="number">100</span> / <span class="keyword">this</span>._swsrsh) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectSW</span>(<span class="params"><span class="built_in">double</span> SW, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-9999.99</span> == SW)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> corSW = SW;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSW)</span><br><span class="line">        corSW = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSW)</span><br><span class="line">        corSW = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swshcor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corSW;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swshcor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._swvshc1 &lt;= <span class="keyword">this</span>._swvshc2)</span><br><span class="line">        &#123;</span><br><span class="line">            vsh1 = <span class="keyword">this</span>._swvshc1;</span><br><span class="line">            vsh2 = <span class="keyword">this</span>._swvshc2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            vsh1 = <span class="keyword">this</span>._swvshc2;</span><br><span class="line">            vsh2 = <span class="keyword">this</span>._swvshc1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = (vsh2 - VSH) / (vsh2 - vsh1) * corSW;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSW)</span><br><span class="line">        corSW = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSW)</span><br><span class="line">        corSW = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> corSW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="束缚水饱和度计算关键源码"><a href="#束缚水饱和度计算关键源码" class="headerlink" title="束缚水饱和度计算关键源码"></a>束缚水饱和度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal0</span>(<span class="params"><span class="built_in">double</span> GR, <span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SWI0ISH = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> SWI0Y = <span class="number">1</span>;</span><br><span class="line">    SWI0ISH = (GR - <span class="keyword">this</span>._swi0grmin) / (<span class="keyword">this</span>._swi0grmax - <span class="keyword">this</span>._swi0grmin);</span><br><span class="line">    SWI0Y = <span class="number">3</span> * (<span class="number">1</span> - SWI0ISH) / (<span class="number">5</span> * Math.Pow(<span class="keyword">this</span>._swi0pormax / <span class="number">100</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SWI0ISH &gt; <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = (<span class="number">2</span> * SWI0ISH - SWI0Y) / (<span class="number">2</span> - SWI0Y) * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0.5</span> == SWI0ISH)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (SWI0ISH &lt; <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = <span class="number">2</span> * SWI0ISH / (<span class="number">2</span> + SWI0Y) * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal1</span>(<span class="params"><span class="built_in">double</span> RT, <span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    SWI = <span class="number">1</span> / POR / <span class="number">100</span> * Math.Pow(<span class="keyword">this</span>._swi1rwb / RT, <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal2</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    SWI = (<span class="keyword">this</span>._swi2a - Math.Log10(POR / VSH - <span class="keyword">this</span>._swi2b)) * <span class="number">100</span> / <span class="keyword">this</span>._swi2c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectSWI</span>(<span class="params"><span class="built_in">double</span> SWI</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-9999.99</span> == SWI)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SWI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> corSWI = SWI;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSWI)</span><br><span class="line">        corSWI = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSWI)</span><br><span class="line">        corSWI = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> corSWI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="层数据统计核心算法"><a href="#层数据统计核心算法" class="headerlink" title="层数据统计核心算法"></a>层数据统计核心算法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span>[] <span class="title">getCurveArray</span>(<span class="params">String CurveName, <span class="built_in">float</span> StartDep, <span class="built_in">float</span> EndDep</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ICurve getCurve = <span class="keyword">this</span>._manager.GetInCurve(CurveName);</span><br><span class="line">    IDataAccessCollection a = getCurve.GetValues(StartDep, EndDep);</span><br><span class="line">    <span class="built_in">float</span>[] result = <span class="keyword">new</span> <span class="built_in">float</span>[a.Count];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        IDataAccess temp = a.GetValue(i);</span><br><span class="line">        <span class="built_in">float</span> dtemp = BitConverter.ToSingle(temp.GetBytes(), <span class="number">0</span>);</span><br><span class="line">        result[i] = dtemp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getMax</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> max = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getMin</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> min = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getAve</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> sum = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> result = sum / a.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getHistogramPeak</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SortedList sortedListArray = <span class="keyword">new</span> SortedList();</span><br><span class="line"></span><br><span class="line">    sortedListArray.Add(a[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">int</span> sortedListArrayIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortedListArray.ContainsKey(a[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = sortedListArray.IndexOfKey(a[i]);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">value</span>++;</span><br><span class="line"></span><br><span class="line">            sortedListArray.Remove(a[i]);</span><br><span class="line"></span><br><span class="line">            sortedListArray.Add(a[i], <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sortedListArray.Add(a[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> MaxFrequency = <span class="number">0</span>;</span><br><span class="line">    ICollection Values = sortedListArray.Values;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> v <span class="keyword">in</span> Values)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; MaxFrequency)</span><br><span class="line">        &#123;</span><br><span class="line">            MaxFrequency = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> CountMaxFrequency = <span class="number">0</span>;</span><br><span class="line">    ICollection Keys = sortedListArray.Keys;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">float</span> k <span class="keyword">in</span> Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(sortedListArray.IndexOfKey(k));</span><br><span class="line">        <span class="keyword">if</span> (MaxFrequency == <span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CountMaxFrequency++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span>[] getResult = <span class="keyword">new</span> <span class="built_in">float</span>[CountMaxFrequency];</span><br><span class="line">    <span class="built_in">int</span> tempindex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">float</span> k <span class="keyword">in</span> Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(sortedListArray.IndexOfKey(k));</span><br><span class="line">        <span class="keyword">if</span> (MaxFrequency == <span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            getResult[tempindex] = k;</span><br><span class="line">            tempindex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> resultSum = (<span class="built_in">float</span>)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; getResult.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        resultSum += getResult[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> result = resultSum / getResult.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="气层识别计算关键源码"><a href="#气层识别计算关键源码" class="headerlink" title="气层识别计算关键源码"></a>气层识别计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ0</span>(<span class="params"><span class="built_in">float</span> AC, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((AC &gt; <span class="number">0</span> &amp;&amp; AC &lt; <span class="number">69</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (AC &gt; <span class="number">69</span> &amp;&amp; AC &lt; <span class="number">75</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">-0.4167</span> * AC + <span class="number">38.25</span>)) || (AC &gt; <span class="number">75</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AC &gt; <span class="number">0</span> &amp;&amp; AC &lt; <span class="number">62</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AC &gt;= <span class="number">62</span> &amp;&amp; AC &lt; <span class="number">69</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((AC &gt;= <span class="number">69</span> &amp;&amp; AC &lt;= <span class="number">75</span> &amp;&amp; RT &gt;= (<span class="number">-0.4167</span> * AC + <span class="number">38.25</span>)) || (AC &gt; <span class="number">75</span> &amp;&amp; RT &gt;= <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ1</span>(<span class="params"><span class="built_in">float</span> DEN, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((DEN &gt; <span class="number">2.53</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (DEN &gt; <span class="number">2.43</span> &amp;&amp; DEN &lt; <span class="number">2.53</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">27</span> * DEN - <span class="number">58.81</span>)) || (DEN &gt; <span class="number">0</span> &amp;&amp; DEN &lt; <span class="number">2.43</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.8</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEN &gt; <span class="number">2.65</span> &amp;&amp; DEN &lt; <span class="number">2.8</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEN &gt;= <span class="number">2.53</span> &amp;&amp; DEN &lt; <span class="number">2.65</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((DEN &gt;= <span class="number">2.53</span> &amp;&amp; DEN &lt;= <span class="number">2.65</span> &amp;&amp; RT &gt;= (<span class="number">27</span> * DEN - <span class="number">58.81</span>)) || (DEN &gt; <span class="number">0</span> &amp;&amp; DEN &lt; <span class="number">2.53</span> &amp;&amp; RT &gt;= <span class="number">6.8</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ2</span>(<span class="params"><span class="built_in">float</span> CNL, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((CNL &gt; <span class="number">0</span> &amp;&amp; CNL &lt; <span class="number">8.5</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (CNL &gt; <span class="number">8.5</span> &amp;&amp; CNL &lt; <span class="number">13</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">-0.6667</span> * CNL + <span class="number">15.167</span>)) || (CNL &gt; <span class="number">13</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.5</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CNL &gt; <span class="number">0</span> &amp;&amp; CNL &lt; <span class="number">5.9</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CNL &gt;= <span class="number">5</span> &amp;&amp; CNL &lt; <span class="number">8.5</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CNL &gt;= <span class="number">8.5</span> &amp;&amp; CNL &lt;= <span class="number">13</span> &amp;&amp; RT &gt;= (<span class="number">-0.6667</span> * CNL + <span class="number">15.167</span>)) || (CNL &gt; <span class="number">13</span> &amp;&amp; RT &gt;= <span class="number">6.5</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ3</span>(<span class="params"><span class="built_in">float</span> RT, <span class="built_in">float</span> RS</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> RTS = <span class="number">0</span>;</span><br><span class="line">    RTS = RT / RS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6</span>) || (RT &gt; <span class="number">6</span> &amp;&amp; RT &lt; <span class="number">9</span> &amp;&amp; RTS &lt; (<span class="number">-0.4167</span> * RT + <span class="number">4.7</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">9</span> &amp;&amp; RTS &gt; <span class="number">0</span> &amp;&amp; RTS &lt; <span class="number">0.95</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt;= <span class="number">6</span> &amp;&amp; RT &lt;= <span class="number">9</span> &amp;&amp; RTS &gt;= (<span class="number">-0.4167</span> * RT + <span class="number">4.7</span>)) || (RT &gt; <span class="number">9</span> &amp;&amp; RTS &gt;= <span class="number">0.95</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ4</span>(<span class="params"><span class="built_in">float</span> AC, <span class="built_in">float</span> DEN, <span class="built_in">float</span> POR, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> PORAC = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORDEN = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORCNL = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORC = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PORAC = (<span class="built_in">float</span>)((AC - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma));</span><br><span class="line">    PORDEN = (<span class="built_in">float</span>)((DEN - <span class="keyword">this</span>._pordenma) / (<span class="keyword">this</span>._pordenf - <span class="keyword">this</span>._pordenma));</span><br><span class="line">    PORCNL = (<span class="built_in">float</span>)((POR - <span class="keyword">this</span>._porcnlma) / (<span class="keyword">this</span>._porcnlf - <span class="keyword">this</span>._porcnlma));</span><br><span class="line">    PORC = (PORDEN - PORAC) / <span class="number">2</span> - PORCNL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((PORC &lt; <span class="number">-0.02</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">7</span>) || (PORC &gt; <span class="number">-0.02</span> &amp;&amp; PORC &lt; <span class="number">0.0023</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">89.686</span> * PORC + <span class="number">8.7937</span>)) || (PORC &gt; <span class="number">0.0023</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PORC &gt; <span class="number">0.05</span> &amp;&amp; RT &gt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PORC &gt; <span class="number">0.0023</span> &amp;&amp; PORC &lt;= <span class="number">0.05</span> &amp;&amp; RT &gt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((PORC &lt; <span class="number">-0.02</span> &amp;&amp; RT &gt;= <span class="number">7</span>) || (PORC &gt;= <span class="number">-0.02</span> &amp;&amp; PORC &lt;= <span class="number">0.0023</span> &amp;&amp; RT &gt;= (<span class="number">89.686</span> * PORC + <span class="number">8.7937</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ5</span>(<span class="params"><span class="built_in">float</span> RT, <span class="built_in">float</span> CMPR, <span class="built_in">float</span> POIS</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> ND = <span class="number">0</span>;</span><br><span class="line">    ND = (CMPR - <span class="keyword">this</span>._cmprmin) / (<span class="keyword">this</span>._cmprmax - <span class="keyword">this</span>._cmprmin) - (POIS - <span class="keyword">this</span>._poismin) / (<span class="keyword">this</span>._poismax - <span class="keyword">this</span>._poismin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.8</span>) || (RT &gt; <span class="number">6.8</span> &amp;&amp; RT &lt; <span class="number">10</span> &amp;&amp; ND &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">10</span> &amp;&amp; ND &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">6.8</span> &amp;&amp; ND &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件加载代码"><a href="#配置文件加载代码" class="headerlink" title="配置文件加载代码"></a>配置文件加载代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ID</span>&gt;</span>1106<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Name</span>&gt;</span>高温高压气层评价模块1<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>高温高压气层评价模块1<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LibraryFile</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU.dll<span class="tag">&lt;/<span class="name">LibraryFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ClassName</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU.MainProgressMethod<span class="tag">&lt;/<span class="name">ClassName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Code</span>&gt;</span>MainProgressMethod<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FunctionName</span>&gt;</span>OnNewProcessMethod<span class="tag">&lt;/<span class="name">FunctionName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromDeep</span>&gt;</span>false<span class="tag">&lt;/<span class="name">FromDeep</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StepIndex</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">StepIndex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Template</span>&gt;</span>Normal Template\BAIYUNSAG.plt<span class="tag">&lt;/<span class="name">Template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">CollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MaxAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MinAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MinAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VisualState</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageFile</span>&gt;</span>BaiyunSagSWPU.png<span class="tag">&lt;/<span class="name">ImageFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ID</span>&gt;</span>1107<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Name</span>&gt;</span>高温高压气层评价模块2<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>高温高压气层评价模块2<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LibraryFile</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU2.dll<span class="tag">&lt;/<span class="name">LibraryFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ClassName</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU2.MainProgressMethod<span class="tag">&lt;/<span class="name">ClassName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Code</span>&gt;</span>MainProgressMethod<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FunctionName</span>&gt;</span>OnNewProcessMethod<span class="tag">&lt;/<span class="name">FunctionName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromDeep</span>&gt;</span>false<span class="tag">&lt;/<span class="name">FromDeep</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StepIndex</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">StepIndex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Template</span>&gt;</span>Normal Template\BAIYUNSAG.plt<span class="tag">&lt;/<span class="name">Template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">CollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MaxAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MinAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MinAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VisualState</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageFile</span>&gt;</span>BaiyunSagSWPU2.png<span class="tag">&lt;/<span class="name">ImageFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</summary>
    
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/categories/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记5</title>
    <link href="http://hibiscidai.com/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
    <id>http://hibiscidai.com/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</id>
    <published>2022-01-10T12:00:00.000Z</published>
    <updated>2022-05-12T14:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记5"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记5</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记5"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记5" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记5"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记5</h1><h1 id="第十七章-Java数据库程序设计"><a href="#第十七章-Java数据库程序设计" class="headerlink" title="第十七章 Java数据库程序设计"></a>第十七章 Java数据库程序设计</h1><h2 id="关系数据库系统"><a href="#关系数据库系统" class="headerlink" title="关系数据库系统"></a>关系数据库系统</h2><p><code>数据库</code>是按照一定的数据结构来组织、存储和管理数据的仓库；<br><code>数据库管理系统</code>（Data BaseManagement System, DBMS）是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库；<br><code>数据库系统</code>（database system）由数据库、数据库管理系统以及应用程序组成。</p><p>应用程序视为用户与数据库之间的接口。</p><img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="应用程序与数据库之间的关系"><p>大多数数据库系统都是关系数据库系统。它们都是基于关系数据模型的，这种模型有三个要素：<code>结构</code>、<code>完整性</code>和<code>语言</code>。</p><p><code>结构</code>定义了数据的表示；<br><code>完整性</code>是一些对数据的约束，所谓约束就是当向数据库中输入数据时所必须遵守的规则，所以约束也称为限制条件；<br><code>语言</code>则提供了访问和操纵数据的手段。</p><h3 id="数据库与数据库表"><a href="#数据库与数据库表" class="headerlink" title="数据库与数据库表"></a>数据库与数据库表</h3><p>一个关系型数据库通常是由一个或多个二维数据库表组成，数据库中的二维数据库表简称表。</p><p>数据库中的所有数据和信息都被保存在这些表中。</p><p>数据库中的每个表都具有唯一的表名称，表中的行称为<code>记录</code>，列称为<code>字段</code>。</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>完整性约束是对表强加了一个限制条件，表中的所有合法值都必须满足该条件。</p><p>完整性约束有三种类型：域约束、主码约束和外码约束。<br>域约束和主码约束只涉及一个表，而外码约束则涉及多个表。</p><h4 id="域约束"><a href="#域约束" class="headerlink" title="域约束"></a>域约束</h4><p>域就是字段的取值范围，域约束就是规定一个表的字段的允许取值。</p><h4 id="主码约束"><a href="#主码约束" class="headerlink" title="主码约束"></a>主码约束</h4><p>主码也称为主键，是表中用于唯一确定一条记录的一个字段或最小的字段组。<br>主码可以由一个字段组成，也可以是由多个字段共同组成，由多个字段共同组成的主码称为复合主码。<br>若一个表中存在多个可以作为主码的字段，则称这些字段为候选码或候选键。</p><h4 id="外码约束"><a href="#外码约束" class="headerlink" title="外码约束"></a>外码约束</h4><p>若一个表的某个字段（或字段组合）不是该表的主码，却是另一个表的主码，则称这样的字段为该表的外码或外键。外码是表与表之间的纽带。</p><blockquote><p>所有关系数据库系统都支持主码约束和外码约束。但不是所有数据库系统都支持域约束。</p></blockquote><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><code>结构化查询语言</code>（Structured Query Language, SQL）是用来定义表和完整性约束以及访问和操纵数据库的语言，它是访问关系数据库的通用语言。</p><p><code>[]</code>：表示可选项，即方括号中的内容可以根据需要进行选择；不选用时，则使用系统的默认值。方括号本身不是SQL语句的一部分，所以输入时不要输入方括号本身。<br><code>&#123;&#125;</code>：表示必选项，即大括号中的内容必须要提供。在实际操作时也不要输入大括号本身。<br><code>&lt; &gt;</code>：表示尖括号中的内容是用户必须提供的参数。输入时不要输入尖括号本身。<br><code>|</code>：表示只能选一项，竖线分隔多个选择项，用户必须选择其中之一。<br><code>[，...n]</code>：表示前面的项可重复n次，相互之间以逗号隔开。</p><blockquote><p>SQL的关键字不区分大小写。<br>SQL中不区分字符型和字符串型量，而统一定义为字符串型量，字符串型常量的定界符既可使用单引号也可使用双引号。</p></blockquote><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE StudentScore;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>][,<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>]]...[,<span class="operator">&lt;</span>表级完整性约束<span class="operator">&gt;</span>]);</span><br></pre></td></tr></table></figure><p><code>&lt;表名&gt;</code>：要创建的表的名字，表名在同一数据库中不允许重名。<br><code>&lt;字段名&gt;</code>：字段名字。<br><code>&lt;数据类型&gt;</code>：指定字段的数据类型，对有些数据类型还需同时给出其长度、小数位数。<br><code>&lt;字段级完整性约束&gt;</code>：字段完整性约束条件，主要有如下几种：NULL和NOT NULL：限制字段可以为NULL（空），或者不能为NULL；PRIMARY KEY：设置字段为主码；UNIQUE：设置字段值具有唯一性。<br><code>&lt;表级完整性约束&gt;</code>：表级完整性约束条件所使用的关键字与字段级完整性约束相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="title function_">Student</span><span class="params">(sNo CHAR(<span class="number">9</span>)</span> NOT NULL PRIMARY KEY, sName <span class="title function_">CHAR</span><span class="params">(<span class="number">12</span>)</span> NOT NULL, sex <span class="title function_">CHAR</span><span class="params">(<span class="number">2</span>)</span>, age INT, dept <span class="title function_">CHAR</span><span class="params">(<span class="number">50</span>)</span>); <span class="comment">//创建表Student, sNo为主码</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">Course</span><span class="params">(cNo CHAR(<span class="number">9</span>)</span> NOT NULL PRIMARY KEY, cName <span class="title function_">CHAR</span><span class="params">(<span class="number">30</span>)</span></span><br><span class="line">NOT NULL, credit INT);<span class="comment">//创建表Course, cNo为主码</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">Score</span><span class="params">(sNo CHAR(<span class="number">9</span>)</span> NOT NULL, cNo <span class="title function_">CHAR</span><span class="params">(<span class="number">6</span>)</span> NOT NULL, grade FLOAT, PRIMARY <span class="title function_">KEY</span><span class="params">(sNo, cNo)</span>);<span class="comment">//创建表Score,字段组sNo和cNo为复合主码</span></span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">ALTER</span> COLUDMN <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>完整性约束<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>ALTER COLUMN子句</code>：修改表中已有字段的定义。<br><code>ADD COLUMN子句</code>：增加新字段及相应的完整性约束条件。<br><code>DROP COLUMN子句</code>：在该表中删除该子句中给出的字段。<br><code>DROP CONSTRAINT子句</code>：删除指定的完整性约束条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>利用<span class="keyword">SQL</span>语句给Student表添加一个字符型的电话字段phone,长度为<span class="number">11</span>个字符。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> phone <span class="type">CHAR</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure><h3 id="表数据操作"><a href="#表数据操作" class="headerlink" title="表数据操作"></a>表数据操作</h3><p>SQL的数据操作语言（Data Manipulation Language, DML）的功能，包括向表中插入数据、修改数据、删除数据和查询数据等，对应操作所使用的命令为INSERT（ 插入） 、UPDATE（修改）、DELETE（删除）和SELECT（查询）等。</p><h4 id="插入数据-INSERT"><a href="#插入数据-INSERT" class="headerlink" title="插入数据-INSERT"></a>插入数据-INSERT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>字段名[,<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>]...<span class="operator">&gt;</span>)]<span class="keyword">VALUES</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>值<span class="operator">&gt;</span>]...);</span><br></pre></td></tr></table></figure><p><code>&lt;表名&gt;</code>：要添加新记录的表。<br><code>&lt;字段名&gt;</code>：可选项，指定待添加数据的字段。<br><code>VALUES子句</code>：指定待添加数据的具体值。当指定字段名时，VALUES子句中值的排列顺序必须和字段名的排列顺序一致；若不指定字段，则VALUES子句中值的排列顺序必须与创建表字段时的排列顺序一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中插入一条学生记录，学号：<span class="number">201201009</span>，姓名：王毅，性别：男，年龄：<span class="number">18</span>，系别：外语。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(sNo, sName, sex, age, dept)<span class="keyword">VALUES</span>(<span class="string">&#x27;201201009&#x27;</span>, <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;外语&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据-UPDATE"></a>修改数据-UPDATE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span><span class="keyword">SET</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[, <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>SET子句</code>：给出要修改的字段及其修改后的值。<br><code>WHERE子句</code>：指定待修改的记录应当满足的条件。WHERE子句省略时，则修改表中所有记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student <span class="keyword">SET</span> dept<span class="operator">=</span><span class="string">&#x27;金融&#x27;</span> <span class="keyword">WHERE</span> sNo<span class="operator">=</span><span class="string">&#x27;201201009&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除数据-DELETE"><a href="#删除数据-DELETE" class="headerlink" title="删除数据-DELETE"></a>删除数据-DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>WHERE子句</code>：指定待删除的记录应当满足的条件。WHERE子句省略时，则删除表中所有记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中删除学号为<span class="number">201201009</span>的学生记录。</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> sNo<span class="operator">=</span><span class="string">&#x27;201201009&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="数据查询-SELECT"><a href="#数据查询-SELECT" class="headerlink" title="数据查询-SELECT"></a>数据查询-SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>][TOP n [<span class="keyword">PERCENT</span>]]&#123; <span class="operator">*</span> <span class="operator">|</span>&#123;<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">|</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span><span class="operator">|</span>&#125;</span><br><span class="line">[[<span class="keyword">AS</span>]<span class="operator">&lt;</span>别名<span class="operator">&gt;</span>]<span class="operator">|</span><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>[[<span class="keyword">AS</span>]<span class="operator">&lt;</span>别名<span class="operator">&gt;</span>]&#125;[...n]&#125;</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>查询条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>字段名表<span class="operator">&gt;</span>[<span class="keyword">HAVING</span> <span class="operator">&lt;</span>分组条件<span class="operator">&gt;</span>]]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>次序表达式<span class="operator">&gt;</span>[ASCI <span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><p><code>ALL</code>：指定在结果集中显示所有记录，包括重复行。ALL是默认设置。<br><code>DISTINCT</code>：指定在结果集中显示所有记录，但不包括重复行。<br><code>TOP n[PERCENT]</code>：指定从结果集中输出前n行，如果指定了PERCENT，表示从结果集中输出<br>前百分之n行。<br><code>∗</code>：指定返回查询表中的所有字段。<br><code>&lt;字段名&gt;</code>：指定要返回的字段。<br><code>&lt;表达式&gt;</code>：返回由字段名、常量、函数以及运算符连接起来的表达式的值。<br><code>&lt;别名&gt;</code>：指定在结果集中用”别名”来替换字段名或表达式进行显示。<br><code>FROM子句</code>：用于指定查询的表或视图。<br><code>WHERE子句</code>：用于设置查询条件。<br><code>GROUP BY子句</code>：指明按照<code>&lt;字段名表&gt;</code>中的值进行分组，该字段的值相同的记录为一个组。分组后每个组只返回一行结果。如果GROUP子句带HAVING子句，则只有满足HAVING指定条件的组才予以输出。如果GROUP BY后有多个字段名，则先按第一个字段分组，再按第二个字段分组，依次类推。<br><code>HAVING子句</code>：用来指定每一个分组内应该满足的条件，即对每个分组内的记录进行再筛选，它通常与GROUP BY子句一起使用。HAVING子句中的分组条件格式与WHERE子句中的条件格式类似。<br><code>ORDER BY子句</code>：将查询结果按指定的次序表达式的值升序或降序排列。次序表达式可以是字段名、字段的别名或表达式。ASC指定升序排列，DESC指定降序排列，默认排序方式为ASC。</p><blockquote><p>WHERE子句是对整个表中的数据筛选出满足条件的记录；<br>HAVING子句是对GROUP BY分组查询后产生的组设置的条件，所以是筛选出满足条件的组。<br>在HAVING子句中可以使用统计函数，而在WHERE子句则不能。<br>ORDER BY子句需放在SQL命令中的最后。</p></blockquote><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中只查询学生的学号sNo和姓名sName两个字段，并且字段名分别以别名“学号”和“姓名”进行显示。</span><br><span class="line"><span class="keyword">SELECT</span> sNo <span class="keyword">AS</span> 学号, sName <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> Student; <span class="operator">/</span><span class="operator">/</span>＂学号＂和＂姓名＂为别名</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li>WHERE常用的运算符及功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">= 、&gt; 、&lt; 、&gt;=、 &lt;=、 !=、 &lt; &gt;</td><td style="text-align:center">比较大小</td></tr><tr><td style="text-align:center">BETWEEN AND、NOT BETWEEN AND</td><td style="text-align:center">确定范围</td></tr><tr><td style="text-align:center">IN、NOT IN</td><td style="text-align:center">确定集合</td></tr><tr><td style="text-align:center">LIKE、NOT LIKE</td><td style="text-align:center">字符匹配</td></tr><tr><td style="text-align:center">IS NULL、IS NOT NULL</td><td style="text-align:center">判断空值</td></tr><tr><td style="text-align:center">AND、OR、NOT</td><td style="text-align:center">逻辑运算(多重条件查询)</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>确定范围运算符使用格式</span><br><span class="line">v <span class="keyword">BETWEEN</span> v1 <span class="keyword">AND</span> v2<span class="operator">/</span><span class="operator">/</span>v<span class="operator">&gt;=</span>v1 <span class="keyword">AND</span> v<span class="operator">&lt;=</span>v2</span><br><span class="line">v <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> v1 <span class="keyword">AND</span> v2<span class="operator">/</span><span class="operator">/</span>v<span class="operator">&lt;</span>v1 <span class="keyword">OR</span> v<span class="operator">&gt;</span>v2</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中查找计算机系的所有同学</span><br><span class="line"><span class="keyword">SELECT</span> ∗ <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h4><p>逻辑运算符的优先级由高到低为：NOT，AND，OR，可以使用括号改变其优先级。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中查找计算机系所有男同学。</span><br><span class="line"><span class="keyword">SELECT</span> ∗ <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>当查询条件不知道完全精确的值时，还可以使用LIKE或NOT LIKE进行模糊查询，模糊查询也称为部分匹配查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>[<span class="keyword">NOT</span>]<span class="keyword">LIKE</span> <span class="operator">&lt;</span>匹配串<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;字段名&gt;</code>必须是字符型的字段；<br><code>&lt;匹配串&gt;</code>可以是一个完整的字符串，也可以是包含通配符的字符串。</p><ul><li>模糊查询时字符串中的通配符及其功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:center">功能说明</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">%</td><td style="text-align:center">代表0个或多个字符</td><td style="text-align:center">‘ab%表示’ab’后可接任意字符串</td></tr><tr><td style="text-align:center">_ (下画线)</td><td style="text-align:center">代表一个字符</td><td style="text-align:center">‘a _ b’表示’a’与’b’之间可为任意单个字符</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">表示在某一范围内的字符</td><td style="text-align:center">[0-9]表示0~9的字符</td></tr><tr><td style="text-align:center">[ ^ ]</td><td style="text-align:center">表示不在某一范围内的字符</td><td style="text-align:center">[ ^ 0-9]表示不在0~9的字符</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ∗ FROM Student WHERE sName LIKE <span class="string">&#x27;李%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="常用的统计函数及统计汇总查询"><a href="#常用的统计函数及统计汇总查询" class="headerlink" title="常用的统计函数及统计汇总查询"></a>常用的统计函数及统计汇总查询</h4><p>在SQL中除了可以使用算术运算符+（加法）、—（减法）、∗（乘法）和 / （除法）外，SQL还提供了一系列统计函数。</p><ul><li>常用的统计函数及功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">AVG(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的平均值(必须是数值型列)</td></tr><tr><td style="text-align:center">SUM(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的总和(必领是数值型列)</td></tr><tr><td style="text-align:center">MAX(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的最大值</td></tr><tr><td style="text-align:center">MIN(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的最小值</td></tr><tr><td style="text-align:center">COUNT(+)</td><td style="text-align:center">统计表中记录的个数</td></tr><tr><td style="text-align:center">COUNT([DISTINCT] &lt;字段名&gt;)</td><td style="text-align:center">统计字段名所在列非空值的个数,DISTINCT表示不包括字段的重复值</td></tr></tbody></table></div><blockquote><p>上述函数中除COUNT(*)外，其他函数在计算过程中均忽略NULL值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中统计所有成绩grade的平均值。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span>平均成绩 <span class="keyword">FROM</span> Score; <span class="operator">/</span><span class="operator">/</span>＂平均成绩＂是表达式<span class="built_in">AVG</span>(grade)的别名</span><br></pre></td></tr></table></figure><h4 id="ORDER-BY-字句"><a href="#ORDER-BY-字句" class="headerlink" title="ORDER BY 字句"></a>ORDER BY 字句</h4><p>ORDER BY是一个可选的子句，它允许根据指定字段的值按照升序或者降序的顺序显示查询结<br>果。其中默认为升序排列，用<code>ASC</code>表示，降序排列用<code>DESC</code>表示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中查询课程号cNo为c001的学生的学号sNo和成绩grade，并按成绩降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> sNo, grade <span class="keyword">FROM</span> Score <span class="keyword">WHERE</span> cNo<span class="operator">=</span><span class="string">&#x27;c001&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> grade <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h4 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h4><p>统计函数只能产生单一的汇总数据，使用GROUP BY子句，则可以生成分组的汇总数据。</p><p>GROUP BY子句可以按关键字段的值来组织数据，关键字段值相同的为一组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中查询每门课程的课程号cNo和学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> cNo, <span class="built_in">COUNT</span>(∗) <span class="keyword">AS</span> 人数 <span class="keyword">FROM</span> Score <span class="keyword">GROUP</span> <span class="keyword">BY</span> cNo; <span class="operator">/</span><span class="operator">/</span>&quot;人数&quot;是别名</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC是为在Java程序中访问数据库而设计的一组Java API，是Java数据库应用程序开发中的一项核心技术。</p><h4 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h4><p>JDBC的含义是Java Database Connectivity，它是Java程序中访问数据库的标准API。</p><p>一般来说，JDBC做三件事：与数据库建立连接；发送SQL语句；处理SQL语句执行的结果。</p><h3 id="JDBC类型"><a href="#JDBC类型" class="headerlink" title="JDBC类型"></a>JDBC类型</h3><p>JDBC不能直接访问数据库，必须依赖于数据库厂商或第三方提供的JDBC驱动程序。</p><h4 id="类型1-JDBC-ODBC桥加ODBC驱动程序"><a href="#类型1-JDBC-ODBC桥加ODBC驱动程序" class="headerlink" title="类型1:JDBC-ODBC桥加ODBC驱动程序"></a>类型1:JDBC-ODBC桥加ODBC驱动程序</h4><p>JDBC-ODBC桥由Sun公司开发，是JDK提供的标准API。</p><p>于JDBC-ODBC桥先调用ODBC再由ODBC去调用本地数据库接口访问数据库，所以执行效率比较低。</p><p>需要客户端预装对应的ODBC驱动程序，所以不适合Internet/Intranet应用。</p><h4 id="类型2-本地API部分用Java编写的驱动程序"><a href="#类型2-本地API部分用Java编写的驱动程序" class="headerlink" title="类型2:本地API部分用Java编写的驱动程序"></a>类型2:本地API部分用Java编写的驱动程序</h4><p>是部分使用Java语言编写和部分使用本机代码编写的驱动程序，它将JDBC的调用直接翻译成对特定DBMS（如MySQL、SQL Server、Oracle等）客户端API的调用后再去访问数据库。</p><p>是用特定的DBMS客户端取代JDBC-ODBC桥和ODBC，因此也具有与JDBC-ODBC桥相类似的局限性。</p><h4 id="类型3-JDBC网络协议纯Java驱动程序√"><a href="#类型3-JDBC网络协议纯Java驱动程序√" class="headerlink" title="类型3:JDBC网络协议纯Java驱动程序√"></a>类型3:JDBC网络协议纯Java驱动程序√</h4><p>用纯Java语言编写。</p><p>它将JDBC的调用转换成与DBMS无关的网络协议命令，之后发送给一个网络服务器中的数据库中间件，该中间件进一步将网络协议命令转换成某种DBMS所能理解的操作命令。</p><p>网络协议是平台无关的。</p><p>种驱动程序不调用任何本地代码。</p><p>在服务器上配置有数据库驱动程序，并且由于多了一个中间件传递数据，它的执行效率还不是最好。</p><h4 id="类型4-本地协议纯Java驱动程序√"><a href="#类型4-本地协议纯Java驱动程序√" class="headerlink" title="类型4:本地协议纯Java驱动程序√"></a>类型4:本地协议纯Java驱动程序√</h4><p>将JDBC调用直接转换成特定DBMS所使用的网络协议，这将允许从客户机上直接调用DBMS服务器，访问速度快。</p><p>完全由Java语言实现，实现了平台的独立性。</p><p>但对于不同的数据库需要下载不同的驱动程序。</p><h3 id="使用JDBC开发数据库应用程序"><a href="#使用JDBC开发数据库应用程序" class="headerlink" title="使用JDBC开发数据库应用程序"></a>使用JDBC开发数据库应用程序</h3><p>JDBC API主要位于Java的<code>java.sql</code>包与<code>javax.sql</code></p><ul><li>JDBC中主要的类与接口</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类与接口</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">DriverManager</td><td style="text-align:center">负责加载各种不同驱动程序(driver)并根据不同的请求。向调用者返回相应的数据库连接(conneetion)</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">数据库连接,负责与数据库间进行通信,SQL执行以及事务处理都是在某个特定连接环境中进行的,并可以产生用以执行SQL的Statement对象</td></tr><tr><td style="text-align:center">Statement</td><td style="text-align:center">用以执行不含参数的静态SQL查询和更新,并返回执行结果</td></tr><tr><td style="text-align:center">PreparedStatement</td><td style="text-align:center">用以执行包含参数的动态SQL查询和更新(在服务器端编译,允许重复执行以提高效率</td></tr><tr><td style="text-align:center">CallableStatement</td><td style="text-align:center">用以调用数据库中的存储过程</td></tr><tr><td style="text-align:center">ResultSet</td><td style="text-align:center">用以获得SQL查询结果</td></tr><tr><td style="text-align:center">SQLException</td><td style="text-align:center">代表在数据库连接的建立。关闭或SQL语句的执行过程中发生了异常</td></tr></tbody></table></div><blockquote><p>JDBC驱动程序开发商已提供了对这些接口的实现类，所以在使用时实际上是调用这些接口实现类中的方法。</p></blockquote><h4 id="建立与数据库的链接"><a href="#建立与数据库的链接" class="headerlink" title="建立与数据库的链接"></a>建立与数据库的链接</h4><p>数据库连接的建立包括两个步骤：<br>一是加载相应数据库的JDBC驱动程序；<br>二是创建数据库连接。</p><h5 id="加载JDBC驱动程序"><a href="#加载JDBC驱动程序" class="headerlink" title="加载JDBC驱动程序"></a>加载JDBC驱动程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class.forName(JDBCDriverClass);</span><br></pre></td></tr></table></figure><p>该方法是Class类的静态方法，参数JDBCDriverClass是要加载的JDBC驱动程序类的名称，它是以字符串形式表达的类名。</p><ul><li>数据库的驱动程序类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">驱动程序类</th><th style="text-align:center">所在包</th></tr></thead><tbody><tr><td style="text-align:center">Access</td><td style="text-align:center">sun.jdbc.odbe.JdbcOdbeDriver</td><td style="text-align:center">捆绑JDK</td></tr><tr><td style="text-align:center">SQL Server</td><td style="text-align:center">com.microsoft.sqlserver.jdbc.SQLServerDriver</td><td style="text-align:center">sqljdbc42.jar</td></tr><tr><td style="text-align:center">MySQL</td><td style="text-align:center">com.mysql.jdbc.Driver</td><td style="text-align:center">mysql-connector-java-5.1.45-bin.jar</td></tr><tr><td style="text-align:center">Oracle</td><td style="text-align:center">oracle.jdbc.driver.OracleDriver</td><td style="text-align:center">ojdbc6.jar</td></tr></tbody></table></div><h5 id="创建数据库连接"><a href="#创建数据库连接" class="headerlink" title="创建数据库连接"></a>创建数据库连接</h5><p>由于JDBC驱动程序与数据库的连接是以对象的形式表示的，所以创建数据库连接也称创建数据库连接对象。</p><ul><li>DriverManager类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static Conection getConnection(String url, String user, String password)</td><td style="text-align:center">建立JDBC驱动程序到指定数据库URL的连接。其中url提供了一种标识数据库的方法，user为用户名，password为密码</td></tr><tr><td style="text-align:center">public static Driver getDriver(Stringurl)</td><td style="text-align:center">返回url所指定的数据库连接的驱动程序</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(String url, String user, String password);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc: &lt; subprotocol &gt; : &lt; subname &gt;</span><br></pre></td></tr></table></figure><p><code>&lt; subprotocol &gt;</code>是子协议，指数据库连接的方式；<br><code>&lt; subname &gt;</code>是子名称，是一种标识数据库的方法。</p><ul><li>数据库的URL</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">URL</th></tr></thead><tbody><tr><td style="text-align:center">Access</td><td style="text-align:center">jdbc:odbe:dataSource</td></tr><tr><td style="text-align:center">SQL Server</td><td style="text-align:center">jdbc:sqLserver://hostname:port#;DatabaseName-dbname</td></tr><tr><td style="text-align:center">MySQL</td><td style="text-align:center">jdbc:mysl://hostname/dbname</td></tr><tr><td style="text-align:center">Oracle</td><td style="text-align:center">jdbc:oracle:thin:@hostname:port#:oracleDBSID</td></tr></tbody></table></div><p>1）Access数据库的URL是<code>jdbc:odbc:dataSource</code>。ODBC数据源可以使用Windows下的<br>ODBC数据源管理器（data source administrator）来创建。</p><p>2）SQL Server数据库的URL指定包含数据库的主机名（hostname）、数据库监听输入连接<br>请求的端口号（port#）和数据库名（dbname）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection (<span class="string">&quot;jdbc:sqlserver://1ocalhost:1433;DatabaseName=StudentScore&quot;</span>,<span class="string">&quot;sa&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>3）MySQL数据库的URL指定包含数据库的主机名（hostname）和数据库名（dbname）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConection(<span class="string">&quot;jdbe:mysql://localhost/StudentScore&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>4）Oracle数据库的URL指定主机名（hostname）、数据库监听输入连接请求的端口号<br>（ port# ） 以及数据库名（ oracleDBSID ） 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:StudentScore&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Connection接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Statement createStatement()</td><td style="text-align:center">创建一个Statement对象用束将SQL语句发送到数据库</td></tr><tr><td style="text-align:center">public Statement createStatement(int resultSetType, int resultSetConcurreney)</td><td style="text-align:center">功能同上，参数resultSetType指定结果集类型，有三个取值：<br />TYPE_FORWORD_ONLY表示只可向前移动记录指针;<br />TYPE_SCROLL_INSENSITIVE表示可双向移动记录指针，但不及时更新，也就是如果数据库中的数据修改过，并不在ResultSet中反映出来；<br />TYPE_SCROLL_SENSITIVE表示可双向移动记录指针，并及时跟踪据库的更新，以便更改ResultSet中的数据。<br />参数resultSetConcurreney指定结果集的并发模式，有两个取值：<br />CONCUR_READ_ONLY表示不能用结果集更新数据库中的表；<br /> CONCUR_UPDATABLE表示能用结果集更新数据库中的表</td></tr><tr><td style="text-align:center">public PreparedStatement prepareStatement(String sql)</td><td style="text-align:center">创建一个PreparedStatement对象来将具有参数的动态SQL语句发送到数据库</td></tr><tr><td style="text-align:center">public CallableStatement prepareCall(String sql)</td><td style="text-align:center">创建一个CallableStatement对象来调用数据库的存储过程</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">断开连接，释放此Conneetion对象的数据库和JDBC资源</td></tr><tr><td style="text-align:center">public boolean isClosed()</td><td style="text-align:center">用于判断Connetion对象是否已经被关闭</td></tr><tr><td style="text-align:center">public void setAutoCommit(boolean autoCommit)</td><td style="text-align:center">设置是否关闭自动提交模式</td></tr><tr><td style="text-align:center">public void commit()</td><td style="text-align:center">提交SQL语句，使从上一次提交/回滚以来进行的所有更改生效</td></tr><tr><td style="text-align:center">public void rollback()</td><td style="text-align:center">取消SQL语句的执行，撤销在当前事务中进行的所有更改</td></tr></tbody></table></div><h4 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h4><p>执行SQL语句包括两个步骤：<br>一是创建Statement对象；<br>二是通过调用该对象的相应方法将SQL语句发送到所连接的数据库去执行。</p><h5 id="创建Statement对象"><a href="#创建Statement对象" class="headerlink" title="创建Statement对象"></a>创建Statement对象</h5><p>创建一个Statement接口对象，该对象将各种SQL语句发送到所连接的数据库中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure><h5 id="调用Statement对象的相应方法将SQL语句发送到所连接的数据库"><a href="#调用Statement对象的相应方法将SQL语句发送到所连接的数据库" class="headerlink" title="调用Statement对象的相应方法将SQL语句发送到所连接的数据库"></a>调用Statement对象的相应方法将SQL语句发送到所连接的数据库</h5><p>如果SQL语句运行后产生结果集，Statement对象会将结果集封装成ResultSet对象并返回。</p><ul><li>Statement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ResultSet executeQuery(String sql)</td><td style="text-align:center">执行给定的SQL语句，并将结果封装在结果集ResultSet对象中返回</td></tr><tr><td style="text-align:center">public int executeUpdate(String sql)</td><td style="text-align:center">执行给定的SQL语句，该语句可能是INSERT、UPDATE或DELETE或是不返回任何内容的SQL语句(如DDL语句)。该语句的返回值是一个整数，表示受影响的行数(即更新计数)</td></tr><tr><td style="text-align:center">public boolean execute(String sql)</td><td style="text-align:center">执行给定的SQL语句。如果执行的是SELECT语句，则返回true，调用getResultSet()方法获得执行SQL语句的返回结果；如果执行的是INSERT、UPDATE或DELETE，或者不返回任何内容的SQL语旬，则返回false，调用getUpdateCount()方法获得执行SQL语句的返回结果</td></tr><tr><td style="text-align:center">public ResultSet getResultSet()</td><td style="text-align:center">以ResultSet对象的形式返回当前结果。如果结果是更新计数(即执行executeUpdate()方法)或没有结果，则返回null</td></tr><tr><td style="text-align:center">以更新计数的形式返回当前结果;如果结果为ResultSet 对象或</td></tr><tr><td style="text-align:center">public int getUpdateCount()</td><td style="text-align:center">没有更多结果,则返回-1。每个结果只应调用一次该方法</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">释放此Statement对象的数据库和JDBC资源</td></tr></tbody></table></div><blockquote><p>在executeQuery()与executeUpdate()方法中的字符串参数，如果超出一行将出现编译错误，所以在构造SQL参数时，需要将表达多行的字符串加上双引号并将各行用加号“+”连接起来。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;SELECT sNo,sName,sex,age FROM Student WHERE dept=&#x27;计算机&#x27;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sqlStr);<span class="comment">//执行查询操作并将查询结果存放到ResultSet对象rs中</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO Student(sNo,sName,sex,age,dept)＂+</span></span><br><span class="line"><span class="string">&quot;</span>VALUES(<span class="string">&#x27;201201009&#x27;</span>,<span class="string">&#x27;王毅&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;外语&#x27;</span>)<span class="string">&quot;;</span></span><br><span class="line"><span class="string">stmt.executeUpdate(sqlStr);</span></span><br></pre></td></tr></table></figure><h4 id="处理返回结果"><a href="#处理返回结果" class="headerlink" title="处理返回结果"></a>处理返回结果</h4><p>结果集是包含SQL的SELECT语句中符合条件的所有行，这些行的全体称为结果集，返回的结果集是一个表，而这个表就是ResultSet接口的对象。</p><p>在结果集中通过记录指针（也称为游标）控制具体记录的访问，记录指针指向结果集的当前记录。在结果集中可以使用getXXX()方法从当前行获取值。</p><ul><li>ResultSet接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean absolute(int row)</td><td style="text-align:center">将记录指针移动到结果集的第row条记录</td></tr><tr><td style="text-align:center">public boolean relative(int row)</td><td style="text-align:center">按相对行数(或正或负)移动记录指针</td></tr><tr><td style="text-align:center">public void beforFirst()</td><td style="text-align:center">将记录指针移动到结果集的头(第一条记录之前)</td></tr><tr><td style="text-align:center">public boolean first()</td><td style="text-align:center">将记录指针移动到结果集的第一条记录</td></tr><tr><td style="text-align:center">public boolean previous()</td><td style="text-align:center">将记录指针从结果集的当前位置移动到上一条记录</td></tr><tr><td style="text-align:center">public boolean next()</td><td style="text-align:center">将记录指针从结果集的当前位置移动到下一条记录</td></tr><tr><td style="text-align:center">public boolean last()</td><td style="text-align:center">将记录指针移动到结果集的最后一条记录</td></tr><tr><td style="text-align:center">public void afterLast()</td><td style="text-align:center">将记录指针移动到结果集的尾(最后一条记录之后)</td></tr><tr><td style="text-align:center">public boolean isAfterlLast()</td><td style="text-align:center">判断记录指针是否位于结果集的尾(最后一条记录之后)</td></tr><tr><td style="text-align:center">public boolean isBeforeFirst()</td><td style="text-align:center">判断记录指针是否位于结果集的头(第一条记录之前)</td></tr><tr><td style="text-align:center">public boolean isFirst()</td><td style="text-align:center">判断记录指针是否位于结果集的第一条记录</td></tr><tr><td style="text-align:center">public boolean isLast()</td><td style="text-align:center">判断记录指针是否位于结果集的最后一条记录</td></tr><tr><td style="text-align:center">public int getRow()</td><td style="text-align:center">返回当前记录的行号</td></tr><tr><td style="text-align:center">public String getString(String columnLabel)</td><td style="text-align:center">返回当前记录字段名为columnLabel的值</td></tr><tr><td style="text-align:center">public String getString(int columnIndex)</td><td style="text-align:center">返回当前行第columnIndex列的值，类型为String</td></tr><tr><td style="text-align:center">public int getInt(int columnIndex)</td><td style="text-align:center">返回当前行第columnIndex列的值，类型为int</td></tr><tr><td style="text-align:center">public Statement getStatement()</td><td style="text-align:center">返回生成结果集的Statement对象</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">释放此ResultSet对象的数据库和JDBC资源</td></tr><tr><td style="text-align:center">public ResdtSetMetaData getMetaData()</td><td style="text-align:center">返回结果集的列的编号、类型和属性</td></tr></tbody></table></div><p>记录指针的最初始位置位于第一条记录之前，即结果集的头。</p><p>第一次调用next()方法使记录指针移到第一条记录，当记录指针移动到结果集的尾时其返回false。</p><p>在使用ResultSet对象的getXXX()方法对结果集中的数据进行访问时，一定要使数据库中字段的数据类型与Java的数据类型相匹配。</p><p>使用<code>Statement stmt = conn.createStatement();</code>语句，虽然可以得到Statement<br>类的对象stmt，通过语句<code>ResultSet rs = stmt.executeQuert(&quot;SELECT∗FROM Student&quot;);</code>也可以得到相应的结果集rs，但这种类型的结果集rs不能来回移动记录指针读取记录。如果需要来回移动记录指针读取结果集，创建Statement语句的时候需要使用如下带参数的方法定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">(<span class="type">int</span> resultSetType, <span class="type">int</span> resultSetConcurrency)</span>;</span><br><span class="line"></span><br><span class="line">conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);</span><br></pre></td></tr></table></figure><ul><li>常用的SQL数据类型与Java数据类型之间的对应关系</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">SQL数据类型</th><th style="text-align:center">Java数据类型</th><th style="text-align:center">结果集中对应的方法</th></tr></thead><tbody><tr><td style="text-align:center">integer/ int</td><td style="text-align:center">int</td><td style="text-align:center">getInt()</td></tr><tr><td style="text-align:center">smallint</td><td style="text-align:center">short</td><td style="text-align:center">getShort()</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">double</td><td style="text-align:center">getDouble()</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">double</td><td style="text-align:center">getDouble()</td></tr><tr><td style="text-align:center">real</td><td style="text-align:center">float</td><td style="text-align:center">getFloat()</td></tr><tr><td style="text-align:center">varchar/char/varchar2</td><td style="text-align:center">java.lang.String</td><td style="text-align:center">getString()</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">boolean</td><td style="text-align:center">getBoolean()</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">java.sql.Date</td><td style="text-align:center">getDate()</td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">java.sql.Time</td><td style="text-align:center">getTime()</td></tr><tr><td style="text-align:center">blob</td><td style="text-align:center">java.sql.Blob</td><td style="text-align:center">getBlob()</td></tr><tr><td style="text-align:center">clob</td><td style="text-align:center">java.sql.Clob</td><td style="text-align:center">getClob()</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在使用getXXX()方法进行取值时，可以通过字段名或列号来标识要获取数据的列。</span></span><br><span class="line"><span class="comment">//下面两条语句的作用是一样的，都是读取当前行中sNo字段的内容。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;sNo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ResultSet中，字段是从左至右编号的，并且从1开始。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> rs.getString(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="关闭创建的各种对象"><a href="#关闭创建的各种对象" class="headerlink" title="关闭创建的各种对象"></a>关闭创建的各种对象</h4><p>关闭的次序是：<br>①关闭结果集对象；<br>②关闭Statement对象；<br>③关闭连接对象。</p><blockquote><p>在任一时间内，一个给定的Statement对象只能打开一个结果集。当重新使用同一个Statement对象时，将会关闭先前生成的任何结果集。<br>在重新执行Statement对象之前，需要完成对当前ResultSet对象的处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(rs!=<span class="literal">null</span>) rs.close();    <span class="comment">//关闭结果集对象</span></span><br><span class="line">    <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) stmt.close();    <span class="comment">//关闭Statement对象</span></span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="literal">null</span>) conn.close();    <span class="comment">//关闭JDBC与数据库的连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库的进一步操作"><a href="#数据库的进一步操作" class="headerlink" title="数据库的进一步操作"></a>数据库的进一步操作</h3><p>JDBC中执行SQL对表的查询有三种方式：<br>不含参数的静态查询（静态SQL语句）：Statement；<br>含有参数的动态查询（动态SQL语句）：PreparedStatement；<br>存储过程调用：CallableStatement。</p><h4 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h4><p>谓静态SQL语句是指在执行executeQuery()、executeUpdate()等方法时，作为参数的SQL语句的内容固定不变，也就是SQL语句中没有参数。</p><h4 id="PreparedStatement接口"><a href="#PreparedStatement接口" class="headerlink" title="PreparedStatement接口"></a>PreparedStatement接口</h4><p>就是可以在SQL语句中提供参数，这使得可以对相同的SQL语句替换参数从而多次使用。<br><code>预编译语句</code>：先让数据库管理系统在内部通过预先编译，形成带参数的内部指令，并保存在PreparedStatement接口的对象中。提高程序的执行效率。</p><p>PreparedStatement对象也可用于执行不带参数的预编译的SQL语句。</p><ul><li>PreparedStatement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean execute()</td><td style="text-align:center">执行任何种类的SQL的语句，可能会产生多个结果集</td></tr><tr><td style="text-align:center">public ResultSet executeQuery()</td><td style="text-align:center">执行SQL查询命令SELECT并返回结果集</td></tr><tr><td style="text-align:center">public int executeUpdate()</td><td style="text-align:center">执行修改的SQL指令如INSERT、DELETE、UPDATE等</td></tr><tr><td style="text-align:center">public ResultSetMetaData getMetaData()</td><td style="text-align:center">返回结果集ResultSet的有关字段的信息</td></tr><tr><td style="text-align:center">public void clearParameters()</td><td style="text-align:center">清除当前所有参数的值</td></tr><tr><td style="text-align:center">public void setBoolean(int parameterIndex, boolean x)</td><td style="text-align:center">给第parameterIndex个参数设置boolean型值x</td></tr><tr><td style="text-align:center">public void setInt(int parameterIndex, int x)</td><td style="text-align:center">给第parameterIndex个参数设置int型值x</td></tr><tr><td style="text-align:center">public void setDouble (int parameterIndex, double x)</td><td style="text-align:center">给第parameterIndex个参数设置double型值x</td></tr><tr><td style="text-align:center">public void setString (int parameterlndex, String x)</td><td style="text-align:center">给第parameterIndex个参数设置String型值x</td></tr><tr><td style="text-align:center">public void setDate(int parameterIndex, Date x)</td><td style="text-align:center">给第parameterIndex个参数设置Date型值x</td></tr><tr><td style="text-align:center">public void setObject (int parameterIndex, Object x)</td><td style="text-align:center">给第parameterIndex个参数设置Object型值x</td></tr></tbody></table></div><p>可通过Connection的<code>prepareStatement()</code>方法创建<code>PreparedStatement</code>对象。在创建用于<code>PreparedStatement</code>对象的动态SQL语句时，可使用<code>?</code>作为动态参数的占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">insertSql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO Student(sNo,sName,sex,age,dept)VALUES(?,?,?,?,?);&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(insertSql);</span><br></pre></td></tr></table></figure><p>在执行带参数的SQL语句前，必须对<code>?</code>进行赋值。这可以通过使用setXXX()方法，通过占位符的下标完成对输入参数的赋值（下标是从1开始的），XXX根据不同的数据类型进行选择。</p><h4 id="CallableStatement-接口"><a href="#CallableStatement-接口" class="headerlink" title="CallableStatement 接口"></a>CallableStatement 接口</h4><p>存储过程是一组SQL语句，它们形成一个相对独立的逻辑单元，能完成特定的任务。</p><p>该接口可以处理一般的SQL语句，也可以处理IN（输入）参数，同时它还定义了OUT（输出）参数及INOUT（输入输出）参数的处理方法</p><p>IN（输入）：接收传递给存储过程的值；<br>OUT（输出）：用于存储过程执行结束后接收一个返回值，所以在调用存储过程时，不需要向OUT参数传递任何值；<br>INOUT（输入输出）：当存储过程被调用时，需要向该参数传递一个值，当存储过程执行完后该参数还将接收一个返回值；</p><ul><li>CallableStatement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void setInt( String parameterName,int x)</td><td style="text-align:center">将名为parameterName的参数设置为int型值x</td></tr><tr><td style="text-align:center">public void setFloat(String parameterName,float x)</td><td style="text-align:center">将名为parameterName的参数设置为float 型值x</td></tr><tr><td style="text-align:center">public void setDouble(String parameterName, double x)</td><td style="text-align:center">将名为parameterName的参数设置为double型值x</td></tr><tr><td style="text-align:center">public void set Boolean(String parameterName, boolean x)</td><td style="text-align:center">将名为parameterName的参数设置为boolean型值x</td></tr><tr><td style="text-align:center">public void setString(String parameterName, String x)</td><td style="text-align:center">将名为parameterName的参数设置为String 型值x</td></tr><tr><td style="text-align:center">public void setDate(String parameterName, Date x)</td><td style="text-align:center">将名为parameterName的参数设置为Date型值x</td></tr><tr><td style="text-align:center">public void setObject (String parameterName, Object x)</td><td style="text-align:center">将名为parameterName的参数设置为Object型值x</td></tr><tr><td style="text-align:center">public int getInt(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数int型值</td></tr><tr><td style="text-align:center">public int getInt(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的int 型值</td></tr><tr><td style="text-align:center">public float getFloat(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数float型值</td></tr><tr><td style="text-align:center">public float getFloat(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的float型值</td></tr><tr><td style="text-align:center">public double getDouble(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数double型值</td></tr><tr><td style="text-align:center">public double getDouble(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的double型值</td></tr><tr><td style="text-align:center">public String getString(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数String 型值</td></tr><tr><td style="text-align:center">public String getString(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的String 型值</td></tr><tr><td style="text-align:center">public Object getObject(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的Object型值</td></tr></tbody></table></div><p>创建一个CallableStatement对象可以使用Connection接口的prepareCall()方法，调用格式有三种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不带参数的存储过程调用</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;call存储过程名&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//带若干个参数的存储过程调用</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;call存储过程名(?,?,…)&#125;&quot;</span>); <span class="comment">//?是占位符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带若干个参数并且有返回值参数的存储过程调用（实际是函数调用）</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;?=call存储过程名(?,?,…)&#125;&quot;</span>); <span class="comment">//?是占位符</span></span><br></pre></td></tr></table></figure><p>在执行带参数的SQL语句前，必须对IN和INOUT参数的占位符”?”进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cs.registerOutParamenter(<span class="type">int</span> index,<span class="type">int</span> sqlType);</span><br><span class="line"></span><br><span class="line">cs.registerOutParamenter(<span class="number">1</span>, java.sql.Types.INTEGER);</span><br></pre></td></tr></table></figure><p>利用CallableStatement执行存储过程时，其执行结果可能是多个ResultSet、多次修改记录或两者都有的情况。所以对CallableStatement一般调用execute()方法执行SQL语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cs.execute();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>使用CallableStatement实现对数据库StudentScore中Student表的各种存储过程的调用。</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第一个存储过程addStudent</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addStudent(<span class="keyword">no</span> <span class="type">CHAR</span>(<span class="number">9</span>), name <span class="type">CHAR</span>(<span class="number">12</span>), sex <span class="type">CHAR</span>(<span class="number">2</span>), age <span class="type">int</span>, dept <span class="type">CHAR</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(sNo, sName, sex, age, dept) <span class="keyword">VALUES</span>(<span class="keyword">no</span>, name, sex, age, dept);</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第二个存储过程getCount</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> getCount(<span class="keyword">OUT</span> total <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> total <span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第三个存储过程addSub</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addSub(<span class="keyword">INOUT</span> numl <span class="type">int</span>, <span class="keyword">INOUT</span> num2 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> numl <span class="operator">=</span> numl <span class="operator">+</span> num2;</span><br><span class="line"><span class="keyword">SET</span> num2 <span class="operator">=</span> numl <span class="operator">-</span> num2 <span class="operator">-</span> num2;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用CallableStatement按口,实现对存储过程的调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App17_18</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.myaql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost/StudentScore?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CallableStatenent</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">callsql1</span> <span class="operator">=</span> <span class="string">&quot;&#123;call addStudent(?,?,?,?,?)&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程IN型参数的占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">callSql2</span> <span class="operator">=</span> <span class="string">&quot;&#123;call getCount(?)&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程our型参数的占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">callSql3</span> <span class="operator">=</span> <span class="string">&quot;&#123;call addSub(?, ?&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程INOUT型参数的占位符</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            </span><br><span class="line">            cs = conn.prepareCall(callSql1);<span class="comment">//创建用于执行存储过程的对象cs</span></span><br><span class="line">            cs.setstring(<span class="number">1</span>, <span class="string">&quot;201201009&quot;</span>);<span class="comment">//对第14行中的第1个IN参数赋值</span></span><br><span class="line">            es.setString(<span class="number">2</span>, <span class="string">&quot;王毅&quot;</span>);</span><br><span class="line">            cs.setString(<span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">            ca.setInt(<span class="number">4</span>, <span class="number">18</span>);</span><br><span class="line">            cs.setStrsing(<span class="number">5</span>, <span class="string">&quot;外语”);</span></span><br><span class="line"><span class="string">            cs.execute();//执行sQL, 的存储过程adStudent</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            ca = conn.prepareCall(callSql2);//创建用于执行存储过程的对象ca            </span></span><br><span class="line"><span class="string">            //下面语句注册getCount存鍺过程OUT参数的类型</span></span><br><span class="line"><span class="string">            cs.registerOutParameter(1, java.sql.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.execute();//执行SQL的存储过程getCount</span></span><br><span class="line"><span class="string">            int total = es.getInt(1);//返回存储过程getCount的第1个out参数</span></span><br><span class="line"><span class="string">            System.out.printIn(&quot;</span>总人数为: <span class="string">&quot; + total);</span></span><br><span class="line"><span class="string">            int a=5;</span></span><br><span class="line"><span class="string">            int b=3;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">            cs = conn. prepareCall(cal1Sq13);//创建用于执行存储过程的对象cs</span></span><br><span class="line"><span class="string">            ca.setInt(1, a);//对第16行中的第1个INOUT型参数赋值</span></span><br><span class="line"><span class="string">            cs. setInt(2, b);//对第16行中的第2个INOUT型参数赋值</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            //下面两条语句分别注册addSub第1.2个INOUT参数的类型</span></span><br><span class="line"><span class="string">            c8.regiaterOutParameter(1, java.sq1.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.registerOutParameter(2, java.sql.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.execute();</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            //执行SQL的存储过程adSub</span></span><br><span class="line"><span class="string">            int sum = c8.getInt(1);</span></span><br><span class="line"><span class="string">            //返回存储过程addSub的第1个INOUT型参数的值</span></span><br><span class="line"><span class="string">            int sub = es.getInt(2);</span></span><br><span class="line"><span class="string">            //返回存储过程adSub的第2个INOUT型参数的值</span></span><br><span class="line"><span class="string">            System.out.println(a + &quot;</span>与<span class="string">&quot; + b + &quot;</span>的和: <span class="string">&quot; + sun + &quot;</span>,差: <span class="string">&quot; + sub);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        &#125; catch(Exception e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">        &#125; finally &#123;</span></span><br><span class="line"><span class="string">        try &#123;</span></span><br><span class="line"><span class="string">        if(cs != mu11) cs.close();</span></span><br><span class="line"><span class="string">                if(conn != mul1) conn.close();</span></span><br><span class="line"><span class="string">        &#125; catch(Exception e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取元数据"><a href="#获取元数据" class="headerlink" title="获取元数据"></a>获取元数据</h3><p>谓元数据（meta data）就是有关数据库和表结构的信息，如数据库中的表、表的字段、表的索引、数据类型、对SQL的支持程度等信息。</p><p>JDBC提供DatabaseMetaData接口用来获取数据库范围的信息，提供ResultSetMetaData接口用来获取特定结果集ResultSet的信息，如字段名和字段个数等。</p><h4 id="DatabasedMetaData接口-获取数据库信息"><a href="#DatabasedMetaData接口-获取数据库信息" class="headerlink" title="DatabasedMetaData接口-获取数据库信息"></a>DatabasedMetaData接口-获取数据库信息</h4><p>DatabaseMetaData接口主要是用来得到关于数据库的信息，如数据库中所有表名、系统函数、关键字、数据库产品名和数据库支持的JDBC 驱动程序名等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DatabaseMetaData</span> <span class="variable">dmd</span> <span class="operator">=</span> conn.getMetaData();</span><br></pre></td></tr></table></figure><ul><li>DatabaseMetaData接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean supportsOuterJoins()</td><td style="text-align:center">判断数据库是否支持外部连接</td></tr><tr><td style="text-align:center">public boolean supportsStoredProcedures()</td><td style="text-align:center">判断数据库是否支持存储过程</td></tr><tr><td style="text-align:center">public String getURL()</td><td style="text-align:center">返回用于连接数据库的URL地址</td></tr><tr><td style="text-align:center">public String getUserName()</td><td style="text-align:center">返回当前用户名</td></tr><tr><td style="text-align:center">public String getDatabaseProductName()</td><td style="text-align:center">返回使用的数据库产品名</td></tr><tr><td style="text-align:center">public String getDatabaseProductVersion()</td><td style="text-align:center">返回使用的数据库版本号</td></tr><tr><td style="text-align:center">public String getDriverName()</td><td style="text-align:center">返回用以连接的驱动程序名称</td></tr><tr><td style="text-align:center">public String getDriverVersion()</td><td style="text-align:center">返回用以连接的驱动程序版本号</td></tr><tr><td style="text-align:center">public ResultSet getTypeInfo()</td><td style="text-align:center">返回当前数据库中支持的所有数据类型的描述</td></tr></tbody></table></div><h4 id="ResultSetMetaData接口-获取结果集信息"><a href="#ResultSetMetaData接口-获取结果集信息" class="headerlink" title="ResultSetMetaData接口-获取结果集信息"></a>ResultSetMetaData接口-获取结果集信息</h4><p>ResultSetMetaData接口主要用来获取结果集的结构。例如，结果集字段的数量、字段的名字等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsMetaData</span> <span class="operator">=</span> rs.getMetaData();</span><br></pre></td></tr></table></figure><ul><li>ResultSetMetaData接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int getColumnCount()</td><td style="text-align:center">返回此ResultSet对象中的字段数</td></tr><tr><td style="text-align:center">public String getColumnName(int column)</td><td style="text-align:center">返回指定列的名称</td></tr><tr><td style="text-align:center">public int getColumnType(int column)</td><td style="text-align:center">返回指定列的SQL类型</td></tr><tr><td style="text-align:center">public int getColumnDisplaySize(int column)</td><td style="text-align:center">以字符为单位返回指定字段的最大宽度</td></tr><tr><td style="text-align:center">public boolean isAutoIncrement(int column)</td><td style="text-align:center">判断是否自动为指定字段进行编号，判断给定字段是否可以为null,返回值是columnNoNulls</td></tr><tr><td style="text-align:center">public int isNullable(int column)</td><td style="text-align:center">columnNullable或columnNullableUnknown之一</td></tr><tr><td style="text-align:center">public boolean isSearchable(int column)</td><td style="text-align:center">判断是否可以在WHERE子句中使用指定的字段</td></tr><tr><td style="text-align:center">public boolean isReadOnly(int column)</td><td style="text-align:center">判断指定的字段是否为只读</td></tr></tbody></table></div><h3 id="事物操作"><a href="#事物操作" class="headerlink" title="事物操作"></a>事物操作</h3><p>事务是保证数据库中数据完整性与一致性的重要机制。事务由一组SQL语句组成，这组语句要么都执行，要么都不执行，因此事务具有原子性。</p><p>已提交事务是指成功执行完毕的事务，未能成功执行完成的事务称为中止事务，对中止事务造成的变更需要进行撤销处理，称为<code>事务回滚</code>。</p><p>事物操作基于connection</p><h4 id="setAutoCommit"><a href="#setAutoCommit" class="headerlink" title="setAutoCommit()"></a>setAutoCommit()</h4><p>事务操作默认是自动提交。</p><p>即每一条SQL语句都被看作是一个事务，对数据库的更新操作成功后，系统将自动调用<code>commit()</code>方法提交。若把多个SQL语句作为一个事务就要关闭这种自动提交模式，这是通过调用当前连接的<code>setAutoCommit(flase)</code>方法来实现的。</p><h4 id="commit"><a href="#commit" class="headerlink" title="commit()"></a>commit()</h4><p>当连接的自动提交模式被关闭后，SQL语句的执行结果将不被提交。</p><h4 id="rollback"><a href="#rollback" class="headerlink" title="rollback()"></a>rollback()</h4><p>当调用<code>ommit()</code>法进行事务处理时，只要事务中的任何一条SQL语句没有生效，就会抛出SQLException异常。</p><p>这个方法将取消事务，并将该事务已执行部分对数据的修改恢复到事务执行前的值。</p><ul><li>回滚保存点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Savepoint</span> <span class="variable">s1</span> <span class="operator">=</span> conn.setSavepoint();</span><br><span class="line">conn.rollback(s1);</span><br></pre></td></tr></table></figure><h3 id="在窗口中访问数据库"><a href="#在窗口中访问数据库" class="headerlink" title="在窗口中访问数据库"></a>在窗口中访问数据库</h3><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>数据库、数据库管理系统和数据库系统是三个不同的概念。</li><li>一个关系型数据库是由一个或多个二维表构成的。表的列称为字段，行称为记录。</li><li>数据库中的表有三种约束：域约束、主码约束和外码约束。</li><li>SQL是结构化查询语言（Structured Query Language）的英文缩写，是用来定义数据库表和完<br>整性约束以及访问和操纵数据的语言。</li><li>JDBC是为在Java程序中访问数据库而设计的一组Java API，包含有一组类与接口，用于与数据库的连接、把SQL语句发送到数据库、处理SQL语句的结果以及获取数据库的元数据等。</li><li>使用Java开发任何数据库应用程序都需要四个接口：Driver、Connection、Statement和ResultSet。这些接口定义了使用SQL语句访问数据库的方法。JDBC驱动程序开发商或第三方已实现了这些接口中的方法。</li><li>使用JDBC访问数据库的一般步骤为：加载驱动程序、建立与数据库的连接、创建执行方式语句、执行SQL语句、处理返回结果和关闭创建的各种对象。</li><li>JDBC中有三种SQL查询方式：不含参数的静态查询、含有参数的动态查询和存储过程调用。这三种方式分别对应Statement、PreparedStatement和CallableStatement接口。</li><li>JDBC通过Statement接口实现静态SQL查询，通过PreparedStatement接口实现动态SQL查询，通过CallableStatement接口实现存储过程的调用。</li><li>JDBC通过ResultSet返回查询结果集，并提供记录指针对其记录进行定位。</li><li>JDBC通过DatabaseMetaData接口获得关于数据库的信息，通过ResultSetMetaData接口获取结果集的结构。</li><li>JDBC默认的事务提交方式是自动提交，可以通过setAutoCommit()方法控制事务提交方式，使用rollback()方法可实现事务回滚。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>写出在数据库StudentScore的Student表中查找所有年龄大于或等于19的同学的SQL语句。</li><li>写出姓名为“刘韵”的学生所学课程名称及成绩的SQL语句。</li><li>描述JDBC中Driver、Connection、Statement和ResultSet接口的功能。</li><li>使用Statement接口和PreparedStatement接口有什么区别？</li><li>归纳一下使用JDBC进行数据库访问的完整过程。</li><li>如何在结果集中返回字段的数目？如何在结果集中返回字段名？</li><li>编写一个应用程序，使其可以从StudentScore数据库的某个表中查询一个字段的所有信息。</li><li>创建一个名为Books的数据库，并在其中建立一个名为Book的表，字段包括书名、作者、出版社、出版时间和ISBN。编写一个应用程序，运用JDBC在该数据库中实现增加、删除和修改数据的功能。</li><li>假设在StudentScore数据库的Student表中，存在多个姓氏相同的人，根据这种情况建立查询，要求提供一个合适的图形界面，用户可以滚动查看查询记录。</li></ul><h1 id="第十八章-Java网络编程"><a href="#第十八章-Java网络编程" class="headerlink" title="第十八章 Java网络编程"></a>第十八章 Java网络编程</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>网络通信协议是计算机间进行通信所遵守的各种规则的集合。</p><p>Internet的主要协议有：网络层的IP协议；传输层的TCP和UDP协议；应用层的FTP、HTTP、SMTP等协议。其中传输控制协议（TransportControl Protocol, TCP）和网际互联协议（Internet Protocol，IP）是Internet的主要协议。</p><p>TCP/IP网络参考模型包括四个层次：应用层、传输层、网络层、链路层。</p><h4 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h4><p>链路层也称为数据链路层或网络接口层。通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。它们一起处理与电缆（或其他任何传输媒介）有关的物理接口细节。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层对TCP/IP网络中的硬件资源进行标识。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>在TCP/IP网络中，不同的机器之间进行通信时，数据的传输是由传输层控制的，这包括数据要发往的目的主机及应用程序、数据的质量控制等。</p><p>用于通信的端点是由Socket来定义的，而Socket是由IP地址和端口号组成的。</p><p>TCP是通过在端点与端点之间建立持续的连接而进行通信的。整个字节流到达接收端时完好无缺。</p><p>UDP是一种无连接的传输协议，传输方式是无序的，也不能确保绝对安全可靠，但它非常简单，也具有比较高的效率。</p><p>当对所传输的数据有时序性和可靠性等要求时，应使用TCP；<br>当传输的数据比较简单、对时序等无要求时，UDP能发挥更好的作用。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>大多数基于Internet的应用程序。<br>FTP、HTTP、SMTP、POP3、Telnet等。</p><h3 id="通信端口"><a href="#通信端口" class="headerlink" title="通信端口"></a>通信端口</h3><p>一台机器只能通过一条链路连接到网络上，网络端口号（port）就是用于区分一台主机中的不同应用程序。</p><p>个标记计算机逻辑通信信道的正整数。</p><p>其范围为0~65 535，其中，0~1023被系统保留，专门用于那些通用的服务（well-known service）</p><p>HTTP服务的端口号为80，Telnet服务的端口号为21，FTP服务的端口号为23。</p><p>IP地址和端口号组成了所谓的Socket。</p><p>Socket是网络上运行的程序之间双向通信链路的最后终结点，是TCP和UDP的基础。</p><h3 id="URL概念"><a href="#URL概念" class="headerlink" title="URL概念"></a>URL概念</h3><p>URL是统一资源定位器（Uniform Resource Locator）的英文缩写。</p><p>URL的基本结构由五部分组成，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传输协议://主机名:端口号/文件名#引用</span><br></pre></td></tr></table></figure><p>（1）传输协议（protocol）：指所使用的协议名，如HTTP、FTP等。<br>（2）主机名（hostname）：指资源所在的计算机。可以是IP地址，也可以是计算机的名称或域名。<br>（3）端口号（portnumber）：一个计算机中可能有多种服务，如Web服务、FTP服务或自己建立的服务等。为了区分这些服务，就需要使用端口号，每一种服务用一个端口号。<br>（4）文件名（filename）：包括该文件的完整路径。在HTTP中，有一个默认的文件名是index.html，因此，下列两个地址是等价的。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://java.sun.com</span><br><span class="line">http://java.sun.com/index.html</span><br></pre></td></tr></table></figure><br>（ 5 ） 引用（ reference ） ： 就是资源内部的某个参考点， 如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://java.sun.com/index.html#chapter1。</span><br></pre></td></tr></table></figure></p><h3 id="Java语言的网络编程"><a href="#Java语言的网络编程" class="headerlink" title="Java语言的网络编程"></a>Java语言的网络编程</h3><p>Java语言的网络编程分为三个层次。</p><ul><li>从网络上下载小程序</li><li>通过URL类的对象指明文件所在位置</li><li>利用java.net包中提供的类直接在程序中实现网络通信</li></ul><p>针对不同层次的网络通信，Java语言提供的网络功能有四大类：URL、InetAddress、Socket、Datagram。</p><ul><li>URL：面向应用层，通过URL, Java程序可以直接输出或读取网络上的数据。</li><li>InetAddress：面向的是IP层，用于标识网络上的硬件资源。</li><li>Socket和Datagram：面向的是传输层。Socket使用TCP，这是传统网络程序最常用的方式，可以想象为两个不同的程序通过网络的通信信道进行通信；Datagram则使用UDP，是另一种网络传输方式，它把数据的目的地址记录在数据包中，然后直接放在网络上。</li></ul><p>Java语言网络编程中主要使用的java.net包中的类如下。</p><ul><li>面向IP层的类：InetAddress；</li><li>面向应用层的类：URL、URLConnection；</li><li>TCP相关类：Socket、ServerSocket；</li><li>UDP 相关类： DatagramPacket 、DatagramSocket 、MulticastSocket。</li></ul><p>可能产生的异常包括BindExceptio 、ConnectException 、MalformedURLException 、NoRouteToHostException 、ProtocolException 、SocketException 、Unknown-HostException、UnknownServiceException。</p><h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><h3 id="创建URL对象"><a href="#创建URL对象" class="headerlink" title="创建URL对象"></a>创建URL对象</h3><ul><li>创建URL对象的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public URL(String spec)</td><td style="text-align:center">使用URL形式的字符串spec创建一个URL对象</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, int port, String file)</td><td style="text-align:center">创建一个协议为protocol、主机名为host、端口号为port、待访问的文件名为file的URL对象.</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, String file)</td><td style="text-align:center">创建一个URL对象,参数的含义同上、但使用默认端口号</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, int port, String file, URLStream Handler handler)</td><td style="text-align:center">创建一个协议为protocol、主机名为host、端口号为port、待访问的文件名为file、URL流句柄为handler的URL对象</td></tr><tr><td style="text-align:center">public URL(URL context,String spec)</td><td style="text-align:center">使用已有的URL对象context和URL形式的字符串spec创建URL对象</td></tr><tr><td style="text-align:center">public URL(URL context, String spee, URI StreamHandlerhandler)</td><td style="text-align:center">参数同上，但创建的URL对象包含流句柄handler</td></tr></tbody></table></div><blockquote><p>在创建URL对象时，若发生错误，系统会产生MalformedURLException异常，这是非运行时异常，必须在程序中捕获处理。</p></blockquote><ul><li>URL类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean equals(Object obj)</td><td style="text-align:center">判断两个URL是否相同</td></tr><tr><td style="text-align:center">public final Object getContent()</td><td style="text-align:center">获取URL连接的内容</td></tr><tr><td style="text-align:center">public String getProtocol()</td><td style="text-align:center">返回URL对象的协议名称</td></tr><tr><td style="text-align:center">public String getHost()</td><td style="text-align:center">返回URL对象访问的计算机名称</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">返回URL对象访问的端口号</td></tr><tr><td style="text-align:center">public String getFile()</td><td style="text-align:center">返回URL指向的文件名</td></tr><tr><td style="text-align:center">public String getPath()</td><td style="text-align:center">返回URL对象所使用的文件路径</td></tr><tr><td style="text-align:center">public String getRef()</td><td style="text-align:center">返回URL对象的引用字符串，即获取参考点</td></tr><tr><td style="text-align:center">public URLConnction openConnection()</td><td style="text-align:center">打开URL指向的连接</td></tr><tr><td style="text-align:center">public final InputStream openStream()</td><td style="text-align:center">打开输人流</td></tr><tr><td style="text-align:center">protected void set(String protocol，String host, int port, String file, String ref)</td><td style="text-align:center">用给定参数设置URL中各字段的内容</td></tr><tr><td style="text-align:center">public String toString()</td><td style="text-align:center">返回整个URL字符串</td></tr></tbody></table></div><h3 id="使用URL类访问网络资源"><a href="#使用URL类访问网络资源" class="headerlink" title="使用URL类访问网络资源"></a>使用URL类访问网络资源</h3><h2 id="用Java语言实现底层网络通信"><a href="#用Java语言实现底层网络通信" class="headerlink" title="用Java语言实现底层网络通信"></a>用Java语言实现底层网络通信</h2><h3 id="InetAdress程序设计"><a href="#InetAdress程序设计" class="headerlink" title="InetAdress程序设计"></a>InetAdress程序设计</h3><p>Internet上主机的地址有两种表示方式，即域名和IP地址。</p><p>在已知一个InetAddress对象时，就可以通过一定的方法从中获取Internet上主机的地址（域名或IP地址）。</p><p>InetAddress类没有构造方法， 因此不能用new运算符来创建InetAddress对象，通常是用它提供的静态方法来获取。</p><ul><li>InetAddress类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static InetAddress getByName(String host)</td><td style="text-align:center">通过给定的主机名host, 获取InetAddress 对象的IP地址</td></tr><tr><td style="text-align:center">public static InetAddress getByAddress( byte[] addr)</td><td style="text-align:center">通过存放在字节数组中的IP地址,返回一个InetAddress对象</td></tr><tr><td style="text-align:center">public static InetAddress getLocalHost()</td><td style="text-align:center">获取本地主机的IP地址</td></tr><tr><td style="text-align:center">public byte[] getAddress()</td><td style="text-align:center">获取本对象的IP地址,并存放在字节数组中</td></tr><tr><td style="text-align:center">public String getHostAddress()</td><td style="text-align:center">利用InetAddress对象,获取该对象的IP地址</td></tr><tr><td style="text-align:center">public String getHostName()</td><td style="text-align:center">利用InetAddress对象,获取该对象的主机名</td></tr><tr><td style="text-align:center">public String toString()</td><td style="text-align:center">将IP地址转换成字符串形式的域名</td></tr></tbody></table></div><blockquote><p>该表中给的static方法通常会产生UnknownHostException异常，应在程序中捕获处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">myIPAddress</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">myServer</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.tom.com&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="基于连接的Socket通信程序设计"><a href="#基于连接的Socket通信程序设计" class="headerlink" title="基于连接的Socket通信程序设计"></a>基于连接的Socket通信程序设计</h3><p>Socket通信属于网络底层通信，它是网络上运行的两个程序间双向通信的一端，它既可以接收请求，也可以发送请求，利用它可以较方便地进行网络上的数据传输。</p><p>Socket 是实现客户与服务器（Client/Server, C/S）模式的通信方式。</p><h4 id="Socket通信机制的基本概念"><a href="#Socket通信机制的基本概念" class="headerlink" title="Socket通信机制的基本概念"></a>Socket通信机制的基本概念</h4><p>1）建立连接<br>2）连接地址<br>3）TCP/IP Socket通信</p><p>服务器端套接字使用的是ServerSocket类对象，客户端套接字使用的是Socket类对象，由此区分服务器端和客户端。</p><h4 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h4><p><code>java.net.Socket</code>继承自<code>java.lang.Object</code>类。</p><p>Socket类用在客户端，用户通过创建一个Socket对象来建立与服务器的连接。</p><p>通信开始之前先由通信双方确认身份并建立一条专用的虚拟连接通道；<br>然后它们通过这条通道传送数据信息进行通信；<br>当通信结束时再将原先所建立的连接拆除。</p><ul><li>Socket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Socket(String host ,int port)</td><td style="text-align:center">在客户端以指定的服务器地址host和端口号port,创建一个Socket对象,并向服务器端发出连接请求</td></tr><tr><td style="text-align:center">public Socket(InetAddress address,int port)</td><td style="text-align:center">同上,但IP地址由address指定</td></tr><tr><td style="text-align:center">public Socket(String host, int port, boolean stream)</td><td style="text-align:center">同上,但若stream为真,则创建流Socket对象,否则创建</td></tr><tr><td style="text-align:center">public Socket(InetAddress host, int port, boolean stream)</td><td style="text-align:center">数据报Socket对象同上,但IP地址由host指定</td></tr></tbody></table></div><ul><li>Socket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public InetAddress getInetAddress()</td><td style="text-align:center">获取创建Socket对象时指定的服务器的IP地址</td></tr><tr><td style="text-align:center">public InetAddress getLocalAddress()</td><td style="text-align:center">获取创建Socket对象时客户计算机的IP地址</td></tr><tr><td style="text-align:center">public InputStream getInputStream()</td><td style="text-align:center">为当前的Socket 对象创建输人流</td></tr><tr><td style="text-align:center">public OutputStream getOutputStream()</td><td style="text-align:center">为当前的Socket对象创建输出流</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">获取创建Socket时指定远程主机的端口号</td></tr><tr><td style="text-align:center">public void setReceiveBufferSize(int size)</td><td style="text-align:center">设置接收缓冲区的大小</td></tr><tr><td style="text-align:center">public int getReceiveBufferSize()</td><td style="text-align:center">返回接收缓冲区的大小</td></tr><tr><td style="text-align:center">public void setSendBufferSize(int size)</td><td style="text-align:center">设置发送缓冲区的大小</td></tr><tr><td style="text-align:center">public int getSendBufferSize()</td><td style="text-align:center">返回发送缓冲区的大小</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭建立的Socket连接</td></tr></tbody></table></div><h4 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h4><p><code>java.net.ServerSocket</code>继承自<code>java.lang.Object</code>类</p><ul><li>ServerSocket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ServerSocket(int port)</td><td style="text-align:center">以指定的端口port创建ServerSocket对象,并等候客户端的连接请求。端口号必须与客户端呼叫用的端口号相同</td></tr><tr><td style="text-align:center">public ServerSocket(intport, int backlog)</td><td style="text-align:center">同上,但以backlog指定最大的连接数,即可同时连接的客户端数量</td></tr></tbody></table></div><ul><li>ServerSocket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Socket accept()</td><td style="text-align:center">在服务器端的指定端口监听客户端发来的连接请求,并返回一个与客户端Socket对象相连接的Socket对象</td></tr><tr><td style="text-align:center">public InetAddress getInetAddress()</td><td style="text-align:center">返回服务器的IP地址</td></tr><tr><td style="text-align:center">public int getLocalPort()</td><td style="text-align:center">返回服务器的端口号</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭服务器端建立的套接字</td></tr></tbody></table></div><h4 id="Socket通信模式"><a href="#Socket通信模式" class="headerlink" title="Socket通信模式"></a>Socket通信模式</h4><p>1）客户建立到服务器的套接字对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Socket mySocket=<span class="keyword">new</span> <span class="title class_">Socket</span>(http:<span class="comment">//www.gduf.edu.cn,1880);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>getInputStream()</code>方法获得输入流，<code>getOutputStream()</code>方法获得输出流。</p><p>2）建立接收客户套接字的服务器套接字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">1880</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">sc</span> <span class="operator">=</span> serSocket.accept();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/TCP-IP%E4%B8%8B%E7%9A%84Socket%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F.jpg" class="" title="TCP-IP下的Socket网络通信模式"><p>Socket通信的步骤如下：<br>（1）在服务器端创建一个ServerSocket对象，并指定端口号；<br>（2）运行ServerSocket的accept（）方法，等候客户端请求；<br>（3）客户端创建一个Socket对象，指定服务器的IP地址和端口号，向服务器端发出连接请求；<br>（4）服务器端接收到客户端请求后，创建Socket对象与客户端建立连接；<br>（5）服务器端和客户端分别建立输入输出数据流，进行数据传输；<br>（6）通信结束后，服务器端和客户端分别关闭相应的Socket连接；<br>（7） 服务器端程序运行结束后， 调用ServerSocket 对象的close（）方法停止等候客户端请求。</p><p>为了能实现服务器端同时对多个客户进行服务，需要用多线程，在服务器端创建客户请求的监听线程，一旦客户发起连接请求，则在服务器端创建用于服务的Socket，利用该Socket完成与客户的通信，即每个线程针对一个客户进行服务。</p><h3 id="无连接的数据报通信程序设计"><a href="#无连接的数据报通信程序设计" class="headerlink" title="无连接的数据报通信程序设计"></a>无连接的数据报通信程序设计</h3><p>数据报通信是基于用户数据报协议（ User Datagram Protocol,UDP）的网络信息传输方式。数据报（datagram）是网络层数据单元在介质上传输信息的一种逻辑分组形式。<br>数据报是无连接的远程通信服务，它是一种在网络中传输的、独立的、自身包含地址信息的数据单位，不保证传送顺序和内容的准确性。数据报Socket又称为UDP套接字，它无须建立、拆除连接，直接将信息打包传向指定的目的地，使用起来比流式Socket要简单一些。但由于该种通信方式不能保证将所有数据都传送到目的地，所以一般用于传送非关键性的数据。</p><p>首先将数据打包，形成数据包，这类似于将信件装入信封，然后将数据包发往目的地；其次是接收端收到别人发来的数据包，然后查看数据包中的内容，这类似于从信封中取出信件。</p><p>DatagramPacket类在发送端用于将待发送的数据打包，在接收端则用于将收到的数据拆包；<br>DatagramSocket类用于实现数据报通信的过程中数据报的发送与接收。</p><h4 id="DatagramPacket类"><a href="#DatagramPacket类" class="headerlink" title="DatagramPacket类"></a>DatagramPacket类</h4><p>需要传输的数据、数据报的长度、IP 地址和端口号等信息。</p><ul><li>DatagramPacket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public DatagramPacket(byte[]buf, int length)</td><td style="text-align:center">创建一个用于接收数据报的对象，buf数组用于接收数据报中的数据，接收长度为length</td></tr><tr><td style="text-align:center">public DatagramPacket ( byte[] buf，int length, InetAddress address, int port)</td><td style="text-align:center">创建一个用于发送给远程系统的数据报对象。并将数组buf中长度为length的数据发送到地址为address、端口号为port的主机上</td></tr></tbody></table></div><ul><li>DatagramPacket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public byte[] getData()</td><td style="text-align:center">返回一个字节数组,包含收到或要发送的数据报中的数据</td></tr><tr><td style="text-align:center">public int getLength()</td><td style="text-align:center">返回发送或接收到的数据的长度</td></tr><tr><td style="text-align:center">public InetAddress getAddress()</td><td style="text-align:center">返回目标数据包的IP地址或发送该数据包主机的IP地址</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">返回目标数据包的端口号或发送该数据包主机的端口号</td></tr></tbody></table></div><h4 id="DatagramSocket类"><a href="#DatagramSocket类" class="headerlink" title="DatagramSocket类"></a>DatagramSocket类</h4><p>于在发送主机中建立数据报通信方式，提出发送请求，实现数据报的发送与接收。</p><ul><li>DatagramSocket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public DatagramSocket()</td><td style="text-align:center">创建一个以当前计算机的任一个可用端口为发送端口的数据报连接</td></tr><tr><td style="text-align:center">public DatagramSocket(int port)</td><td style="text-align:center">创建一个以当前计算机的指定端口为接收端口的数据报连接</td></tr><tr><td style="text-align:center">public DatagramSocket(int port, InetAddress laddr)</td><td style="text-align:center">用于在有多个IP地址的当前主机上，创建一一个以laddr 为指定IP地址、以port为指定端口的数据报连接</td></tr></tbody></table></div><p>SocketException异常</p><ul><li>DatagramSocket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void receive(DatagramPacket p)</td><td style="text-align:center">从建立的数据报连接中接收数据,并保存到p中</td></tr><tr><td style="text-align:center">public void send(DatagramPacket p)</td><td style="text-align:center">将数据报对象p中包含的报文发送到所指定的IP地址主机的指定端口</td></tr><tr><td style="text-align:center">public void setSoTimeout(int timeout)</td><td style="text-align:center">设置传输超时为timeout</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭数据报连接</td></tr></tbody></table></div><blockquote><p>由于数据报是不可靠的通信方式，所以receive()方法不一定能接收到数据，为防止线程死掉，应该利用setSoTimeout()。</p></blockquote><h4 id="数据报通信的发送与接收过程"><a href="#数据报通信的发送与接收过程" class="headerlink" title="数据报通信的发送与接收过程"></a>数据报通信的发送与接收过程</h4><p>发送</p><p>（1）创建一个用于发送数据的DatagramPacket对象，使其包含如下信息：<br>要发送的数据；<br>数据报分组的长度；<br>发送目的地的主机IP地址和目的端口号。<br>（2）在指定的或可用的本机端口创建DatagramSocket对象。<br>（3）调用DatagramSocket对象的send()方法，以DatagramPacke对象为参数发送数据报。</p><p>接收</p><p>（1）创建一个用于接收数据报的DatagramPacket对象，其中包含空白数据缓冲区和指定数据报分组的长度。<br>（2）在指定的或可用的本机端口创建DatagramSocket对象。<br>（3） 调用DatagramSocket 对象的receive()方法， 以DatagramPacket对象为参数接收数据报，接收到的信息有：<br>收到的数据报分组的内容；<br>发送端主机的IP地址；<br>发送端主机的发送端口号。</p><p>在数据报通信中，由于通信双方之间并不需要建立连接，所以服务器端应用程序通信过程与客户端应用程序的通信过程是非常相似的，客户端与服务器端双方均可以发送与接收数据报分组。所不同的是服务器应用程序要面向网络中的所有计算机，所以服务器应用程序收到一个数据报分组后要分析它，得到数据报的源地址信息，这样才能创建正确的返回结果分组给客户机。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>通信端口是一个标记计算机逻辑通信信道的正整数，用于区分一台主机中的不同应用程序，端口号不是物理实体。</li><li>IP地址和端口号组成了所谓的Socket。Socket是实现客户与服务器（Client/Server, C/S）模式的通信方式，Socket原意为“插座”，在通信领域中译为“套接字”，在网络通信里的含义就是建立一个连接。</li><li>URL是统一资源定位器（Uniform Resource Locator）的简称，它表示Internet上某一资源的地址。URL的基本结构由五部分组成。</li><li>Java的网络编程分为三个层次。最高一级的网络通信就是从网络上下载小程序；次一级的通信就是通过URL类的对象指明文件所在位置，并从网络上下载音频、视频或图像文件，然后播放音频、视频或显示图像；最低一级的通信是利用java.net包中提供的类直接在程序中实现网络通信。</li><li>针对不同层次的网络通信，Java语言提供的网络功能有四大类：URL、InetAddress、Socket、Datagram。<br>（1）URL：面向应用层，通过URL，Java程序可以直接输出或读取网络上的数据。<br>（2）InetAddress：面向的是IP层，用于标识网络上的硬件资源。<br>（3）Socket和Datagram：面向的是传输层。Socket使用TCP，这是传统网络程序最常用的方式，可以想象为两个不同的程序通过网络的通信信道进行通信；Datagram则使用UDP，是另一种网络传输方式，它把数据的目的地址记录在数据包中，然后直接放在网络上。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是URL？URL地址由哪几部分组成？</li><li>什么是Socket？它与TCP/IP有何关系？</li><li>简述流式Socket的通信机制。它的最大特点是什么？为什么可以实现无差错通信？</li><li>什么是端口号？服务器端和客户端分别如何使用端口号？</li><li>什么是套接字？其作用是什么？</li><li>编写Java程序，使用InetAddress类实现根据域名自动到DNS（域名服务器）上查找IP地址的功能。</li><li>用Java程序实现流式Socket通信，需要使用哪两个类？它们是如何定义的？应怎样使用？</li><li>与流式Socket相比，数据报通信有何特点？</li></ul>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记5</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记4</title>
    <link href="http://hibiscidai.com/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
    <id>http://hibiscidai.com/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</id>
    <published>2022-01-05T12:00:00.000Z</published>
    <updated>2022-05-03T10:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记4"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记4</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记4"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记4" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记4"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记4</h1><h1 id="第十四章-图形界面设计"><a href="#第十四章-图形界面设计" class="headerlink" title="第十四章 图形界面设计"></a>第十四章 图形界面设计</h1><h2 id="图形用户界面概述"><a href="#图形用户界面概述" class="headerlink" title="图形用户界面概述"></a>图形用户界面概述</h2><p>图形用户界面（Graphics User Interface，GUI），是指用图形的方式，借助菜单、按钮等标准界面元素和鼠标操作，帮助用户方便地向计算机系统发出指令、启动操作，并将系统运行的结果以图形方式显示给用户的技术。GUI又称为图形用户接口。</p><p>Java语言的早期版本提供了两个处理图形用户界面的包：java.awt和javax.swing。</p><p>JDK 8版本JavaFX替代了AWT和Swing，方便开发富因特网应用（Rich Internet Applications, RIA）。<br>富因特网应用，是一种Web应用，表现一般桌面应用具有的特点和功能。JavaFX为支持触摸设备提供了多点触控支持，并且还内建了对2D、3D、动画的支持，以及视频和音频的回放功能，JavaFX程序可以无缝地在桌面或Web浏览器中运行。</p><h2 id="图形用户界面工具包JavaFX"><a href="#图形用户界面工具包JavaFX" class="headerlink" title="图形用户界面工具包JavaFX"></a>图形用户界面工具包JavaFX</h2><p>JavaFX是一个强大的图形和多媒体处理工具包集合，它不仅可以用于开发RIA，而且还可以用来开发桌面程序以及移动设备上的程序。</p><ul><li>JavaFX主要的类及节点类面板类和控件类的继承关系</li></ul><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E4%B8%BB%E8%A6%81%E7%9A%84%E7%B1%BB%E5%8F%8A%E8%8A%82%E7%82%B9%E7%B1%BB%E9%9D%A2%E6%9D%BF%E7%B1%BB%E5%92%8C%E6%8E%A7%E4%BB%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX主要的类及节点类面板类和控件类的继承关系"><h3 id="JavaFX组件分类"><a href="#JavaFX组件分类" class="headerlink" title="JavaFX组件分类"></a>JavaFX组件分类</h3><p>节点(node)：构成图形用户界面的各种元素。</p><p>构建图形用户界面的类主要分成三类：面板类（pane class）、控件类（control class）和辅助类（helper class）。</p><p>面板是一种容器，是用来包含各种控件和形状的类。</p><p>控件类又称为控件或组件，控件的作用是完成与用户的交互，包括接收用户的命令、接收用户输入的文本或用户的选择、向用户显示文本或图形等。</p><p>辅助类是用来描述控件属性的，例如，颜色类Color、字体类Font、图像类Image和图像显示类ImageView等。面板类和控件类等都是Node的子类，但辅助类并不都是Node类的子类。</p><h3 id="JavaFX的基本概念"><a href="#JavaFX的基本概念" class="headerlink" title="JavaFX的基本概念"></a>JavaFX的基本概念</h3><p>JavaFX程序用户界面的顶层称为舞台Stage，代表窗口。<br>舞台Stage中摆放的是场景Scene，场景Scene中可以包含各种布局面板和控件共同组成用户界面。</p><ul><li><code>舞台Stage</code>：是用于显示场景的窗口，它是JavaFX程序用户界面的顶层容器。</li><li><code>场景Scene</code>：是摆放在舞台中的对象，也是一个容器，其中可放置面板和节点等对象。</li><li><code>节点Node</code>：是可视化的组件，可以是面板、控件、图像视图、形状等。</li><li><code>面板Pane</code>：面板中可以摆放各种节点。JavaFX提供了多种面板供用户在窗口中组织节点。</li><li><code>控件Control</code>：包括标签、按钮、复选框、单选按钮、文本框、文本区等。</li><li><code>形状Shape</code>：是指文本、直线、圆、椭圆、矩形、弧、多边形、折线等。</li></ul><h4 id="JavaFX窗口结构"><a href="#JavaFX窗口结构" class="headerlink" title="JavaFX窗口结构"></a>JavaFX窗口结构</h4><p>任何JavaFX程序至少要有一个舞台和一个场景。<br>舞台是一个支持场景的平台，一个程序中只能有一个主舞台。<br>主舞台是应用程序自动访问的一个Stage对象，它是在应用程序启动时由系统创建的，通过start()方法的参数获得，用户不能自己创建。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E7%AA%97%E5%8F%A3%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="" title="JavaFX窗口结构示意图"><blockquote><p>场景Scene中可以包含面板Pane或控件Control，但不能包含形状Shape和图像显示类ImageView；面板Pane可以包含Node的任何子节点。</p></blockquote><p>在JavaFX应用程序中，场景中的内容是通过层次结构表示的。<br>场景中的元素称为节点，每个节点都表示一个用户界面的可视元素。</p><p>节点可以有子节点，有子节点的节点称为父节点或分支节点，没有子节点的节点称为叶节点。<br>在场景图中有一个称为根节点的特殊节点，根节点是顶级节点，它是唯一没有父节点的节点。根节点通常是一个面板。</p><h4 id="应用程序的父类Application、舞台Stage和场景Scene"><a href="#应用程序的父类Application、舞台Stage和场景Scene" class="headerlink" title="应用程序的父类Application、舞台Stage和场景Scene"></a>应用程序的父类Application、舞台Stage和场景Scene</h4><p>所有的JavaFX 主程序都需要继承抽象类<code>javafx.application.Application</code>。</p><p>继承了Application类的子类必须重写<code>start()</code>方法。<br><code>start()</code>方法一般用于将控件放入场景中，并在舞台中显示场景。</p><ul><li><code>javafx.application.Application</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static void launch(String… args)</td><td style="text-align:center">启动一个独立的JavaFX 程序。利用可变参数args接收命令行参数,该方法通常是从main()方法调用的。它不能被多次调用，否则将抛出异常。</td></tr><tr><td style="text-align:center">public void init()</td><td style="text-align:center">程序初始化方法，加载Application 类之后该方法立即被调用。在此方法中不能创建舞台和场景,但可以创建其他JavaFX对象来进行初始化操作，若没有初始化部分，不用覆盖此方法。</td></tr><tr><td style="text-align:center">public abstract void start(Stage primaryStage)</td><td style="text-align:center">JavaFX程序的人口点。参数primaryStage是程序的主舞台。可以设置程序场景。如果程序作为applet启动,主舞台将被嵌人到浏览器中。如果需要，程序可以创建其他舞台,但它们不是主要舞台，也不会嵌人到浏览器中。该方法在init()之后被调用。</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">该方法在程序停止时调用，为程序退出和销毁资源提供了方便。</td></tr></tbody></table></div><ul><li><code>javafx.stage.Stage</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Stage()</td><td style="text-align:center">创建一个新舞台</td></tr><tr><td style="text-align:center">public Stage(StageStyle style)</td><td style="text-align:center">以style为舞台创建一个新舞台，style的取值是枚举StageStyle中的常量</td></tr></tbody></table></div><p><code>StageStyle.DECORATED</code>：有标题栏装饰即有最大最小和关闭按钮(默认选项）<br><code>StageStyle.UNDECORATED</code>：纯白背景且无标题栏装饰<br><code>StageStyle.TRANSPARENT</code>：透明背景且没有标题栏装饰<br><code>StageStyle.UNIFIED</code>：有最大最小等按钮但没有标题栏装饰<br><code>StageStyle.UTILITY</code>：有标题栏装饰但只有关闭按钮</p><ul><li><code>javafx.stage.Stage</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void show()</td><td style="text-align:center">显示窗口</td></tr><tr><td style="text-align:center">public final void setTitle(String value)</td><td style="text-align:center">设置窗口的标题</td></tr><tr><td style="text-align:center">public final void setScene(Scene value)</td><td style="text-align:center">将场景value置于窗口中</td></tr><tr><td style="text-align:center">public final void setMaxmized(boolean value)</td><td style="text-align:center">设置窗口是否可以最大化</td></tr><tr><td style="text-align:center">public final void setAlwaysOnTop(boolean value)</td><td style="text-align:center">设置窗口是否在项层</td></tr><tr><td style="text-align:center">public final void setResizable(boolean value)</td><td style="text-align:center">设置是否可以改变窗口大小</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭舞台。这个调用等同于hide()方法隐藏窗口</td></tr></tbody></table></div><ul><li><code>javafx.scene.Scene</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Scene(Parent root)</td><td style="text-align:center">以root为根节点创建一个场景，通常使用某种面板对象作为根节点，场景的大小会根据其中节点的大小自动计算</td></tr><tr><td style="text-align:center">publc Scene(Parent root, double width, ouble height)</td><td style="text-align:center">创建宽为width、高为height像素的场景，并将节点root放人场景中</td></tr><tr><td style="text-align:center">public Scene(Parent root, Paint fill)</td><td style="text-align:center">创建以root为根节点的场景，fill作为场景的背景填充色</td></tr><tr><td style="text-align:center">public Scene(Parent root, double width, double height, Paint fill)</td><td style="text-align:center">创建指定大小和填充色的场景，并将根节点root放入场录中</td></tr></tbody></table></div><ul><li><code>javafx.scene.Scene</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final &lt; T extends Event &gt; void addEventHandler(EventType &lt; T &gt; eventType, EventHandler &lt; ? super T &gt; eventHandler)</td><td style="text-align:center">向场景注册事件监听者</td></tr><tr><td style="text-align:center">public final void setFill(Paint value)</td><td style="text-align:center">设置场景的背景填充色为value</td></tr><tr><td style="text-align:center">public final void setRoot(Parent value)</td><td style="text-align:center">设置场景的根节点</td></tr><tr><td style="text-align:center">public final void setOnContextMenuRequested(EventHandler &lt; ? super ContextMenuEvent &gt; value)</td><td style="text-align:center">为场最注册快捷菜单动作事件监听者</td></tr></tbody></table></div><p><code>命令按钮</code></p><p>可以用鼠标单击它来控制程序运行的流程。<code>javafx.scene.control</code>包提供了Button类，用来处理按钮控件的相关操作。按钮创建之后通过面板的add()方法将其放入到面板中。</p><ul><li><code>javafx.scene.control.Button</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Button()</td><td style="text-align:center">创建一个没有文字的按钮</td></tr><tr><td style="text-align:center">public Button(String text)</td><td style="text-align:center">创建一个以text为文字的按钮</td></tr><tr><td style="text-align:center">public Button(String text, Node graphic)</td><td style="text-align:center">创建一个文字为text、图标为graphie的按钮</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Button</code>类及其父类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">用value设置按钮上的文字</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">用value设置按钮上的图标</td></tr><tr><td style="text-align:center">public void setPrefSize(double prefWidth, double prefHeight)</td><td style="text-align:center">用指定的宽、高像素值设置按钮尺寸，取代系统自动计算出的默认尺寸</td></tr><tr><td style="text-align:center">public final void setOnAction(EventHandler &lt; ActionEvent &gt; value)</td><td style="text-align:center">为按钮注册单击事件监听者</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建主舞台即窗口，并创建一个场景和一个按钮，然后将按钮放入场景中，再把场景放入舞台上，最后将窗口显示出来。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;我是按钮&quot;</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bt, <span class="number">210</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;我的JavaFX窗口&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户是从命令行运行JavaFX程序，则主方法main()不是必需的；当从一个不完全支持JavaFX的IDE中启动JavaFX程序的时候，可能会需要主方法main()。</span></span><br><span class="line"><span class="comment">//当运行一个没有主方法main()的JavaFX程序时，JVM将自动调用launch()方法以运行应用程序。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Application.launch(args);<span class="comment">//定义在Application类中的静态方法，用于启动一个独立的JavaFX程序，该方法必须在mian()方法中调用才会启动JavaFX程序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_1运行结果"><blockquote><p>舞台默认是不显示的，舞台对象必须调用自己的show()方法才能将窗口显示出来。</p></blockquote><h2 id="JavaFX的布局面板"><a href="#JavaFX的布局面板" class="headerlink" title="JavaFX的布局面板"></a>JavaFX的布局面板</h2><p>虽然可以直接将节点置于场景中，但更好的办法是先将节点放入面板中，然后再将面板放入场景中。</p><h3 id="面板类Pane和JavaFX-CSS"><a href="#面板类Pane和JavaFX-CSS" class="headerlink" title="面板类Pane和JavaFX CSS"></a>面板类Pane和JavaFX CSS</h3><p><code>面板</code>是一种没有标题栏、没有边框的容器，用来组织节点，面板可以包含Node的任何子类型。</p><p>面板类主要有如下几种：</p><ul><li>栈面板类StackPane</li><li>边界面板类BorderPane</li><li>流式面板类FlowPane</li><li>网格面板类GridePane</li><li>单行面板类HBox和单列面板类VBox</li></ul><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%9D%A2%E6%9D%BF%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="面板的继承关系"><h4 id="面板类Pane"><a href="#面板类Pane" class="headerlink" title="面板类Pane"></a>面板类Pane</h4><p>Pane是所有其他面板的根类。<br><code>javafx.scene.layout.Pane</code>类对象通常用作显示形状的画布，而其子类面板则主要用作摆放节点。</p><ul><li><code>javafx.scene.layout.Pane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Pane()</td><td style="text-align:center">创建一个空面板，以后可向其添加其他控件和形状</td></tr><tr><td style="text-align:center">public Pane(Node… children)</td><td style="text-align:center">创建面板，并将参数指定的多个节点添加到面板中</td></tr></tbody></table></div><p>每个面板都包含一个列表用于存放面板中的节点， 这个列表是<code>javafx.collections.ObservableList</code>类的实例，<code>ObservableList</code>类似于ArrayList，是一个用于存储元素的集合。</p><p>使用<code>add(node)</code>可以将一个节点添加到面板中，调用<code>addAll(node1, node2, ..., noden)</code>可以将多个节点同时添加到面板中。</p><p>调用<code>remove(node)</code>方法从面板中删除一个节点或调用<code>removeAll()</code>方法删除面<br>板中的所有节点。</p><ul><li><code>javafx.scene.layout.Pane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ObservableList &lt; Node &gt; getChildren()</td><td style="text-align:center">返回面板用于存放节点的列表</td></tr><tr><td style="text-align:center">public final void setPadding(Insets value)</td><td style="text-align:center">利用Insets对象value设置面板四周边缘内侧空白空间的距离，单位是像素</td></tr><tr><td style="text-align:center">public void setPrefSize(doule prefWidth, double prefHeight)</td><td style="text-align:center">以给定的宽、高值作为偏好尺寸，来代替系统自动对该节点计算出的默认尺寸。即以给定的宽、高值优先设置面板的大小</td></tr><tr><td style="text-align:center">public boolean isResizable()</td><td style="text-align:center">判断面板是否可调整尺寸</td></tr><tr><td style="text-align:center">public final void setStyle(Stirng value)</td><td style="text-align:center">设置面板或节点的样式</td></tr><tr><td style="text-align:center">public final void setRotate(double values)</td><td style="text-align:center">以度为单位，设置节点围绕它的中心旋转value角度，若value为正，顺时针旋转，否则逆时针旋转</td></tr><tr><td style="text-align:center">public final void setTranslateX(double value)</td><td style="text-align:center">将节点在x轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final void setTranslateY(double value)</td><td style="text-align:center">将节点在y轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final void setTranslateZ(double value)</td><td style="text-align:center">将节点在z轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final double getLayoutX()</td><td style="text-align:center">返回节点左上角的x坐标</td></tr><tr><td style="text-align:center">public final double getLayoutY()</td><td style="text-align:center">返回节点左上角的y坐标</td></tr><tr><td style="text-align:center">public final void setCache(boolean value)</td><td style="text-align:center">是否为节点设置缓冲，以提高性能</td></tr><tr><td style="text-align:center">public final void setOnContextMenuRequested(EventHandler &lt; ? super ContextMenuEvent value &gt;)</td><td style="text-align:center">为节点注册快捷菜单(上下文菜单)的动作事件</td></tr></tbody></table></div><blockquote><p>一个节点只能添加到一个面板中。</p></blockquote><h4 id="JavaFX-CSS"><a href="#JavaFX-CSS" class="headerlink" title="JavaFX CSS"></a>JavaFX CSS</h4><p>JavaFX的样式属性类似于Web页面中指定HTML元素样式的叠层样式表(Cascading Style Sheet，CSS)，因此，JavaFX的样式属性称为JavaFX CSS。</p><p>的setStyle()方法是Pane从其父类Node继承来的方法。</p><h3 id="栈面板类StackPane"><a href="#栈面板类StackPane" class="headerlink" title="栈面板类StackPane"></a>栈面板类StackPane</h3><p><code>java.scene.layout.StackPane</code></p><p>将所有节点都摆放在面板中央，后加入的节点添加到前一个节点之上，多个节点以叠加的形式放入栈面板中。</p><ul><li><code>javafx.scene.layout.StackPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public StackPane()</td><td style="text-align:center">创建栈面板，面板中的节点默认中心对齐</td></tr><tr><td style="text-align:center">public StackPane(Node… children)</td><td style="text-align:center">创建栈面板，并将参数指定的多个节点添加到面板，并中心对齐</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.StackPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static void clearConstraints(Node child)</td><td style="text-align:center">删除面板的child节点</td></tr><tr><td style="text-align:center">public static void setMargin(Node child, Insets value)</td><td style="text-align:center">为面板中节点设置外侧边缘周围的空白空间的距离</td></tr><tr><td style="text-align:center">public static void setAlignment(Node child, Pos value)</td><td style="text-align:center">设置节点child在面板中的对齐方式，value是取自枚举Pos中的枚举常量</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置节点的整体对齐方式</td></tr></tbody></table></div><ul><li><code>javafx.geometry.Pos</code>类中代表对齐方式常用的静态常量</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">静态常量名</th><th style="text-align:center">对齐方式</th></tr></thead><tbody><tr><td style="text-align:center">TOP_CENTER</td><td style="text-align:center">顶部居中对齐</td></tr><tr><td style="text-align:center">TOP_LEFT</td><td style="text-align:center">顶部左对齐</td></tr><tr><td style="text-align:center">TOP_RIGHT</td><td style="text-align:center">顶部右对齐</td></tr><tr><td style="text-align:center">CENTER</td><td style="text-align:center">中部居中对齐</td></tr><tr><td style="text-align:center">CENTER_LEFT</td><td style="text-align:center">中部左对齐</td></tr><tr><td style="text-align:center">CENTER_RIGHT</td><td style="text-align:center">中部右对齐</td></tr><tr><td style="text-align:center">BOTTOM_CENTER</td><td style="text-align:center">底部居中对齐</td></tr><tr><td style="text-align:center">BOTTOM_LEFT</td><td style="text-align:center">底部左对齐</td></tr><tr><td style="text-align:center">BOTTOM_RIGHT</td><td style="text-align:center">底部右对齐</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建栈面板，将在其上放置两个按钮，并用样式属性设置按钮和栈面板的外观样式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_3</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">StackPane</span> <span class="variable">sPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line">bt.setStyle(<span class="string">&quot;-fx-border-color: blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">bt1.setPrefSize(<span class="number">80</span>, <span class="number">50</span>);</span><br><span class="line">bt1.setStyle(<span class="string">&quot;-fx-border-color: green&quot;</span>);</span><br><span class="line">bt1.setRotate(-<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">sPane.getChildren().addAll(bt1, bt);</span><br><span class="line">sPane.setRotate(<span class="number">45</span>);</span><br><span class="line">sPane.setStyle(<span class="string">&quot;-fx-border-color: red; -fx-background-color: lightgray&quot;</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(sPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;栈面板&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_3%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_3运行结果"><blockquote><p>默认情况下，一个控件系统会基于其中的内容计算出默认的尺寸，并将它作为偏好尺寸。</p></blockquote><h3 id="流式面板类FlowPane"><a href="#流式面板类FlowPane" class="headerlink" title="流式面板类FlowPane"></a>流式面板类FlowPane</h3><p><code>javafx.scene.layout.FlowPane</code></p><p>将节点按水平方式一行一行地摆放，或者是按垂直方式一列一列地摆放。</p><ul><li>节点按照加入流式面板的先后顺序从左向右排列摆放，或者是从上向下排列摆放；</li><li>一行或一列排满节点之后就自动地转到下一行或下一列继续从左向右或从上向下排列；</li><li><p>每一行或每一列中的组件默认设置为居中排列。</p></li><li><p><code>javafx.scene.layout.FlowPane</code>类的主要构造方法</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FlowPane()</td><td style="text-align:center">创建流式水平布局面板,容器中的节点居中对齐,节点间水平和垂直间距均默认为0像素</td></tr><tr><td style="text-align:center">public FlowPane(double hgap, double vgaps)</td><td style="text-align:center">功能同上,但节点间水平间距为hgap像素，垂直间距为vgap像素</td></tr><tr><td style="text-align:center">public FlowPane(Orientation orientation)</td><td style="text-align:center">创建节点排列方向为orientation、节点间水平和垂直间距均默认为0像素的流式面板。<br /> orientation取值为<code>Orientation. HORIZONTAL</code>,表示水平布局；<br /> <code>Orientation.VERTICAL</code>,表示垂直布局</td></tr><tr><td style="text-align:center">public FlowPane(double hgap, double vgap, Node… children)</td><td style="text-align:center">创建流式面板,并将参数指定的多个节点添加到面板中,节点间水平间距为hgap像素,垂直间距为vgap像素</td></tr><tr><td style="text-align:center">public FlowPane(Orientation orientation, Node… children)</td><td style="text-align:center">创建节点排列方向为orientation,并将參数指定的多个节点添加到面板中,节点水平和垂直间距均默认为0像素</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.FlowPane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setHgap(double value)</td><td style="text-align:center">设置布局面板中各节点之间水平间距的像素数</td></tr><tr><td style="text-align:center">public final void setVgap(double value)</td><td style="text-align:center">设置布局面板中各节点之间垂直间距的像素数</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置流式布局中节点的摆放方向，orientation取值见上表</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置布局面板中整体对齐方式,value是枚拳Pos中的值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置面板边缘内侧四周空白的距离</span></span><br><span class="line">rootNode.setPadding(<span class="keyword">new</span> <span class="title class_">Insets</span>(<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>));</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/Insets%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="" title="Insets对象参数示意图"><h3 id="边界面板类BoderPane"><a href="#边界面板类BoderPane" class="headerlink" title="边界面板类BoderPane"></a>边界面板类BoderPane</h3><p><code>类javafx.scene.layout.BorderPane</code></p><p>边界面板将显示区域分为上（top）、下（bottom）、左（left）、右（right）、中（center）五个区域，每个区域可以放置一个控件或其他面板，每个区域的大小是任意的，如果程序不需要某个区域，可以不定义，也不用留出空间。</p><ul><li><code>javafx.scene.layout.BorderPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public BorderPane()</td><td style="text-align:center">创建边界式面板对象</td></tr><tr><td style="text-align:center">public BorderPane(Node center)</td><td style="text-align:center">用指定节点center为中央区域控件创建边界式面板对象</td></tr><tr><td style="text-align:center">public BorderPane(Node center, Node top, Node right, Node bottom, Node left)</td><td style="text-align:center">创建边界式面板对象，并指定每个区域的节点</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.BorderPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTop(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的顶部区域</td></tr><tr><td style="text-align:center">public final void setBottom(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的底部区域</td></tr><tr><td style="text-align:center">public final void setLeft(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的左部区域</td></tr><tr><td style="text-align:center">public final void setRight(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的右部区域</td></tr><tr><td style="text-align:center">public final void setCenter(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的中央区域</td></tr><tr><td style="text-align:center">public static void setAlignment(Node child, Pos value)</td><td style="text-align:center">设置节点的对齐方式</td></tr></tbody></table></div><p>如果要将某个区域的节点移除，如将顶部区域的节点删除，可以调用<code>rootPane.setTop(null)</code>方法来完成。如果一个区域没有被占用，那么不会分配空间给这个区域。</p><h3 id="网格面板类GridPane"><a href="#网格面板类GridPane" class="headerlink" title="网格面板类GridPane"></a>网格面板类GridPane</h3><p><code>javafx.scene.layout.GridPane</code></p><p>网格面板类似表格，由行和列组成的单元格用来放置节点。一个节点可以被放于任何单元格内，也可以根据需要占用多行或者多列摆放。</p><ul><li><code>javafx.scene.layout.GridPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public GridPane()</td><td style="text-align:center">创建网络面板</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.GridPane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setHgap(double value)</td><td style="text-align:center">设置面板中节点间的水平间距为value像素</td></tr><tr><td style="text-align:center">public final void setVgap(double value)</td><td style="text-align:center">设置面板中节点间的垂直间距为value像素</td></tr><tr><td style="text-align:center">public void add(Node child, int columnIndex, int rowIndex)</td><td style="text-align:center">将节点child添加到网格面板的第columnIndex列和第rowIndex行单元格中</td></tr><tr><td style="text-align:center">public void add(Node child, int columnIndex, int rowIndex, int colspan, int rowspan)</td><td style="text-align:center">将节点添加到指定单元格中，并占用colspan列和rowspan行</td></tr><tr><td style="text-align:center">public static void setConstrains(Node child, int columnIndex, int rowIndex)</td><td style="text-align:center">将节点添加到指定的单元格中</td></tr><tr><td style="text-align:center">public static void setConstrains(Node child, int columnIndex, int rowIndex, int columnspan, int rowspan)</td><td style="text-align:center">将节点添加到指定的单元格中,并占用columnspan列和rowspan行</td></tr><tr><td style="text-align:center">public void addColumn(int columnIndex, Node… children)</td><td style="text-align:center">将参数指定的多个节点添加到指定的列</td></tr><tr><td style="text-align:center">public void addRow(int rowIndex, Node… children)</td><td style="text-align:center">将参数指定的多个节点添加到指定的行</td></tr><tr><td style="text-align:center">public static Integer getClumnIndex(Node child)</td><td style="text-align:center">返回给定节点child的列序号</td></tr><tr><td style="text-align:center">public static Integer getRowIndex(Node child)</td><td style="text-align:center">返回给定节点child的行序号</td></tr><tr><td style="text-align:center">public static void setColumnIndex(Node child, Integer value)</td><td style="text-align:center">将节点设置到新的列，该方法重新定位节点</td></tr><tr><td style="text-align:center">public static void setColumnIndex(Node child, Integer value)</td><td style="text-align:center">将节点设置到新的行，该方法重新定位节点</td></tr><tr><td style="text-align:center">public final void setGridLinesVisible(boolean value)</td><td style="text-align:center">设置是否显示网格线，默认值为false</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置节点的对齐方式</td></tr></tbody></table></div><h3 id="单行面板类HBox和单列面板类VBox"><a href="#单行面板类HBox和单列面板类VBox" class="headerlink" title="单行面板类HBox和单列面板类VBox"></a>单行面板类HBox和单列面板类VBox</h3><p><code>javafx.scene.layout.HBox</code></p><p>单行面板也称水平面板，是在一行沿水平方向排列节点的方式。</p><ul><li><code>javafx.scene.layout.HBox</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public HBox()</td><td style="text-align:center">创建一个空的单行面板</td></tr><tr><td style="text-align:center">public HBox(double spacing)</td><td style="text-align:center">创建单行面板，其上节点的间距为spacing像素</td></tr><tr><td style="text-align:center">public HBox(Node… children)</td><td style="text-align:center">创建单行面板，并将参数指定的多个节点添加到面板中，节点的间距为0像素</td></tr><tr><td style="text-align:center">public HBox(double spacing, Node… children)</td><td style="text-align:center">创建单行面板，并将参数指定的多个节点添加到面板中，节点间距为spacing像素</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.HBox</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSpacing(double value)</td><td style="text-align:center">设置面板中节点之间的间距</td></tr><tr><td style="text-align:center">public static void setMargin(Node child, Insets value)</td><td style="text-align:center">为面板中的节点设置外边距</td></tr><tr><td style="text-align:center">pulic final void setAlignment(Pos value)</td><td style="text-align:center">设置面板中节点整体对齐方式，value是枚举Pos中的值</td></tr></tbody></table></div><h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p><code>javafx.scene.Group</code>,</p><p>Group是Parent的子类，不是Pane的子类。</p><p>Group 面板是一个组， 它包含一个可观察列表类ObservableList的对象，用于存放组的节点，这些节点只是按照出现在改组中的顺序显示，并不负责节点的布局，所以添加到Group中的控件通常需要绝对定位。</p><p>Group的主要作用是将一组节点组织在一起，并允许这些节点作为一个组进行操作。</p><p>Group是一个可以通过坐标设置控件位置的容器，而且控件和控件之间可以重叠，例如把两个控件的layoutX以及layoutY坐标都设置为0，那么这两个控件都会在Group的左上角出现，同时会重叠。</p><h2 id="JavaFX的辅助类"><a href="#JavaFX的辅助类" class="headerlink" title="JavaFX的辅助类"></a>JavaFX的辅助类</h2><p>辅助类<code>helper class</code>是用来描述节点属性的</p><ul><li>颜色类Color</li><li>字体类Font</li><li>图像类Image</li><li>图像显示类ImageView</li></ul><p>辅助类不都是Node类的子类</p><h3 id="颜色类Color"><a href="#颜色类Color" class="headerlink" title="颜色类Color"></a>颜色类Color</h3><p><code>javafx.scene.paint.Color</code>是抽象类Paint的子类，Paint是用于绘制节点的类</p><p>在JavaFX中每一种颜色都看成是由红、绿、蓝三原色和透明度组成</p><ul><li><code>javafx.scene.paint.Color</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Color(double red, double green, double blue, double opacity)</td><td style="text-align:center">用指定的red/green/blue三原色和透明度opacity创建对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.paint.Color</code>类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static Color color(double red, double green, double blue)</td><td style="text-align:center">用指定的red、green、blue值创建一个不透明的Color对象。参数取值范围均为0.0~1.0，与构造方法意义相同。</td></tr><tr><td style="text-align:center">public static Color color(double red, double green, double blue, double opacity)</td><td style="text-align:center">用指定的red、green、blue值及透明度opacity创建Color对象。参数取值范围均为0.0~1.0,与构造方法意义相同。</td></tr><tr><td style="text-align:center">public static Color rgb(int red, int green, int blue)</td><td style="text-align:center">用指定的red、green、blue值创建一个不透明的Color对象。参数取值范围均为0~255，与构造方法意义相似</td></tr><tr><td style="text-align:center">public static Color rgb(int red, int green, int blue, int opacity)</td><td style="text-align:center">用指定的red、green、blue值及透明度opacity创建Color对象。颜色参数取值范围均为0~255，opacity取值在0.0~1.0。</td></tr><tr><td style="text-align:center">public Color brighter()</td><td style="text-align:center">返回一个具有更大red、green、blue值的Color对象</td></tr><tr><td style="text-align:center">public Color darker()</td><td style="text-align:center">创建一个比Color对象更暗的Color对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.paint.Color</code>类中常用的代表颜色的静态常量</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">静态常量名</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">BEIGE</td><td style="text-align:center">浅褐色</td></tr><tr><td style="text-align:center">BROWN</td><td style="text-align:center">棕色</td></tr><tr><td style="text-align:center">GOLD</td><td style="text-align:center">金色</td></tr><tr><td style="text-align:center">LIGHTGRAY</td><td style="text-align:center">浅灰色</td></tr><tr><td style="text-align:center">ORANGE</td><td style="text-align:center">桔黄色</td></tr><tr><td style="text-align:center">SILVER</td><td style="text-align:center">银色</td></tr><tr><td style="text-align:center">BLACK</td><td style="text-align:center">黑色</td></tr><tr><td style="text-align:center">CYAN</td><td style="text-align:center">蓝青色</td></tr><tr><td style="text-align:center">GRAY</td><td style="text-align:center">灰色</td></tr><tr><td style="text-align:center">MAGENTA</td><td style="text-align:center">红紫色</td></tr><tr><td style="text-align:center">PINK</td><td style="text-align:center">粉红色</td></tr><tr><td style="text-align:center">WHITE</td><td style="text-align:center">白色</td></tr><tr><td style="text-align:center">BLUE</td><td style="text-align:center">蓝色</td></tr><tr><td style="text-align:center">DARKGRAY</td><td style="text-align:center">深蓝色</td></tr><tr><td style="text-align:center">GREEN</td><td style="text-align:center">绿色</td></tr><tr><td style="text-align:center">NAVY</td><td style="text-align:center">深蓝色</td></tr><tr><td style="text-align:center">RED</td><td style="text-align:center">红色</td></tr><tr><td style="text-align:center">YEALLOW</td><td style="text-align:center">黄色</td></tr></tbody></table></div><h3 id="字体类Font"><a href="#字体类Font" class="headerlink" title="字体类Font"></a>字体类Font</h3><p><code>javafx.scene.text.Font</code></p><p>描述字体名、字体粗细和字体大小的类。</p><ul><li><code>javafx.scene.text.Font</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public Font(double size)</td><td style="text-align:center">创建字体大小为size的字体对象，使用默认的System字体。size 的单位是磅值，1磅值为1/72英寸</td></tr><tr><td style="text-align:center">public Font(String name, double size)</td><td style="text-align:center">用给定的字体名称name和大小为size的值创建字体对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.text.Font</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public static Font font(String family, double size)</td><td style="text-align:center">创建字体名为family，大小为size的Font对象</td></tr><tr><td style="text-align:center">public static Font font(String family, FontWeight weight, double size)</td><td style="text-align:center">创建指定名称、字体粗细和大小的字体对象。字体粗细weight的取值在枚举FontWeight中定义,常用有BOLD(粗体) 、LIGHT(轻体)、NORMAL(正常体)</td></tr><tr><td style="text-align:center">public static Font font(String family, FontWeight weight, FontPosture posture, double size)</td><td style="text-align:center">创建指定名称、字体粗细、字体形态和大小的字体对象。字体形态posture的取值在枚举FontPosture中定义,为ITALIC(斜体)和默认的REGULAR(正常体)</td></tr><tr><td style="text-align:center">public final String getFamily()</td><td style="text-align:center">返回系统默认的字体</td></tr><tr><td style="text-align:center">public static List &lt; String &gt; getFamilies()</td><td style="text-align:center">返回字体集名称的列表</td></tr><tr><td style="text-align:center">public static List &lt; String &gt; getFontNames()</td><td style="text-align:center">返回所有字体完整名称的列表，包括字体集和粗细</td></tr></tbody></table></div><h3 id="图像类Image和图像显示类ImageView"><a href="#图像类Image和图像显示类ImageView" class="headerlink" title="图像类Image和图像显示类ImageView"></a>图像类Image和图像显示类ImageView</h3><p>JavaFX支持的图像格式有.jpg、.gif、.png和.bmp等。</p><ul><li><code>javafx.scene.image.Image</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public Image(String url)</td><td style="text-align:center">用图像的url地址创建图像</td></tr><tr><td style="text-align:center">public Image(String url, boolean backgroundLoading)</td><td style="text-align:center">用图像的url地址创建图像，并设置是否在后台加载(异步加载)图像</td></tr><tr><td style="text-align:center">public Image(String url, double requestedWidth, double requestedHeight, boolean preserveRatio, boolean smooth)</td><td style="text-align:center">创建图像，并指定图像边界框的宽和高(像素)，preserveRatio用于设置是否保持图像的高宽比，smooth用于设置是否使用平滑图像算法显示图像</td></tr><tr><td style="text-align:center">public Image(String url, double requestedWidth, double requestedHeight, boolean preserveRatio, boolean smooth, boolean backgroundLoading)</td><td style="text-align:center">参数意义同上，并设置是否在后台加载图像</td></tr></tbody></table></div><p>ImageView对象是一个可以显示图像的对象。<br>ImageView是一个包装器对象，用来引用Image对象。</p><ul><li><code>javafx.scene.image.ImageView</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public ImgaeView()</td><td style="text-align:center">创建一个不包含图像的lmageView对象</td></tr><tr><td style="text-align:center">public imageView(String url)</td><td style="text-align:center">用指定图像对象的url创建ImageView对象</td></tr><tr><td style="text-align:center">public imageView(Image image)</td><td style="text-align:center">用指定图像对象image创建ImageView对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.image.ImageView</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public final void setImage(Image value)</td><td style="text-align:center">设置显示的图像</td></tr><tr><td style="text-align:center">public final void setFitWidth(double value)</td><td style="text-align:center">设置图像视图的宽度为value像素</td></tr><tr><td style="text-align:center">public final void setFitHeight</td><td style="text-align:center">设置图像视图的高度为value像素</td></tr><tr><td style="text-align:center">public final void setPreserveRatio(boolean value)</td><td style="text-align:center">设置图像是否保持缩放比例</td></tr><tr><td style="text-align:center">public final void setSmooth(boolean value)</td><td style="text-align:center">设置是否使用平滑图像算法显示图像</td></tr><tr><td style="text-align:center">public final void setViewport(Rectangle2D value)</td><td style="text-align:center">设置图像显示窗口，Rectangle2D对象value中需给出x坐标、y坐标、宽度和高度的像素值</td></tr></tbody></table></div><p>在ImageView类定义了x和y属性，用于表示ImageView图像视图的原点坐标。</p><p>image属性表示图像。fitWidth和fitHeight两个属性表示图像改变大小后将边界框调整到适合图像的宽度和高度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span> <span class="variable">img</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(<span class="string">&quot;image/test.jpg&quot;</span>);</span><br><span class="line"><span class="type">ImageView</span> <span class="variable">iv2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageView</span>();</span><br><span class="line">iv2.setImage(img);<span class="comment">//绑定组件</span></span><br><span class="line"></span><br><span class="line">iv2.setFifWidth(<span class="number">80</span>);<span class="comment">//视图宽度为80像素</span></span><br><span class="line">iv2.setPreserveRatio(<span class="literal">true</span>);<span class="comment">//设置保持缩放比例</span></span><br><span class="line">iv2.setSmooth(<span class="literal">true</span>);<span class="comment">//设置平滑显示图像</span></span><br><span class="line">iv2.setCache(<span class="literal">true</span>);<span class="comment">//设置缓冲以提高性能</span></span><br></pre></td></tr></table></figure><p>一个Image对象可以被多个ImageView对象所共享，本例中图像对象im被两个ImageView对象iv2和iv3所共享。</p><p>但ImageView对象是不可以共享的，即不能将一个ImageView对象多次放入一个面板或一个场景中。</p><p>由于ImageView类也是Node类的子类，因此也可以对它进行变换、缩放和模糊等特效操作。</p><h2 id="JavaFX的属性绑定和绑定属性"><a href="#JavaFX的属性绑定和绑定属性" class="headerlink" title="JavaFX的属性绑定和绑定属性"></a>JavaFX的属性绑定和绑定属性</h2><p>以将一个目标对象与一个源对象绑定，如果源对象中的值改变了，目标对象的值也将自动改变。</p><p>目标对象称为绑定对象或绑定属性，源对象称为可绑定对象或可观察对象。</p><p>目标对象与源对象的绑定是通过<code>javafx.beans.property.Property</code>接口中定义的<code>void bind(ObservableValue &lt; ? extends T &gt; observable)</code>方法实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.bind(source); <span class="comment">//源对象source相当于自变量,目标对象target相当于因变量</span></span><br></pre></td></tr></table></figure><p>JavaFX类中声明绑定属性的类型是形如XxxProperty样式。</p><p>JavaFX为基本类型、字符串类型和集合类型定义了绑定属性类型。如基本类型double的绑定属性类型是DoubleProperty，该类型是抽象类，所以不能用它创建对象，而必须用其子类SimpleDoubleProperty来创建具体的对象。</p><ul><li>JavaFX部分数据类型与其绑定属性类型及用于创建属性绑定对象所对应的子类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">绑定属性类型(抽象类)</th><th style="text-align:center">用于创建绑定属性对象的子类</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">IntgerProperty</td><td style="text-align:center">SimpleIntgerProperty</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">LongProperty</td><td style="text-align:center">SimpleLongProperty</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">FloatProperty</td><td style="text-align:center">SimpleFloatProperty</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">DoubleProperty</td><td style="text-align:center">SimpleDoubleProperty</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">BooleanProperty</td><td style="text-align:center">SimpleBooleanProperty</td></tr><tr><td style="text-align:center">String</td><td style="text-align:center">StringProperty</td><td style="text-align:center">SimpleStringProperty</td></tr><tr><td style="text-align:center">List</td><td style="text-align:center">ListProperty</td><td style="text-align:center">SimpleListProperty</td></tr><tr><td style="text-align:center">Set</td><td style="text-align:center">SetProperty</td><td style="text-align:center">SimpleSetProperty</td></tr><tr><td style="text-align:center">Map</td><td style="text-align:center">MapProperty</td><td style="text-align:center">SimpleMapProperty</td></tr></tbody></table></div><p>虽然绑定属性要用相应的绑定属性类型来声明，但创建该绑定属性时却要用其相应的子类来创建。</p><p>绑定属性：在类中声明为一种特殊数据类型的成员变量。</p><p>属性绑定：两个绑定属性之间建立一个绑定关系，这样当源对象的绑定属性值发生变化时，目标对象的绑定属性就会随之变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c.setCenterX(<span class="number">100</span>);</span><br><span class="line">c.setCenterY(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">c.centerXProperty().bind(pane.widthProperty().divide(<span class="number">2</span>));</span><br><span class="line">c.centerYProperty().bind(pane.heightProperty().divide(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>对于数值类型的绑定属性，如<code>DoubleProperty()</code>都具有<code>add()</code>、<code>substract()</code>、<code>multiply()</code>、<code>divide()</code>方法。</p><p>JavaFX属性的主要功能是属性绑定和事件处理。</p><p>通过属性的<code>addListener()</code>方法可以为其注册监听者，通过属性的<code>bind()</code>方法可以实现属性绑定。</p><p>利用<code>bind()</code>方法进行属性绑定时，只是目标对象随着源对象的变化而变化，这种绑定称为<code>单向绑定</code>。<br>有时候需要同步两个属性，即目标和源双方都既是绑定对象也是可观察对象，这时可使用<code>bindBidirectional()</code>方法进行属性的<code>双向绑定</code>。</p><p>属性双向绑定后，两者中不管哪一个发生变化，另一方也会被相应地更新。</p><h2 id="JavaFX常用控件"><a href="#JavaFX常用控件" class="headerlink" title="JavaFX常用控件"></a>JavaFX常用控件</h2><p>标签、按钮、复选框、单选按钮、文本框、文本区、组合框、列表视图等，控件是节点Node的子类。</p><p>与面板不同，控件类对象不能再包含其他控件，控件的作用是完成与用户的交互，包括接收用户的命令、接收用户的输入或用户的选择或向用户显示信息等。</p><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">标签</td><td style="text-align:center">Label</td><td style="text-align:center">菜单条</td><td style="text-align:center">MenuBar</td></tr><tr><td style="text-align:center">命令按钮</td><td style="text-align:center">Button</td><td style="text-align:center">菜单</td><td style="text-align:center">Menu</td></tr><tr><td style="text-align:center">单选按钮</td><td style="text-align:center">RadioButton</td><td style="text-align:center">菜单项</td><td style="text-align:center">MenuItem</td></tr><tr><td style="text-align:center">文本框</td><td style="text-align:center">TextField</td><td style="text-align:center">单选菜单按钮</td><td style="text-align:center">RadioMenuItem</td></tr><tr><td style="text-align:center">密码文本框</td><td style="text-align:center">PsswordField</td><td style="text-align:center">复选菜单按钮</td><td style="text-align:center">CheckMenuItem</td></tr><tr><td style="text-align:center">文本区</td><td style="text-align:center">TextArea</td><td style="text-align:center">弹出菜单</td><td style="text-align:center">ContextMenu</td></tr><tr><td style="text-align:center">复选框</td><td style="text-align:center">CheckBox</td><td style="text-align:center">滚动条</td><td style="text-align:center">ScrollBar</td></tr><tr><td style="text-align:center">组合框</td><td style="text-align:center">ComboBox</td><td style="text-align:center">进度条</td><td style="text-align:center">ProgressBar</td></tr><tr><td style="text-align:center">选择框</td><td style="text-align:center">ChoiceBox</td><td style="text-align:center">滑动条</td><td style="text-align:center">Slider</td></tr><tr><td style="text-align:center">列表视图</td><td style="text-align:center">ListView</td><td style="text-align:center">工具栏</td><td style="text-align:center">ToolBar</td></tr><tr><td style="text-align:center">表格视图</td><td style="text-align:center">TableView</td><td style="text-align:center">工具提示</td><td style="text-align:center">ToolTip</td></tr><tr><td style="text-align:center">树视图</td><td style="text-align:center">TreeView</td><td style="text-align:center">颜色选择器</td><td style="text-align:center">ColorPicker</td></tr><tr><td style="text-align:center">选项卡面板</td><td style="text-align:center">TabPane</td><td style="text-align:center">日期选择器</td><td style="text-align:center">DatePicker</td></tr><tr><td style="text-align:center">选项卡</td><td style="text-align:center">Tab</td><td style="text-align:center">对话框</td><td style="text-align:center">Dialog</td></tr><tr><td style="text-align:center">微调选择器</td><td style="text-align:center">Spinner</td><td style="text-align:center">超链接</td><td style="text-align:center">Hyperlink</td></tr></tbody></table></div><h3 id="标签类Label"><a href="#标签类Label" class="headerlink" title="标签类Label"></a>标签类Label</h3><p><code>javafx.scene.control.Label</code></p><p>用来显示文字、图片的控件，标签上的内容只能显示不可编辑，所以标签常用来给文本控件或其他控件作为标签用。</p><ul><li><code>javafx.scene.control.Label</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public Label()</td><td style="text-align:center">创建一个没有文字与图像的标签</td></tr><tr><td style="text-align:center">public Label(String text)</td><td style="text-align:center">创建标签，并以text为标签上的文字</td></tr><tr><td style="text-align:center">public Label(String text, Node graphic)</td><td style="text-align:center">以text为文字、以graphic为图形创建标签</td></tr></tbody></table></div><p>以Labeled类中定义的方法可为标签和按钮所共用</p><ul><li><code>javafx.scene.control.Labeled</code>类中标签和按钮的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置控件上的文本</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置控件上的字体</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">设置控件上的图形为value</td></tr><tr><td style="text-align:center">public final vaoid setAlignment(Pos value)</td><td style="text-align:center">设置控件上文本和节点的对齐方式为value, value的取值是枚举Pos中的枚举常量</td></tr><tr><td style="text-align:center">public final void setTextFill(Paint value)</td><td style="text-align:center">设置文本的颜色</td></tr><tr><td style="text-align:center">public final void setWrapText(boolean value)</td><td style="text-align:center">设置如果文本超出宽度，是否自动换行</td></tr><tr><td style="text-align:center">public final void setUnderline(boolean value)</td><td style="text-align:center">设置文本是否加下画线</td></tr><tr><td style="text-align:center">public fianl void setConetntDisplay(ContentDisplay value)</td><td style="text-align:center">使用枚举ContentDisplay的常量值TOP、BOTTOM、LEFT和RIGHT等设置节点相对于文本的位置</td></tr></tbody></table></div><h3 id="文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane"><a href="#文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane" class="headerlink" title="文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane"></a>文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane</h3><p>文本编辑控件是可以接收用户的文本输入并具有一定编辑功能的界面元素。</p><p>文本编辑控件分为三种：</p><ul><li>第一种是<code>单行文本编辑控件</code>，简称文本框，也称文本行；</li><li>第二种是<code>密码文本框控件</code>，是通过PasswordField类实现的；</li><li>第三种是<code>多行文本编辑控件</code>，简称文本区，是通过TextArea类实现的。</li></ul><p>TextField类和TextArea类是javafx.scene.control.TextInputControl类的子类，而PasswordField类是TextField的子类。</p><ul><li><code>javafx.scene.control.TextInputControl</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public void appendText(String text)</td><td style="text-align:center">将文本text追加到输入框中</td></tr><tr><td style="text-align:center">public void clear()</td><td style="text-align:center">清除文本控件中的所有文本</td></tr><tr><td style="text-align:center">public void deleteText(int start, int end)</td><td style="text-align:center">在文本控件中删除start与end之间的文本</td></tr><tr><td style="text-align:center">public final String getSelectedText()</td><td style="text-align:center">返回选中的文本</td></tr><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回文本控件中的所有文本</td></tr><tr><td style="text-align:center">public String getText(int start, int end)</td><td style="text-align:center">返回start与end之间的文本</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置文本组件是否可编辑</td></tr><tr><td style="text-align:center">public final boolean isEditable()</td><td style="text-align:center">判断文本组件是否可编辑</td></tr><tr><td style="text-align:center">public void paste()</td><td style="text-align:center">将剪贴板中的内容粘贴到文本中，用于替换当前选择的文本。如果没有选择的文本，则插人到当前光标所在的位置</td></tr><tr><td style="text-align:center">public void selectAll()</td><td style="text-align:center">选中文本控件中的所有文本</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置文本控件中文本的字体</td></tr><tr><td style="text-align:center">public fianl void setText(String value)</td><td style="text-align:center">将字符串value设置为文本控件中的文本</td></tr><tr><td style="text-align:center">public final void setPromptText(String value)</td><td style="text-align:center">设置文本框的提示文本</td></tr></tbody></table></div><h4 id="文本框控件TextField"><a href="#文本框控件TextField" class="headerlink" title="文本框控件TextField"></a>文本框控件TextField</h4><ul><li><code>javafx.scene.control.TextField</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TextField()</td><td style="text-align:center">创建一个不包含文本的空白文本框</td></tr><tr><td style="text-align:center">public TextField(String text)</td><td style="text-align:center">创建初始文本为text的文本框</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TextField</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置文本框中文本的对齐方式，value是枚举Pos中的值</td></tr><tr><td style="text-align:center">public final void setPrefColumnCount(int value)</td><td style="text-align:center">设置文本框的显示宽度为value列</td></tr><tr><td style="text-align:center">public final void setOnAction(EventHandler &lt; ActionEvent &gt; value)</td><td style="text-align:center">设置文本框动作事件监听者</td></tr></tbody></table></div><h4 id="密码文本框控件PasswordField"><a href="#密码文本框控件PasswordField" class="headerlink" title="密码文本框控件PasswordField"></a>密码文本框控件PasswordField</h4><p><code>javafx.scene.control.PasswordField</code></p><p>只有一个无参的构造方法public PasswordField（）。密码文本框控件多用其父类的方法。</p><h4 id="文本区控件TextArea与滚动面板ScrollPane"><a href="#文本区控件TextArea与滚动面板ScrollPane" class="headerlink" title="文本区控件TextArea与滚动面板ScrollPane"></a>文本区控件TextArea与滚动面板ScrollPane</h4><p><code>javafx.scene.control.TextArea</code></p><p>文本区实际上是多行文本输入框，因为文本框只能输入一行文字，所以在需要输入和显示较多的文字时， 就可使用文本区。</p><ul><li><code>javafx.scene.control.TextArea</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TextArea()</td><td style="text-align:center">创建一个不包含文本的空文本区</td></tr><tr><td style="text-align:center">public TextArea(String text)</td><td style="text-align:center">创建一个默认文本为text的文本区</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TextArea</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setPrefColumnCount(int value)</td><td style="text-align:center">设置文本区的显示列数为value</td></tr><tr><td style="text-align:center">public final void setPreRow(int value)</td><td style="text-align:center">设置文本区的显示行数为value</td></tr><tr><td style="text-align:center">public final void setWrapText(boolean value)</td><td style="text-align:center">设置当文本区行的长度大于文本区的宽度时是否自动换行，Value的默认值为false，不换行</td></tr></tbody></table></div><p>文本区中显示的文本行数和列数都有可能超出文本区的范围，这时就需要使用滚动条来进行滚动操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口中利用面板组织文本编辑控件，并利用滚动面板实现文本区的滚动功能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Label;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextField;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.PasswordField;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ScrollPane;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Insets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_11</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Label</span> <span class="variable">lab1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;用户名: &quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Label</span> <span class="variable">lab2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;密码: &quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">PasswordField</span> <span class="variable">pf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PasswordField</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;你好,我是文本区&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">GridPane</span> <span class="variable">rootGP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridPane</span>();</span><br><span class="line">rootGP.setPadding(<span class="keyword">new</span> <span class="title class_">Insets</span>(<span class="number">10</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">8</span>));</span><br><span class="line">rootGP. setHgap(<span class="number">5</span>);</span><br><span class="line">rootGP. setVgap(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">tf.setPromptText(<span class="string">&quot;输人用户名&quot;</span>);</span><br><span class="line">rootGP.add(lab1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">rootGP.add(tf, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">pf.setPromptText(<span class="string">&quot;输人密码&quot;</span>);</span><br><span class="line">rootGP.add(lab2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">rootGP.add(pf, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认密码&quot;</span>);</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;编辑文本&quot;</span>);</span><br><span class="line">rootGP.add(bt1,<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">rootGP.add(bt2,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">ScrollPane</span> <span class="variable">scro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ta);</span><br><span class="line">ta.setPrefColumnCount(<span class="number">12</span>);</span><br><span class="line">ta.setEditable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">rootGP.add(scro, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(rootGP, <span class="number">400</span>, <span class="number">120</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;网格与文本控件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene) ;</span><br><span class="line">primaryStage.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_11%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_11运行结果"><blockquote><p>JavaFX的任何节点都可放置在滚动面板ScrollPane中。如果控件太大以致不能在显示区内完整显示时，滚动面板ScrollPane提供了垂直和水平方向的滚动支持。</p></blockquote><h3 id="复选框CheckBox和单选按钮RadioButton"><a href="#复选框CheckBox和单选按钮RadioButton" class="headerlink" title="复选框CheckBox和单选按钮RadioButton"></a>复选框CheckBox和单选按钮RadioButton</h3><p><code>javafx.scene.control.CheckBox</code><br><code>javafx.scene.control.RadioButton</code></p><p>复选框和单选按钮都是让用户选取项目的一种组件，用户利用该组件来获得相应的输入。</p><p>其中复选框可以单独使用，而单选按钮必须配合javafx.scene.control.ToggleGroup类将其组成单选按钮组来使用，所有隶属于同一ToggleGroup组的RadioButton组件具有互斥属性。</p><ul><li><code>javafx.scene.control.CheckBox</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public CheckBox()</td><td style="text-align:center">创建一个没有文字、初始状态未被选中的复选框</td></tr><tr><td style="text-align:center">public CheckBox(String box)</td><td style="text-align:center">创建一个以text为文字、初始状态未被选中的复选框</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.CheckBox</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSelected(boolean value)</td><td style="text-align:center">设置复选框是否被选中</td></tr><tr><td style="text-align:center">public final boolean isSelected</td><td style="text-align:center">判断复选框是否被选中，若选中则返回true，否则返回false</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置复选框上文字为value</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口中组织复选框和单选按钮。</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.RadioButton;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ToggleGroup;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.VBox;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_12</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;粗体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;斜体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;楷体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Button</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;我是文本区&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    chk2.setSelected(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">3</span>);</span><br><span class="line">        vbL.getChildren().addAll(chk1, chk2, chk3);</span><br><span class="line">        </span><br><span class="line">        rb1.setSelected(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ToggleGroup</span> <span class="variable">gro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToggleGroup</span>();</span><br><span class="line">        rb1.setToggleGroup(gro);</span><br><span class="line">        rb2.setToggleGroup(gro);</span><br><span class="line">        rb3.setToggleGroup(gro);        </span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">3</span>);        </span><br><span class="line">        vbR.getChildren().addAll(rb1, rb2, rb3);</span><br><span class="line">        </span><br><span class="line">        <span class="type">HBox</span> <span class="variable">hB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>(<span class="number">20</span>);</span><br><span class="line">        hB.getChildren().addAll(bt1, bt2);</span><br><span class="line">        hB.setAlignment(Pos.CENTER);</span><br><span class="line">        </span><br><span class="line">        <span class="type">BorderPane</span> <span class="variable">rootBP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">        ta.setPrefColumnCount(<span class="number">10</span>);<span class="comment">//宽度10列</span></span><br><span class="line">        ta.setPrefRowCount(<span class="number">3</span>) ;<span class="comment">//显示高度3行</span></span><br><span class="line">        ta.setWrapText(<span class="literal">true</span>);<span class="comment">//自动换行</span></span><br><span class="line">        </span><br><span class="line">        rootBP.setLeft(vbL);</span><br><span class="line">        rootBP.setRight(vbR);</span><br><span class="line">        rootBP.setCenter(ta);</span><br><span class="line">        rootBP.setBottom(hB) ;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>( rootBP);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;复选框与单选按钮&quot;</span>);</span><br><span class="line">        primaryStage.setScene( scene) ;</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_12%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_12运行结果"><h3 id="选项卡面板TabPane和选项卡Tab"><a href="#选项卡面板TabPane和选项卡Tab" class="headerlink" title="选项卡面板TabPane和选项卡Tab"></a>选项卡面板TabPane和选项卡Tab</h3><p>在JavaFX中选项卡是由javafx.scene.control.Tab类实现，选项卡必须放入选项卡面板中，选项卡面板是由javafx.scene.control.TabPane类实现的。</p><p>可以把多个组件放在多个不同选项卡中，从而使页面不致拥挤，其选项卡的形式也能为程序增色不少。<br>用户只需单击每个选项卡的标题，就可以切换到不同的选项卡。<br>选项卡面板中的每个选项卡都可以直接放入节点，也可以添加一个面板来组织其他节点。</p><ul><li><code>javafx.scene.control.TabPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TabPane()</td><td style="text-align:center">创建一个不含选项卡的选项卡面板对象</td></tr><tr><td style="text-align:center">public TabPane(Tab… tabs)</td><td style="text-align:center">创建选项卡面板，并将参数指定的多个选项卡添加到选项卡面板中</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TabPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTabMaxHeight(double value)</td><td style="text-align:center">设置选项卡面板的最大高度值为value</td></tr><tr><td style="text-align:center">public final void setTabMaxWidth(double value)</td><td style="text-align:center">设置选项卡面板的最大宽度值为value</td></tr><tr><td style="text-align:center">public final void setTabMinHeight(double value)</td><td style="text-align:center">设置选项卡面板的最小高度值为value</td></tr><tr><td style="text-align:center">public final void setTabMinWidth(double value)</td><td style="text-align:center">设置选项卡面板的最小宽度值为value</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Tab &gt; getTabs()</td><td style="text-align:center">返回选项卡面板中的节点列表</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Tab</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Tab()</td><td style="text-align:center">创建一个不含标题的选项卡对象</td></tr><tr><td style="text-align:center">public Tab(String text)</td><td style="text-align:center">创建一个标题为text的选项卡对象</td></tr><tr><td style="text-align:center">public Tab(String text, Node content)</td><td style="text-align:center">创建一个标题为text且包含节点content的选项卡对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Tab</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setContent(Node value)</td><td style="text-align:center">设置选项卡上包含的节点为value</td></tr><tr><td style="text-align:center">public final void setTooltip(Tooltip value)</td><td style="text-align:center">当鼠标悬停在选项卡上时提示信息为value</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置选项卡的标题为value</td></tr><tr><td style="text-align:center">public final void setStyle(String value)</td><td style="text-align:center">设置选项卡的样式</td></tr><tr><td style="text-align:center">public final void setClosable(boolean value)</td><td style="text-align:center">设置选项卡是否可以被关闭</td></tr></tbody></table></div><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>JavaFX的主类必须继承<code>javafx.application.Application</code>类并实现start()方法。JVM自动创建一个主舞台对象并将该对象的引用传递给start()方法。</li><li>任何JavaFX程序至少要有一个舞台和一个场景，舞台和场景共同构建了JavaFX程序的图形界面，它是构建应用程序的起点。</li><li>场景Scene中可以包含面板Pane或控件Control，但不能包含形状Shape和图像显示类ImageView。</li><li>虽然可以直接将节点置于场景中，但更好的办法是先将节点放入面板中，然后再将面板放入场景中。Pane类的对象通常用作显示形状的画布，但其子类面板主要用于包含和组织节点。</li><li>场景图是场景中所有节点构成的树形结构图。</li><li>Node类是所有节点的根类，该类中定义的属性和方法被其子类所共享。</li><li>Pane类是所有面板的基类，该类的getChildren()方法返回值是一个ObservableList对象，该对象是一个用于存储面板中节点的列表。</li><li>使用<code>javafx.scene.image.Image</code>类装载图像， 用<code>javafx.scene.image.ImageView</code>类显示图像。</li><li>绑定属性和属性绑定是两个不同的概念。绑定属性是指在类中声明为一种特殊数据类型的成员变量；而属性绑定则是指在两个绑定属性之间建立起一种绑定关系，这样当原对象的绑定属性值发生变化时，目标对象的绑定属性值就会随之变化。</li><li>声明绑定属性时，必须用绑定属性类型来声明绑定属性。</li><li>因为ToggleGroup不是节点类Node的子类，所以ToggleGroup类创建的单选按钮组对象不能加入到面板中。</li><li>JavaFX的任何节点都可放置在滚动面板ScrollPane中。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>JavaFX窗口的结构包含哪些内容？</li><li>JavaFX程序的主舞台是如何生成的？主舞台与其他舞台有何区别？如何显示一个舞台？</li><li>如何创建Scene对象？如何在舞台中设置场景？</li><li>什么是节点？什么是面板？什么是场景图？</li><li>可以直接将控件Control和面板Pane加入到场景Scene中吗？可以直接将形状Shape或者图像视图ImageView加入到场景中吗？</li><li>什么是属性绑定？单向绑定和双向绑定有何区别？是否所有属性都可进行双向绑定？</li><li>创建Color对象一定要用其构造方法吗？创建Font对象一定要用其构造方法吗？</li><li>编程实现输出系统中所有可用的字体？</li><li>可以将一个Image设置到多个ImageView上吗？ 可以将一个ImageView显示多次吗？</li><li>如何将一个节点加入到面板中？</li><li>创建一个HBox面板对象，并设置其上控件间距为10像素，然后将两个带有文字和图像的按钮添加到HBox面板中。</li><li>创建一个栈面板对象，并将一幅图像放置在栈面板中，然后将栈面板逆时针旋转45°。</li><li>编写一个JavaFX程序，在网格面板中，第一行放置标签和文本框，第二行设置文本区和按钮。</li><li>编写一个JavaFX程序，顺时针旋转90°显示三行文字，并对每行文字设置一个随机颜色和透明度，并设置不同的外观样式。</li><li>创建一个具有三个选项卡的选项卡面板，在每个选项卡中放置一个带有文字的标签。</li></ul><h1 id="第十五章-事件处理"><a href="#第十五章-事件处理" class="headerlink" title="第十五章 事件处理"></a>第十五章 事件处理</h1><p>使控件能够响应并处理用户的操作，这就是事件处理。</p><p>消息处理、事件驱动是面向对象编程技术的主要特点。</p><p>路线：</p><ul><li>创建窗口：利用主舞台和场景创建窗口。</li><li>创建节点：创建组成图形界面元素的各种节点，如按钮、文本框等。</li><li>构建场景图：根据具体需要利用面板组织窗口上各节点的布局。</li><li>响应事件：定义图形用户界面的事件和界面各元素对不同事件的响应，从而实现图形用户界面与用户的交互功能。</li></ul><h2 id="Java语言的事件处理机制——委托事件模型"><a href="#Java语言的事件处理机制——委托事件模型" class="headerlink" title="Java语言的事件处理机制——委托事件模型"></a>Java语言的事件处理机制——委托事件模型</h2><p>用户在界面中输入命令是通过键盘或对特定界面元素（如按钮）单击鼠标来实现的。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>谓事件（event）就是用户使用鼠标或键盘对窗口中的控件进行交互时所发生的事情。</p><p>事件用于描述发生了什么事情，对这些事件做出响应的程序，称为事件处理程序（event handler）。</p><h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>谓事件源（event source）就是能够产生事件并触发它的控件，如一个按钮就是按钮单击动作事件的事件源。</p><h4 id="事件监听者"><a href="#事件监听者" class="headerlink" title="事件监听者"></a>事件监听者</h4><p>把对事件进行处理的方法放在一个类对象中，这个类对象就是事件监听者（listener），简称<br>监听者。</p><p>事件源通过调用相应的方法将某个对象设置为自己的监听者，监听者有专门的方法来处理事件。</p><p>当事件源上发生事件时，事件监听者能够监听到，并调用相应的方法对发生的事件做出相应的处理。</p><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p><code>javafx.event</code>包中包含了事件类和用来处理事件的接口。</p><p>为了让监听者能对事件源发生的事件进行处理，创建该监听者对象的类必须声明实现相应的监听者接口，即必须在类中具体定义该接口中的所有方法，以供监听者自动调用相应事件处理方法来完成对应事件处理的任务，这些处理事件的方法就是事件处理程序。</p><h3 id="委托事件模型"><a href="#委托事件模型" class="headerlink" title="委托事件模型"></a>委托事件模型</h3><p>委托事件模型（delegation event model）将事件源（如命令按钮）和对事件做出的具体处理（利用监听者来对事件进行具体的处理）分离开来。</p><p>控件（事件源）不处理自己的事件，而是将事件处理委托给外部的处理实体（监听者）。</p><p>事件对象（eventobject）表示事件的内容，包含了与事件相关的任何属性，事件对象内部封装了一个对事件源的引用和其他信息，这个事件对象将作为参数自动传递给处理该事件的方法。</p><p>委托事件模型就是由产生<em>事件的对象（事件源）</em>、<em>事件对象</em>以及<em>事件监听者</em>对象之间所组成的关联关系。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%A7%94%E6%89%98%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" class="" title="委托事件模型的工作原理"><p>一个监听者可以为很多事件源服务，一个事件源可以有多个相同或不同类型的监听者。</p><p>多事件监听：一个控件对应多个事件。</p><p>单事件监听：多个控件对应一个事件。</p><p>事件监听者必须是一个对应的事件监听者接口的实例。JavaFX定义了一个对于事件T的统一的监听者接口<code>EventHandler &lt; T extends Event &gt;</code>。</p><p>ActionEvent 的每个监听者接口都应实现<code>handle(ActionEvent e)</code>方法，从而处理一个动作事件ActionEvent。</p><p>事件监听者对象必须通过事件源进行注册，注册方法依赖于事件类型。</p><p>动作事件<code>ActionEvent</code>，事件源是使用<code>setOnAction()</code>方法进行注册。<br>对于鼠标按下事件，事件源是使用<code>setOnMousePressed()</code>方法进行注册；<br>对于一个按键事件，事件源是使用<code>setOnKeyPressed()</code>方法进行注册。</p><h4 id="定义内部类并让内部类对象来承担监听者"><a href="#定义内部类并让内部类对象来承担监听者" class="headerlink" title="定义内部类并让内部类对象来承担监听者"></a>定义内部类并让内部类对象来承担监听者</h4><p>把实现接口的类定义成内部类，内部类可以访问外部类的成员方法与成员变量，包括私有成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个窗口中摆放两个控件：一个是命令按钮；另一个是文本区。当单击命令按钮后，将文本区中的字体颜色设置为红色。由于按钮触发动作事件，所以触发按钮便把ActionEvent的对象传递给向它注册的监听者，请它负责处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"><span class="type">Han</span> <span class="variable">eh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Han</span>();</span><br><span class="line">bt.setOnAction(eh);</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Han</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App15_1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App15_1运行结果"><p>类在实现监听者接口时，必须在类中具体定义该接口中只声明而未定义的所有方法。因为监听者接口<code>EventHandler &lt; ActionEvent &gt;</code>中只提供了一个<code>handle(ActionEvent e)</code>方法，该方法正是要把事件处理程序编写在里面的方法。</p><h4 id="使用匿名内部类来担任监听者"><a href="#使用匿名内部类来担任监听者" class="headerlink" title="使用匿名内部类来担任监听者"></a>使用匿名内部类来担任监听者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_2</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"></span><br><span class="line">bt.setOnAction(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                    ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Lambda表达式来担任监听者"><a href="#使用Lambda表达式来担任监听者" class="headerlink" title="使用Lambda表达式来担任监听者"></a>使用Lambda表达式来担任监听者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_3</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"></span><br><span class="line">bt.setOnAction(e -&gt; ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java语言的事件类"><a href="#Java语言的事件类" class="headerlink" title="Java语言的事件类"></a>Java语言的事件类</h2><p>Java事件类的根是<code>java.util.EventObject</code>，JavaFX事件类的根是<code>javafx.event.Event</code>。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E4%B8%BB%E8%A6%81%E4%BA%8B%E4%BB%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX主要事件类的继承关系"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是从事件对象中获取触发事件的事件源</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSource</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回的都是Object类型的对象，所以开发人员需要自己编写代码进行对象的强制类型转换。</span></span><br></pre></td></tr></table></figure><ul><li>用户动作、事件源、触发的事件类型和事件注册方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">用户动作</th><th style="text-align:center">事件源</th><th style="text-align:center">触发的事件类型</th><th style="text-align:center">事件注册方法</th></tr></thead><tbody><tr><td style="text-align:center">单击按钮</td><td style="text-align:center">Button</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">在文本框中按Enter键</td><td style="text-align:center">TextField</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选中或取消选中</td><td style="text-align:center">RadioButton</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选中或取消选中</td><td style="text-align:center">CheckBox</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选择一个新选项</td><td style="text-align:center">ComboBox</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">按下鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMousePressed(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">释放鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseReleased(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">单击鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseClicked(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标进人</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseEntered(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标离开</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseExited(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标移动</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseMoved(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标拖动</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseDragged(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">按下键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyPressed(EventHandler &lt; KeyEvent &gt; e)</td></tr><tr><td style="text-align:center">释放键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyReleased(EventHandler &lt; KeyEvent &gt; e)</td></tr><tr><td style="text-align:center">单击键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyTyped(EventHandler &lt; KeyEvent &gt; e)</td></tr></tbody></table></div><blockquote><p>如果一个节点可以触发一个事件，那么这个节点的任何子节点都可以触发同样类型的事件。<br>如果要删除一个事件源的事件监听者只需用null作为参数，传递给事件注册方法即可。</p></blockquote><ul><li>事件类型、用户动作和事件注册方法所在的类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">事件类型</th><th style="text-align:center">用户操作</th><th style="text-align:center">时间注册方法所在的类</th></tr></thead><tbody><tr><td style="text-align:center">ActionEvent</td><td style="text-align:center">单击按钮或选择菜单项</td><td style="text-align:center">ButtonBase/ComboBoxBase/ContextMenu/MenuItem/TextField</td></tr><tr><td style="text-align:center">KeyEvent</td><td style="text-align:center">键盘操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">MouseEvent</td><td style="text-align:center">鼠标移动或按下按钮</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">MouseDragEvent</td><td style="text-align:center">按下鼠标、拖放操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">InputMethodEvent</td><td style="text-align:center">输人字符操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">DragEvent</td><td style="text-align:center">平台支持的拖放操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ScrollEvent</td><td style="text-align:center">对象滚动</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ContextMenuEvent</td><td style="text-align:center">快捷菜单被请求</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">TextEvent</td><td style="text-align:center">文本事件</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">WindowEvent</td><td style="text-align:center">窗口事件</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ListView.EditEvent</td><td style="text-align:center">ListView条目被编辑</td><td style="text-align:center">ListView</td></tr><tr><td style="text-align:center">TreeView.EditEvent</td><td style="text-align:center">TreeView条目被编辑</td><td style="text-align:center">TreeView</td></tr><tr><td style="text-align:center">TableColumn.CellEditEvent</td><td style="text-align:center">表格列被编辑</td><td style="text-align:center">TableColumn</td></tr></tbody></table></div><h3 id="动作事件ActionEvent"><a href="#动作事件ActionEvent" class="headerlink" title="动作事件ActionEvent"></a>动作事件ActionEvent</h3><p><code>javafx.event.ActionEvent</code>(操作事件)</p><p>处理ActionEvent事件时，监听者向事件源注册使用<code>事件源对象.setOnAction(EventHandler &lt; ActionEvent &gt; value)</code>语句，参数value是监听者对象。</p><h3 id="鼠标事件MouseEvent"><a href="#鼠标事件MouseEvent" class="headerlink" title="鼠标事件MouseEvent"></a>鼠标事件MouseEvent</h3><p><code>javafx.scene.input.MouseEvent</code></p><p>用鼠标单击事件源、鼠标指针进入或离开事件源，或移动、拖动鼠标等操作均会触发鼠标事件。</p><ul><li><code>javafx.scene.input.MouseEvent</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final MouseButton getButton()</td><td style="text-align:center">返回被单击的鼠标按钮。返回的是枚举值，其含义如下。 <br /> MouseButton.PRIMARY：鼠标左按钮；<br /> MouseButton.MIDDLE：鼠标中按钮；<br /> MouseButton.SECONDARY：鼠标右按钮；<br /> MouseButton.NONE：没有鼠标按钮</td></tr><tr><td style="text-align:center">public final double getX()</td><td style="text-align:center">返回事件源节点中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getY()</td><td style="text-align:center">返回事件源节点中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final double getScnenX()</td><td style="text-align:center">返回场景中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getScnenY()</td><td style="text-align:center">返回场景中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final double getScreenX()</td><td style="text-align:center">返回屏幕中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getScreenY()</td><td style="text-align:center">返回屏幕中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final boolean isAltDown()</td><td style="text-align:center">如果该事件中Alt键被按下，则返回true</td></tr><tr><td style="text-align:center">public final boolean isControlDown()</td><td style="text-align:center">如果该事件中Ctrl键被按下，则返回true</td></tr><tr><td style="text-align:center">public final boolean isShiftDown()</td><td style="text-align:center">如果该事件中Shift键被按下，则返回true</td></tr></tbody></table></div><p>面板左上角坐标为(0, 0) ，向右为x轴方向，正向下为y轴方向正，右下角坐标为(pane.getWidth(), pane.getHeight())。</p><h4 id="文本类"><a href="#文本类" class="headerlink" title="文本类"></a>文本类</h4><p><code>javafx.scene.text.Text</code></p><ul><li><code>javafx.scene.text.Text</code>的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Text()</td><td style="text-align:center">创建一个空文本对象</td></tr><tr><td style="text-align:center">public Text(String text)</td><td style="text-align:center">以字符串text作为文字创建文本对象</td></tr><tr><td style="text-align:center">public Text(double x, double y, String text)</td><td style="text-align:center">以给定的坐标及字符串创建文本对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.text.Text</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回文本对象中的文字</td></tr><tr><td style="text-align:center">public final void setText(Stirng value)</td><td style="text-align:center">设置文本对象中的文字</td></tr><tr><td style="text-align:center">public final double getX()</td><td style="text-align:center">返回文本对象的x坐标</td></tr><tr><td style="text-align:center">public final double getY()</td><td style="text-align:center">返回文本对象的y坐标</td></tr><tr><td style="text-align:center">public final void setX(double value)</td><td style="text-align:center">设置文本对象的x坐标</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置文本对象的y坐标</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置文本对象中文字的字体</td></tr><tr><td style="text-align:center">public final void setUnderline(boolean value)</td><td style="text-align:center">设置文本是否有下画线</td></tr><tr><td style="text-align:center">public final double getWrappingWidth()</td><td style="text-align:center">返回文本宽度的像素数</td></tr><tr><td style="text-align:center">public final void setTextAlignment(TextAlignment value)</td><td style="text-align:center">设置文本的对齐方式。value 的取值及含义如下。<br />TextAlignment.CENTER：居中对齐；<br />TextAlignment.JUSTIFY：两端对齐；<br />TextAlignment.LEFT：左对齐；<br />TextAlignment.RIGHT：右对齐</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.input.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_4</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> tOffX, tOffY;</span><br><span class="line"><span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="string">&quot;拖动我&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line">pane.getChildren().add(t);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">t.setOnMousePressed(e -&gt; handleMousePressed(e));</span><br><span class="line">t.setOnMouseDragged(e -&gt; handleMouseDragged(e));</span><br><span class="line"></span><br><span class="line">stage.setTitle(<span class="string">&quot;拖动操作&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleMousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">tOffX = e.getSceneX() - t.getX();</span><br><span class="line">tOffY = e.getSceneY() - t.getY();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleMouseDragged</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">t.setX(e.getSceneX() - tOffX);</span><br><span class="line">t.setY(e.getSceneY() - tOffY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.jpg" class="" title="鼠标事件处理"><h3 id="键盘事件KeyEvent"><a href="#键盘事件KeyEvent" class="headerlink" title="键盘事件KeyEvent"></a>键盘事件KeyEvent</h3><p><code>javafx.scene.input.KeyEvent</code></p><p>当用户在一个节点或一个场景上操作键盘时所触发的事件，如<code>按下</code>、<code>释放</code>、<code>敲击键盘按键</code>等，都会触发KeyEvent事件。</p><p>处理键盘事件KeyEvent的监听者接口是<code>EventHandler &lt; KeyEvent &gt;</code></p><ul><li><code>javafx.scene.input.KeyEvent</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final String getCharacter()</td><td style="text-align:center">返回按下的Unicode字符</td></tr><tr><td style="text-align:center">public final KeyCode getCode()</td><td style="text-align:center">返回按下字符的键值码，键码值由枚举KeyCode定义</td></tr><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回键码值对应的字符串</td></tr><tr><td style="text-align:center">public final boolean isAltDown()</td><td style="text-align:center">若Alt键被按下则返回true</td></tr><tr><td style="text-align:center">public final boolean isControlDown()</td><td style="text-align:center">若Ctrl键被按下则返回true</td></tr><tr><td style="text-align:center">public final boolean isShiftDown()</td><td style="text-align:center">若Shift键被按下则返回true</td></tr></tbody></table></div><ul><li>由枚举<code>javafx.scene.input.KeyCode</code>定义的常用键码值表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">表示键码的枚举值</th><th style="text-align:center">键描述</th><th style="text-align:center">表示键码的枚举值</th><th style="text-align:center">键描述</th></tr></thead><tbody><tr><td style="text-align:center">A~Z</td><td style="text-align:center">字母键A~Z</td><td style="text-align:center">UP</td><td style="text-align:center">上箭头键</td></tr><tr><td style="text-align:center">0~9</td><td style="text-align:center">数字键0~9</td><td style="text-align:center">DOWN</td><td style="text-align:center">下箭头键</td></tr><tr><td style="text-align:center">F1~F12</td><td style="text-align:center">功能键F1~F12</td><td style="text-align:center">LEFT</td><td style="text-align:center">左箭头键</td></tr><tr><td style="text-align:center">HOME</td><td style="text-align:center">Home键</td><td style="text-align:center">RIGHT</td><td style="text-align:center">右箭头键</td></tr><tr><td style="text-align:center">END</td><td style="text-align:center">End键</td><td style="text-align:center">KP_UP</td><td style="text-align:center">小键盘上的上箭头键</td></tr><tr><td style="text-align:center">PAGE_UP</td><td style="text-align:center">PageUp键</td><td style="text-align:center">KP_DOWN</td><td style="text-align:center">小键盘上的下箭头键</td></tr><tr><td style="text-align:center">PAGE_DOWN</td><td style="text-align:center">PageDown键</td><td style="text-align:center">KP_LEFT</td><td style="text-align:center">小键盘上的左箭头键</td></tr><tr><td style="text-align:center">CONTROL</td><td style="text-align:center">Ctrl键</td><td style="text-align:center">KP_RIGHT</td><td style="text-align:center">小键盘上的右箭头键</td></tr><tr><td style="text-align:center">SHIFT</td><td style="text-align:center">Shift键</td><td style="text-align:center">COMMA</td><td style="text-align:center">逗号键</td></tr><tr><td style="text-align:center">ALT</td><td style="text-align:center">Alt键</td><td style="text-align:center">SEMICOLON</td><td style="text-align:center">分号键</td></tr><tr><td style="text-align:center">TAB</td><td style="text-align:center">Tab键</td><td style="text-align:center">COLON</td><td style="text-align:center">冒号键</td></tr><tr><td style="text-align:center">ESCAPE</td><td style="text-align:center">Esc键</td><td style="text-align:center">PERIOD</td><td style="text-align:center">.键</td></tr><tr><td style="text-align:center">ENTER</td><td style="text-align:center">Enter键</td><td style="text-align:center">SLASH</td><td style="text-align:center">/键</td></tr><tr><td style="text-align:center">INSERT</td><td style="text-align:center">Insert键</td><td style="text-align:center">BACK_SLASH</td><td style="text-align:center">\键</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">Del键</td><td style="text-align:center">QUOTE</td><td style="text-align:center">左单引号‘ 键</td></tr><tr><td style="text-align:center">CAPS</td><td style="text-align:center">大写字母锁定键</td><td style="text-align:center">BACK_QUOTE</td><td style="text-align:center">右单引号’键</td></tr><tr><td style="text-align:center">NUM_LOCK</td><td style="text-align:center">数字锁定键</td><td style="text-align:center">OPEN_BRACKET</td><td style="text-align:center">[键</td></tr><tr><td style="text-align:center">PAUSE</td><td style="text-align:center">暂停键</td><td style="text-align:center">CLOSE_BRACKET</td><td style="text-align:center">]键</td></tr><tr><td style="text-align:center">PRINTSCREEN</td><td style="text-align:center">打印屏幕键</td><td style="text-align:center">EQUALS</td><td style="text-align:center">=号键</td></tr><tr><td style="text-align:center">BACK_SPACE</td><td style="text-align:center">退格键</td><td style="text-align:center">NUMPAD0~NUMPAD9</td><td style="text-align:center">小键盘上0~9键</td></tr><tr><td style="text-align:center">SPACE</td><td style="text-align:center">空格键</td><td style="text-align:center">CANCLE</td><td style="text-align:center">取消键</td></tr><tr><td style="text-align:center">UNDERSCORE</td><td style="text-align:center">下画线</td><td style="text-align:center">CLEAR</td><td style="text-align:center">清除键</td></tr><tr><td style="text-align:center">WINDOWS</td><td style="text-align:center">Windows键</td><td style="text-align:center">UNDEFINED</td><td style="text-align:center">是未知的键</td></tr></tbody></table></div><h2 id="复选框和单选按钮及相应的事件处理"><a href="#复选框和单选按钮及相应的事件处理" class="headerlink" title="复选框和单选按钮及相应的事件处理"></a>复选框和单选按钮及相应的事件处理</h2><p>单击一个 复选框CheckBox/单选按钮RadioButton 将其选中或取消选中时，将会触发动作事件ActionEvent。</p><p>要判断一个 复选框/单选按钮 是否被选中，可以调用<code>isSelected()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用复选框和单选按钮设置文本对象上文字的字体和颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.RadioButton;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ToggleGroup;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Font;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.FontWeight;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.FontPosture;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.VBox; </span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_6</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fN</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.NORMAL, FontPosture.REGULAR, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fB</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.BOLD, FontPosture.REGULAR, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fI</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.NORMAL, FontPosture.ITALIC, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fBI</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.BOLD, FontPosture.ITALIC, <span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">CheckBox</span> <span class="variable">chkB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;粗体&quot;</span>);</span><br><span class="line">    <span class="type">CheckBox</span> <span class="variable">chkI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;斜体&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;绿色&quot;</span> );</span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;复选框和单选按钮及相应的事件处理&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    VBox vbL= <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">20</span>);</span><br><span class="line">    vbL.setStyle(<span class="string">&quot;-fx-border-color: green&quot;</span>);</span><br><span class="line">    vbL.getChildren().addAll(chkB, chkI);</span><br><span class="line">    </span><br><span class="line">    <span class="type">ToggleGroup</span> <span class="variable">gro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToggleGroup</span>();</span><br><span class="line">        r.setToggleGroup(gro);</span><br><span class="line">        g.setToggleGroup(gro);</span><br><span class="line">        b.setToggleGroup(gro);</span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>();</span><br><span class="line">    vbR.setStyle(<span class="string">&quot;-fx-border-color: blue&quot;</span>);</span><br><span class="line">vbR.getChildren().addAll(r, g, b);</span><br><span class="line"></span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">rootBP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">        t.setFont(fN);</span><br><span class="line">        rootBP.setLeft(vbL);</span><br><span class="line">        rootBP.setRight(vbR);</span><br><span class="line">        rootBP.setCenter(t);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Han</span> <span class="variable">hand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Han</span>();</span><br><span class="line">        r.setOnAction(hand);</span><br><span class="line">        g.setOnAction(hand);</span><br><span class="line">        b.setOnAction(hand);</span><br><span class="line">        chkB.setOnAction(hand);</span><br><span class="line">        chkI.setOnAction(hand);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(rootBP, <span class="number">260</span>, <span class="number">60</span>);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;复选框与单选按钮&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Han</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(r.isSelected())</span><br><span class="line">t.setFill(Color.RED);</span><br><span class="line">            <span class="keyword">if</span>(g.isSelected())</span><br><span class="line">            t.setFill(Color.GREEN);</span><br><span class="line">            <span class="keyword">if</span>(b.isSelected())</span><br><span class="line">            t.setFill(Color.BLUE);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(chkB.isSelected() &amp;&amp; chkI.isSelected())</span><br><span class="line">t.setFont(fBI);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(chkB.isSelected())</span><br><span class="line">t.setFont(fB);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(chkI.isSelected())</span><br><span class="line">t.setFont(fI);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t.setFont(fN);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%9A%84%E5%BA%94%E7%94%A8.png" class="" title="复选框和单选按钮的应用"><h2 id="文本编辑控件及响应的事件处理"><a href="#文本编辑控件及响应的事件处理" class="headerlink" title="文本编辑控件及响应的事件处理"></a>文本编辑控件及响应的事件处理</h2><p>控件类TextField是单行文本框，用于接收用户输入的文本。</p><p>密码文本框PresswordField是TextField的子类，在密码文本框中输入的文本不回显，字符显示一个黑点。</p><h2 id="组合框及相应的事件处理"><a href="#组合框及相应的事件处理" class="headerlink" title="组合框及相应的事件处理"></a>组合框及相应的事件处理</h2><p>组合框（combo box）也称为下拉列表框（drop-down list）<br><code>javafx.scene.control.ComboBox &lt; T &gt;</code></p><p>组合框有两种非常不一样的模式：<br>一种是默认状态下的不可编辑模式，在这种模式下用户只能在下拉列表提供的内容中选择一项；<br>另一种是可编辑模式，其特点是可以在显示栏中输入组合框列表中不包括的内容。</p><p>JavaFX是用带有类型参数的泛型类<code>ComboBox &lt; T &gt;</code>来创建组合框控件，类型参数T为保存在组合框中的元素指定数据类型。</p><ul><li><code>javafx.scene.control.ComboBox &lt; T &gt;</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ComboBox()</td><td style="text-align:center">创建空的组合框对象</td></tr><tr><td style="text-align:center">public ComboBox(ObservableList &lt; T &gt; items)</td><td style="text-align:center">创建一个具有指定选项items的组合框</td></tr></tbody></table></div><p><code>javafx.collections.ObservableList &lt; T &gt;</code>是一个集合，它定义了一个可观察对象的列表，它能够在添加、更新和删除对象时通知控件。</p><p><code>javafx.collections.FXCollections</code>类中提供的静态方法<code>observableArrayList(ArrayOfElements)</code>用数组ArrayOfElements的元素创建一个ObservableList类对象。</p><ul><li><code>javafx.scene.control.ComboBox &lt; T &gt;</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setValue(T value)</td><td style="text-align:center">设置在组合框中选中的选项值为value</td></tr><tr><td style="text-align:center">public final T getValue()</td><td style="text-align:center">返回在组合框中选中的选项值</td></tr><tr><td style="text-align:center">public final void setItems(ObservableList &lt; T &gt; value)</td><td style="text-align:center">用value设置组合框中的选项值</td></tr><tr><td style="text-align:center">public final ObservableList &lt; T &gt; getItems()</td><td style="text-align:center">返回组合框中存储元素的列表</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置组合框是否可编辑</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在组合框中显示若干个颜色选项，当选中某个颜色时，将文本区中的文本设置为所选颜</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.collections.FXCollections;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ComboBox; </span><br><span class="line"><span class="keyword">import</span> javafx.collections.ObservableList; </span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_8</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ComboBox&lt;String&gt; cbo = <span class="keyword">new</span> <span class="title class_">ComboBox</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> String[] color = &#123;<span class="string">&quot;红色&quot;</span>, <span class="string">&quot;绿色&quot;</span>, <span class="string">&quot;蓝色&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;我喜欢用JavaFX编程&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    ObservableList&lt;String&gt; items = FXCollections.observableArrayList(color);</span><br><span class="line">    cbo.getItems().addAll(items);</span><br><span class="line">    cbo.setPrefWidth(<span class="number">180</span>);</span><br><span class="line">    cbo.setValue(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">ta.setPrefColumnCount(<span class="number">10</span>);</span><br><span class="line">bPane.setTop(cbo);</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line"></span><br><span class="line">cbo.setOnAction(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;红色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;绿色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: green&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;蓝色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: blue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">185</span>, <span class="number">100</span>);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;组合框应用&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%BB%84%E5%90%88%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%861.png" class="" title="组合框及相应事件处理1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%BB%84%E5%90%88%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%862.png" class="" title="组合框及相应事件处理2"><h2 id="为绑定属性添加监听者"><a href="#为绑定属性添加监听者" class="headerlink" title="为绑定属性添加监听者"></a>为绑定属性添加监听者</h2><p>为控件注册监听者的方式是<code>控件名.setOnXXX()</code>，所以这种事件处理是属于控件级的。</p><p>除此之外JavaFX还定义了属性级别的监听，即所有跟属性变化相关的事件，都可以用<code>XXX.xxxxProperty().addListener()</code>的形式来进行事件监听。</p><p>过为属性添加一个监听者就可以处理一个可观察对象中值的变化。</p><ul><li><code>javafx.beans.Observable</code>接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">void addListener(InvalidationListener listener)</td><td style="text-align:center">为可观察对象注册监听者</td></tr><tr><td style="text-align:center">void remove Listener(InvalidationListener listener)</td><td style="text-align:center">删除为可观察对象注册的监听者</td></tr></tbody></table></div><p>作为参数的监听者listener必须实现<code>InvalidationListener</code>接口， 以覆盖该接口中定义的<code>void invalidated(Observable observable)</code>方法</p><h2 id="类表视图控件及相应的事件处理"><a href="#类表视图控件及相应的事件处理" class="headerlink" title="类表视图控件及相应的事件处理"></a>类表视图控件及相应的事件处理</h2><p>列表视图控件<code>javafx.scene.control.ListView &lt; T &gt;</code>的功能与组合框相似</p><p>列表视图中显示出多个选项供用户选择，而且也可设置是否可以进行多项选择，还可设置列表视图是否可以编辑。</p><p>使列表视图具有滚动功能，可以将列表视图添加到一个滚动面板ScrollPane中。</p><ul><li><code>javafx.scene.control.ListView &lt; T &gt;</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ListView()</td><td style="text-align:center">创建一个空的列表视图</td></tr><tr><td style="text-align:center">public ListView(ObservableList &lt; T &gt; items)</td><td style="text-align:center">创建一个列表框，其中的选项由参数items指定</td></tr></tbody></table></div><p>列表视图中选项的序号是从0开始的。</p><p>列表视图ListView＜T＞继承自<code>javafx.scene.control.Control</code>类，所以Control类中的方法都可用于列表视图类ListView＜T＞。</p><ul><li><code>javafx.scene.control.ListView &lt; T &gt;</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSelectionModel(MultipleSelectionModel &lt; T &gt; value)</td><td style="text-align:center">设置单选还是多选模式</td></tr><tr><td style="text-align:center">public final MultipleSelectionModel &lt; T &gt; getSelectionModel()</td><td style="text-align:center">返回选择模式</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置列表视图是否可编辑</td></tr><tr><td style="text-align:center">public final void setItems(ObservableList &lt; T &gt; value)</td><td style="text-align:center">用value设置列表视图中的选项</td></tr><tr><td style="text-align:center">public final ObservableList &lt; T &gt; getItems()</td><td style="text-align:center">返回列表视图中存储元素的列表</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置列表视图是否可编辑</td></tr><tr><td style="text-align:center">public final void setPreWidth(double value)</td><td style="text-align:center">设置列表视图的宽度</td></tr><tr><td style="text-align:center">public final void setPrwHeight(double value)</td><td style="text-align:center">设置列表视图的高度</td></tr><tr><td style="text-align:center">public void setPrefSize(double prefWidth, double prefHeight)</td><td style="text-align:center">设置列表视图的宽度和高度</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置列表视图的方向。value取值如下：Orientation.HORIZ0NTAL：水平方向；Orientation.VERTICAL：垂直方向</td></tr></tbody></table></div><p>使用ListView＜T＞有两种基本方法：<br>第一种方法是可以忽略列表产生的事件，而是在程序需要的时候获得列表中的选中项；<br>第二种方法是通过注册选项变化监听者，监听列表中选项的变化，这样每次用户改变列表中的选项时就可以做出响应。</p><ul><li><code>javafx.scene.control.MultipleSelectionModel &lt; T &gt;</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public abstract ObservableList &lt; Integer &gt; getSelectedIndices()</td><td style="text-align:center">返回选中项下标的列表</td></tr><tr><td style="text-align:center">public abstract ObservableList &lt; T &gt; getSelectedItems()</td><td style="text-align:center">返回选中项的列表</td></tr><tr><td style="text-align:center">public final void setSelectionMode(SelectionMode value)</td><td style="text-align:center">设置选择模式为枚举SelectionMode中的枚举值。SelectionMode.MULTIPLE：多选；SelectionMode.SINGLE：单选。此为默认选项</td></tr><tr><td style="text-align:center">public final SelectionMode getSelectionMode()</td><td style="text-align:center">返回选择模式</td></tr><tr><td style="text-align:center">public final int getSelectedIndex()</td><td style="text-align:center">返回选中项的下标，如果有多个选项被选中，则返回最后选中项的下标</td></tr><tr><td style="text-align:center">public final T getSelectedItem()</td><td style="text-align:center">返回选中的选项，如果有多个选项被选中，则返回最后被选中的选项</td></tr><tr><td style="text-align:center">public final ReadOnlyObjectProperty &lt; T &gt; selectedItemProperty()</td><td style="text-align:center">返回当前选中项的属性</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListView&lt;String&gt; lv = <span class="keyword">new</span> <span class="title class_">ListView</span>&lt;String&gt;(items);</span><br><span class="line">lv.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);</span><br><span class="line"></span><br><span class="line">lv.getSelectionModel().selectedItemProperty().addListener(</span><br><span class="line">ov -&gt; &#123;</span><br><span class="line">fp.getChildern().clear();</span><br><span class="line"><span class="keyword">for</span>(Integer i:lv.getSelectionModel().getSelectedIndices())</span><br><span class="line">fp.getChildren().add(iv[i]);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>ListView控件具有自动添加滚动条的特性。</p></blockquote><h2 id="滑动条及相应的事件处理"><a href="#滑动条及相应的事件处理" class="headerlink" title="滑动条及相应的事件处理"></a>滑动条及相应的事件处理</h2><p><code>javafx.scene.control.Slider</code><br>是一个水平或垂直的滑动轨道，其上有一个滑块可以让用户拖曳，滑块所在位置表示一个值，滑动条允许用户在一个有界的区间范围内选取一个值。</p><p>滑动条可以是水平的也可以是垂直的，可以设置是否带有刻度线和表明取值范围的标签。</p><ul><li><code>javafx.scene.control.Slider</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Slider()</td><td style="text-align:center">创建一个默认的水平滑动条</td></tr><tr><td style="text-align:center">public Slider(double min, doule max, double value)</td><td style="text-align:center">创建最小值min、最大值max且初始值为value的滑动条</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Slider</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final double getValue()</td><td style="text-align:center">返回滑块所在位置的值</td></tr><tr><td style="text-align:center">public final void setBlockIncrement(double value)</td><td style="text-align:center">设置单击滑块轨道时的调节值(块增量)，默认值是10</td></tr><tr><td style="text-align:center">public final void setMax(double value)</td><td style="text-align:center">设置滑动条区间范围的最大值，默认值是100</td></tr><tr><td style="text-align:center">public final void setMin(double value)</td><td style="text-align:center">设置滑动条区间范围的最小值，默认值是0</td></tr><tr><td style="text-align:center">public final void setValue(double value)</td><td style="text-align:center">设置滑动条的当前值</td></tr><tr><td style="text-align:center">public final void setMajorTickUnit(double value)</td><td style="text-align:center">设置滑动条上主刻度线的间隔，单位是像素</td></tr><tr><td style="text-align:center">public final void setMinorTickCount(int value)</td><td style="text-align:center">设置两个主刻度线之间次刻度线的间隔，单位是像素</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置滑动条的方向。value的取值如下：<br />Orientation.HORIZONTAL：水平方向，此为默认值；<br />Orientation.VERTICAL：垂直方向</td></tr><tr><td style="text-align:center">public final void setShowTickLabels(boolean value)</td><td style="text-align:center">设置是否显示刻度值</td></tr><tr><td style="text-align:center">public final void setShowTickMarks(boolean value)</td><td style="text-align:center">设置是否显示刻度线</td></tr><tr><td style="text-align:center">public final DoubleProperty valueProperty()</td><td style="text-align:center">返回滑动条值的属性</td></tr></tbody></table></div><p>由于滑动条的valueProperty是一个绑定属性， 所以可以在valueProperty属性上加一个监听者<code>addListener(InvalidationListener listener)</code>，这样当用户要在滑动条中拖曳滑动块时，就能监听到其值的变化并能自动进行处理属性值的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sl.valueProperty().addListener(</span><br><span class="line">ov -&gt; &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> sl.getValue();</span><br><span class="line"><span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(size);</span><br><span class="line">t.setFont(font);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>垂直滑动条的值从上向下是减少的。</p></blockquote><p>滚动条<code>javafx.scene.control.ScrollBar</code><br>允许用户从一个范围内的值中进行选择的控件。<br>用户可以拖动滑块、单击滚动条轨道或者单击滚动条左右两边的按钮来改变滚动条的值。</p><h2 id="进度条及相应的事件处理"><a href="#进度条及相应的事件处理" class="headerlink" title="进度条及相应的事件处理"></a>进度条及相应的事件处理</h2><p>进度条是一个显示用户任务完成前还需等待多长时间的控件，用于跟踪可用数字表示的任务进度。进度条类<code>javafx.scene.control.ProgressBar</code>。<br>ProgressBar是<code>javafx.scene.control.ProgressIndicator</code>的直接子类。<br>ProgressIndicator类则是将进度动态地显示在一个饼图里。</p><ul><li><code>javafx.scene.control.ProgressIndicator</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ProgressIndicator()</td><td style="text-align:center">创建进度不确定进度饼图，饼图表现为一个旋转的圆点环</td></tr><tr><td style="text-align:center">public ProgressIndicator(double progress)</td><td style="text-align:center">用给定的进度值progress创建一个进度饼形图，进度值progress取值为0.0~1.0，表示0%~100%</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ProgressIndicator</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setProgress(double value)</td><td style="text-align:center">用值value设置进度值，进度值value取值为0.0~1.0，表示0%~100%</td></tr><tr><td style="text-align:center">public final double getProgress()</td><td style="text-align:center">返回当前进度值，返回值为0.0~1.0，表示0%~100%</td></tr><tr><td style="text-align:center">public final boolean isIndeterminate()</td><td style="text-align:center">判断进度是否是不确定状态</td></tr><tr><td style="text-align:center">public final DoubleProperty progressProperty()</td><td style="text-align:center">返回进度的绑定属性</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ProgressBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ProgressBar()</td><td style="text-align:center">创建进度不确定的进度条，滑块在进度条内左右移动</td></tr><tr><td style="text-align:center">public ProgressBar(double progress)</td><td style="text-align:center">用给定的progress值创建一个进度条，progress的取值为0.0~1.0，表示0%~100%</td></tr></tbody></table></div><p>有时程序并不能确定一个任务完成的时间，这时进度饼图和进度条就保持在不确定状态直到可以确定任务的长度。<br>当进度条中的值不为0.0~1.0时进度饼图和进度条也会处于不确定状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口放置一个滑动条、一个进度条和一个进度饼图，拖动滑动条并用其当前值表示的进度来摸拟任务的完成情况。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ObservableValue;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ProgressBar;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ProgressIndicator;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Slider;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_11</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Slider</span> <span class="variable">slider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Slider</span>();</span><br><span class="line">slider.setMin(<span class="number">0</span>);</span><br><span class="line">slider.setMax(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">ProgressBar</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressBar</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">ProgressIndicator</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressIndicator</span>();</span><br><span class="line"></span><br><span class="line">ChangeListener&lt;Number&gt; cListener = <span class="keyword">new</span> <span class="title class_">ChangeListener</span>&lt;Number&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changed</span><span class="params">(ObservableValue &lt;? extends Number&gt; ov,</span></span><br><span class="line"><span class="params">    Number oldVal, Number newVal)</span> &#123;</span><br><span class="line">                pb.setProgress(newVal.doubleValue() / <span class="number">50</span>);</span><br><span class="line">                pi.setProgress(newVal.doubleValue() / <span class="number">50</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">slider.valueProperty().addListener(cListener);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">HBox</span> <span class="variable">hb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>();</span><br><span class="line">        hb.setSpacing(<span class="number">5</span>);</span><br><span class="line">        hb.setAlignment(Pos.CENTER);</span><br><span class="line">        hb.getChildren().addAll(slider, pb, pi);</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(hb);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;进度条应用程序&quot;</span>);</span><br><span class="line">        stage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F1.png" class="" title="进度条程序1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F2.png" class="" title="进度条程序2"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F3.png" class="" title="进度条程序3"><h2 id="菜单设计"><a href="#菜单设计" class="headerlink" title="菜单设计"></a>菜单设计</h2><p>每一个应用程序都会有菜单工具为用户的操作进行导航。</p><p>菜单通常有两种：<br>一种是窗口菜单或称下拉式菜单；<br>另一种是上下文菜单，也称弹出菜单或快捷菜单。</p><p>窗口菜单是相对于窗口的，它一般放在窗口标题栏的下面，总是与窗口同时出现。</p><p>每个菜单中再包含若干个菜单项，每个菜单项实际上可看作是另一种形式的命令按钮，也是在用户单击时引发一个动作事件，所以整个菜单就是一组经层次化组织、管理的命令集合。</p><p>弹出菜单是相对于某个指定控件的，当鼠标指向某控件并右击时，则会出现弹出菜单，弹出菜单也是由若干个菜单项组成，弹出菜单的结构相对简单。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%8F%9C%E5%8D%95%E7%B1%BB%E6%8E%A7%E4%BB%B6%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" class="" title="菜单类控件的继承关系图"><p>在菜单程序设计中通常会用到五种菜单类：<code>MenuBar</code>、<code>MenuItem</code>、<code>Menu</code>、<code>CheckMenuItem</code>和<code>RadioMenuItem</code>。</p><ul><li>菜单栏类MenuBar：该类是Node类的子类，菜单栏是菜单的容器，它包含管理菜单所必需的方法。</li><li>菜单项类MenuItem：该类是Object类的子类，它包含了管理菜单项所必需的方法。菜单项可以用来触发动作事件，也可以是一个子菜单。</li><li>菜单类Menu：该类是MenuItem类的子类，它包含了管理菜单的方法。单击某个菜单时，菜单就会展开并显示出菜单项的列表。单击某个菜单项会产生一个动作事件。</li><li>复选菜单项类CheckMenuItem：该类是MenuItem类的子类，它包含管理具有开关状态的菜单项所必需的方法。当某个CheckMenuItem对象被选中时，会在菜单项左边出现一个复选标记 ，再次选择该菜单项时取消选中，此时复选标记中的勾号会被清除。</li><li>单选菜单项类RadioMenuItem：该类是MenuItem类的子类，它与复选菜单项类CheckMenuItem一样是一种具有开关功能的菜单项。当多个RadioMenuItem对象作为ToggleGroup组的一部分来维护时，这组单选菜单项在同一时刻只能有一个被选中。</li></ul><blockquote><p>由于MenuItem类没有继承Node类，因此MenuItem的实例只能放在菜单中，而不能以其他方式加入场景图中。</p></blockquote><h3 id="菜单基本知识"><a href="#菜单基本知识" class="headerlink" title="菜单基本知识"></a>菜单基本知识</h3><p>要创建一个菜单系统，首先要创建一个菜单栏对象MenuBar。</p><p>再在菜单栏上添加若干个菜单对象Menu。</p><p>菜单项是MenuItem、CheckMenuItem或RadioMenuItem的对象。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E4%B8%89%E7%A7%8D%E8%8F%9C%E5%8D%95%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" class="" title="三种菜单元素的关系"><h4 id="菜单栏MenuBar"><a href="#菜单栏MenuBar" class="headerlink" title="菜单栏MenuBar"></a>菜单栏MenuBar</h4><p><code>javafx.scene.control.MenuBar</code></p><p>菜单的容器，它是为应用程序提供主菜单控制。</p><ul><li><code>javafx.scene.control.MenuBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MenuBar()</td><td style="text-align:center">创建菜单栏对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.MenuBar</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Menu &gt; getMenus()</td><td style="text-align:center">返回一个由菜单栏管理的菜单列表，菜单将被添加到该列表中</td></tr></tbody></table></div><p>向菜单栏上添加菜单，实际上是将菜单添加到ObservableList上。</p><p>可以通过调用<code>getMenus()</code>方法返回由菜单栏管理的菜单列表ObservableList的对象，然后调用它的<code>add()</code>或<code>addAll()</code>方法，将Menu对象添加到该菜单栏列表中。</p><p>所添加的菜单将按照添加顺序，从左到右排列在菜单栏中。也可使用<code>void add(int idx, Menu menu)</code>方法将菜单添加到菜单栏中的指定位置。</p><p>菜单的下标从0开始，从左到右编号。</p><p>可以通过<code>getMenus()</code>方法返回的ObservableList对象调用<code>remove(menu)</code>方法从菜单栏中删除不需要的菜单，若要获得菜单栏中所包含的菜单个数，可以用该列表对象调用<code>size()</code>方法。</p><h4 id="菜单Menu"><a href="#菜单Menu" class="headerlink" title="菜单Menu"></a>菜单Menu</h4><p><code>javafx.scene.control.Menu</code></p><p>添加到菜单栏上的对象。</p><p>菜单Menu由菜单项MenuItem来填充。</p><p>Menu的对象可以是另一个Menu对象中的选项，从而能够创建二级子菜单。</p><ul><li><code>javafx.scene.control.Menu</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Menu()</td><td style="text-align:center">创建Menu对象</td></tr><tr><td style="text-align:center">public Menu(String text)</td><td style="text-align:center">创建显示名称为text的Menu对象</td></tr><tr><td style="text-align:center">public Menu(String text, Node graphic)</td><td style="text-align:center">创建显示名字为text图标为graphic的菜单对象</td></tr><tr><td style="text-align:center">public Menu(String text, Node graphie, Menultem… items)</td><td style="text-align:center">功能同 上,并将参数指定的多个菜单项添加到菜单中</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Menu</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; MenuItem &gt; getItems()</td><td style="text-align:center">返回当前与菜单关联的菜单项列表</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">将菜单的显示名字设置为value</td></tr><tr><td style="text-align:center">public final void setGraphie(Node value)</td><td style="text-align:center">为菜单添加图标</td></tr></tbody></table></div><blockquote><p>在菜单项列表中可以添加菜单分隔线，该分隔线是SeparatorMenuItem类的对象。利用分隔线可<br>以将相关的菜单项分组，从而有助于组织长菜单。</p></blockquote><h4 id="菜单项MenuItem"><a href="#菜单项MenuItem" class="headerlink" title="菜单项MenuItem"></a>菜单项MenuItem</h4><p><code>javafx.scene.control.MenuItem</code></p><ul><li><code>javafx.scene.control.MenuItem</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Menulterm()</td><td style="text-align:center">创建一个空的菜单项对象</td></tr><tr><td style="text-align:center">public Menultem(String text)</td><td style="text-align:center">创建一个名称为text的菜单项对象</td></tr><tr><td style="text-align:center">public Menultem(String text, Node graphic)</td><td style="text-align:center">创建一个名称为text，图标为graphic的菜单项对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.MenuItem</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDisable(boolean value)</td><td style="text-align:center">设置菜单项是否禁用</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">为菜单项设置图标</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">将菜单项的显示名字设置为value</td></tr><tr><td style="text-align:center">public void fire()</td><td style="text-align:center">在菜单项上引发动作事件</td></tr><tr><td style="text-align:center">public final void setAccelerator(KeyCombination value)</td><td style="text-align:center">设置菜单项的快捷键(加速键)</td></tr><tr><td style="text-align:center">public final void setMnemonicParsing(boolean value)</td><td style="text-align:center">设置热健(助记符)是否有效,默认为true</td></tr></tbody></table></div><p>MenuItem对象被选中时会产生动作事件，可以调用<code>setOnAction()</code>方法为MenuItem对象注册监听者，就像处理按钮事件一样。</p><blockquote><p>热键又称助记符，快捷键也称加速键。<br>热键是在菜单展开的情况下，同时按下”Alt+热键”即可选择菜单项。<br>而快捷键是在不用展开菜单的情况下，同时按下”Ctrl+快捷键”即可直接选择菜单中的菜单项。</p></blockquote><p>若要为Menu和MenuItem设置热键，只需在菜单和菜单项中为想要用作热键的字符前面添加一条下画线即可，因为默认情况下热键是有效的，否则只需调用<code>setMnemonicParsing(true)</code>将其设置为真即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span> <span class="variable">fileMenu</span> <span class="operator">=</span> newMenu(<span class="string">&quot;_File&quot;</span>);</span><br></pre></td></tr></table></figure><p>若要为菜单项设置快捷键，需要调用MenuItem的<code>setAccelerator(KeyCombination value)</code>方法。<br>通常用KeyCombination类的静态方法<code>public static KeyCombination keyCombination(String name)</code>进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opemMI.setAccelerator(KeyCombination.keyCombination(<span class="string">&quot;Ctrl + O&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem"><a href="#复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem" class="headerlink" title="复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem"></a>复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem</h4><p>复选菜单类：<code>javafx.scene.control.CheckMenuItem</code><br>单选菜单类：<code>javafx.scene.control.RadioMenuItem</code></p><ul><li><code>javafx.scene.control.CheckMenuItem</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public CheckMenultem()</td><td style="text-align:center">创建没有名称与图标、最初状态未选中的复选菜单项</td></tr><tr><td style="text-align:center">public CheckMenuItem(String text)</td><td style="text-align:center">创建名为text、初始状态未选中的复选菜单项</td></tr><tr><td style="text-align:center">public CheckMenultem(String text, Node graphic)</td><td style="text-align:center">创建名为text，图标为graphie，初始状态未选中的复选菜单项</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.CheckMenuItem</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final boolean isSelected()</td><td style="text-align:center">判断复选菜单项是否被选中</td></tr><tr><td style="text-align:center">public final void setSelected(boolean value)</td><td style="text-align:center">设置复选菜单项的选中状态</td></tr><tr><td style="text-align:center">public final BooleanProperty selectedProperty()</td><td style="text-align:center">返回复选菜单项的状态属性</td></tr></tbody></table></div><h3 id="窗口菜单"><a href="#窗口菜单" class="headerlink" title="窗口菜单"></a>窗口菜单</h3><p>菜单项实际上可以看作是另一种形式的命令按钮，所以选择菜单项后会产生动作事件EventAction，因此需调用setOnAction()方法为MenuItem对象注册监听者。</p><p>使用动作事件处理程序来处理所有菜单选择时，确定选中了哪个菜单项的一种方法是检查选择的名称。</p><p>单独的匿名内部类或Lambda表达式来处理每个菜单项的动作事件，此时所选菜单项已知，所以不需要通过检查名称来确定哪个菜单项被选中。</p><h3 id="弹出菜单"><a href="#弹出菜单" class="headerlink" title="弹出菜单"></a>弹出菜单</h3><p><code>javafx.scene.control.ContextMenu</code></p><p>ContextMenu的直接父类是<code>javafx.scene.control.PopupControl</code>，它的一个间接父类是<code>javafx.stage.PopupWindow</code></p><p>当在某个控件上右击时，会弹出一个菜单供选择，所以弹出菜单又称上下文菜单或称快捷菜单。</p><ul><li><code>javafx.scene.control.ContextMenu</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ContextMenu()</td><td style="text-align:center">创建一个不含菜单项的弹出菜单对象</td></tr><tr><td style="text-align:center">public ContextMenu(Menultenm… items)</td><td style="text-align:center">用参数指定的多个菜单项创建一个弹出菜单对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ContextMenu</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Menultem &gt; getItems()</td><td style="text-align:center">返回与弹出菜单关联的菜单项列表</td></tr><tr><td style="text-align:center">public void show(Node anchor, double screenX, double screenY)</td><td style="text-align:center">在屏幕的(x,y)位置处显示弹出菜单,anchor指定弹出菜单所依附的组件</td></tr><tr><td style="text-align:center">public void hide()</td><td style="text-align:center">隐藏弹出菜单</td></tr><tr><td style="text-align:center">public final void setContextMenu(ContextMenu value)</td><td style="text-align:center">建立组件与弹出菜单value的关联</td></tr></tbody></table></div><p>首先创建菜单项，然后将其添加到弹出菜单中。</p><p>将弹出菜单与控件关联起来非常简单，只需对控件调用<code>setContextMenu()</code>方法，并传入对弹出菜单的引用即可。</p><p>也可以将弹出菜单与场景关联起来， 方法是对场景的根节点调用<code>setOnContextMenuRequested()</code>方法。该方法定义在Node类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setOnContextMenuRequested</span><span class="params">(EventHandler &lt; ? <span class="built_in">super</span> ContextM enuEvent&gt; value</span></span><br></pre></td></tr></table></figure><p>参数value指定当收到弹出菜单的请求时调用的处理程序。<br>处理程序必须调用ContextMenu定义的show()方法。</p><h2 id="工具栏设计"><a href="#工具栏设计" class="headerlink" title="工具栏设计"></a>工具栏设计</h2><p>将一些常用的命令按钮放置到工具栏上。</p><p><code>javafx.scene.control.ToolBar</code>工具栏类</p><p>工具栏上的控件通常是以图标形式出现的。</p><p>可以在工具栏上放置命令按钮，然后再把图标设置在命令按钮上。</p><p>工具栏中添加的多为命令按钮，所以其事件处理也是动作事件<code>ActionEvent</code>。</p><ul><li><code>javafx.scene.control.ToolBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ToolBar()</td><td style="text-align:center">创建一个空的水平工具栏</td></tr><tr><td style="text-align:center">public ToolBar(Node..items)</td><td style="text-align:center">创建一个由参数指定的多个节点的水平工具栏</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ToolBar</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Node &gt; getItems()</td><td style="text-align:center">返回工具栏的节点列表</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置工具栏的方向，参数value取值如下：<br />Orientation.HORIZONTAL：水平方向，此为默认值；<br />Orientation.VERTICAL：垂直方向</td></tr></tbody></table></div><p>向工具栏添加按钮或其他控件的方式与把菜单添加到菜单栏的方式基本相同，就是对<code>getItems()</code>方法返回的列表引用调用<code>add()</code>方法，但是通常在ToolBar构造方法中指定它们更方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">but1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageView</span>(<span class="string">&quot;icon/openFile.jpg&quot;</span>));</span><br><span class="line">but1.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);<span class="comment">//只显示按钮上的图标</span></span><br></pre></td></tr></table></figure><h2 id="文件选择对话框"><a href="#文件选择对话框" class="headerlink" title="文件选择对话框"></a>文件选择对话框</h2><p><code>javafx.stage.FileChooser</code></p><p>用户经常使用该类创建”打开”或”保存”文件对话框，所以它是一种用于文件选择控件。</p><ul><li><code>javafx.stage.FileChooser</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileChooser()</td><td style="text-align:center">创建打开默认目录的文件选择对话框</td></tr></tbody></table></div><ul><li><code>javafx.stage.FileChooser</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTitle(String value)</td><td style="text-align:center">设置文件选择对话框的标题</td></tr><tr><td style="text-align:center">public final void setlnitialDirectory(File value)</td><td style="text-align:center">设置文件选择对话框的初始显示目录</td></tr><tr><td style="text-align:center">public ObservableList &lt; FileChooser.ExtensionFilter &gt; getExtensionFilters()</td><td style="text-align:center">返回文件对话框中使用的扩展名过滤器的文件选项列表</td></tr><tr><td style="text-align:center">public File showOpenDialog(Window ownerWindow)</td><td style="text-align:center">显示打开文件对话框，参数ownerWindow为文件对话框的所属窗口，通常是主舞台，返回值是用户选择的文件，若没选文件则返回null</td></tr><tr><td style="text-align:center">public List &lt; File &gt; showOpenMultipleDialog(Window ownerWindowr)</td><td style="text-align:center">显示打开文件对话框，返回在对话枢中选择的多个文件，并保存到List &lt; File &gt;对象中</td></tr><tr><td style="text-align:center">public File showSaveDialog(Window ownerWindow)</td><td style="text-align:center">显示保存文件对话框，返回选择的文件，若没有选择文件则返回null。多数ownerWindow为文件对话框的所属窗口</td></tr></tbody></table></div><p>可以通过设置initialDirectory和title属性来配置文件选择对话框窗口。文件选择对话框既可用作打开文件对话框，用于选择单个文件或多个文件，也可作为文件保存对话框。</p><blockquote><p>对话框一般分为模态和非模态两种。<br>模态对话框一定要处理完本对话框内的操作之后，才能返回到它的所属窗口继续运行。<br>非模态对话框在显示时，用户还可以操作其他窗口。<br>FileChooser类中的打开和保存对话框都是模态的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件过滤器</span></span><br><span class="line">FileChooser.<span class="type">ExtensionFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileChooser</span>.ExtensionFilter(<span class="string">&quot;所有.java文件&quot;</span>, <span class="string">&quot;*.java&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h2><p>通过一组单选按钮提供一组颜色值列表供用户选择。</p><p><code>javafx.scene.control.ColorPicker</code></p><p>它用于显示一个窗格，允许用户在一个调色板上通过单击颜色来选取一种颜色值，或在自定义颜色面板中选择颜色。</p><ul><li><code>javafx.scene.control.ColorPicker</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ColorPicker()</td><td style="text-align:center">创建初始颜色为白色的颜色选择器</td></tr><tr><td style="text-align:center">public ColorPicker(Color color)</td><td style="text-align:center">创建初始颜色为color的颜色选择器</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ColorPicker</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final T getValue()</td><td style="text-align:center">返回选中选项的值(父类中方法)</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Color &gt; getCustomColors()</td><td style="text-align:center">返回用户添加到调色板的自定义颜色列表</td></tr></tbody></table></div><p>ColorPicker控件包括颜色选择框、调色板以及自定义颜色面板。</p><p><code>颜色选择框</code>是一个组合框，包括了所有可以选择的颜色和颜色指示器，颜色指示器显示了当前选中的颜色；<br><code>调色板</code>包含了预定义的颜色集合以及自定义颜色的链接；<br><code>自定义颜色面板</code>是一个模态窗口，可以通过单击调色板上的链接打开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色选择器程序设计，在窗口中放置一个文本和一个颜色选择器，用在颜色选择器中选择的颜色来设置文本的颜色。</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ColorPicker;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_16</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">HBox</span> <span class="variable">hB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ColorPicker</span> <span class="variable">cP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPicker</span>(Color.RED);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> Text t= <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;请选择颜色来设置我&quot;</span>); </span><br><span class="line">        hB.getChildren().addAll(cP, t);</span><br><span class="line">        t.setFill(cP.getValue());</span><br><span class="line">        cP.setOnAction(e -&gt; t.setFill(cP.getValue()));</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(hB, <span class="number">260</span>, <span class="number">100</span>);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;颜色选择器应用&quot;</span>);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A81.png" class="" title="颜色选择器应用1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A82.png" class="" title="颜色选择器应用2"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A83.png" class="" title="颜色选择器应用3"><h2 id="音频与视频程序设计"><a href="#音频与视频程序设计" class="headerlink" title="音频与视频程序设计"></a>音频与视频程序设计</h2><p>JavaFX提供了丰富的媒体类用于媒体的播放，主要有Media、MediaPlayer、MediaView等类。</p><p>目前JavaFX支持的音频格式有MP3、AIFF、WAV及MPEG-4等，支持的视频格式有FLVM和PEG-4。</p><p>媒体源是由类<code>javafx.scene.media.Media</code></p><ul><li><code>javafx.scene.media.Media</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Media(String source)</td><td style="text-align:center">用名字source创建一个媒体对象，目前它仅支持HTTP、FILE、URL和JAR格式的媒体源路径，设置后不可改变</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.Media</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie final Duration getDuration()</td><td style="text-align:center">返回媒体源以秒计时的持续时间对象</td></tr><tr><td style="text-align:center">publie final int getWidth()</td><td style="text-align:center">返回媒体视频以像素为单位的宽度</td></tr><tr><td style="text-align:center">public final int getWidth()</td><td style="text-align:center">返回媒体视频以像素为单位的高度</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaPlayer</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MediaPlayer(Media media)</td><td style="text-align:center">为媒体media创建一个播放器</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaPlayer</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setAutoPlay(boolean value)</td><td style="text-align:center">设置媒体是否自动播放</td></tr><tr><td style="text-align:center">public final void setCycleCount(int value)</td><td style="text-align:center">设置媒体播放次数</td></tr><tr><td style="text-align:center">public final void setVolume(double value)</td><td style="text-align:center">设置音频音量的大小，取值为0.0~1.0(最大)</td></tr><tr><td style="text-align:center">public final void setMute(boolean value)</td><td style="text-align:center">设置音频是否禁音</td></tr><tr><td style="text-align:center">public final void setBalance(double value)</td><td style="text-align:center">设置左、右声道的平衡值，最左边为-1，中间为0，最右边为1</td></tr><tr><td style="text-align:center">public void play()</td><td style="text-align:center">播放媒体</td></tr><tr><td style="text-align:center">public void pause()</td><td style="text-align:center">暂停媒体播放</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">停止媒体播放</td></tr><tr><td style="text-align:center">public void seek(Duration seekTime)</td><td style="text-align:center">将播放器定位到一个新的播放时间点</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaView</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MediaView()</td><td style="text-align:center">创建一个不与媒体播放器关联的媒体视图</td></tr><tr><td style="text-align:center">public MediaView(MediaPlayer mediaPlayer)</td><td style="text-align:center">创建一个与指定媒体播放器mediaPlayer关联的媒体视图</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaView</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setX(double value)</td><td style="text-align:center">设置媒体视图的x坐标</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置媒体视图的y坐标</td></tr><tr><td style="text-align:center">publie final void setFitWidth(double value)</td><td style="text-align:center">设置媒体视图的宽度</td></tr><tr><td style="text-align:center">public final void setFitHeight(double value)</td><td style="text-align:center">设置媒体视图的高度</td></tr><tr><td style="text-align:center">public final void setMediaPlayer(MediaPlaver value)</td><td style="text-align:center">设置媒体视图的播放器为value</td></tr></tbody></table></div><p>一个Media对象可以被多个媒体播放器所共享，一个MediaPlayer也可以被多个MediaView所使用。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>委托事件模型是指当事件发生时，产生事件的对象会把此信息转给事件监听者处理的一种方式，而这个信息事实上是JavaFX中的<code>javafx.event</code>事件包里的某个类所建立的对象。</li><li>JavaFX中<code>javafx.event.Event</code>类中包含了用来处理事件的监听者接口，用于事件处理的方法就声明在这些接口中。</li><li>一个对象要成为事件源的事件监听者，满足两个条件即可：一是事件监听者必须是一个对应的事件监听者接口的实例，从而保证该监听者具有正确的事件处理方法；二是事件监听者对象必须通过事件源进行注册，注册方法依赖于事件类型。</li><li>对控件的什么操作触发什么事件类型、注册事件监听者及处理事件的方法见表15.1和表15.2。</li><li>JavaFX的监听分为两种：组件级别监听和属性级别监听。属性级别的监听主要用于绑定属性。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是事件？简述Java语言的委托事件模型。</li><li>若要处理事件，就必须要有事件监听者，担任监听者需满足什么条件？</li><li>写出控件与可能触发的事件之间的对应关系。</li><li>对于按下键和释放键的事件，使用什么方法来获得键的编码值？使用什么方法从一个键的单击事件中获得该键的字符？</li><li>设计一个窗口，在窗口内放置一个按钮，当不断地单击该按钮时，在其上显示它被单击的次数。</li><li>创建一个窗口，隐藏窗口的标题栏和边框，并在其上添加一个”退出”按钮。将鼠标指针放在窗口内的任意位置进行拖动窗口，当单击”退出”命令按钮后，结束程序运行。</li><li>在窗口的中央区域放置一个文本区控件，在窗口的下部区域添加红、绿、蓝三个单选按钮，并用其设置文本区中文本的颜色。</li><li>在窗口的中央区域放置一个文本区控件，在窗口的下部区域添加”粗体”和”斜体”两个复选框，并用其设置文本区中文本的字体。</li><li>编程，实现利用在滑动条中拖动滑块的方法对文本字体的大小进行设置。</li><li>编写一个简单的音频播放器，在程序中创建一个MediaPlayer对象，并用命令按钮实现播放、暂停和重放功能。</li></ul><h1 id="第十六章-绘图与动画程序设计"><a href="#第十六章-绘图与动画程序设计" class="headerlink" title="第十六章 绘图与动画程序设计"></a>第十六章 绘图与动画程序设计</h1><h2 id="图形坐标系与形状类"><a href="#图形坐标系与形状类" class="headerlink" title="图形坐标系与形状类"></a>图形坐标系与形状类</h2><p><code>javafx.scene.shape.Shape</code></p><p>形状类Shape是抽象类，它所派生的子类主要有Text、Line、Rectangle、Circle、Ellipse、Arc、Polygon、Polyline等。</p><p>Shape类是Node类的子类，所以形状类作为节点可以添加到面板上。</p><p>每个形状都具有大小、位置、形状、颜色、维数等属性。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%BD%A2%E7%8A%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F.jpg" class="" title="形状类的继承关系示意"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/Java%E5%9D%90%E6%A0%87%E7%B3%BB.jpg" class="" title="Java坐标系"><ul><li><code>javafx.scene.shape.Shape</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setFill(Paint value)</td><td style="text-align:center">设置填充形状内部区域的颜色为value</td></tr><tr><td style="text-align:center">public final void setStroke(Paint value)</td><td style="text-align:center">设置画笔颜色为value</td></tr><tr><td style="text-align:center">public final void setStrokeWidth(double value)</td><td style="text-align:center">设置画笔宽度为value</td></tr><tr><td style="text-align:center">public final void setSmooth(boolean value)</td><td style="text-align:center">设置是否对形状使用平滑算法</td></tr><tr><td style="text-align:center">public final void setStrokeDashOffset(double value)</td><td style="text-align:center">设置虛线的起始偏移量为value，即虛线往后移的量</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Double &gt; getStrokeDashArray()</td><td style="text-align:center">定义表示虚线段长度的数组，数组中的值依次为不透明和透明段长度</td></tr><tr><td style="text-align:center">public final void setStrokeLineCap ( StrokeLineCap value)</td><td style="text-align:center">设置形状端点的风格，参数value取值如下：<br /> StrokeLinCap.BUTT：线条末端平直，此为默认值；<br />StrokeLineCap.ROUND：端点加一圆形线帽；<br />StrokeLineCap.SQUARE：端点加一正方形线帽</td></tr><tr><td style="text-align:center">public final void setStrokeType(StrokeType value)</td><td style="text-align:center">设置节点边界周围绘制描边的类型，参数value取值如下：<br />StrokeType.CENTERED：从中间向内外两侧；<br />StrokeType.INSIDE：向内侧；<br />StrokeType.OUTSIDE：向外侧</td></tr></tbody></table></div><h3 id="直线类Line"><a href="#直线类Line" class="headerlink" title="直线类Line"></a>直线类Line</h3><p><code>javafx.scene.shape.Line</code></p><p>一条直线有起点、终点、线宽、颜色等属性，用户可根据这些属性画出需要的直线。</p><ul><li><code>javafx.scene.shape.Line</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Line()</td><td style="text-align:center">创建一个空的直线</td></tr><tr><td style="text-align:center">public Line(double startX, double startY, double endX, double endY)</td><td style="text-align:center">以(startX, startY)为起点，以(endX, endY)为终点创建一条直线</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Line</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setStartX(double value)</td><td style="text-align:center">设置起点的x坐标</td></tr><tr><td style="text-align:center">public final void setStartY(double value)</td><td style="text-align:center">设置起点的y坐标</td></tr><tr><td style="text-align:center">public final void setEndX(double value)</td><td style="text-align:center">设置终点的x坐标</td></tr><tr><td style="text-align:center">public final void setEndY(double value)</td><td style="text-align:center">设置终点的y坐标</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制红、绿、蓝三条直线，红线设置为虚线。绿、蓝两条直线通过坐标的属性绑定使它们成为交叉线。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Line;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.StrokeLineCap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"></span><br><span class="line">Line rL= <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>,<span class="number">20</span>, <span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">rL.setStroke(Color.RED); </span><br><span class="line">rL.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">rL.setStrokeLineCap(StrokeLineCap.BUTT);<span class="comment">//设置线条两端平直</span></span><br><span class="line">rL.getStrokeDashArray().addAll(<span class="number">10d</span>, <span class="number">5d</span>, <span class="number">15d</span>);<span class="comment">//设置虚线段长度，依次为不透明和透明段的长度</span></span><br><span class="line">rL.setStrokeDashOffset(<span class="number">0</span>);<span class="comment">//虚线的后偏移量</span></span><br><span class="line">rL.endXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));<span class="comment">//属性绑定</span></span><br><span class="line"></span><br><span class="line"><span class="type">Line</span> <span class="variable">gL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">gL.setStroke(Color.GREEN);</span><br><span class="line">gL.setStrokeWidth(<span class="number">5</span>);</span><br><span class="line">gL.endXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));</span><br><span class="line">gL.endYProperty().bind(pane.heightProperty().multiply(<span class="number">4</span>).divide(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Line</span> <span class="variable">bL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">bL.setStroke(Color.BLUE);</span><br><span class="line">bL.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">bL.setStrokeLineCap(StrokeLineCap.ROUND);<span class="comment">//设置线条两端具有圆形线帽</span></span><br><span class="line">bL.startXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));</span><br><span class="line">bL.endYProperty().bind(pane.heightProperty().multiply(<span class="number">4</span>).divide(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">pane. getChildren().addAll(rL, gL, bL);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">210</span>, <span class="number">120</span>);</span><br><span class="line">stage.setTitle(<span class="string">&quot;绘制直线&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%9B%B4%E7%BA%BF%E7%9A%84%E7%B1%BB%E5%9E%8B.png" class="" title="直线的类型"><h3 id="矩形类Rectangele"><a href="#矩形类Rectangele" class="headerlink" title="矩形类Rectangele"></a>矩形类Rectangele</h3><p><code>javafx.scene.shape.Rectangle</code></p><ul><li><code>javafx.scene.shape.Rectangle</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie Rectangle(double width,double height)</td><td style="text-align:center">创建宽为width，高为height的矩形</td></tr><tr><td style="text-align:center">public Rectangle(double width, double height, Paint fill)</td><td style="text-align:center">创建宽为width,高为height,填充色为fill的矩形</td></tr><tr><td style="text-align:center">public Rectangle(double x, double y, double width, double height)</td><td style="text-align:center">创建一个以(x,y)为左上角,宽为width,高为height的矩形</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Rectangle</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie final void setX(double value)</td><td style="text-align:center">设置矩形左上角的x坐标为value</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置矩形左上角的y坐标为value</td></tr><tr><td style="text-align:center">public final void setWidth(double value)</td><td style="text-align:center">设置矩形的宽度为value</td></tr><tr><td style="text-align:center">public final void setHeight(double value)</td><td style="text-align:center">设置矩形的高度为value</td></tr><tr><td style="text-align:center">public final void setAreWidth(double value)</td><td style="text-align:center">设置矩形圆角弧的水平直径为value</td></tr><tr><td style="text-align:center">public final void setArcHeight(double value)</td><td style="text-align:center">设置矩形圆角弧的垂直直径为value</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用循环在面板上添加四个矩形，每个都进行旋转，且画笔的颜色是随机的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Rectangle;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_2</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">r.setArcWidth(<span class="number">10</span>);<span class="comment">//设置圆角弧水平直径为10像素</span></span><br><span class="line">r.setArcHeight(<span class="number">6</span>);<span class="comment">//设置圆角弧垂直直径为6像素</span></span><br><span class="line">r.setRotate(i*<span class="number">360</span>/<span class="number">8</span>);<span class="comment">//设置旋转</span></span><br><span class="line">r.setStroke(Color.color(Math.random(), Math.random(), Math. random()));</span><br><span class="line">r.setFill(<span class="literal">null</span>);<span class="comment">//不填充颜色</span></span><br><span class="line">pane.getChildren().add(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">130</span>);</span><br><span class="line">stage.setTitle(<span class="string">&quot;矩形程序设计&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%9F%A9%E5%BD%A2%E7%A8%8B%E5%BA%8F.png" class="" title="矩形程序"><h3 id="圆形Circle"><a href="#圆形Circle" class="headerlink" title="圆形Circle"></a>圆形Circle</h3><p><code>javafx.scene.shape.Circle</code></p><ul><li><code>javafx.scene.shape.Circle</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie Circle(double radius)</td><td style="text-align:center">创建半径为radius的圆</td></tr><tr><td style="text-align:center">public Circle(double centerX, double centerY, double radius)</td><td style="text-align:center">创建以( centerX, centerY)为圆心，以radius为半径的圆</td></tr><tr><td style="text-align:center">public Circle(double centerX, double centerY, double radius, Paint fill)</td><td style="text-align:center">创建以(centerX.centerY)为圆心，以radius为半径，以fill为填充色的圆</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Circle</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置圆心的x坐标为value</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置圆心的y坐标为value</td></tr><tr><td style="text-align:center">public final void setRadius(double value)</td><td style="text-align:center">设置圆的半径为value</td></tr></tbody></table></div><h3 id="椭圆类Ellipse"><a href="#椭圆类Ellipse" class="headerlink" title="椭圆类Ellipse"></a>椭圆类Ellipse</h3><p><code>javafx.scene.shape.Ellipse</code></p><ul><li><code>javafx.scene.shape.Ellipse</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Ellipse(double radiusX, double radiusY)</td><td style="text-align:center">创建水平半径为radiusX 、垂直半径为radiusY的椭圆</td></tr><tr><td style="text-align:center">public Ellipse(double centerX, double centerY, double radiusX, double radiusY)</td><td style="text-align:center">创建以(centerX, centerY)为圆心，以radiusX 为水平半径，以radiusY为垂直半径的椭圆</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Ellipse</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置椭圆圆心的x坐标为value</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置椭圆圆心的y坐标为value</td></tr><tr><td style="text-align:center">public final void setRadiusX(double value)</td><td style="text-align:center">设置椭圆水平半径为value</td></tr><tr><td style="text-align:center">public final void setRadiusY(double value)</td><td style="text-align:center">设置椭圆垂直半径为value</td></tr></tbody></table></div><h3 id="弧类Arc"><a href="#弧类Arc" class="headerlink" title="弧类Arc"></a>弧类Arc</h3><p><code>javafx.scene.shape.Arc</code></p><ul><li><code>javafx.scene.shape.Arc</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Arc()</td><td style="text-align:center">创建一条空的弧</td></tr><tr><td style="text-align:center">public Arc(double centerX, double centerY，double radiusX, double radiusY, double startAngle, double length)</td><td style="text-align:center">以(centerX,centerY)为弧中心，以radiusX 为水平半径、radiusY为垂直半径、startAngle为起始角度、length为转过的角度创建一条弧</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Arc</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置弧中心点的x坐标</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置弧中心点的y坐标</td></tr><tr><td style="text-align:center">public final void setRadiusX(double value)</td><td style="text-align:center">设置弧所在椭圆的水平半径</td></tr><tr><td style="text-align:center">public final void setRadiusY(double value)</td><td style="text-align:center">设置弧所在椭圆的垂直半径</td></tr><tr><td style="text-align:center">public final void setStartAngle(double value)</td><td style="text-align:center">设置弧的起始角,以度(°)为单位,正角度为逆时针旋转</td></tr><tr><td style="text-align:center">public final void setLength(double value)</td><td style="text-align:center">设置弧转过的角度，以度(°)为单位，正角度为逆时针旋转</td></tr><tr><td style="text-align:center">public final void setType(ArcType value)</td><td style="text-align:center">设置弧的类型，参数value取值如下：<br />ArcType.CHORD：闭合弧，弧的端点之间有连线；<br />ArcType.ROUND：扇形弧；<br />ArcTypeOPEN：开弧，弧的端点之间没有连线。</td></tr></tbody></table></div><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%BC%A7%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.jpg" class="" title="弧的参数说明"><p>0°是向右的x轴方向，正角度表示逆时针方向旋转。</p><h3 id="多边形类Polygon与折线类Polyline"><a href="#多边形类Polygon与折线类Polyline" class="headerlink" title="多边形类Polygon与折线类Polyline"></a>多边形类Polygon与折线类Polyline</h3><p>多边形：<code>javafx.scene.shape.Polygon</code>，一个连接点序列的闭合多边形。<br>折线类：<code>javafx.scene.shape.Polyline</code>，一个连接点序列的折线，折线不会自动闭合。</p><ul><li><code>javafx.scene.shape.Polygon</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Polygon()</td><td style="text-align:center">创建一个空的多边形对象</td></tr><tr><td style="text-align:center">public Polygon(double… points)</td><td style="text-align:center">以点集points作为顶点坐标创建一个多边形</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Polygon</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Double &gt; getPoints()</td><td style="text-align:center">返回一个双精度值列表作为顶点集的x坐标和y坐标</td></tr></tbody></table></div><h3 id="交互式程序设计"><a href="#交互式程序设计" class="headerlink" title="交互式程序设计"></a>交互式程序设计</h3><p>交互式程序设计就是用鼠标在面板上随意画图。</p><h2 id="动画程序设计"><a href="#动画程序设计" class="headerlink" title="动画程序设计"></a>动画程序设计</h2><p>在JavaFX中动画被分为过渡动画和时间轴动画。<br>过渡动画类<code>javafx.animation.Transition</code>和时间轴动画类<code>javafx.animation.Timeline</code>都是动画类<code>javafx.animation.Animation</code>的子类。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E5%B8%B8%E7%94%A8%E5%8A%A8%E7%94%BB%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX常用动画类的继承关系"><ul><li><code>javafx.animation.Animation</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void play()</td><td style="text-align:center">从当前位置播放动画</td></tr><tr><td style="text-align:center">public void pause()</td><td style="text-align:center">暂停动画播放</td></tr><tr><td style="text-align:center">public void playFromStart()</td><td style="text-align:center">从头播放动画</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">停止动画并重置动画</td></tr><tr><td style="text-align:center">protected final void setStatus(Animation.Status value)</td><td style="text-align:center">设置动画的状态为value，value取值如下：<br />Animation.Status.PAUSED：暂停；<br />Animation.Status.RUNNING：播放；<br />Animation.Status.STOPPED：停止</td></tr><tr><td style="text-align:center">public final void setRate(double value)</td><td style="text-align:center">设置动画播放的方向和速度</td></tr><tr><td style="text-align:center">public final void setCycleCount(int value)</td><td style="text-align:center">设置动画循环播放的次数</td></tr><tr><td style="text-align:center">public final void setAutoReverse(boolean value)</td><td style="text-align:center">设置在下一个周期动画中是否需要倒转方向</td></tr></tbody></table></div><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p><code>javafx.animation.Transition</code></p><p>最简单的动画可以通过过渡效果实现，使用特定的过渡类，定义有关的属性，然后把它应用到某种节点，最后播放动画即可。</p><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><p><code>javafx.animation.FadeTransition</code></p><p>指在给定时间内改变节点的不透明度效果来实现，即通过改变节点透明度实现目标节点逐渐消失的效果， 再通过<code>setAutoReverse()</code>方法实现节点的或隐或现效果。</p><ul><li><code>javafx.animation.FadeTransition</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FadeTransition()</td><td style="text-align:center">创建一个空的淡人淡出效果对象</td></tr><tr><td style="text-align:center">public FadeTransition(Duration duration)</td><td style="text-align:center">创建一个指定持续时间的淡人淡出效果对象，持续时间duration的取值如下：<br />Duration.INDEFINITE：无限循环；<br />Duration.ONE: 1ms；<br />Duration.UNKNOWN：未知；<br />Duration.ZERO: 0</td></tr><tr><td style="text-align:center">public FadeT ransition (Duration duration, Node node)</td><td style="text-align:center">创建一个持续时间同上，应用在节点node上的淡入淡出效果对象</td></tr></tbody></table></div><ul><li><code>javafx.animation.FadeTransition</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDuration(Duration value)</td><td style="text-align:center">设置转换持续时间为value，持续时间见上表</td></tr><tr><td style="text-align:center">public final void setNode(Node value)</td><td style="text-align:center">设置动画应用在节点value上，即转换的目标节点上</td></tr><tr><td style="text-align:center">public final void setFromValue(double value)</td><td style="text-align:center">设置动画的起始透明度为value，1.0表示不透明，0.0表示透明</td></tr><tr><td style="text-align:center">public final void setToValue(double value)</td><td style="text-align:center">设置动画结束的透明度为value，l.0表示不透明，0.0表示透明</td></tr><tr><td style="text-align:center">public final void setByValue(double value)</td><td style="text-align:center">设置动画透明度的递增值为value</td></tr></tbody></table></div><p>Duration定义了事件持续的时间，它是一个不可更改类。</p><ul><li><code>javafx.util.Duration</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Duration(double millis)</td><td style="text-align:center">创建持续millis毫秒(ms)的持续时间对象</td></tr></tbody></table></div><ul><li><code>javafx.util.Duration</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Duration add(Duration other)</td><td style="text-align:center">与调用者进行持续时间相加运算</td></tr><tr><td style="text-align:center">public Duration subtract(Duration other)</td><td style="text-align:center">与调用者进行持续时间相减运算</td></tr><tr><td style="text-align:center">public Duration multiply(double n)</td><td style="text-align:center">执行持续时间相乘运算</td></tr><tr><td style="text-align:center">public Duration divide(double n)</td><td style="text-align:center">执行持续时间除法运算</td></tr><tr><td style="text-align:center">public static Duration millis(double ms)</td><td style="text-align:center">返回指定ms毫秒数的持续时间</td></tr><tr><td style="text-align:center">public static Duration minutes(double m)</td><td style="text-align:center">返回指定m分钟数的持续时间</td></tr><tr><td style="text-align:center">public double toHours()</td><td style="text-align:center">返回持续时间值的小时数</td></tr><tr><td style="text-align:center">public double toMinutes()</td><td style="text-align:center">返回持续时间值的分钟数</td></tr><tr><td style="text-align:center">public double toSeconds()</td><td style="text-align:center">返回持续时间值的秒数</td></tr><tr><td style="text-align:center">public double toMillis()</td><td style="text-align:center">返回持续时间值的毫秒数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编制程序对圆实现淡入淡出效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.FadeTransition;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Circle;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"><span class="keyword">import</span> javafx.util.Duration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_8</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">StackPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">50</span>);</span><br><span class="line">        c.setStroke(Color.BLUE);</span><br><span class="line">        c.setFill(Color.RED);</span><br><span class="line">        pane.getChildren().add(c);</span><br><span class="line">        </span><br><span class="line">        <span class="type">FadeTransition</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FadeTransition</span>(Duration.millis(<span class="number">2000</span>));</span><br><span class="line">        ft.setFromValue(<span class="number">1.0</span>);</span><br><span class="line">        ft.setToValue(<span class="number">0.0</span>);</span><br><span class="line">        ft.setCycleCount(Animation.INDEFINITE); </span><br><span class="line">        ft.setAutoReverse(<span class="literal">true</span>);</span><br><span class="line">        ft.setNode(c);</span><br><span class="line">        ft.play();</span><br><span class="line">        </span><br><span class="line">        c.setOnMousePressed(e -&gt; ft.pause());</span><br><span class="line">        c.setOnMouseReleased(e -&gt; ft.play());</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">120</span>);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;淡人淡出动画&quot;</span>);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%88%A9%E7%94%A8%E9%80%8F%E6%98%8E%E5%BA%A6%E5%AE%9E%E7%8E%B0%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA%E6%95%88%E6%9E%9C.gif" class="" title="利用透明度实现淡入淡出效果"><h4 id="移动效果"><a href="#移动效果" class="headerlink" title="移动效果"></a>移动效果</h4><p><code>javafx.animation.PathTransition</code></p><p>一个在给定时间内节点沿着一条路径从一个端点到另一端点的移动动画。</p><ul><li><code>javafx.animation.PathTransition</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public PathTransition()</td><td style="text-align:center">创建一个空的移动效果对象</td></tr><tr><td style="text-align:center">public PathTransition(Duration duration, Shape path)</td><td style="text-align:center">创建一个持续时间为duration、路径为path的移动效果对象</td></tr><tr><td style="text-align:center">public Path ransition(Duration duration, Shape path, Node node)</td><td style="text-align:center">功能同上，移动效果应用在node节点上</td></tr></tbody></table></div><ul><li><code>javafx.animation.PathTransition</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDuration(Duration value)</td><td style="text-align:center">设置转换持续的时间为value</td></tr><tr><td style="text-align:center">public final void setNode(Node value)</td><td style="text-align:center">设置动画应用在节点value上，即转换的目标节点</td></tr><tr><td style="text-align:center">public final void setOrientation(PathTransition.OrientationType value)</td><td style="text-align:center">设置节点沿路径的移动方式,参数value 的取值是枚举PathTransition.OrientationType中的枚举常量，含义如下：<br />NONE：移动路径保持不变，保持与路径切线平行；<br />ORTHOGONAL_TO_ANGENT：与路径的切线垂直</td></tr><tr><td style="text-align:center">public final void setPath(Shape value)</td><td style="text-align:center">设置形状value为节点移动的路径</td></tr></tbody></table></div><h3 id="时间轴动画"><a href="#时间轴动画" class="headerlink" title="时间轴动画"></a>时间轴动画</h3><p><code>javafx.animation.Timeline</code></p><p><code>帧</code>就是动画中最小单位的单幅图像或影像画面，相当于电影胶片上的每一个镜头。</p><p><code>关键帧</code>是节点运动或变化中关键动作所处的那一帧。</p><p>关键帧与关键帧之间可以插入一些<code>中间帧</code>（或称为过渡帧）。</p><p>这些过渡帧由数学算法来调整其位置、不透明度、颜色以及动作所需的其他方面。由系统决定在两个关键帧的持续时间内需要插入多少过渡帧。在两个关键帧之间插入过渡帧的过程称为内插。</p><p>关键帧按照指定的持续时间散布在这个时间轴上。</p><p>这些关键帧中可能包含关键值，<code>关键值</code>表示的是特定应用程序值的最终状态，<code>程序值</code>包括位置、不透明度、颜色或在关键时间点执行的动作等。</p><p>关键值中包含一个用来说明在插入过渡帧的过程中所使用的算法，这个算法称为<code>插值器</code>。</p><p>关键帧就是在某一帧当中，设置某些关键性的属性值。</p><p>时间轴Timeline对象是一个包含多个关键帧KeyFrame对象的动画序列，这些KeyFrame按照它们在时间轴内的相对时间排序。</p><p>时间轴允许在一段时间之后使用插值器将动画属性修改为新的目标值，即通过更改节点的属性创建动画。</p><p>时间轴在时间方向上既可以向前移动，也可以向后移动。</p><p>可以循环播放一次或多次，甚至是无限循环播放。可指定每次循环时改变方向，这样它就能够先向前播放而后再向后播放。还可以加快或减慢播放的速率。</p><p>Timeline类是Animation类的子类</p><ul><li><code>javafx.animation.Timeline</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Timeline()</td><td style="text-align:center">创建一个空的时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(double targetFramerate)</td><td style="text-align:center">创建以targetFramerate为帧速率(每秒刷新图片的帧数)创建时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(KeyFrame… keyFrames)</td><td style="text-align:center">以参数指定的多个关键帧来创建时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(double targetFramerate, KeyFrame… keyFrames)</td><td style="text-align:center">以targetFramerate为帧速率，以参数指定的多个关键帧来创建时间轴对象</td></tr></tbody></table></div><ul><li><code>javafx.animation.Timeline</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservablelList &lt; KeyFrame &gt; getKeyFrames()</td><td style="text-align:center">返回时间轴上的关键帧列表</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyFrame</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public KeyFrame(Duration time, KeyValue… values)</td><td style="text-align:center">以time为持续时间，以给定的多个参数为关键值创建关键帧对象</td></tr><tr><td style="text-align:center">public KeyFrame(Duration time, String name, KeyValue… values)</td><td style="text-align:center">以time为持续时间，以name为名字并以给定的多个关键值创建关键帧对象</td></tr><tr><td style="text-align:center">public KeyFrame(Duration time, EventHandler &lt; ActionEvent &gt; onFinished, KeyValue… values)</td><td style="text-align:center">创建关键帧对象,参数同上；但onFinished是关键帧持续时间结束后被调用的事件处理方法</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyFrame</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回关键帧的名称</td></tr><tr><td style="text-align:center">publice Set &lt; KeyValue &gt; getValues()</td><td style="text-align:center">返回关键值实例集</td></tr><tr><td style="text-align:center">public Duration getTime()</td><td style="text-align:center">返回关键帧的时间偏移量</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyValue</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public KeyValue(WritableValue &lt; T &gt; target, T endValue)</td><td style="text-align:center">创建以target为目标，以endValue为结束关键值对象，使用默认插值器Interpolator.LINEAR</td></tr><tr><td style="text-align:center">public KeyValue(WritableValue&lt; T &gt; target, T endValue, Interpolator interpolator)</td><td style="text-align:center">功能同上，使用的插值器为interpolator，取值如下：<br />Interpolator, LINEAR：线性；<br />Interpolator.DISCRETE：离散; <br />Interpolator.EASEIN:渐快；<br />Interpolator.EASEOUT：减速；<br />Interpolator.EASE_BOTH：增减速交替</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyValue</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public WritableValue &lt; ? &gt; getTarget()</td><td style="text-align:center">返回关键值中的目标</td></tr><tr><td style="text-align:center">public Object getEndValue()</td><td style="text-align:center">返回关键值中的结束值</td></tr><tr><td style="text-align:center">public Interpolator get Interpolator()</td><td style="text-align:center">返回关键值中的插值器</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用时间轴动画，编写一个字幕滚动程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.KeyFrame;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.KeyValue;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.Timeline;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.VPos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Font;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.util.Duration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_10</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;滚动字幕&quot;</span>);</span><br><span class="line">        t.setTextOrigin(VPos.TOP);</span><br><span class="line">        t.setFont(Font.font(<span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Pane</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>(t);</span><br><span class="line">        root.setPrefSize(<span class="number">300</span>, <span class="number">60</span>);</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(root);</span><br><span class="line"></span><br><span class="line">        stage.setScene(scene); </span><br><span class="line">        stage.setTitle(<span class="string">&quot;时间轴动画程序设计&quot;</span>);</span><br><span class="line">        stage.show();</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">sceneWidth</span> <span class="operator">=</span> scene.getWidth();</span><br><span class="line">        <span class="type">double</span> <span class="variable">tWidth</span> <span class="operator">=</span> t.getLayoutBounds().getWidth();</span><br><span class="line">        </span><br><span class="line">        <span class="type">KeyValue</span> <span class="variable">sKeyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyValue</span>(t.translateXProperty(), sceneWidth);</span><br><span class="line">        <span class="type">KeyFrame</span> <span class="variable">sFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyFrame</span>(Duration.ZERO, sKeyValue);</span><br><span class="line">        <span class="type">KeyValue</span> <span class="variable">eKeyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyValue</span>(t.translateXProperty(), -<span class="number">1.0</span>*tWidth);</span><br><span class="line">        <span class="type">KeyFrame</span> <span class="variable">eFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyFrame</span>(Duration.seconds(<span class="number">5</span>), eKeyValue);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Timeline</span> <span class="variable">timeline</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timeline</span>(sFrame, eFrame);</span><br><span class="line">        timeline.setCycleCount(Timeline.INDEFINITE);</span><br><span class="line">        timeline.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%AD%97%E5%B9%95%E6%BB%9A%E5%8A%A8%E7%A8%8B%E5%BA%8F.gif" class="" title="字幕滚动程序"><p>该程序中用到的方法<code>getLayoutBounds()</code>和<code>translateXProperty()</code>均是 Node类中的方法 。</p><h2 id="本章小结-2"><a href="#本章小结-2" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>JavaFX的绘图面板中，原点在左上角，向右为x轴方向，向下为y轴方向。</li><li>形状类javafx.scene.shape.Shape是Node的子类。</li><li>抽象类Animation提供了JavaFX中动画制作的核心功能。</li><li>关键帧KayFrame是设置某些关键性属性值的帧。</li><li>关键值KeyValue是包含在KeyFrame对象中的某些参数值。</li><li>从一个关键帧过渡到另一个关键帧的过程中用于计算中间过渡帧的算法称为插值器。</li></ul><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>编程题，画一个圆角矩形，宽度200像素，高度100像素，左上角位于（20，20），圆角处的水平直径为30像素，垂直直径为20像素，并用红色填充。</li><li>编程题，画一个椭圆，中心在（150，100），水平半径为100像素，垂直半径为50像素，画笔颜色随机产生，不填充颜色，生成16个椭圆，每个椭圆旋转一个角度后都添加到面板中。</li><li>编程题，画一个半径为50像素的上半圆的轮廓。</li><li>编程题，画一个半径为50像素的下半圆，并用蓝色填充。</li><li>编程题，在窗口中放置“顺转”和“逆转”两个按钮，当单击按钮时，将椭圆每次都旋转30°。</li><li>编程题，画一个以（20，40）、（30，50）、（40，90）、（90，10）和（10，30）为顶点的多边形。</li><li>编程题，画一个以（20，40）、（30，50）、（40，90）、（90，10）和（10，30）为顶点的折线。</li><li>编程题，用动画实现一个钟摆，即一条直线上端固定，下端连接一个小球，小球来回摆动。</li></ul>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记4</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LaTex入门</title>
    <link href="http://hibiscidai.com/2022/01/02/LaTex%E5%85%A5%E9%97%A8/"/>
    <id>http://hibiscidai.com/2022/01/02/LaTex%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-02T09:00:00.000Z</published>
    <updated>2022-01-02T13:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/LaTex%E5%85%A5%E9%97%A8.png" class="" title="LaTex入门"><p>LaTex入门</p><span id="more"></span><h1 id="LaTex入门"><a href="#LaTex入门" class="headerlink" title="LaTex入门"></a>LaTex入门</h1><h1 id="什么是LaTex"><a href="#什么是LaTex" class="headerlink" title="什么是LaTex"></a>什么是LaTex</h1><p>是一种用于创建专业外观文档的工具。它基于所见即所得的理念，只关注文档的内容，而计算机将负责格式化。与Microsoft Word或LibreOffice Writer一样，用户可以输入纯文本并让LATEX处理其余内容，而不是在页面上隔开文本以控制格式。</p><p>它将文档的内容与样式分开。这意味着一旦您编写了文档的内容，我们就可以轻松更改其外观。同样，您可以创建一种文档样式，用于标准化许多不同文档的外观。这允许科学期刊为提交创建模板。这些模板具有预先制作的布局，这意味着只需添加内容。事实上，有数百种模板可用于从简历到幻灯片的所有内容。</p><h1 id="LaTex平台环境"><a href="#LaTex平台环境" class="headerlink" title="LaTex平台环境"></a>LaTex平台环境</h1><h2 id="miktex-PC端"><a href="#miktex-PC端" class="headerlink" title="miktex-PC端"></a>miktex-PC端</h2><p><a href="https://miktex.org/">miktex官网</a></p><p>MiKTeX 是开源的。是适用于 Windows、Linux 和 macOS 的现代 TeX 发行版。</p><p>使用TexWorks桌面工具进行文件编辑。</p><h2 id="overleaf-Web端"><a href="#overleaf-Web端" class="headerlink" title="overleaf-Web端"></a>overleaf-Web端</h2><p><a href="https://www.overleaf.com/">overleaf官网</a></p><p>在网页端完成内容编排。</p><h1 id="Hello-LaTex"><a href="#Hello-LaTex" class="headerlink" title="Hello LaTex"></a>Hello LaTex</h1><p>LaTex会生成<code>.tex</code>文件</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">First document. This is a simple example, with no </span><br><span class="line">extra parameters or packages included.</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex1.png" class="" title="hellolatex1"><ul><li>文档正文</li></ul><p>包含在 <code>\begin&#123;document&#125;</code> 和 <code>\end&#123;document&#125;</code>之间</p><ul><li>编译模式</li></ul><p><code>pdflatex</code></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 额外参数设置字体大小(12pt)和纸张大小(letterpaper) %</span></span><br><span class="line"><span class="keyword">\documentclass</span> [12pt, letterpaper] &#123; article &#125; </span><br><span class="line"><span class="comment">% 文档的编码 %</span></span><br><span class="line"><span class="keyword">\usepackage</span> [utf8] &#123; inputenc &#125;</span><br></pre></td></tr></table></figure><h2 id="文件序言"><a href="#文件序言" class="headerlink" title="文件序言"></a>文件序言</h2><p>在 <code>\begin&#123;document&#125;</code> 之前</p><h2 id="标题、作者和日期"><a href="#标题、作者和日期" class="headerlink" title="标题、作者和日期"></a>标题、作者和日期</h2><p>在文档中添加标题、作者和日期，必须在<code>序言</code>中添加三行。</p><ul><li>标题</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\title</span>&#123;First document&#125;</span><br></pre></td></tr></table></figure><ul><li>作者</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\author</span>&#123;Hibisci Dai&#125;</span><br></pre></td></tr></table></figure><ul><li>日期</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\date</span>&#123;February 2014&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%编译时自动获取本天%</span></span><br><span class="line"><span class="keyword">\today</span></span><br></pre></td></tr></table></figure><ul><li>致谢</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%这可以添加在作者姓名之后，在author命令的大括号内。它将在大括号内添加一个上标和一个脚注。如果您需要在文章中感谢某个机构，这将很有用%</span></span><br><span class="line"><span class="keyword">\thanks</span>&#123;funded by the Overleaf team&#125;</span><br></pre></td></tr></table></figure><p>加入序言之后，文章有</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">We have now added a title, author and date to our first <span class="keyword">\LaTeX</span>&#123;&#125; document!</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex2.png" class="" title="hellolatex2"><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是包含在文档中但不会被打印的文本片段，并且不会以任何方式影响文档。<br>需要在该行 <code>%</code> 包裹</p><h2 id="粗体、斜体和下划线"><a href="#粗体、斜体和下划线" class="headerlink" title="粗体、斜体和下划线"></a>粗体、斜体和下划线</h2><ul><li>粗体</li></ul><p><code>\textbf&#123;...&#125;</code></p><ul><li>斜体</li></ul><p><code>\textit&#123;...&#125;</code></p><ul><li>下划线</li></ul><p><code>\underline&#123;...&#125;</code></p><p>案例示例</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%粗体%</span></span><br><span class="line">Some of the <span class="keyword">\textbf</span>&#123;greatest&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%下划线%</span></span><br><span class="line">discoveries in <span class="keyword">\underline</span>&#123;science&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体、斜体%</span></span><br><span class="line">were made by <span class="keyword">\textbf</span>&#123;<span class="keyword">\textit</span>&#123;accident&#125;&#125;.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex3.png" class="" title="hellolatex3"><ul><li>依赖上下文的斜体命令</li></ul><p>参数不依赖于上下文-普通文本内的强调文本为斜体，但如果内部使用的这种行为相反斜体文本</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%正常斜体%</span></span><br><span class="line">Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.</span><br><span class="line"></span><br><span class="line"><span class="comment">%斜体中标正常%</span></span><br><span class="line"><span class="keyword">\textit</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体中斜体%</span></span><br><span class="line"><span class="keyword">\textbf</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex4.png" class="" title="hellolatex4"><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%声明使用图片包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片存放路径%</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123; &#123;images/&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">这里是测试图片。</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片名称%</span></span><br><span class="line"><span class="keyword">\includegraphics</span>&#123;test&#125;</span><br><span class="line"></span><br><span class="line">有一个测试图片。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p>latex本身无法管理图像，因此需要使用package。在文档中包含一个图像，应该使用该 <code>graphicx</code> 包。这个包提供了新的命令， <code>\includegraphics&#123;...&#125;</code>并且<code>\graphicspath&#123;...&#125;</code>。要使用该 <code>graphicx</code> 包，在序言中包含以下行：<code>\usepackage&#123;graphicx&#125;</code>。图像的文件名不应包含空格或多个点</p><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex5.png" class="" title="hellolatex5"><h3 id="图的标题、标签和参考"><a href="#图的标题、标签和参考" class="headerlink" title="图的标题、标签和参考"></a>图的标题、标签和参考</h3><p>可以通过figure环境对图像进行标题、标记和引用</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;mesh&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br></pre></td></tr></table></figure><p><code>\caption&#123;a nice plot&#125;</code>：此命令设置图形的标题。如果创建一个数字列表，则将在那里使用此标题。可将其放置在图形上方或下方。</p><p><code>\label&#123;fig:mesh1&#125;</code>：如果需要引用文档中的图像，请使用此命令设置标签。标签将为图像编号，并结合下一个命令引用它。</p><p><code>\ref&#123;fig:mesh1&#125;</code>：此代码将被与参考图对应的数字代替。</p><p>在latex文档中放置图像时，应该始终将它们放在figure环境或类似环境中，以便latex以适合文本其余部分的方式定位图像。</p><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex6.png" class="" title="hellolatex6"><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><code>itemize</code>标签产生，每个列表前有<code>\item</code></p><p>默认情况下，单个条目用黑点表示，即所谓的项目符号。条目中的文本可以是任意长度。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">  <span class="keyword">\item</span> The text in the entries may be of any length.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex7.png" class="" title="hellolatex7"><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p><code>enumerate</code>标签产生，每个列表前有<code>\item</code></p><p>它会自动生成标记该项目的编号。枚举标签由从 1 开始的序列号组成。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line">  <span class="keyword">\item</span> This is the first entry in our list</span><br><span class="line">  <span class="keyword">\item</span> The list numbers increase with each entry we add</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex8.png" class="" title="hellolatex8"><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>LATEX允许两种数学表达式的书写模式：内联(inline)模式和显示(display)模式。</p><p>内联(inline)模式：编写作为文本一部分的公式。</p><p>显示(display)模式：编写不属于文本或段落的表达式，因此放在单独的行上。</p><p>许多数学模式命令需要<code>amsmath</code>包。</p><h3 id="内联-inline-模式"><a href="#内联-inline-模式" class="headerlink" title="内联(inline)模式"></a>内联(inline)模式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In physics, the mass-energy equivalence is stated </span><br><span class="line">by the equation <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>, discovered in 1905 by Albert Einstein.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex9.png" class="" title="hellolatex9"><p>要将方程置于内联模式，请使用以下分隔符之一：</p><ul><li><code>\( ... \)</code> </li><li><code>$ ... $</code> </li><li><code>\begin&#123;math&#125; ... \end&#123;math&#125;</code></li></ul><h3 id="显示-display-模式"><a href="#显示-display-模式" class="headerlink" title="显示(display)模式"></a>显示(display)模式</h3><p>要在显示模式下打印方程，请使用以下分隔符之一：</p><ul><li><code>\[ ... \]</code></li><li><code>\begin&#123;displaymath&#125; ... \end&#123;displaymath&#125;</code></li><li><code>\begin&#123;equation&#125; ... \end&#123;equation&#125;</code></li><li><code>$$ ... $$</code>不建议使用，不一致的间距，并不得与一些数学工具很好地工作。</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%无编号-display%</span></span><br><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2 <span class="keyword">\]</span></span><br><span class="line">discovered in 1905 by Albert Einstein. </span><br><span class="line"></span><br><span class="line"><span class="comment">%有编号-display%</span></span><br><span class="line">In natural units (<span class="built_in">$</span>c = 1<span class="built_in">$</span>), the formula expresses the identity</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">E=m</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex10.png" class="" title="hellolatex10"><h3 id="基本数学符号案例"><a href="#基本数学符号案例" class="headerlink" title="基本数学符号案例"></a>基本数学符号案例</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Subscripts in math mode are written as <span class="built_in">$</span>a<span class="built_in">_</span>b<span class="built_in">$</span> and superscripts are written as <span class="built_in">$</span>a<span class="built_in">^</span>b<span class="built_in">$</span>. These can be combined an nested to write expressions such as</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> T<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1 i<span class="built_in">_</span>2 <span class="keyword">\dots</span> i<span class="built_in">_</span>p&#125;<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1 j<span class="built_in">_</span>2 <span class="keyword">\dots</span> j<span class="built_in">_</span>q&#125; = T(x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>p&#125;,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>q&#125;) <span class="keyword">\]</span></span><br><span class="line"> </span><br><span class="line">We write integrals using <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> and fractions using <span class="built_in">$</span><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="built_in">$</span>. Limits are placed on integrals using superscripts and subscripts:</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>1 <span class="keyword">\frac</span>&#123;dx&#125;&#123;e<span class="built_in">^</span>x&#125; =  <span class="keyword">\frac</span>&#123;e-1&#125;&#123;e&#125; <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">Lower case Greek letters are written as <span class="built_in">$</span><span class="keyword">\omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\delta</span><span class="built_in">$</span> etc. while upper case Greek letters are written as <span class="built_in">$</span><span class="keyword">\Omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\Delta</span><span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line">Mathematical operators are prefixed with a backslash as <span class="built_in">$</span><span class="keyword">\sin</span>(<span class="keyword">\beta</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\cos</span>(<span class="keyword">\alpha</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\log</span>(x)<span class="built_in">$</span> etc.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex11.png" class="" title="hellolatex11"><h2 id="基本格式化"><a href="#基本格式化" class="headerlink" title="基本格式化"></a>基本格式化</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>声明摘要会将文字以特殊格式放置文档顶部。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;abstract&#125;</span><br><span class="line">This is a simple paragraph at the beginning of the </span><br><span class="line">document. A brief introduction about the main subject.</span><br><span class="line"><span class="keyword">\end</span>&#123;abstract&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex12.png" class="" title="hellolatex12"><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ul><li><code>\\</code> 换行</li><li><code>~\\</code> 不打断换行</li><li><code>\par</code> 新自然段</li></ul><p>可能需要声明包 <code>\usepackage&#123;parskip&#125;</code></p><h3 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h3><p>基本的深度级别</p><ul><li>-1 : <code>\part&#123;part&#125;</code></li><li>0 : <code>\chapter&#123;chapter&#125;</code></li><li>1 : <code>\section&#123;section&#125;</code></li><li>2 : <code>\subsection&#123;subsection&#125;</code></li><li>3 : <code>\subsubsection&#123;subsubsection&#125;</code></li><li>4 : <code>\paragraph&#123;paragraph&#125;</code></li><li>5 : <code>\subparagraph&#123;subparagraph&#125;</code></li></ul><p><code>\section&#123;&#125;</code> 标志着一个新部分的开始，在大括号内设置标题。节编号是自动的，可以通过<code>*</code>在节命令中来禁用自动变化，<code>\section*&#123;&#125;</code>。</p><p>类似的<code>\subsection&#123;&#125;</code>，实际上是<code>\subsubsection&#123;&#125;</code>。</p><p><code>\part</code> 和 <code>\chapter</code> 仅在报告和书籍文档类中可用。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">This is the first section.</span><br><span class="line"></span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;First Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex13.png" class="" title="hellolatex13"><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; c c c &#125;</span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span>  </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9    </span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex14.png" class="" title="hellolatex14"><h3 id="表边框"><a href="#表边框" class="headerlink" title="表边框"></a>表边框</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span> </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex15.png" class="" title="hellolatex15"><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"> <span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex16.png" class="" title="hellolatex16"><h3 id="表的标题、标签和参考"><a href="#表的标题、标签和参考" class="headerlink" title="表的标题、标签和参考"></a>表的标题、标签和参考</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Table <span class="keyword">\ref</span>&#123;table:data&#125; is an example of referenced <span class="keyword">\LaTeX</span>&#123;&#125; elements.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h!]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;Table to test captions and labels&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;table:data&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex17.png" class="" title="hellolatex17"><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><code>\tableofcontents</code> 创建目录</p><p>章节、小节和章节会自动包含在目录中。要手动添加条目，例如当您想要一个未编号的部分时，请使用\addcontentsline示例中所示的命令。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">\title</span>&#123;Sections and Chapters&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Gubert Farnsworth&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line">   </span><br><span class="line">This is the first section.</span><br><span class="line">      </span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line">       </span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;Unnumbered Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line">       </span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line">         </span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex18.png" class="" title="hellolatex18"><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><code>HelloLatex.tex</code></li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"><span class="comment">%数学包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="comment">%段落换行包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;parskip&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">We have now added a title, author and date to our first <span class="keyword">\LaTeX</span>&#123;&#125; document!</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体%</span></span><br><span class="line">Some of the <span class="keyword">\textbf</span>&#123;greatest&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%下划线%</span></span><br><span class="line">discoveries in <span class="keyword">\underline</span>&#123;science&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体、斜体%</span></span><br><span class="line">were made by <span class="keyword">\textbf</span>&#123;<span class="keyword">\textit</span>&#123;accident&#125;&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%正常斜体%</span></span><br><span class="line">Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.</span><br><span class="line"></span><br><span class="line"><span class="comment">%斜体中标正常%</span></span><br><span class="line"><span class="keyword">\textit</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体中斜体%</span></span><br><span class="line"><span class="keyword">\textbf</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%无序列表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">  <span class="keyword">\item</span> The text in the entries may be of any length.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%有序列表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line">  <span class="keyword">\item</span> This is the first entry in our list</span><br><span class="line">  <span class="keyword">\item</span> The list numbers increase with each entry we add</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%公式-inline%</span></span><br><span class="line">In physics, the mass-energy equivalence is stated </span><br><span class="line">by the equation <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>, discovered in 1905 by Albert Einstein.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%无编号-display%</span></span><br><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2 <span class="keyword">\]</span></span><br><span class="line">discovered in 1905 by Albert Einstein. </span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%有编号-display%</span></span><br><span class="line">In natural units (<span class="built_in">$</span>c = 1<span class="built_in">$</span>), the formula expresses the identity</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">E=m</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%基本数学符号案例%</span></span><br><span class="line">Subscripts in math mode are written as <span class="built_in">$</span>a<span class="built_in">_</span>b<span class="built_in">$</span> and superscripts are written as <span class="built_in">$</span>a<span class="built_in">^</span>b<span class="built_in">$</span>. These can be combined an nested to write expressions such as</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> T<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1 i<span class="built_in">_</span>2 <span class="keyword">\dots</span> i<span class="built_in">_</span>p&#125;<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1 j<span class="built_in">_</span>2 <span class="keyword">\dots</span> j<span class="built_in">_</span>q&#125; = T(x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>p&#125;,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>q&#125;) <span class="keyword">\]</span></span><br><span class="line"> </span><br><span class="line">We write integrals using <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> and fractions using <span class="built_in">$</span><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="built_in">$</span>. Limits are placed on integrals using superscripts and subscripts:</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>1 <span class="keyword">\frac</span>&#123;dx&#125;&#123;e<span class="built_in">^</span>x&#125; =  <span class="keyword">\frac</span>&#123;e-1&#125;&#123;e&#125; <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">Lower case Greek letters are written as <span class="built_in">$</span><span class="keyword">\omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\delta</span><span class="built_in">$</span> etc. while upper case Greek letters are written as <span class="built_in">$</span><span class="keyword">\Omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\Delta</span><span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line">Mathematical operators are prefixed with a backslash as <span class="built_in">$</span><span class="keyword">\sin</span>(<span class="keyword">\beta</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\cos</span>(<span class="keyword">\alpha</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\log</span>(x)<span class="built_in">$</span> etc.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%摘要%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;abstract&#125;</span><br><span class="line">This is a simple paragraph at the beginning of the </span><br><span class="line">document. A brief introduction about the main subject.</span><br><span class="line"><span class="keyword">\end</span>&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%测试章节%</span></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">This is the first section.</span><br><span class="line"></span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;First Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%简单工作表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; c c c &#125;</span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span>  </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9    </span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表边框1%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span> </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表边框2%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"> <span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表的标题、标签和参考%</span></span><br><span class="line">Table <span class="keyword">\ref</span>&#123;table:data&#125; is an example of referenced <span class="keyword">\LaTeX</span>&#123;&#125; elements.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h!]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;Table to test captions and labels&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;table:data&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%目录%</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-1.png" class="" title="hellolatexfu1-1"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-2.png" class="" title="hellolatexfu1-2"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-3.png" class="" title="hellolatexfu1-3"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-4.png" class="" title="hellolatexfu1-4"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-5.png" class="" title="hellolatexfu1-5"><ul><li><code>HelloLatexPicture.tex</code></li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"><span class="comment">%声明使用图片包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="comment">%图片存放路径%</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123; &#123;images/&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex Picure&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line">The universe is immense and it seems to be homogeneous, in a large scale, everywhere we look at.</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片名称%</span></span><br><span class="line"><span class="keyword">\includegraphics</span>&#123;test&#125;</span><br><span class="line"></span><br><span class="line">There&#x27;s a picture of a galaxy above.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;test&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;test&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu2-1.png" class="" title="hellolatexfu2-1"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu2-2.png" class="" title="hellolatexfu2-2">]]></content>
    
    
    <summary type="html">LaTex入门</summary>
    
    
    
    <category term="科研利器" scheme="http://hibiscidai.com/categories/%E7%A7%91%E7%A0%94%E5%88%A9%E5%99%A8/"/>
    
    
    <category term="软件" scheme="http://hibiscidai.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="科研利器" scheme="http://hibiscidai.com/tags/%E7%A7%91%E7%A0%94%E5%88%A9%E5%99%A8/"/>
    
  </entry>
  
</feed>
