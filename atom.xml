<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HibisciDai</title>
  
  <subtitle>Waiting/Patience/Trusting/Times All Takes</subtitle>
  <link href="http://hibiscidai.com/atom.xml" rel="self"/>
  
  <link href="http://hibiscidai.com/"/>
  <updated>2023-11-15T11:57:40.000Z</updated>
  <id>http://hibiscidai.com/</id>
  
  <author>
    <name>HibisciDai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DeepL翻译技巧</title>
    <link href="http://hibiscidai.com/2023/11/15/DeepL%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7/"/>
    <id>http://hibiscidai.com/2023/11/15/DeepL%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7/</id>
    <published>2023-11-15T07:00:00.000Z</published>
    <updated>2023-11-15T11:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/11/15/DeepL%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7/DeepL%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7.png" class="" title="DeepL翻译技巧"><p>DeepL翻译技巧</p><span id="more"></span><p>[TOC]</p><h1 id="DeepL翻译技巧"><a href="#DeepL翻译技巧" class="headerlink" title="DeepL翻译技巧"></a>DeepL翻译技巧</h1><h1 id="按指定页数动态拆分Word文档"><a href="#按指定页数动态拆分Word文档" class="headerlink" title="按指定页数动态拆分Word文档"></a>按指定页数动态拆分Word文档</h1><p>word打开<br>文件→选项→信任中心→宏设置打开<br>alt+f11<br>插入→模块<br>模块1编辑<br>F5运行<br>出现4065，调试，继续运行</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Sub</span> DynamicSplitPagesAsDocuments()</span><br><span class="line"><span class="keyword">Dim</span> oSrcDoc <span class="keyword">As</span> Document, oNewDoc <span class="keyword">As</span> Document</span><br><span class="line"><span class="keyword">Dim</span> strSrcName <span class="keyword">As</span> <span class="type">String</span>, strNewName <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> oRange <span class="keyword">As</span> Range</span><br><span class="line"><span class="keyword">Dim</span> nIndex <span class="keyword">As</span> <span class="type">Integer</span>, nSubIndex <span class="keyword">As</span> <span class="type">Integer</span>, nTotalPages <span class="keyword">As</span> <span class="type">Integer</span>, nBound <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> fso <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line"><span class="keyword">Const</span> nSteps = <span class="number">10</span></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> oSrcDoc = ActiveDocument</span><br><span class="line"><span class="keyword">Set</span> oRange = oSrcDoc.Content</span><br><span class="line">nTotalPages = ActiveDocument.Content.Information(wdNumberOfPagesInDocument)</span><br><span class="line">oRange.Collapse wdCollapseStart</span><br><span class="line">oRange.<span class="keyword">Select</span></span><br><span class="line"><span class="keyword">For</span> nIndex = <span class="number">1</span> <span class="keyword">To</span> nTotalPages <span class="keyword">Step</span> nSteps</span><br><span class="line"><span class="keyword">Set</span> oNewDoc = Documents.Add</span><br><span class="line"><span class="keyword">If</span> nIndex + nSteps &gt; nTotalPages <span class="keyword">Then</span></span><br><span class="line">nBound = nTotalPages</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">nBound = nIndex + nSteps - <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">For</span> nSubIndex = nIndex <span class="keyword">To</span> nBound</span><br><span class="line">oSrcDoc.Activate</span><br><span class="line">oSrcDoc.Bookmarks(<span class="string">&quot;\page&quot;</span>).Range.Copy</span><br><span class="line">oSrcDoc.Windows(<span class="number">1</span>).Activate</span><br><span class="line">Application.Browser.Target = wdBrowsePage</span><br><span class="line">Application.Browser.<span class="keyword">Next</span></span><br><span class="line">oNewDoc.Activate</span><br><span class="line">oNewDoc.Windows(<span class="number">1</span>).Selection.Paste</span><br><span class="line"><span class="keyword">Next</span> nSubIndex</span><br><span class="line">strSrcName = oSrcDoc.FullName</span><br><span class="line">strNewName = fso.BuildPath(fso.GetParentFolderName(strSrcName), _</span><br><span class="line">fso.GetBaseName(strSrcName) &amp; <span class="string">&quot;_&quot;</span> &amp; (nIndex \ nSteps) &amp; <span class="string">&quot;.&quot;</span> &amp; fso.GetExtensionName(strSrcName))</span><br><span class="line">oNewDoc.SaveAs strNewName</span><br><span class="line">oNewDoc.Close <span class="literal">False</span></span><br><span class="line"><span class="keyword">Next</span> nIndex</span><br><span class="line"><span class="keyword">Set</span> oNewDoc = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> oRange = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> oSrcDoc = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br><span class="line">MsgBox <span class="string">&quot;结束!&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> DynamicSplitPagesAsDocuments()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> oSrcDoc <span class="keyword">As</span> Document, oNewDoc <span class="keyword">As</span> Document</span><br><span class="line"><span class="keyword">Dim</span> strSrcName <span class="keyword">As</span> <span class="type">String</span>, strNewName <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> oRange <span class="keyword">As</span> Range</span><br><span class="line"><span class="keyword">Dim</span> nIndex <span class="keyword">As</span> <span class="type">Integer</span>, nSubIndex <span class="keyword">As</span> <span class="type">Integer</span>, nTotalPages <span class="keyword">As</span> <span class="type">Integer</span>, nBound <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> fso <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Const</span> nSteps = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> oSrcDoc = ActiveDocument</span><br><span class="line"><span class="keyword">Set</span> oRange = oSrcDoc.Content</span><br><span class="line"></span><br><span class="line">nTotalPages = ActiveDocument.Content.Information(wdNumberOfPagesInDocument)</span><br><span class="line">oRange.Collapse wdCollapseStart</span><br><span class="line">oRange.<span class="keyword">Select</span></span><br><span class="line"><span class="keyword">For</span> nIndex = <span class="number">1</span> <span class="keyword">To</span> nTotalPages <span class="keyword">Step</span> nSteps</span><br><span class="line"><span class="keyword">Set</span> oNewDoc = Documents.Add</span><br><span class="line"><span class="keyword">If</span> nIndex + nSteps &gt; nTotalPages <span class="keyword">Then</span></span><br><span class="line">nBound = nTotalPages</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">nBound = nIndex + nSteps - <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">For</span> nSubIndex = nIndex <span class="keyword">To</span> nBound</span><br><span class="line">oSrcDoc.Activate</span><br><span class="line">oSrcDoc.Bookmarks(<span class="string">&quot;\page&quot;</span>).Range.Copy</span><br><span class="line">oSrcDoc.Windows(<span class="number">1</span>).Activate</span><br><span class="line">Application.Browser.Target = wdBrowsePage</span><br><span class="line">Application.Browser.<span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">oNewDoc.Activate</span><br><span class="line">oNewDoc.Windows(<span class="number">1</span>).Selection.Paste</span><br><span class="line"><span class="keyword">Next</span> nSubIndex</span><br><span class="line">strSrcName = oSrcDoc.FullName</span><br><span class="line">strNewName = fso.BuildPath(fso.GetParentFolderName(strSrcName), _</span><br><span class="line">fso.GetBaseName(strSrcName) &amp; <span class="string">&quot;_&quot;</span> &amp; (nIndex \ nSteps) &amp; <span class="string">&quot;.&quot;</span> &amp; fso.GetExtensionName(strSrcName))</span><br><span class="line">oNewDoc.SaveAs strNewName</span><br><span class="line">oNewDoc.Close <span class="literal">False</span></span><br><span class="line"><span class="keyword">Next</span> nIndex</span><br><span class="line"><span class="keyword">Set</span> oNewDoc = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> oRange = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> oSrcDoc = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br><span class="line">MsgBox <span class="string">&quot;结束!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="翻译出来文件不可编辑"><a href="#翻译出来文件不可编辑" class="headerlink" title="翻译出来文件不可编辑"></a>翻译出来文件不可编辑</h1><p>将文档另存为.xml文档，然后右键用记事本打开，CTRL+F查找：<code>&lt;w:documentProtection</code>，找到之后删除这一段完整标签 &lt; &gt; ，保存，之后修改文档后缀名为.doc，打开之后发现文档已经可以编辑了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:documentProtection</span> <span class="attr">w:edit</span>=<span class="string">&quot;forms&quot;</span> <span class="attr">w:enforcement</span>=<span class="string">&quot;1&quot;</span> <span class="attr">w:cryptProviderType</span>=<span class="string">&quot;rsaAES&quot;</span> <span class="attr">w:cryptAlgorithmClass</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">w:cryptAlgorithmType</span>=<span class="string">&quot;typeAny&quot;</span> <span class="attr">w:cryptAlgorithmSid</span>=<span class="string">&quot;14&quot;</span> <span class="attr">w:cryptSpinCount</span>=<span class="string">&quot;100000&quot;</span> <span class="attr">w:hash</span>=<span class="string">&quot;S79jzJM0xL7GnRcEC0X1FCE/DBXGpxs3zcZJaJTCcoNe++VSe6jxAJ0kOHl4af451iLGf2hKTU5p6bMCYzjnBw==&quot;</span> <span class="attr">w:salt</span>=<span class="string">&quot;2iM+6JOs+2kf63xprp4ohQ==&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DeepL破解失效"><a href="#DeepL破解失效" class="headerlink" title="DeepL破解失效"></a>DeepL破解失效</h1><p>查找：<code>C:\Users\windows11\AppData\Local\DeepL</code><br>文件夹下删除多余的app然后删除update<br>使用该文件夹下的exe进行打开</p><h1 id="DeepL提示翻译文件上限"><a href="#DeepL提示翻译文件上限" class="headerlink" title="DeepL提示翻译文件上限"></a>DeepL提示翻译文件上限</h1><p>重新安装破解 免费用户四篇</p>]]></content>
    
    
    <summary type="html">DeepL翻译技巧</summary>
    
    
    
    <category term="软件" scheme="http://hibiscidai.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="软件" scheme="http://hibiscidai.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>CIFLog3二次开发Java接口说明</title>
    <link href="http://hibiscidai.com/2023/10/30/CIFLog3%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91Java%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/"/>
    <id>http://hibiscidai.com/2023/10/30/CIFLog3%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91Java%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/</id>
    <published>2023-10-30T03:00:00.000Z</published>
    <updated>2023-10-30T07:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/10/30/CIFLog3%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91Java%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/CIFLog3%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91Java%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.png" class="" title="CIFLog3二次开发Java接口说明"><p>CIFLog3二次开发Java接口说明</p><span id="more"></span><p>[TOC]</p><h1 id="CIFLog3二次开发Java接口说明"><a href="#CIFLog3二次开发Java接口说明" class="headerlink" title="CIFLog3二次开发Java接口说明"></a>CIFLog3二次开发Java接口说明</h1><p>程序挂接路径：<code>...\CIFLog\platformResource_CN\appModule</code><br>cif包路径：<code>...CIFLog\ciflog\modules\</code></p><h1 id="Java基础数据访问接口"><a href="#Java基础数据访问接口" class="headerlink" title="Java基础数据访问接口"></a>Java基础数据访问接口</h1><h2 id="DataServiceBasicIO接口"><a href="#DataServiceBasicIO接口" class="headerlink" title="DataServiceBasicIO接口"></a>DataServiceBasicIO接口</h2><div class="table-container"><table><thead><tr><th style="text-align:left">接口函数</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:left">changeCurveDepthRange</td><td style="text-align:center">修改曲线深度区间</td></tr><tr><td style="text-align:left">closeCifp</td><td style="text-align:center">关闭井次文件</td></tr><tr><td style="text-align:left">copyCuve</td><td style="text-align:center">同井次间拷贝曲线</td></tr><tr><td style="text-align:left">copyTable</td><td style="text-align:center">不同井次间拷贝表格</td></tr><tr><td style="text-align:left">ereateCip</td><td style="text-align:center">创建井次文件</td></tr><tr><td style="text-align:left">ereateCure(categoryID, curveName, arrayNum, arraySize, startDepth, sampleCount, depthLevel, dataType, curveUnit)</td><td style="text-align:center">创建曲线</td></tr><tr><td style="text-align:left">createCure(categoryID, curveNane, arayNum, arnySixe, startDeph, sampleCoumu, dephLevel, dataType, curveUnit, isClean-ingData)</td><td style="text-align:center">创建曲线( 是否初始化曲线数据)</td></tr><tr><td style="text-align:left">ereateDocunent(int categoryID, String docName, int isOverwriten)</td><td style="text-align:center">创建空的二进制文档</td></tr><tr><td style="text-align:left">createDocument(int caltegoryID, String docName, String srcFilPath, int isOverwritten)</td><td style="text-align:center">创建二进制文档</td></tr><tr><td style="text-align:left">cretaTable</td><td style="text-align:center">创建表格</td></tr><tr><td style="text-align:left">createWell</td><td style="text-align:center">创建井文件</td></tr><tr><td style="text-align:left">deleteCurve</td><td style="text-align:center">删除曲线</td></tr><tr><td style="text-align:left">dispatchNotifcation</td><td style="text-align:center">分发数据更新消息</td></tr><tr><td style="text-align:left">flush</td><td style="text-align:center">刷新单条曲线缓存数据</td></tr><tr><td style="text-align:left">flushAll</td><td style="text-align:center">刷新所有曲线缓存数据</td></tr><tr><td style="text-align:left">getCategoryDepthUnit</td><td style="text-align:center">获得井次深度单位</td></tr><tr><td style="text-align:left">getCurentWorkDir</td><td style="text-align:center">获取当前工作目录</td></tr><tr><td style="text-align:left">getCurve1DCount</td><td style="text-align:center">获得井次文件中一维曲线条数</td></tr><tr><td style="text-align:left">getCurve1DName</td><td style="text-align:center">获得指定下标的一维曲线名称</td></tr><tr><td style="text-align:left">getCuve2DCount</td><td style="text-align:center">获得井次文件中二维曲线条数</td></tr><tr><td style="text-align:left">getCurve2DName</td><td style="text-align:center">获得指定下标的二维曲线名称</td></tr><tr><td style="text-align:left">getCurve3DCount</td><td style="text-align:center">获得井次文件中三维曲线条数</td></tr><tr><td style="text-align:left">getCurve3DName</td><td style="text-align:center">获得指定下标的三维曲线名称</td></tr><tr><td style="text-align:left">getCurveArrayNum</td><td style="text-align:center">获取曲线阵列数</td></tr><tr><td style="text-align:left">getCurveArraySize</td><td style="text-align:center">获取曲线阵列大小</td></tr><tr><td style="text-align:left">getCurveDepthLevel</td><td style="text-align:center">获取曲线采样间隔</td></tr><tr><td style="text-align:left">getCurveDepthUnit</td><td style="text-align:center">获取曲线深度单位</td></tr><tr><td style="text-align:left">getCurveDimension</td><td style="text-align:center">获取曲线维数</td></tr><tr><td style="text-align:left">gelCurveEndDepth</td><td style="text-align:center">获取曲线结束深度</td></tr><tr><td style="text-align:left">gelCurveStartDepth</td><td style="text-align:center">获取曲线开始深度</td></tr><tr><td style="text-align:left">getCurveUnit</td><td style="text-align:center">获取曲线单位</td></tr><tr><td style="text-align:left">getMainProjectPath</td><td style="text-align:center">获取系统当前主项目目录</td></tr><tr><td style="text-align:left">getSysIstallationPath</td><td style="text-align:center">获取系统安装目录</td></tr><tr><td style="text-align:left">getSysResourcePath</td><td style="text-align:center">获得系统资源目录</td></tr><tr><td style="text-align:left">getTableColumnCount</td><td style="text-align:center">获取表格列数</td></tr><tr><td style="text-align:left">getTableRowCount</td><td style="text-align:center">获取表格行数</td></tr><tr><td style="text-align:left">getWellPropertiesltemValue</td><td style="text-align:center">获取井次中的井属性</td></tr><tr><td style="text-align:left">isCategoryExisted</td><td style="text-align:center">判断井次是否存在</td></tr><tr><td style="text-align:left">isCurveExisted</td><td style="text-align:center">断曲线是否存在</td></tr><tr><td style="text-align:left">openCifp</td><td style="text-align:center">打开井次文件,获得井次ID号</td></tr><tr><td style="text-align:left">readCurve1D(categoryID, curveName, startDepth, dataCount, buffer)</td><td style="text-align:center">读一维曲线数据</td></tr><tr><td style="text-align:left">readCurve1D(categoryID, curveName, startDepth, depthLevel, dataCount, buffer)</td><td style="text-align:center">按指定的深度采样间隔读一维曲线数据</td></tr><tr><td style="text-align:left">readCurve1D(categoryID, curveName, startDepth, upwardCount, downWardCount，buffer)</td><td style="text-align:center">按前后点方式读一维曲线数据</td></tr><tr><td style="text-align:left">readCurve2D(categoryID, curveName, startDepth, dataCount, arraySize, buffer)</td><td style="text-align:center">读二维曲线数据</td></tr><tr><td style="text-align:left">readCurve2D(categoryID, curveName, startDepth, upwardCount, downWardCount, araySize, buffer)</td><td style="text-align:center">按前后点方式读二维曲线数据</td></tr><tr><td style="text-align:left">readCurve3D(categoryID, curveName, arrayIndex, startDepth, dataCount, araySize, buffer)</td><td style="text-align:center">读三维曲线数据</td></tr><tr><td style="text-align:left">readCurve3D(categoryID, curveName, arrayIndex, startDepth, upwardCount, downWardCount, arraySize, buffer)</td><td style="text-align:center">按前后点方式读三维曲线数据</td></tr><tr><td style="text-align:left">readDocument</td><td style="text-align:center">读文档保存至本地磁盘上的指定文件中</td></tr><tr><td style="text-align:left">readTable(int categoryID, String tableName, int rowIndex, float[] buffer)</td><td style="text-align:center">读表格记录</td></tr><tr><td style="text-align:left">readTable( int categoryID, String tableName, int rowIndex, String[] buffer)</td><td style="text-align:center">读表格记录</td></tr><tr><td style="text-align:left">removeTableAllRecords</td><td style="text-align:center">删除表格所有记录</td></tr><tr><td style="text-align:left">setCurveDepthLevel</td><td style="text-align:center">设置曲线深度采样间隔</td></tr><tr><td style="text-align:left">setCurveInterpolation</td><td style="text-align:center">设置曲线插值方式</td></tr><tr><td style="text-align:left">setWellropertiesItemValue</td><td style="text-align:center">设置井次中的井属性</td></tr><tr><td style="text-align:left">spliceFilePath</td><td style="text-align:center">拼接文件路径</td></tr><tr><td style="text-align:left">writeCurve1D</td><td style="text-align:center">写一维曲线数据</td></tr><tr><td style="text-align:left">writeCurve2D</td><td style="text-align:center">写二维曲线数据</td></tr><tr><td style="text-align:left">writeCurve3D</td><td style="text-align:center">写三维曲线数据</td></tr><tr><td style="text-align:left">writeDocument</td><td style="text-align:center">写二进制文档</td></tr><tr><td style="text-align:left">writeTable(int categoryID, String tableName, int rowIndex, float[] buffer)</td><td style="text-align:center">写表格记录</td></tr><tr><td style="text-align:left">writeTable(int categoryID, String tableName, int rowIndex, String[] buffer)</td><td style="text-align:center">写表格记录</td></tr></tbody></table></div><h2 id="DataServiceAssistIO接口"><a href="#DataServiceAssistIO接口" class="headerlink" title="DataServiceAssistIO接口"></a>DataServiceAssistIO接口</h2><div class="table-container"><table><thead><tr><th style="text-align:center">接口函数</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">getCategoryCount</td><td style="text-align:center">获取井次个数</td></tr><tr><td style="text-align:center">getCalegoryName</td><td style="text-align:center">获取井次名称</td></tr><tr><td style="text-align:center">getLogCurveCount</td><td style="text-align:center">获取曲线个数</td></tr><tr><td style="text-align:center">getLogCurveName</td><td style="text-align:center">获取曲线名称</td></tr><tr><td style="text-align:center">getLogDocCount</td><td style="text-align:center">获取文档个数</td></tr><tr><td style="text-align:center">getLogDocName</td><td style="text-align:center">获取文档名称</td></tr><tr><td style="text-align:center">getLogTableCount</td><td style="text-align:center">获取表格个数</td></tr><tr><td style="text-align:center">getLogTableName</td><td style="text-align:center">获取表格名称</td></tr><tr><td style="text-align:center">getWellCount</td><td style="text-align:center">获取井个数</td></tr><tr><td style="text-align:center">getWellName</td><td style="text-align:center">获取井名称</td></tr><tr><td style="text-align:center">getWorkSpaceCount</td><td style="text-align:center">获取工区个数</td></tr><tr><td style="text-align:center">getWorkSpaceName</td><td style="text-align:center">获取工区名称</td></tr><tr><td style="text-align:center">openDataSource</td><td style="text-align:center">打开数据源,获取数据源ID号</td></tr></tbody></table></div><h2 id="DataServiceIntegratedIO接口"><a href="#DataServiceIntegratedIO接口" class="headerlink" title="DataServiceIntegratedIO接口"></a>DataServiceIntegratedIO接口</h2><div class="table-container"><table><thead><tr><th style="text-align:center">接口函数</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">dataChangedNotification</td><td style="text-align:center">分发更新数据消息</td></tr><tr><td style="text-align:center">flushData</td><td style="text-align:center">刷新缓存中的数据</td></tr><tr><td style="text-align:center">getDEP</td><td style="text-align:center">获取当前曲线数据的输人深度</td></tr><tr><td style="text-align:center">getDEPO</td><td style="text-align:center">获取当前曲线数据的输出深度</td></tr><tr><td style="text-align:center">getEDEP</td><td style="text-align:center">获取当前处理层段的结束深度</td></tr><tr><td style="text-align:center">getENDEP</td><td style="text-align:center">获取处理井段的结束深度</td></tr><tr><td style="text-align:center">getErrorMessage</td><td style="text-align:center">获取错误信息</td></tr><tr><td style="text-align:center">getInDataCount</td><td style="text-align:center">获取一次读人的数据个数</td></tr><tr><td style="text-align:center">getInputCategoryDepthUnit</td><td style="text-align:center">获得处理井文件的深度单位</td></tr><tr><td style="text-align:center">getInputCurveValue(int index, double startDepth, int dataCount, float[] values)</td><td style="text-align:center">获取指定曲线的处理层段所有值, cifsun接口使用</td></tr><tr><td style="text-align:center">getInputCurveValues(double currentDep, float[] values)</td><td style="text-align:center">读入当前深度，点的每条输入曲线值</td></tr><tr><td style="text-align:center">getOutDataCount</td><td style="text-align:center">获取一次写人的数据个数</td></tr><tr><td style="text-align:center">getParameterValues</td><td style="text-align:center">获取当前处理层段的参数</td></tr><tr><td style="text-align:center">getRLEV</td><td style="text-align:center">获取处理井段的采样间隔</td></tr><tr><td style="text-align:center">getRLEVO</td><td style="text-align:center">获得输出曲线处理井段的采样间隔</td></tr><tr><td style="text-align:center">getRedirectionInputCurveName</td><td style="text-align:center">获得重定向输人曲线名称</td></tr><tr><td style="text-align:center">getRedirectionOutputCurveName</td><td style="text-align:center">获得重定向输出曲线名称</td></tr><tr><td style="text-align:center">getSDEP</td><td style="text-align:center">获取当前处理层段的起始深度</td></tr><tr><td style="text-align:center">getSTDEP</td><td style="text-align:center">获取处理井段的起始深度</td></tr><tr><td style="text-align:center">readInpFile</td><td style="text-align:center">解析参数卡片</td></tr><tr><td style="text-align:center">setCifpPath</td><td style="text-align:center">设置处理cifp文件路径</td></tr><tr><td style="text-align:center">setInArrayCurve</td><td style="text-align:center">设置输人的阵列曲线</td></tr><tr><td style="text-align:center">setInpFilePath</td><td style="text-align:center">设置参数卡片的路径</td></tr><tr><td style="text-align:center">setInputCurveNames</td><td style="text-align:center">设置初始的输人曲线名</td></tr><tr><td style="text-align:center">setInterpolation</td><td style="text-align:center">设置曲线的插值方式</td></tr><tr><td style="text-align:center">setNextDepthRangeDepths</td><td style="text-align:center">设置下一个处理层段相关值,到达处理层段末尾时不处理</td></tr><tr><td style="text-align:center">setOutArrayCurve</td><td style="text-align:center">设置输出的阵列曲线</td></tr><tr><td style="text-align:center">setOuputCifpPath</td><td style="text-align:center">设置输出cifp文件</td></tr><tr><td style="text-align:center">setOutputCurveNames</td><td style="text-align:center">设置初始的输出曲线名</td></tr><tr><td style="text-align:center">setOutputCurveUnit</td><td style="text-align:center">设置输出曲线单位</td></tr><tr><td style="text-align:center">setOutputCurveValues</td><td style="text-align:center">写人当前深度点的每条输出曲线值</td></tr><tr><td style="text-align:center">setOutputDepthLevel</td><td style="text-align:center">设置输出曲线处理层段的采样间隔</td></tr><tr><td style="text-align:center">setParameterNames</td><td style="text-align:center">设置初始的处理参数名</td></tr><tr><td style="text-align:center">setZero</td><td style="text-align:center">创建新曲线时是否将曲线值初始化为零</td></tr></tbody></table></div><h1 id="符合函数使用示例"><a href="#符合函数使用示例" class="headerlink" title="符合函数使用示例"></a>符合函数使用示例</h1><h2 id="计算POR"><a href="#计算POR" class="headerlink" title="计算POR"></a>计算POR</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POR</span> <span class="keyword">extends</span> <span class="title class_">JavaBaseTemplate</span> &#123;</span><br><span class="line">    <span class="comment">//&#123; &#123; variableDefination</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> AC;<span class="comment">//输人曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">DTma</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">DTf</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">B</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">Flag</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> POR;<span class="comment">//输出曲线</span></span><br><span class="line">    <span class="comment">//&#125; &#125; variableDefination .</span></span><br><span class="line">    <span class="type">float</span>[] inValues;<span class="comment">//一次读 人的输人曲线数据</span></span><br><span class="line">    <span class="type">float</span>[] outValues;<span class="comment">//- -次写出的输出曲线数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inhead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//&#123; &#123; initDefination</span></span><br><span class="line">        NAMEI = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; AC&quot;</span>&#125;;<span class="comment">//输人曲线名称列表</span></span><br><span class="line">        NAMEC = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; DTma&quot;</span>, <span class="string">&quot;DTf&quot;</span>, <span class="string">&quot; B&quot;</span>, <span class="string">&quot; Flag&quot;</span>&#125;;<span class="comment">//处理参数名称列表</span></span><br><span class="line">        NAMEO = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; POR&quot;</span>&#125;;<span class="comment">//输出曲线名称列表</span></span><br><span class="line">        params = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">4</span>];<span class="comment">//- -次读人的所有处理参数值</span></span><br><span class="line"><span class="comment">//&#125; &#125; initDefination</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        inhead();<span class="comment">//程序初始化</span></span><br><span class="line">        <span class="comment">//读入输人曲线或输出曲线的重定向,确定处理井段</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">returmCode</span> <span class="operator">=</span> parame(args[<span class="number">0</span>], arygs[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!retunCode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (DEP &lt;= ENDEP) &#123;<span class="comment">//循环主体</span></span><br><span class="line">            <span class="keyword">if</span> (DEP &gt;= EDEP) &#123;</span><br><span class="line">                vparame();</span><br><span class="line">            &#125;<span class="comment">//转换下一层段参数</span></span><br><span class="line">            indata();<span class="comment">//读DEP深度点上的输人曲线数据</span></span><br><span class="line">            <span class="comment">//以下为用户算法</span></span><br><span class="line">            <span class="comment">//&#123; &#123; userCodes</span></span><br><span class="line">            <span class="keyword">switch</span> ((<span class="type">int</span>) Flag) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    POR = (AC - DTma) / (DTf - DTma);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    POR = <span class="number">1</span> - (<span class="type">float</span>) Math.pow(DTma / AC, <span class="number">1</span> / B);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    POR = (AC - DTma) / (DTf - DTma);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (POR &lt; <span class="number">0</span>) POR = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//&#125; &#125; userCodes</span></span><br><span class="line"><span class="comment">//以上为用户算法</span></span><br><span class="line">            outdata();<span class="comment">//写DEPO深度点上的输出曲线数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        outhead();<span class="comment">//发送数据更新消息并关闭数据文件</span></span><br><span class="line">        <span class="keyword">return</span> returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开数据文件及参数文件,读人要重定向的输人曲线或输出曲线及参数卡</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parame</span><span class="params">(String wellPath, String inpFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseParame(wellPath, inpFilePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inValues = <span class="keyword">new</span> <span class="title class_">float</span>[indataCount];</span><br><span class="line">        outValues = <span class="keyword">new</span> <span class="title class_">float</span>[outdataCount]; .</span><br><span class="line"><span class="comment">//Get the parameters of the first disposal layer</span></span><br><span class="line"><span class="comment">//&#123; &#123;functionParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        DTma = params[<span class="number">0</span>];</span><br><span class="line">        DTf = params[<span class="number">1</span>];</span><br><span class="line">        B = params[<span class="number">2</span>];</span><br><span class="line">        Flag = params[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//&#125; &#125; functionParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//读人下一井段处理参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">vparame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseVParame()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//Get the parameters of the next disposal layer</span></span><br><span class="line"><span class="comment">//&#123; &#123;functionVParame</span></span><br><span class="line">        io.getParameterV <span class="title function_">alues</span> <span class="params">(params)</span>;</span><br><span class="line">        DTma = params[<span class="number">0</span>];</span><br><span class="line">        DTf = params[<span class="number">1</span>];</span><br><span class="line">        B = params[<span class="number">2</span>];</span><br><span class="line">        Flag = params[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//&#125; &#125; functionVParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//读人由DEP指定的曲线数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">indata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEP = RLEV * depIndex + SDEP;</span><br><span class="line">        io.getInputCurveValues(DEP, inValues);</span><br><span class="line"><span class="comment">//&#123; &#123;functionInData</span></span><br><span class="line">        AC = inValues[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//&#125;&#123; &#125;functionInData</span></span><br><span class="line">        depIndex++;</span><br><span class="line"><span class="comment">//读人由DEP指定的曲线数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outdata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEPO = RLEV * depoIndex + SDEP;</span><br><span class="line"><span class="comment">//&#123; &#123;functionOutData</span></span><br><span class="line">        outValues[<span class="number">0</span>] = POR;</span><br><span class="line"><span class="comment">//&#125;&#123; &#125;functionOutData</span></span><br><span class="line">        io.setOutputCurveValues(DEPO, outValues);</span><br><span class="line">        depoIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">POR</span> <span class="variable">processer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POR</span>();</span><br><span class="line">        <span class="keyword">if</span> (!processer.process(args)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;处理失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维曲线读写"><a href="#多维曲线读写" class="headerlink" title="多维曲线读写"></a>多维曲线读写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POR</span> <span class="keyword">extends</span> <span class="title class_">JavaBaseTemplate</span> &#123;</span><br><span class="line">    <span class="comment">//&#123; &#123;variableDefination</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> X3;<span class="comment">//输人曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span>[] X1 = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span> * <span class="number">500</span>];<span class="comment">//输人曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span>[] X2 = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span> * <span class="number">500</span>];<span class="comment">//输人曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> Y3;<span class="comment">//输出曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span>[] Y1 = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span> * <span class="number">500</span>];<span class="comment">//输出曲线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span>[] Y2 = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span> * <span class="number">500</span>];<span class="comment">//输出曲线</span></span><br><span class="line">    <span class="comment">//&#125; &#125; variableDefination</span></span><br><span class="line">    <span class="type">float</span>[] inValues;<span class="comment">//- -次读人的输人曲线数据</span></span><br><span class="line">    <span class="type">float</span>[] outValues;<span class="comment">//- -次写出的输出曲线数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inhead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//&#123; &#123; initDefination</span></span><br><span class="line">        NAMEI = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;X1&quot;</span>, <span class="string">&quot;X2&quot;</span>, <span class="string">&quot;X3&quot;</span>&#125;;<span class="comment">//输入曲线名称列表</span></span><br><span class="line">        NAMEC = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;;<span class="comment">//处理参数名称列表</span></span><br><span class="line">        NAMEO = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Y1&quot;</span>, <span class="string">&quot; Y2&quot;</span>, <span class="string">&quot;Y3&quot;</span>&#125;;<span class="comment">//输出曲线名称列表</span></span><br><span class="line">        params = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">0</span>];<span class="comment">//-次读人的所有处理参数值</span></span><br><span class="line"><span class="comment">//&#125; &#125; initDefination</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        inhead();<span class="comment">//程序初始化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">returmCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//&#123;&#123; processCodes</span></span><br><span class="line">        <span class="comment">/*调用PARAME函数之前,设置输人、输出阵列曲线的阵列参数*/</span></span><br><span class="line"><span class="comment">//(X1,1 ,500)表示输人曲线X1为一-阵列大小为500的二维阵列曲线</span></span><br><span class="line"><span class="comment">//(X2 ,3 ,500)表示输人曲线X2为一阵列大小为3 * 500的三维阵列曲线</span></span><br><span class="line">        io.setInArayCurve(<span class="string">&quot;X1,1 ,500;X2 ,3 ,500&quot;</span>);</span><br><span class="line"><span class="comment">//(Y1,1 ,500)表示输出曲线Y1为一-阵列大小为500的二维阵列曲线</span></span><br><span class="line"><span class="comment">//(Y2 ,3 ,500)表示输出曲线Y2为一-阵列大小为3 * 500的三维阵列曲线</span></span><br><span class="line">        io.setOutArrayCurve(<span class="string">&quot; Y1,1 ,500;Y2,3 ,500&quot;</span>);</span><br><span class="line"><span class="comment">//(Y1,n)表示输出曲线Y1的单位为in.</span></span><br><span class="line">        io.setOutputCurveUnit(<span class="string">&quot; Y1 ,in; Y2, ppm;Y3, %&quot;</span>);</span><br><span class="line"><span class="comment">//&#125; &#125; processCodes</span></span><br><span class="line"><span class="comment">//读人输人曲线或输出曲线的重定向,确定处理井段</span></span><br><span class="line">        returnCode = parame(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!returmCode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (DEP &lt;= ENDEP) &#123;<span class="comment">//循环主体</span></span><br><span class="line">            <span class="keyword">if</span> (DEP &gt;= EDEP) &#123;</span><br><span class="line">                vparame();</span><br><span class="line">            &#125;<span class="comment">//转换下一层段参数</span></span><br><span class="line">            indata();<span class="comment">//读DEP深度点上的输人曲线数据</span></span><br><span class="line"><span class="comment">//&#123; &#123; userCodes</span></span><br><span class="line"><span class="comment">//以下为用户算法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">                Y1[i] = X1[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span> * <span class="number">500</span>; i++) &#123;</span><br><span class="line">                Y2[i] = X2[i];</span><br><span class="line">            &#125;</span><br><span class="line">            Y3 = X3;</span><br><span class="line"><span class="comment">//以上为用户算法</span></span><br><span class="line"><span class="comment">//&#125; &#125; userCodes</span></span><br><span class="line">            outdata();<span class="comment">//写DEPO深度点上的输出曲线数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        outhead();<span class="comment">//发送数据更新消息并关闭数据文件</span></span><br><span class="line">        <span class="keyword">return</span> returmCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开数据文件及参数文件,读人要重定向的输人曲线或输出曲线及参数卡</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parame</span><span class="params">(String wellPath, String inpFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseParame(wellPath, inpFilePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inValues = <span class="keyword">new</span> <span class="title class_">float</span>[indataCount];</span><br><span class="line">        outValues = <span class="keyword">new</span> <span class="title class_">float</span>[outdataCount];</span><br><span class="line"><span class="comment">//&#123; &#123;functionParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line"><span class="comment">//&#125; &#125; functionParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//读人下一井段处理参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">vparame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseVParame()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//Get the parameters of the next disposal layer</span></span><br><span class="line"><span class="comment">//&#123; &#123;functionVParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line"><span class="comment">//&#125; &#125; functionVParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//读人由DEP指定的曲线数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">indata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEP = RLEV * depIndex + SDEP;</span><br><span class="line">        io.getInputCurveValues(DEP, inValues);</span><br><span class="line"><span class="comment">//&#123; &#123;functionInData</span></span><br><span class="line">        System.arraycopy(inValues, <span class="number">0</span>, X1, <span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">        System.arraycopy(inValues，<span class="number">500</span>, X2, <span class="number">0</span>, <span class="number">1500</span>);</span><br><span class="line">        X3 = inValues[<span class="number">2000</span>];</span><br><span class="line"><span class="comment">//&#125; &#125; functionInData</span></span><br><span class="line">        depIndex++;</span><br><span class="line"><span class="comment">//输出由DEPO深度点指定的曲线数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outdata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEPO = RLEV * depoIndex + SDEP;</span><br><span class="line"><span class="comment">//&#123; &#123;functionOutData</span></span><br><span class="line">        System.arraycopy(Y1, <span class="number">0</span>, outValues, <span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">        System.arraycopy(Y2, <span class="number">0</span>, outValues, <span class="number">500</span>, <span class="number">1500</span>);</span><br><span class="line">        outValues[<span class="number">1000</span>] = Y3;</span><br><span class="line"><span class="comment">//&#125; &#125; functionOutData</span></span><br><span class="line">        io.setOutputCurveV <span class="title function_">alues</span> <span class="params">(DEPO, outValues)</span>;</span><br><span class="line">        depoIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">POR</span> <span class="variable">processer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POR</span>();</span><br><span class="line">        <span class="keyword">if</span> (!processer.process(args)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;处理失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入曲线、输出曲线来自不同的井次文件"><a href="#输入曲线、输出曲线来自不同的井次文件" class="headerlink" title="输入曲线、输出曲线来自不同的井次文件"></a>输入曲线、输出曲线来自不同的井次文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POR</span> <span class="keyword">extends</span> <span class="title class_">JavaBaseTemplate</span> &#123;</span><br><span class="line">    <span class="comment">//&#123;&#123;variableDefination</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CAL;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">BITS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CALC;</span><br><span class="line">    <span class="comment">//&#125; &#125; variableDefination</span></span><br><span class="line">    <span class="type">float</span>[] inValues;<span class="comment">//一次读人的输人曲线数据</span></span><br><span class="line">    <span class="type">float</span>[] outValues;<span class="comment">//一次写出的输出曲线数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inhead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//&#123; &#123; initDefination</span></span><br><span class="line">        NAMEI = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CAL&quot;</span>&#125;;<span class="comment">//输入曲线名称列表</span></span><br><span class="line">        NAMEC = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; BITS&quot;</span>&#125;;<span class="comment">//处理参数名称列表</span></span><br><span class="line">        NAMEO = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CALC&quot;</span>&#125;;<span class="comment">//输出曲线名称列表</span></span><br><span class="line">        params = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>];<span class="comment">//- -次读入的所有处理参数值</span></span><br><span class="line">        <span class="comment">//&#125; &#125; initDefination</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        inhead();<span class="comment">//程序初始化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">retunCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//设置输出曲线来源</span></span><br><span class="line">        io.setOutputCifpPath(args[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//读入输人曲线或输出曲线的重定向，确定处理井段</span></span><br><span class="line">        retumCode = parame(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!returmCode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (DEP &lt;= ENDEP) &#123;<span class="comment">//循环主体</span></span><br><span class="line">            <span class="keyword">if</span> (DEP &gt;= EDEP) &#123;</span><br><span class="line">                vparame();</span><br><span class="line">            &#125;<span class="comment">//转换下一层段参数</span></span><br><span class="line">            indata();<span class="comment">//读DEP深度点上的输人曲线数据</span></span><br><span class="line">            <span class="comment">//&#123; &#123; userCodes</span></span><br><span class="line">            <span class="comment">//以下为用户算法</span></span><br><span class="line">            CALC = CAL - BITS;</span><br><span class="line">            <span class="comment">//以上为用户算法</span></span><br><span class="line">            <span class="comment">//&#125; &#125; userCodes</span></span><br><span class="line">            outdata();<span class="comment">//写DEPO深度点上的输出曲线数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        outhead();<span class="comment">//发送数据更新消息并关闭数据文件</span></span><br><span class="line">        returm returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开数据文件及参数文件，读人要重定向的输入曲线或输出曲线及参数卡</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parame</span><span class="params">(String wellPath, String inpFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseParame(wellPath, inpFilePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inValues = <span class="keyword">new</span> <span class="title class_">float</span>[indataCount];</span><br><span class="line">        outValues = <span class="keyword">new</span> <span class="title class_">float</span>[outdataCount];</span><br><span class="line">        <span class="comment">//&#123; &#123; functionParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//&#125; &#125; functionParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读人下一井段处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">vparame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseVParame()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Get the parameters of the next disposal layer</span></span><br><span class="line">        <span class="comment">//&#123; &#123; functionVParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//&#125; &#125; functionVParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入由DEP指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">indata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEP = RLEV * depIndex + SDEP;</span><br><span class="line">        io.getInputCurveValues(DEP, inValues);</span><br><span class="line">        <span class="comment">// &#123;&#123; functionInData</span></span><br><span class="line">        CAL = inValues[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//&#125; &#125; functionInData</span></span><br><span class="line">        depIndex + +;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出由DEPO深度点指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outdata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEPO = RLEV * depoIndex + SDEP;</span><br><span class="line">        <span class="comment">// &#123;&#123; functionOutData</span></span><br><span class="line">        outValues[<span class="number">0</span>] = CALC;</span><br><span class="line">        <span class="comment">//&#125; &#125; functionOutData</span></span><br><span class="line">        io.setOutputCurveValues(DEPO, outValues);</span><br><span class="line">        depoIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">POR</span> <span class="variable">processer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POR</span>();</span><br><span class="line">        <span class="keyword">if</span> (!processer.process(args)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;处理失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置输入、输出曲线采样间隔"><a href="#设置输入、输出曲线采样间隔" class="headerlink" title="设置输入、输出曲线采样间隔"></a>设置输入、输出曲线采样间隔</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POR</span> <span class="keyword">extends</span> <span class="title class_">JavaBaseTemplate</span> &#123;</span><br><span class="line">    <span class="comment">//&#123; &#123; variableDefination</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CAL;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">BITS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CALC;</span><br><span class="line">    <span class="comment">//&#125; &#125; variableDefination</span></span><br><span class="line">    <span class="type">float</span>[] inValues;<span class="comment">//-次读入的输人曲线数据</span></span><br><span class="line">    <span class="type">float</span>[] outValues;<span class="comment">//- -次写出的输出曲线数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inhead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// &#123;&#123; initDefination</span></span><br><span class="line">        NAMEI = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CAL&quot;</span>&#125;;</span><br><span class="line">        NAMEC = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; BITS&quot;</span>&#125;;</span><br><span class="line">        NAMEO = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CALC&quot;</span>&#125;;</span><br><span class="line">        params = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125; &#125; initDefination</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        inhead();<span class="comment">//程序初始化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">retumCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//设置输入曲线、输出曲线采样间隔</span></span><br><span class="line"><span class="comment">//每次调用INDATA--次,当前深度向下移动0.125</span></span><br><span class="line">        io.setInputDepthLevel(<span class="number">0.</span> <span class="number">125</span>);</span><br><span class="line"><span class="comment">//新建的输出曲线采样间隔统一为0.25</span></span><br><span class="line">        io.setOutputDepthLevel(<span class="number">0.</span> <span class="number">25</span>);</span><br><span class="line"><span class="comment">//读入输入曲线或输出曲线的重定向,确定处理井段</span></span><br><span class="line">        retumCode = parame(args[O], rgs[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!returnCode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (DEP &lt;= ENDEP) &#123;<span class="comment">//循环主体</span></span><br><span class="line">            <span class="keyword">if</span> (DEP &gt;= EDEP) &#123;</span><br><span class="line">                vparame();</span><br><span class="line">            &#125;<span class="comment">//转换下一层段参数</span></span><br><span class="line">            indata();<span class="comment">//读DEP深度点上的输人曲线数据</span></span><br><span class="line"><span class="comment">//&#123; &#123;userCodes</span></span><br><span class="line"><span class="comment">//以下为用户算法</span></span><br><span class="line">            CALC = CAL - BITS;</span><br><span class="line"><span class="comment">//以上为用户算法</span></span><br><span class="line"><span class="comment">//&#125; &#125; userCodes</span></span><br><span class="line">            outdata();<span class="comment">//写DEPO深度点上的输出曲线数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        outhead();<span class="comment">//发送数据更新消息并关闭数据文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开数据文件及参数文件,读入要重定向的输人曲线或输出曲线及参数卡</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parame</span><span class="params">(String wellPath, String inpFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseParame(wellPath, inpFilePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inValues = <span class="keyword">new</span> <span class="title class_">float</span>[indataCount];</span><br><span class="line">        outValues = <span class="keyword">new</span> <span class="title class_">float</span>[outdataCount];</span><br><span class="line"><span class="comment">// &#123;&#123; functionParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//&#125; &#125; functionParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入下一-井段处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">vparame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseVParame()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//Get the parameters of the next disposal layer</span></span><br><span class="line"><span class="comment">//&#123; &#123; functionVParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//&#125; &#125; functionVParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读人由DEP指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">indata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEP = RLEV * depIndex + SDEP;</span><br><span class="line">        io.getInputCurveValues(DEP, inValues);</span><br><span class="line"><span class="comment">//&#123; &#123; functionInData</span></span><br><span class="line">        CAL = inValues[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//&#125; &#125;functionInData</span></span><br><span class="line">        depIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出由DEPO深度点指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outdata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEPO = RLEV * depoIndex + SDEP;</span><br><span class="line"><span class="comment">//&#123; &#123; functionOutData</span></span><br><span class="line">        outValues[<span class="number">0</span>] = CALC;</span><br><span class="line"><span class="comment">//&#125; &#125; functionOutData</span></span><br><span class="line">        io.setOutputCurveValues(DEPO, outValues);</span><br><span class="line">        depoIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">POR</span> <span class="variable">processer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POR</span>();</span><br><span class="line">        <span class="keyword">if</span> (!processer.process(args)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;处理失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础函数使用示例"><a href="#基础函数使用示例" class="headerlink" title="基础函数使用示例"></a>基础函数使用示例</h1><h2 id="曲线读写"><a href="#曲线读写" class="headerlink" title="曲线读写"></a>曲线读写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceBasicIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">curvelD</span> <span class="operator">=</span> <span class="string">&quot;X1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">curve2D</span> <span class="operator">=</span> <span class="string">&quot;X2&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">curve3D</span> <span class="operator">=</span> <span class="string">&quot;X3&quot;</span>;</span><br><span class="line">        <span class="type">float</span>[] buffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">DataServiceBasicIO</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceBasicI0</span>();</span><br><span class="line">        <span class="comment">//命令行第一个参数为输人井次文件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> io.openCifp(args[<span class="number">0</span>]);<span class="comment">//打开eifp文件,获得文件ID号</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一维曲线读写</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> io.isCurveExisted(id, curve1D);<span class="comment">//判断曲线是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">startDepth</span> <span class="operator">=</span> io.getCurveStartDepth(id, curve1D);<span class="comment">//获得曲线起始深度</span></span><br><span class="line">            readCount = io.readCurve1D(id, curve1D, startDepth, <span class="number">100</span>, buffer);<span class="comment">//读曲线值</span></span><br><span class="line">            <span class="keyword">for</span> (inti = <span class="number">0</span>; i &lt; readCount; i++) &#123;</span><br><span class="line">                buffer[i] = buffer[i] - <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            io.writeCurve1D(id, curve1D, sartDepth, <span class="number">100</span>, buffer);<span class="comment">//写一维曲线值</span></span><br><span class="line">            io.flush(id, curve1D);<span class="comment">//刷新缓存数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二维曲线读写</span></span><br><span class="line">        retCode = io.isCurveExisted(id, curve2D);<span class="comment">//判断曲线是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">startDepth</span> <span class="operator">=</span> io.getCurveStartDepth(id, curve2D);<span class="comment">//获得曲线起始深度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> io.getCurveArraySize(id, curve2D);<span class="comment">//获得曲线阵列大小</span></span><br><span class="line">            <span class="comment">//读二维曲线值</span></span><br><span class="line">            readCount = io.readCurve2D(id, curve2D, startDepth, <span class="number">100</span>, arraySize, buffer);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; readCount * araySize; i++) &#123;</span><br><span class="line">                buffer[i] = buffer[i] - <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            io.writeCurve2D(id, curve2D, startDepth, <span class="number">100</span>, arraySize, buffer);<span class="comment">//写二维曲线值</span></span><br><span class="line">            io.flush(id, curve2D);<span class="comment">//刷新缓存数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三维曲线读写</span></span><br><span class="line">        retCode = io.isCurveExisted(id, curve3D);<span class="comment">//判断曲线是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">startDepth</span> <span class="operator">=</span> io.getCurveStartDepth(id, curve3D);<span class="comment">//获得曲线起始深度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> io.getCurveArraySize(id, curve3D);<span class="comment">//获得曲线阵列大小</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">arrayNum</span> <span class="operator">=</span> io.getCurveArrayNum(id, curve3D);<span class="comment">//获得曲线阵列数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrayNum; j++) &#123;</span><br><span class="line">                <span class="comment">//读三维曲线值</span></span><br><span class="line">                readCount = io.readCurve3D(id, curve3D, j, startDepth, <span class="number">100</span>, arraySize, buffer);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; readCount * arraySize; i++) &#123;</span><br><span class="line">                    buffer[i] = buffer[i] - <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//写三维曲线值</span></span><br><span class="line">                io.writeCurve3D(id, curve3D, j, startDepth, <span class="number">100</span>, arraySize, buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            io.flush(id, curve3D);<span class="comment">//刷新缓存数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        io.dispatchNotification();<span class="comment">//分发数据更新消息</span></span><br><span class="line">        io.closeCifp(id);<span class="comment">//关闭cifp文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表格读写"><a href="#表格读写" class="headerlink" title="表格读写"></a>表格读写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eif.dataservice.io.DataServiceBasicIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableTemplateName</span> <span class="operator">=</span> <span class="string">&quot;解释结论&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName1</span> <span class="operator">=</span> <span class="string">&quot; result&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName2</span> <span class="operator">=</span> <span class="string">&quot; result1 &quot;</span>;</span><br><span class="line">        <span class="type">DataServiceBasiclO</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceBasicIO</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> io.openCifp(args[<span class="number">0</span>]);<span class="comment">//打开eifp文件,获得文件ID号</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> io.isCurveExisted(id, tableNamel);<span class="comment">//判断表格是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得表格行数和列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> io.getTableRowCount(id, tableNamel);</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> io.getTableColumnCount(id, tableNamel);</span><br><span class="line">        retCode = io.createTable(id, tableTemplateName, tableName2, <span class="number">0</span>);<span class="comment">//创建系统表格</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照字符串形式统一读写 表格数据循环</span></span><br><span class="line">        String[] buffer = <span class="keyword">new</span> <span class="title class_">String</span>[colunnCount];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= rowCount; i + +) &#123;</span><br><span class="line">            retCode = io.readTable(id, tableNamne1, i, bufer);</span><br><span class="line">            <span class="keyword">if</span> (retCode ==<span class="number">1</span>)&#123;</span><br><span class="line">                io.writeTable(id, tableName2, i, buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        io.dispatchNotification();<span class="comment">//分发数据更新消息</span></span><br><span class="line">        io.closeCifp(id);<span class="comment">//关闭ceifp 文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复合接口与基础接口混用示例"><a href="#复合接口与基础接口混用示例" class="headerlink" title="复合接口与基础接口混用示例"></a>复合接口与基础接口混用示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eif.dataservice.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JavaBaseTemplate</span> &#123;</span><br><span class="line">    <span class="comment">//&#123; &#123; variableDefination</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CAL;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">BITS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> CALC;</span><br><span class="line">    <span class="comment">//&#125; &#125; variableDefination</span></span><br><span class="line">    <span class="type">float</span>[] inValues;<span class="comment">//- -次读人的输入曲线数据</span></span><br><span class="line">    <span class="type">float</span>[] outValues;<span class="comment">//-次写出的输出曲线数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inhead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//&#123; &#123; initDefination</span></span><br><span class="line">        NAMEI = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CAL&quot;</span>&#125;;<span class="comment">//输人曲线名称列表</span></span><br><span class="line">        NAMEC = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot; BITS&quot;</span>&#125;;<span class="comment">//处理参数名称列表</span></span><br><span class="line">        NAMEO = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;CALC&quot;</span>&#125;;<span class="comment">//输出曲线名称列表</span></span><br><span class="line">        params = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>];<span class="comment">//一次读人的所有处理参数值</span></span><br><span class="line">        <span class="comment">//&#125; &#125; initDefination</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        inhead();<span class="comment">//程序初始化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">returmCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读入输入曲线或输出曲线的重定向,确定处理井段</span></span><br><span class="line">        retumCode = parame(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!returmnCode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (DEP &lt;= ENDEP) &#123;<span class="comment">// 循环主体</span></span><br><span class="line">            <span class="keyword">if</span> (DEP &gt;= EDEP) &#123;</span><br><span class="line">                vparame();</span><br><span class="line">            &#125;<span class="comment">//转换下一层段参数</span></span><br><span class="line">            indata();<span class="comment">//读DEP深度点上的输人曲线数据</span></span><br><span class="line">            <span class="comment">//&#123; &#123; userCodes</span></span><br><span class="line">            <span class="comment">//以下为用户算法</span></span><br><span class="line">            CALC = CAL - BITS;</span><br><span class="line">            <span class="comment">//以上为用户算法</span></span><br><span class="line">            <span class="comment">//&#125; &#125; userCodes</span></span><br><span class="line">            outdata();<span class="comment">//写DEPO深度点上的输出曲线数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基础函数部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableTemplateName</span> <span class="operator">=</span> <span class="string">&quot;解释结论&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableNamel</span> <span class="operator">=</span> <span class="string">&quot; result&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName2</span> <span class="operator">=</span> <span class="string">&quot; result1&quot;</span>;</span><br><span class="line">        <span class="type">DataServiceBasicIO</span> <span class="variable">iol</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceBasicI0</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> iol.openCifp(rgs[<span class="number">0</span>]);<span class="comment">//打开eifp文件,获得文件ID号</span></span><br><span class="line">        <span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> iol.isCurveExisted(id, tableName1);<span class="comment">//判断表格是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得表格行数和列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> iol.getTableRowCount(id, tableNamel);</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> iol.getTableColumnCount(d, tableNamel);</span><br><span class="line">        retCode = iol.createTable(id, tableTemplateName, tableName2, <span class="number">0</span>);<span class="comment">//创建系统表格</span></span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照字符串形式统-读写表格数据循环</span></span><br><span class="line">        String[] buffer = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= rowCount; i++) &#123;</span><br><span class="line">            retCode = iol.readTable(id, tableNamel, i, buffer);</span><br><span class="line">            <span class="keyword">if</span> (retCode == <span class="number">1</span>) &#123;</span><br><span class="line">                iol.writeTable(id, tableName2, i, buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iol.closeCifp(id);<span class="comment">//关闭cifp 文件</span></span><br><span class="line"></span><br><span class="line">        outhead();<span class="comment">//发送数据更新消息并关闭数据文件</span></span><br><span class="line">        <span class="keyword">return</span> returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开数据文件及参数文件,读人要重定向的输人曲线或输出曲线及参数卡</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parame</span><span class="params">(String wellPah, String inpFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseParame(wellPath, inpFilePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inValues = <span class="keyword">new</span> <span class="title class_">float</span>[indataCount];</span><br><span class="line">        outValues = <span class="keyword">new</span> <span class="title class_">float</span>[outdataCount];</span><br><span class="line">        <span class="comment">// &#123;&#123; functionParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//&#125; &#125; functionParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入下一井段处理参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">vparame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!baseVParame()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Get the parameters of the next disposal layer</span></span><br><span class="line">        <span class="comment">//functionVParame</span></span><br><span class="line">        io.getParameterValues(params);</span><br><span class="line">        BITS = params[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//!! functionVParame</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入由 DEP 指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">indata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEP = RLEV * depIndex + SDEP;</span><br><span class="line">        io.getlnputCurveValues(DEP, inValues);</span><br><span class="line">        <span class="comment">//!! functionlnData</span></span><br><span class="line">        CAL = inValues[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//t! functionlnData</span></span><br><span class="line">        depIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出由 DEPO 深度点指定的曲线数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outdata</span><span class="params">()</span> &#123;</span><br><span class="line">        DEPO = RLEV * depolndex + SDEP;</span><br><span class="line">        <span class="comment">//! f functionOutData</span></span><br><span class="line">        outValues[<span class="number">0</span>] = CALC;</span><br><span class="line">        <span class="comment">//! functionOutData</span></span><br><span class="line">        io.setOutputCurveValues(DEPO, outValues);</span><br><span class="line">        depolndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">POR</span> <span class="variable">processer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POR</span>();</span><br><span class="line">        <span class="keyword">if</span> (!processer.process(args)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;处理失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二次开发args传参说明"><a href="#二次开发args传参说明" class="headerlink" title="二次开发args传参说明"></a>二次开发args传参说明</h1><h2 id="单井"><a href="#单井" class="headerlink" title="单井"></a>单井</h2><p>arg[0]：代表当前Cifp文件路径</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正在启动进程...</span><br><span class="line">命令：&quot;&quot;java&quot; &quot;-classpath&quot; &quot;&quot;D:\CIFLog\platformResource_CN\appModule\单井读取地层表格&quot;;&quot;D:\CIFLog\ciflog\modules\cif-base.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-dataengine.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-dataservice.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-baseutil.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-cifplus.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-db.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-resource.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-libe.jar&quot;;&quot;D:\CIFLog\ciflog\modules\org-openide-util.jar&quot;;&quot;D:\CIFLog\ciflog\modules\org-openide-util-lookup.jar&quot;&quot; &quot;Read_FM&quot; &quot;CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3580_100082608601W600\3580_100082608601W600_精简&quot; &quot;C:\Users\windows11\.cifPlatform\temp\app_7819482362594584962_单井读取地层表格.inp&quot;&quot;</span><br><span class="line">名称：单井读取地层表格</span><br></pre></td></tr></table></figure><h2 id="多井"><a href="#多井" class="headerlink" title="多井"></a>多井</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：&quot;&quot;java&quot; &quot;-classpath&quot; &quot;&quot;D:\CIFLog\platformResource_CN\appModule\Read_FM&quot;;&quot;D:\CIFLog\ciflog\modules\cif-base.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-dataengine.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-dataservice.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-baseutil.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-cifplus.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-resource.jar&quot;;&quot;D:\CIFLog\ciflog\modules\cif-libe.jar&quot;;&quot;D:\CIFLog\ciflog\modules\org-openide-util-lookup.jar&quot;&quot; &quot;Read_FM&quot; &quot;C:\Users\windows11\.cifPlatform\temp\MW_tmp_wellFilePath.wells&quot; &quot;C:\Users\windows11\.cifPlatform\temp\MW_tmp_paramFilePath.inp&quot;&quot;</span><br></pre></td></tr></table></figure><p>会在本次生成两个缓存文件</p><p>arg[0]代表批处理井的编号的文件，文件内存储多个单井的Cifp文件路径</p><h1 id="单井读取表格"><a href="#单井读取表格" class="headerlink" title="单井读取表格"></a>单井读取表格</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceBasicIO;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceAssistIO;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Read_FM</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException&#123;</span><br><span class="line"><span class="comment">//要读取的表格名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tableName1</span> <span class="operator">=</span> <span class="string">&quot;层位&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">tableName2</span> <span class="operator">=</span> <span class="string">&quot;小层&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建接口</span></span><br><span class="line"><span class="type">DataServiceBasicIO</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceBasicIO</span>();</span><br><span class="line"><span class="type">DataServiceAssistIO</span> <span class="variable">io1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceAssistIO</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开井次文件，获取井次ID号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> io.openCifp(args[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//System.out.println(id);</span></span><br><span class="line"><span class="comment">//如果没有井次文件，退出程序</span></span><br><span class="line"><span class="keyword">if</span>(id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不存在井次&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DataServiceAssistIO接口里getWellName方法的传入参数是什么,public int getWellName（int arg0, String arg1,int arg2）</span></span><br><span class="line"><span class="comment">//System.out.println(io1.getWellName(0, args[0], 0));</span></span><br><span class="line"><span class="comment">//arg[0]代表当前Cifp文件路径</span></span><br><span class="line"><span class="comment">//System.out.println(args[0]);</span></span><br><span class="line"><span class="comment">//System.out.println(args[1]);</span></span><br><span class="line"><span class="comment">//System.out.println(args[2]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从args0中提取出井位id</span></span><br><span class="line"><span class="comment">//斜杠划分坐标</span></span><br><span class="line">String[] split1 = args[<span class="number">0</span>].split(java.util.regex.Matcher.quoteReplacement(File.separator));</span><br><span class="line"><span class="comment">//System.out.println(split1[split1.length - 1]);</span></span><br><span class="line"><span class="comment">//当前井序名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">WellCategoryName</span> <span class="operator">=</span> split1[split1.length - <span class="number">1</span>];</span><br><span class="line">String[] split2 = WellCategoryName.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">WellId</span> <span class="operator">=</span> split2[<span class="number">0</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">WellUWI</span> <span class="operator">=</span> split2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断表格是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> io.isCurveExisted(id, tableName1);</span><br><span class="line"><span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;表格不存在&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得表格行数和列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> io.getTableRowCount(id, tableName1);</span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> io.getTableColumnCount(id, tableName1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照字符串形式统一读写表 格数据循环</span></span><br><span class="line">String[] buffer = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line"><span class="comment">//一行一行输出</span></span><br><span class="line"><span class="comment">//retCode = io.readTable(id, tableName1, 2, buffer);</span></span><br><span class="line"><span class="comment">//String temp1 = Arrays.toString(buffer);</span></span><br><span class="line"><span class="comment">//System.out.println(temp1);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;--&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= rowCount; i++) &#123;</span><br><span class="line">retCode = io.readTable(id, tableName1, i, buffer);</span><br><span class="line"><span class="comment">//单排输出</span></span><br><span class="line"><span class="comment">//格式：井序名IDUWI层位名层顶层底</span></span><br><span class="line">System.out.print(WellCategoryName);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(WellId);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(WellUWI);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">0</span>]);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">1</span>]);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">2</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//整个表输出</span></span><br><span class="line"><span class="comment">//String temp = Arrays.toString(buffer);</span></span><br><span class="line"><span class="comment">//System.out.println(temp);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.dispatchNotification();<span class="comment">//分发数据更新消息</span></span><br><span class="line">io.closeCifp(id);<span class="comment">//关闭eifp文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多井读取表格"><a href="#多井读取表格" class="headerlink" title="多井读取表格"></a>多井读取表格</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceBasicIO;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Read_Tables</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException&#123;</span><br><span class="line"><span class="comment">//要读取的表格名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tableName1</span> <span class="operator">=</span> <span class="string">&quot;层位&quot;</span>;</span><br><span class="line"><span class="comment">//String tableName1 = &quot;小层&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//args[0]为存放井列表的一个文件地址</span></span><br><span class="line"><span class="comment">//System.out.println(args[0]);//C:\Users\windows11\.cifPlatform\temp\MW_tmp_wellFilePath.wells</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//井列表</span></span><br><span class="line"><span class="type">String</span> <span class="variable">wellFilePathAll</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件地址内容</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">          <span class="type">char</span>[] charArray = <span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">          fileReader.read(charArray);</span><br><span class="line">          wellFilePathAll = <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"><span class="comment">//          System.out.println(wellFilePathAll);</span></span><br><span class="line">          <span class="comment">//CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3536_100062808506W600+\3536_100062808506W600_精简</span></span><br><span class="line">          <span class="comment">//CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3571_102040909711W600_缺DT\3571_102040909711W600_精简</span></span><br><span class="line">          <span class="comment">//CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3580_100082608601W600\3580_100082608601W600_精简</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileReader.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理井列表字符串</span></span><br><span class="line"><span class="comment">//分行</span></span><br><span class="line">String[] wellFilePathTemp1 = wellFilePathAll.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//System.out.println(wellFilePathTemp1[0]);//CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3536_100062808506W600+\3536_100062808506W600_精简</span></span><br><span class="line"><span class="comment">//System.out.println(wellFilePathTemp1[1]);//CIF://F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3571_102040909711W600_缺DT\3571_102040909711W600_精简</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明井路径字符串数组</span></span><br><span class="line">String[] wellFilePath = <span class="keyword">new</span> <span class="title class_">String</span>[wellFilePathTemp1.length];</span><br><span class="line"><span class="comment">//每一行切分然后保存路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; wellFilePathTemp1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">String[] wellFilePathTemp2 = wellFilePathTemp1[i].split(<span class="string">&quot;//&quot;</span>);</span><br><span class="line">wellFilePath[i] = wellFilePathTemp2[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//System.out.println(wellFilePath[i]);</span></span><br><span class="line"><span class="comment">//F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3536_100062808506W600+\3536_100062808506W600_精简</span></span><br><span class="line"><span class="comment">//F:\nextcloudData\No2\WesternCanadaBasinWrokSpaceCiflog1-1\WesternCanadaBasin\东1-可用_垂直\3571_102040909711W600_缺DT\3571_102040909711W600_精简</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//批处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wellFilePath.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//创建接口</span></span><br><span class="line"><span class="type">DataServiceBasicIO</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataServiceBasicIO</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开井次文件，获取井次ID号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> io.openCifp(wellFilePath[i]);</span><br><span class="line"><span class="comment">//System.out.println(id);</span></span><br><span class="line"><span class="comment">//如果没有井次文件，退出程序</span></span><br><span class="line"><span class="keyword">if</span>(id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不存在井次&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//斜杠划分坐标</span></span><br><span class="line">String[] split1 = wellFilePath[i].split(java.util.regex.Matcher.quoteReplacement(File.separator));</span><br><span class="line"><span class="comment">//System.out.println(split1[split1.length - 1]);</span></span><br><span class="line"><span class="comment">//当前井序名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">WellCategoryName</span> <span class="operator">=</span> split1[split1.length - <span class="number">1</span>];</span><br><span class="line">String[] split2 = WellCategoryName.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">WellId</span> <span class="operator">=</span> split2[<span class="number">0</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">WellUWI</span> <span class="operator">=</span> split2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断表格是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> io.isCurveExisted(id, tableName1);</span><br><span class="line"><span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;表格不存在&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得表格行数和列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> io.getTableRowCount(id, tableName1);</span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> io.getTableColumnCount(id, tableName1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照字符串形式统一读写表 格数据循环</span></span><br><span class="line">String[] buffer = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line"><span class="comment">//一行一行输出</span></span><br><span class="line"><span class="comment">//retCode = io.readTable(id, tableName1, 2, buffer);</span></span><br><span class="line"><span class="comment">//String temp1 = Arrays.toString(buffer);</span></span><br><span class="line"><span class="comment">//System.out.println(temp1);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;--&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1</span>; i1 &lt;= rowCount; i1++) &#123;</span><br><span class="line">retCode = io.readTable(id, tableName1, i1, buffer);</span><br><span class="line"><span class="comment">//单排输出</span></span><br><span class="line"><span class="comment">//格式：井序名IDUWI层位名层顶层底</span></span><br><span class="line"><span class="comment">//System.out.print(WellCategoryName);</span></span><br><span class="line"><span class="comment">//System.out.print(&#x27;\t&#x27;);</span></span><br><span class="line">System.out.print(WellId);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(WellUWI);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">0</span>]);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">1</span>]);</span><br><span class="line">System.out.print(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">System.out.print(buffer[<span class="number">2</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//整个表输出</span></span><br><span class="line"><span class="comment">//String temp = Arrays.toString(buffer);</span></span><br><span class="line"><span class="comment">//System.out.println(temp);</span></span><br><span class="line">&#125;</span><br><span class="line">buffer = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取API接口参数方法"><a href="#获取API接口参数方法" class="headerlink" title="获取API接口参数方法"></a>获取API接口参数方法</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>反射类加载机制读取，无法了解传入参数的解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceBasicIO;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.io.DataServiceAssistIO;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUOQULEI</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cif.dataservice.io.DataServiceBasicIO&quot;</span>);</span><br><span class="line"><span class="comment">//-------------------获取方法的详细信息</span></span><br><span class="line"><span class="comment">//-------------------测试函数getDeclaredMethods()</span></span><br><span class="line">Method m[] = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line"><span class="comment">//--------------------获得方法的名字</span></span><br><span class="line">System.out.println(<span class="string">&quot;getDeclaredMethods()获得的方法的名字是:&quot;</span> + m[i].getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法参数的类型和有几个参数</span></span><br><span class="line">Class b[] = m[i].getParameterTypes();<span class="comment">//获得所有的参数并且存放到数组B中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; b.length; j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getDeclaredMethods()获得的参数的类型是&quot;</span> + b[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法返回值的类型</span></span><br><span class="line">System.out.println(<span class="string">&quot;getDeclaredMethods()获得的方法的返回值的类型&quot;</span> + m[i].getReturnType());<span class="comment">//获得方法的返回值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的修饰符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> m[i].getModifiers();</span><br><span class="line">System.out.println(<span class="string">&quot;getDeclaredMethods()获得的方法的修饰符有&quot;</span> + Modifier.toString(mod));</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的异常类型</span></span><br><span class="line">Class e[] = m[i].getExceptionTypes();<span class="comment">//获得所有的异常类型存放到数组e中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; e.length; k++)&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;getDeclaredMethods()获得的方法的异常类型是：&quot;</span> + e[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//-------------------获取方法的详细信息</span></span><br><span class="line"><span class="comment">//-------------------测试函数getMethods()</span></span><br><span class="line">Method n[] = c.getMethods();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n.length; i++) &#123;</span><br><span class="line"><span class="comment">//--------------------获得方法的名字</span></span><br><span class="line">System.out.println(<span class="string">&quot;getMethods()获得的方法的名字是:&quot;</span> + n[i].getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法参数的类型和有几个参数</span></span><br><span class="line">Class b1[] = n[i].getParameterTypes();<span class="comment">//获得所有的参数并且存放到数组B中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; b1.length; j++)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;getMethods()获得的参数的类型是&quot;</span> + b1[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法返回值的类型</span></span><br><span class="line">System.out.println(<span class="string">&quot;getMethods()获得的方法的返回值的类型&quot;</span> + n[i].getReturnType());<span class="comment">//获得方法的返回值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的修饰符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mod1</span> <span class="operator">=</span> n[i].getModifiers();</span><br><span class="line">System.out.println(<span class="string">&quot;getMethods()获得的方法的修饰符有&quot;</span> + Modifier.toString(mod1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的异常类型</span></span><br><span class="line">Class e1[] = n[i].getExceptionTypes();<span class="comment">//获得所有的异常类型存放到数组e中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; e1.length; k++)&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;getMethods()获得的方法的异常类型是：&quot;</span> + e1[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的注解信息</span></span><br><span class="line">Parameter[] parameters = n[i].getParameters();</span><br><span class="line"><span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                Class&lt;?&gt; parameterType = parameter.getType();</span><br><span class="line">                Annotation[] annotations = parameter.getAnnotations();</span><br><span class="line">                <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Parameter Annotation: &quot;</span> + annotation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------获得方法的参数名称</span></span><br><span class="line"><span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                Class&lt;?&gt; parameterType = parameter.getType();</span><br><span class="line">                Annotation[] annotations = parameter.getAnnotations();</span><br><span class="line">                <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameter.getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;Parameter Name: &quot;</span> + parameterName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用注解方式获取：（无法读取包内注解信息，返回空指针异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取字节码对象</span></span><br><span class="line">            Class&lt;?&gt; r= Class.forName(<span class="string">&quot;cif.dataservice.io.DataServiceAssistIO&quot;</span>);</span><br><span class="line">            <span class="comment">//类操作</span></span><br><span class="line">            <span class="comment">//class1(r);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//属性操作</span></span><br><span class="line">            <span class="comment">//field(r);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法操作</span></span><br><span class="line">            method(r);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造方法方法</span></span><br><span class="line">            <span class="comment">//constructor(r);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">class1</span><span class="params">(Class&lt;?&gt; r)</span> &#123;</span><br><span class="line">        <span class="comment">//获取全限定类名</span></span><br><span class="line">        r.getName();</span><br><span class="line">        <span class="comment">//获取包名</span></span><br><span class="line">        r.getPackage().getName();</span><br><span class="line">        <span class="comment">//获取类上所有注解</span></span><br><span class="line">        Annotation[] annotations = r.getAnnotations();</span><br><span class="line">        <span class="comment">//获取类上指定的注解</span></span><br><span class="line">        <span class="type">ClassAnnotation</span> <span class="variable">classAnnotation</span> <span class="operator">=</span>r.getAnnotation(ClassAnnotation.class);</span><br><span class="line">        <span class="comment">//注解的全限定类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">aClass</span> <span class="operator">=</span> classAnnotation.annotationType().getName();</span><br><span class="line">        <span class="comment">//判断是否有指定注解</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> r.isAnnotationPresent(ClassAnnotation.class);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">field</span><span class="params">(Class&lt;?&gt; r)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取指定属性</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> r.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">//获取属性名</span></span><br><span class="line">            System.out.println(id.getName());</span><br><span class="line">            <span class="comment">//获取属性类型</span></span><br><span class="line">            System.out.println(id.getType().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有属性</span></span><br><span class="line">        Field[] fields = r.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">//获取属性上面指定的指定的注解</span></span><br><span class="line">            <span class="type">FieldAnnotation</span> <span class="variable">fieldAnnotation</span> <span class="operator">=</span> field.getAnnotation(FieldAnnotation.class);</span><br><span class="line">            <span class="comment">//获取注解属性值</span></span><br><span class="line">            System.out.println(fieldAnnotation.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">constructor</span><span class="params">(Class&lt;?&gt; r)</span> &#123;</span><br><span class="line">        <span class="comment">//获取所有构造方法</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = r.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            <span class="comment">//获取构造方法上面指定的注解</span></span><br><span class="line">            <span class="type">ConstructorAnnotation</span> <span class="variable">constructorAnnotation</span> <span class="operator">=</span> constructor.getAnnotation(ConstructorAnnotation.class);</span><br><span class="line">            <span class="comment">//获取注解的属性值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;含参构造&quot;</span>.equals(constructorAnnotation.value()))&#123;</span><br><span class="line">                <span class="comment">//获取各个参数名</span></span><br><span class="line">                Parameter[] parameters = constructor.getParameters();</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                    System.out.println(parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取各个参数类型</span></span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">                <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                    System.out.println(parameterType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取参数数量</span></span><br><span class="line">                System.out.println(constructor.getParameterCount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *方法操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Class&lt;?&gt; r)</span> &#123;</span><br><span class="line">        <span class="comment">//获取所有方法</span></span><br><span class="line">        Method[] methods = r.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//获取方法上指定的注解</span></span><br><span class="line">            <span class="type">MethodAnnotation</span> <span class="variable">methodAnnotation</span> <span class="operator">=</span> method.getAnnotation(MethodAnnotation.class);</span><br><span class="line">            System.out.println(methodAnnotation.value());</span><br><span class="line">            <span class="comment">//获取方法名</span></span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">            <span class="comment">//获取返回值类型</span></span><br><span class="line">            System.out.println(method.getReturnType().getName());</span><br><span class="line">            <span class="comment">//获取各个形参数名及类型</span></span><br><span class="line">            Parameter[] parameters = method.getParameters();</span><br><span class="line">            <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                System.out.println(parameter.getName());</span><br><span class="line">                System.out.println(parameter.getType().getName());</span><br><span class="line">                <span class="comment">//获取参数的注解</span></span><br><span class="line">                System.out.println(parameter.getAnnotation(ParameterAnnotation.class).value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> ClassAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MethodAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> ConstructorAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> syl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> ParameterAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataServiceAssistIO"><a href="#DataServiceAssistIO" class="headerlink" title="DataServiceAssistIO"></a>DataServiceAssistIO</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredMethods()获得的方法的名字是:exportTextFileData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.StringBuffer</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.io.File</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有privat</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:openLocalDataSource</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getWorkSpaceCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLoggingNameList</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCategoryCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getWorkSpaceName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogCurveCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getWellName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogTableCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogTableName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCategoryName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogDocName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLoggingCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogCurveName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLoggingName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getWellCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:openDataSource</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getLogDocCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getID</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getWorkSpaceCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCategoryCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getWorkSpaceName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogCurveCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getWellName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogTableCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogTableName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCategoryName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogDocName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogCurveName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getWellCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:openDataSource</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getLogDocCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的参数的类型是long</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的参数的类型是long</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:equals</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.Object</span><br><span class="line">getMethods()获得的方法的返回值的类型boolean</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:toString</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:hashCode</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getClass</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.Class</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:notify</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:notifyAll</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br></pre></td></tr></table></figure><h2 id="DataServiceBasicIO"><a href="#DataServiceBasicIO" class="headerlink" title="DataServiceBasicIO"></a>DataServiceBasicIO</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredMethods()获得的方法的名字是:getMainProjectPath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:exportTextFileData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.StringBuffer</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.io.File</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurrentWorkDir</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveDimension</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:changeCurveDepthRange</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:isCategoryExisted</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:isCategoryExisted</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.DataPath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getSysInstallationPath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getSysResourcePath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createBulkCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCommonTableName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCategoryDepthUnit</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCommonTableCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveStartDepth</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveDepthLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:setCurveDepthLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:spliceFilePath</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCurveEx</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:closeCifp</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createWell</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCifp</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCifp</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是boolean</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getWellPropertiesItemValue</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:setWellPropertiesItemValue</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:flush</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getID</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:openCifp</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve3DName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve2DName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeBulkCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [[[F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeBulkCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve1DCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveEndDepth</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveXLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveXCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveXUnit</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.ReadMode</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveYMin</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveYLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveYMax</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveYCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveYUnit</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve3DCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:reacBulkCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:reacBulkCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [[[F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveXMin</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve1DName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.ReadMode</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [S</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurve2DCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:isCurveExisted</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveXMax</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型double</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是float</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:deleteTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:copyCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveArrayNum</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveUnit</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveProperty</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class cif.dataservice.io.CurveProperty</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getTableRowCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:deleteCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTable_x</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型float</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:copyTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:flushAll</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getTableColumnCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:addWellNotification</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogWell</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:changeCurveDepthLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogCategory</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class cif.dataengine.io.LogCurve</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:setCurveInterpolation</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveTimeSampleLevel</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型float</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveDepthUnit</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCommonTableColumnName</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:removeTableAllRecords</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:computReadRowCount</span><br><span class="line">getDeclaredMethods()获得的参数的类型是byte</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LoggingProperties</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:addCategoryNotification</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataservice.io.ReferCategoryStruct</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCurveArraySize</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:dispatchNotification</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型void</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createRemoteCategory</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.DataPath</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createLocalCategory</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.DataPath</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createDocument</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createDocument</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readDocument</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readDocument</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [B</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeDocument</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [B</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:copyCurveAction</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogCategory</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogCurve</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class cif.dataengine.io.LogCurve</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve_3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve_2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTableData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTableData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeTableData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.ReadMode</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.ReadMode</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_3D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTableData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readTableData</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.io.LogTable</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getDocSize</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:buildCurveXD</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型class cif.dataengine.io.CurveXD</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:writeCurve_1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [S</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_2D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:createLocalWell</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.DataPath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:readCurve_1D</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getDeclaredMethods()获得的参数的类型是double</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是int</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class [F</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getDeclaredMethods()获得的方法的名字是:getCategoryID</span><br><span class="line">getDeclaredMethods()获得的参数的类型是class cif.dataengine.DataPath</span><br><span class="line">getDeclaredMethods()获得的方法的返回值的类型int</span><br><span class="line">getDeclaredMethods()获得的方法的修饰符有private</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getMainProjectPath</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurrentWorkDir</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveDimension</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:changeCurveDepthRange</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:isCategoryExisted</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getSysInstallationPath</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getSysResourcePath</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createBulkCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">Parameter Name: arg8</span><br><span class="line">Parameter Name: arg9</span><br><span class="line">Parameter Name: arg10</span><br><span class="line">Parameter Name: arg11</span><br><span class="line">Parameter Name: arg12</span><br><span class="line">Parameter Name: arg13</span><br><span class="line">Parameter Name: arg14</span><br><span class="line">Parameter Name: arg15</span><br><span class="line">Parameter Name: arg16</span><br><span class="line">Parameter Name: arg17</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCommonTableName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCategoryDepthUnit</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCommonTableCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveStartDepth</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveDepthLevel</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:setCurveDepthLevel</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:spliceFilePath</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createCurveEx</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">Parameter Name: arg8</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:closeCifp</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createWell</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createCifp</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createCifp</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createCurve</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">Parameter Name: arg8</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createCurve</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">Parameter Name: arg8</span><br><span class="line">Parameter Name: arg9</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getWellPropertiesItemValue</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:setWellPropertiesItemValue</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:flush</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:openCifp</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve3DName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve2DName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeBulkCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [[[F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeBulkCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve1DCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveEndDepth</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveXLevel</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveXCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveXUnit</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeCurve1D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveYMin</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveYLevel</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveYMax</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveYCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveYUnit</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve3DCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:reacBulkCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:reacBulkCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [[[F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveXMin</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve1DName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve2D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [S</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">Parameter Name: arg8</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">Parameter Name: arg7</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurve2DCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeCurve3D</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是double</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">Parameter Name: arg5</span><br><span class="line">Parameter Name: arg6</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:isCurveExisted</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveXMax</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型double</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是float</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:deleteTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:copyCurve</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveArrayNum</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveUnit</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveProperty</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class cif.dataservice.io.CurveProperty</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getTableRowCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:deleteCurve</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [Ljava.lang.String;</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [F</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readTable_x</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型float</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:copyTable</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:flushAll</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getTableColumnCount</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:setCurveInterpolation</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveTimeSampleLevel</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型float</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveDepthUnit</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCommonTableColumnName</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:removeTableAllRecords</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getCurveArraySize</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:dispatchNotification</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createDocument</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:createDocument</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readDocument</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:readDocument</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [B</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:writeDocument</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class [B</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">Parameter Name: arg2</span><br><span class="line">Parameter Name: arg3</span><br><span class="line">Parameter Name: arg4</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getDocSize</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.String</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的参数的类型是long</span><br><span class="line">getMethods()获得的参数的类型是int</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">Parameter Name: arg1</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:wait</span><br><span class="line">getMethods()获得的参数的类型是long</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">getMethods()获得的方法的异常类型是：class java.lang.InterruptedException</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:equals</span><br><span class="line">getMethods()获得的参数的类型是class java.lang.Object</span><br><span class="line">getMethods()获得的方法的返回值的类型boolean</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">Parameter Name: arg0</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:toString</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.String</span><br><span class="line">getMethods()获得的方法的修饰符有public</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:hashCode</span><br><span class="line">getMethods()获得的方法的返回值的类型int</span><br><span class="line">getMethods()获得的方法的修饰符有public native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:getClass</span><br><span class="line">getMethods()获得的方法的返回值的类型class java.lang.Class</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:notify</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">getMethods()获得的方法的名字是:notifyAll</span><br><span class="line">getMethods()获得的方法的返回值的类型void</span><br><span class="line">getMethods()获得的方法的修饰符有public final native</span><br><span class="line">-------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h1 id="详细接口API说明"><a href="#详细接口API说明" class="headerlink" title="详细接口API说明"></a>详细接口API说明</h1><p>ciflog对应的基础jar包路径：<code>...\CIFLog\ciflog\modules</code></p><p>前文中提到的dataservice接口在<code>cif-dataservice.jar</code>中</p><p>打开IDEA，文件→项目结构→库→添加库，可以将jar包导入</p><h2 id="DataServiceAssistIO-java"><a href="#DataServiceAssistIO-java" class="headerlink" title="DataServiceAssistIO.java"></a>DataServiceAssistIO.java</h2><h3 id="简略方法"><a href="#简略方法" class="headerlink" title="简略方法"></a>简略方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">openDataSource</span><span class="params">(String dataSourcePath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkSpaceCount</span><span class="params">(<span class="type">int</span> dataSourceID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWellCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCategoryCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogCurveCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogTableCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogDocCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getWorkSpaceName</span><span class="params">(<span class="type">int</span> dataSourceID, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getWellName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCategoryName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLogCurveName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLogTableName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLogDocName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span></span><br></pre></td></tr></table></figure><h3 id="类源码"><a href="#类源码" class="headerlink" title="类源码"></a>类源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cif.dataservice.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cif.dataengine.DataPath;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCategory;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogDataSource;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogDocument;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogTable;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWell;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWorkSpace;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.openide.util.Exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServiceAssistIO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataServiceAssistIO</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exportTextFileData</span><span class="params">(StringBuffer sourceData, File file)</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            <span class="type">byte</span>[] bytes = sourceData.toString().getBytes();</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">            Exceptions.printStackTrace(var13);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var12) &#123;</span><br><span class="line">                    Exceptions.printStackTrace(var12);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">openDataSource</span><span class="params">(String dataSourcePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourcePath != <span class="literal">null</span> &amp;&amp; !dataSourcePath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> dataSourcePath.trim();</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(temp);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                DataSourceContainer.getInstance().removeElement(dataSourceStruct);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> temp.indexOf(<span class="string">&quot;@@**&quot;</span>);</span><br><span class="line">            <span class="type">return</span> <span class="variable">index</span> <span class="operator">=</span>= -<span class="number">1</span> ? <span class="built_in">this</span>.openLocalDataSource(temp) : <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkSpaceCount</span><span class="params">(<span class="type">int</span> dataSourceID)</span> &#123;</span><br><span class="line">        <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">        <span class="type">return</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span>= <span class="literal">null</span> ? -<span class="number">1</span> : dataSourceStruct.dataSource.getWorkSpaceCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWellCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSourceStruct.dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="type">return</span> <span class="variable">ws</span> <span class="operator">=</span>= <span class="literal">null</span> ? -<span class="number">1</span> : ws.getWellCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCategoryCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty() &amp;&amp; wellName != <span class="literal">null</span> &amp;&amp; !wellName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSourceStruct.dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName.trim());</span><br><span class="line">                    <span class="type">return</span> <span class="variable">well</span> <span class="operator">=</span>= <span class="literal">null</span> ? -<span class="number">1</span> : well.getCategoryCount();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogCurveCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingCount(dataSourceID, workSpaceName, wellName, categoryName, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogTableCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingCount(dataSourceID, workSpaceName, wellName, categoryName, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLogDocCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingCount(dataSourceID, workSpaceName, wellName, categoryName, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWorkSpaceName</span><span class="params">(<span class="type">int</span> dataSourceID, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">        <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSourceStruct.dataSource.getLogWorkSpace(index);</span><br><span class="line">            <span class="type">return</span> <span class="variable">ws</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : ws.getWorkSpaceName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWellName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataSourceStruct.dataSource;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(index);</span><br><span class="line">                    <span class="type">return</span> <span class="variable">well</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : well.getWellName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCategoryName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty() &amp;&amp; wellName != <span class="literal">null</span> &amp;&amp; !wellName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataSourceStruct.dataSource;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName.trim());</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(index);</span><br><span class="line">                        <span class="type">return</span> <span class="variable">category</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : category.getCategoryName();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLogCurveName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingName(dataSourceID, workSpaceName, wellName, categoryName, index, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLogTableName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingName(dataSourceID, workSpaceName, wellName, categoryName, index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLogDocName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getLoggingName(dataSourceID, workSpaceName, wellName, categoryName, index, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getLoggingCount</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> loggingType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty() &amp;&amp; wellName != <span class="literal">null</span> &amp;&amp; !wellName.trim().isEmpty() &amp;&amp; categoryName != <span class="literal">null</span> &amp;&amp; !categoryName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataSourceStruct.dataSource;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName.trim());</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(categoryName.trim());</span><br><span class="line">                        <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">logCount</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">switch</span> (loggingType) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                    logCount = category.getLogCurveCount();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                    logCount = category.getLogCommonTableCount();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                    logCount = category.getLogDocCount();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> logCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getLoggingName</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, <span class="type">int</span> index, <span class="type">int</span> loggingType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty() &amp;&amp; wellName != <span class="literal">null</span> &amp;&amp; !wellName.trim().isEmpty() &amp;&amp; categoryName != <span class="literal">null</span> &amp;&amp; !categoryName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataSourceStruct.dataSource;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName.trim());</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(categoryName.trim());</span><br><span class="line">                        <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">loggingName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">switch</span> (loggingType) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                    <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(index);</span><br><span class="line">                                    <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        loggingName = curve.getName();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                    <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(index);</span><br><span class="line">                                    <span class="keyword">if</span> (table != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        loggingName = table.getName();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                    <span class="type">LogDocument</span> <span class="variable">document</span> <span class="operator">=</span> category.getLogDoc(index);</span><br><span class="line">                                    <span class="keyword">if</span> (document != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        loggingName = document.getName();</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> loggingName;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getLoggingNameList</span><span class="params">(<span class="type">int</span> dataSourceID, String workSpaceName, String wellName, String categoryName, String[] loggingNames, <span class="type">int</span> loggingType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workSpaceName != <span class="literal">null</span> &amp;&amp; !workSpaceName.trim().isEmpty() &amp;&amp; wellName != <span class="literal">null</span> &amp;&amp; !wellName.trim().isEmpty() &amp;&amp; categoryName != <span class="literal">null</span> &amp;&amp; !categoryName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> DataSourceContainer.getInstance().getElement(dataSourceID);</span><br><span class="line">            <span class="keyword">if</span> (dataSourceStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataSourceStruct.dataSource;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(workSpaceName.trim());</span><br><span class="line">                <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName.trim());</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(categoryName.trim());</span><br><span class="line">                        <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">retCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                            <span class="type">int</span> i;</span><br><span class="line">                            <span class="keyword">switch</span> (loggingType) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                    retCount = category.getLogCurveCount();</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; retCount; ++i) &#123;</span><br><span class="line">                                        loggingNames[i] = category.getLogCurve(i).getName();</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">return</span> retCount;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                    retCount = category.getLogCommonTableCount();</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; retCount; ++i) &#123;</span><br><span class="line">                                        loggingNames[i] = category.getLogCommonTable(i).getName();</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">return</span> retCount;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                    retCount = category.getLogDocCount();</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; retCount; ++i) &#123;</span><br><span class="line">                                        loggingNames[i] = category.getLogDoc(i).getName();</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">openLocalDataSource</span><span class="params">(String dataSourcePath)</span> &#123;</span><br><span class="line">        <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">        dataPath.parse(dataSourcePath);</span><br><span class="line">        <span class="keyword">if</span> (dataPath.getPathLevel() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dsFilePath</span> <span class="operator">=</span> dataPath.getDataSourceName();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dsFilePath);</span><br><span class="line">            <span class="keyword">if</span> (file.exists() &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">                file = <span class="keyword">new</span> <span class="title class_">File</span>(dsFilePath + File.separator + <span class="string">&quot;cifPlatform.xml&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">                    <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">                    <span class="keyword">if</span> (!dataSource.connect(dsFilePath)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="built_in">this</span>.getID();</span><br><span class="line">                    DataSourceContainer.getInstance().addElement(<span class="keyword">new</span> <span class="title class_">DataSourceStruct</span>(dataSource, id));</span><br><span class="line">                    <span class="keyword">return</span> id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dataSourceID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; DataSourceContainer.getInstance().size(); ++i) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> DataSourceContainer.getInstance().elemenAt(i).id;</span><br><span class="line">                <span class="keyword">if</span> (dataSourceID == id) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    ++dataSourceID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSourceID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataServiceBasicIO-java"><a href="#DataServiceBasicIO-java" class="headerlink" title="DataServiceBasicIO.java"></a>DataServiceBasicIO.java</h2><h3 id="简略方法-1"><a href="#简略方法-1" class="headerlink" title="简略方法"></a>简略方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">spliceFilePath</span><span class="params">(String prePath, String sufPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentWorkDir</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMainProjectPath</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSysInstallationPath</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSysResourcePath</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">openCifp</span><span class="params">(String cifpPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeCifp</span><span class="params">(<span class="type">int</span> categoryID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getWellPropertiesItemValue</span><span class="params">(<span class="type">int</span> categoryID, String itemName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWellPropertiesItemValue</span><span class="params">(<span class="type">int</span> categoryID, String itemName, String itemValue)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCategoryDepthUnit</span><span class="params">(<span class="type">int</span> categoryID)</span><span class="comment">//meter_0,feet_1,s_2,defult_-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createWell</span><span class="params">(String wellPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCifp</span><span class="params">(String cifpPath, <span class="type">int</span> isOverwritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCifp</span><span class="params">(String cifpPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurveEx</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit, <span class="type">int</span> isCleaningData)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> dataType, String curveUnit, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">double</span> xMin, <span class="type">double</span> xMax, <span class="type">double</span> xLevel, <span class="type">double</span> yMin, <span class="type">double</span> yMax, <span class="type">double</span> yLevel, <span class="type">int</span> xCount, <span class="type">int</span> yCount, String xUnit, String yUnit, <span class="type">int</span> isCleaningData)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">isCategoryExisted</span><span class="params">(String categoryPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">isCurveExisted</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve1DCount</span><span class="params">(<span class="type">int</span> categoryID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurve1DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurve2DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurve3DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCommonTableName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve2DCount</span><span class="params">(<span class="type">int</span> categoryID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve3DCount</span><span class="params">(<span class="type">int</span> categoryID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCommonTableCount</span><span class="params">(<span class="type">int</span> categoryID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer, <span class="type">int</span> interpolationMode)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer, <span class="type">int</span> interpolationMode)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">short</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reacBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reacBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[][][] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[][][] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveStartDepth</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveEndDepth</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveDepthLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXMin</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXMax</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveXCount</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurveXUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYMin</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYMax</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveYCount</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurveYUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setCurveDepthLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> newDepthLevel)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">changeCurveDepthRange</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> newStartDepth, <span class="type">double</span> newEndDepth)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">copyCurve</span><span class="params">(<span class="type">int</span> categoryID, String srcCurveName, String desCurveName, <span class="type">int</span> isOverWritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CurveProperty <span class="title function_">getCurveProperty</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveDimension</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveArrayNum</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveArraySize</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCurveTimeSampleLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurveUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurveDepthUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushAll</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurveInterpolation</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> mode)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createTable</span><span class="params">(<span class="type">int</span> categoryID, String tableTemplateName, String tableName, <span class="type">int</span> isOverwritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTableRowCount</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCommonTableColumnName</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> columnIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTableColumnCount</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">readTable_x</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, String[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, <span class="type">float</span> buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, String buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, String[] buffer)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">copyTable</span><span class="params">(<span class="type">int</span> srcCategoryID, String srcTableName, <span class="type">int</span> desCategoryID, String desTableName, <span class="type">int</span> isOverwritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTableAllRecords</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDocSize</span><span class="params">(<span class="type">int</span> categoryID, String docName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> isOverwritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, String srcFilePath, <span class="type">int</span> isOverwritten)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> offset, <span class="type">int</span> byteSize, <span class="type">byte</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, String desFilePath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> offset, <span class="type">int</span> byteSize, <span class="type">byte</span>[] buffer)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchNotification</span><span class="params">()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类源码-1"><a href="#类源码-1" class="headerlink" title="类源码"></a>类源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br><span class="line">2917</span><br><span class="line">2918</span><br><span class="line">2919</span><br><span class="line">2920</span><br><span class="line">2921</span><br><span class="line">2922</span><br><span class="line">2923</span><br><span class="line">2924</span><br><span class="line">2925</span><br><span class="line">2926</span><br><span class="line">2927</span><br><span class="line">2928</span><br><span class="line">2929</span><br><span class="line">2930</span><br><span class="line">2931</span><br><span class="line">2932</span><br><span class="line">2933</span><br><span class="line">2934</span><br><span class="line">2935</span><br><span class="line">2936</span><br><span class="line">2937</span><br><span class="line">2938</span><br><span class="line">2939</span><br><span class="line">2940</span><br><span class="line">2941</span><br><span class="line">2942</span><br><span class="line">2943</span><br><span class="line">2944</span><br><span class="line">2945</span><br><span class="line">2946</span><br><span class="line">2947</span><br><span class="line">2948</span><br><span class="line">2949</span><br><span class="line">2950</span><br><span class="line">2951</span><br><span class="line">2952</span><br><span class="line">2953</span><br><span class="line">2954</span><br><span class="line">2955</span><br><span class="line">2956</span><br><span class="line">2957</span><br><span class="line">2958</span><br><span class="line">2959</span><br><span class="line">2960</span><br><span class="line">2961</span><br><span class="line">2962</span><br><span class="line">2963</span><br><span class="line">2964</span><br><span class="line">2965</span><br><span class="line">2966</span><br><span class="line">2967</span><br><span class="line">2968</span><br><span class="line">2969</span><br><span class="line">2970</span><br><span class="line">2971</span><br><span class="line">2972</span><br><span class="line">2973</span><br><span class="line">2974</span><br><span class="line">2975</span><br><span class="line">2976</span><br><span class="line">2977</span><br><span class="line">2978</span><br><span class="line">2979</span><br><span class="line">2980</span><br><span class="line">2981</span><br><span class="line">2982</span><br><span class="line">2983</span><br><span class="line">2984</span><br><span class="line">2985</span><br><span class="line">2986</span><br><span class="line">2987</span><br><span class="line">2988</span><br><span class="line">2989</span><br><span class="line">2990</span><br><span class="line">2991</span><br><span class="line">2992</span><br><span class="line">2993</span><br><span class="line">2994</span><br><span class="line">2995</span><br><span class="line">2996</span><br><span class="line">2997</span><br><span class="line">2998</span><br><span class="line">2999</span><br><span class="line">3000</span><br><span class="line">3001</span><br><span class="line">3002</span><br><span class="line">3003</span><br><span class="line">3004</span><br><span class="line">3005</span><br><span class="line">3006</span><br><span class="line">3007</span><br><span class="line">3008</span><br><span class="line">3009</span><br><span class="line">3010</span><br><span class="line">3011</span><br><span class="line">3012</span><br><span class="line">3013</span><br><span class="line">3014</span><br><span class="line">3015</span><br><span class="line">3016</span><br><span class="line">3017</span><br><span class="line">3018</span><br><span class="line">3019</span><br><span class="line">3020</span><br><span class="line">3021</span><br><span class="line">3022</span><br><span class="line">3023</span><br><span class="line">3024</span><br><span class="line">3025</span><br><span class="line">3026</span><br><span class="line">3027</span><br><span class="line">3028</span><br><span class="line">3029</span><br><span class="line">3030</span><br><span class="line">3031</span><br><span class="line">3032</span><br><span class="line">3033</span><br><span class="line">3034</span><br><span class="line">3035</span><br><span class="line">3036</span><br><span class="line">3037</span><br><span class="line">3038</span><br><span class="line">3039</span><br><span class="line">3040</span><br><span class="line">3041</span><br><span class="line">3042</span><br><span class="line">3043</span><br><span class="line">3044</span><br><span class="line">3045</span><br><span class="line">3046</span><br><span class="line">3047</span><br><span class="line">3048</span><br><span class="line">3049</span><br><span class="line">3050</span><br><span class="line">3051</span><br><span class="line">3052</span><br><span class="line">3053</span><br><span class="line">3054</span><br><span class="line">3055</span><br><span class="line">3056</span><br><span class="line">3057</span><br><span class="line">3058</span><br><span class="line">3059</span><br><span class="line">3060</span><br><span class="line">3061</span><br><span class="line">3062</span><br><span class="line">3063</span><br><span class="line">3064</span><br><span class="line">3065</span><br><span class="line">3066</span><br><span class="line">3067</span><br><span class="line">3068</span><br><span class="line">3069</span><br><span class="line">3070</span><br><span class="line">3071</span><br><span class="line">3072</span><br><span class="line">3073</span><br><span class="line">3074</span><br><span class="line">3075</span><br><span class="line">3076</span><br><span class="line">3077</span><br><span class="line">3078</span><br><span class="line">3079</span><br><span class="line">3080</span><br><span class="line">3081</span><br><span class="line">3082</span><br><span class="line">3083</span><br><span class="line">3084</span><br><span class="line">3085</span><br><span class="line">3086</span><br><span class="line">3087</span><br><span class="line">3088</span><br><span class="line">3089</span><br><span class="line">3090</span><br><span class="line">3091</span><br><span class="line">3092</span><br><span class="line">3093</span><br><span class="line">3094</span><br><span class="line">3095</span><br><span class="line">3096</span><br><span class="line">3097</span><br><span class="line">3098</span><br><span class="line">3099</span><br><span class="line">3100</span><br><span class="line">3101</span><br><span class="line">3102</span><br><span class="line">3103</span><br><span class="line">3104</span><br><span class="line">3105</span><br><span class="line">3106</span><br><span class="line">3107</span><br><span class="line">3108</span><br><span class="line">3109</span><br><span class="line">3110</span><br><span class="line">3111</span><br><span class="line">3112</span><br><span class="line">3113</span><br><span class="line">3114</span><br><span class="line">3115</span><br><span class="line">3116</span><br><span class="line">3117</span><br><span class="line">3118</span><br><span class="line">3119</span><br><span class="line">3120</span><br><span class="line">3121</span><br><span class="line">3122</span><br><span class="line">3123</span><br><span class="line">3124</span><br><span class="line">3125</span><br><span class="line">3126</span><br><span class="line">3127</span><br><span class="line">3128</span><br><span class="line">3129</span><br><span class="line">3130</span><br><span class="line">3131</span><br><span class="line">3132</span><br><span class="line">3133</span><br><span class="line">3134</span><br><span class="line">3135</span><br><span class="line">3136</span><br><span class="line">3137</span><br><span class="line">3138</span><br><span class="line">3139</span><br><span class="line">3140</span><br><span class="line">3141</span><br><span class="line">3142</span><br><span class="line">3143</span><br><span class="line">3144</span><br><span class="line">3145</span><br><span class="line">3146</span><br><span class="line">3147</span><br><span class="line">3148</span><br><span class="line">3149</span><br><span class="line">3150</span><br><span class="line">3151</span><br><span class="line">3152</span><br><span class="line">3153</span><br><span class="line">3154</span><br><span class="line">3155</span><br><span class="line">3156</span><br><span class="line">3157</span><br><span class="line">3158</span><br><span class="line">3159</span><br><span class="line">3160</span><br><span class="line">3161</span><br><span class="line">3162</span><br><span class="line">3163</span><br><span class="line">3164</span><br><span class="line">3165</span><br><span class="line">3166</span><br><span class="line">3167</span><br><span class="line">3168</span><br><span class="line">3169</span><br><span class="line">3170</span><br><span class="line">3171</span><br><span class="line">3172</span><br><span class="line">3173</span><br><span class="line">3174</span><br><span class="line">3175</span><br><span class="line">3176</span><br><span class="line">3177</span><br><span class="line">3178</span><br><span class="line">3179</span><br><span class="line">3180</span><br><span class="line">3181</span><br><span class="line">3182</span><br><span class="line">3183</span><br><span class="line">3184</span><br><span class="line">3185</span><br><span class="line">3186</span><br><span class="line">3187</span><br><span class="line">3188</span><br><span class="line">3189</span><br><span class="line">3190</span><br><span class="line">3191</span><br><span class="line">3192</span><br><span class="line">3193</span><br><span class="line">3194</span><br><span class="line">3195</span><br><span class="line">3196</span><br><span class="line">3197</span><br><span class="line">3198</span><br><span class="line">3199</span><br><span class="line">3200</span><br><span class="line">3201</span><br><span class="line">3202</span><br><span class="line">3203</span><br><span class="line">3204</span><br><span class="line">3205</span><br><span class="line">3206</span><br><span class="line">3207</span><br><span class="line">3208</span><br><span class="line">3209</span><br><span class="line">3210</span><br><span class="line">3211</span><br><span class="line">3212</span><br><span class="line">3213</span><br><span class="line">3214</span><br><span class="line">3215</span><br><span class="line">3216</span><br><span class="line">3217</span><br><span class="line">3218</span><br><span class="line">3219</span><br><span class="line">3220</span><br><span class="line">3221</span><br><span class="line">3222</span><br><span class="line">3223</span><br><span class="line">3224</span><br><span class="line">3225</span><br><span class="line">3226</span><br><span class="line">3227</span><br><span class="line">3228</span><br><span class="line">3229</span><br><span class="line">3230</span><br><span class="line">3231</span><br><span class="line">3232</span><br><span class="line">3233</span><br><span class="line">3234</span><br><span class="line">3235</span><br><span class="line">3236</span><br><span class="line">3237</span><br><span class="line">3238</span><br><span class="line">3239</span><br><span class="line">3240</span><br><span class="line">3241</span><br><span class="line">3242</span><br><span class="line">3243</span><br><span class="line">3244</span><br><span class="line">3245</span><br><span class="line">3246</span><br><span class="line">3247</span><br><span class="line">3248</span><br><span class="line">3249</span><br><span class="line">3250</span><br><span class="line">3251</span><br><span class="line">3252</span><br><span class="line">3253</span><br><span class="line">3254</span><br><span class="line">3255</span><br><span class="line">3256</span><br><span class="line">3257</span><br><span class="line">3258</span><br><span class="line">3259</span><br><span class="line">3260</span><br><span class="line">3261</span><br><span class="line">3262</span><br><span class="line">3263</span><br><span class="line">3264</span><br><span class="line">3265</span><br><span class="line">3266</span><br><span class="line">3267</span><br><span class="line">3268</span><br><span class="line">3269</span><br><span class="line">3270</span><br><span class="line">3271</span><br><span class="line">3272</span><br><span class="line">3273</span><br><span class="line">3274</span><br><span class="line">3275</span><br><span class="line">3276</span><br><span class="line">3277</span><br><span class="line">3278</span><br><span class="line">3279</span><br><span class="line">3280</span><br><span class="line">3281</span><br><span class="line">3282</span><br><span class="line">3283</span><br><span class="line">3284</span><br><span class="line">3285</span><br><span class="line">3286</span><br><span class="line">3287</span><br><span class="line">3288</span><br><span class="line">3289</span><br><span class="line">3290</span><br><span class="line">3291</span><br><span class="line">3292</span><br><span class="line">3293</span><br><span class="line">3294</span><br><span class="line">3295</span><br><span class="line">3296</span><br><span class="line">3297</span><br><span class="line">3298</span><br><span class="line">3299</span><br><span class="line">3300</span><br><span class="line">3301</span><br><span class="line">3302</span><br><span class="line">3303</span><br><span class="line">3304</span><br><span class="line">3305</span><br><span class="line">3306</span><br><span class="line">3307</span><br><span class="line">3308</span><br><span class="line">3309</span><br><span class="line">3310</span><br><span class="line">3311</span><br><span class="line">3312</span><br><span class="line">3313</span><br><span class="line">3314</span><br><span class="line">3315</span><br><span class="line">3316</span><br><span class="line">3317</span><br><span class="line">3318</span><br><span class="line">3319</span><br><span class="line">3320</span><br><span class="line">3321</span><br><span class="line">3322</span><br><span class="line">3323</span><br><span class="line">3324</span><br><span class="line">3325</span><br><span class="line">3326</span><br><span class="line">3327</span><br><span class="line">3328</span><br><span class="line">3329</span><br><span class="line">3330</span><br><span class="line">3331</span><br><span class="line">3332</span><br><span class="line">3333</span><br><span class="line">3334</span><br><span class="line">3335</span><br><span class="line">3336</span><br><span class="line">3337</span><br><span class="line">3338</span><br><span class="line">3339</span><br><span class="line">3340</span><br><span class="line">3341</span><br><span class="line">3342</span><br><span class="line">3343</span><br><span class="line">3344</span><br><span class="line">3345</span><br><span class="line">3346</span><br><span class="line">3347</span><br><span class="line">3348</span><br><span class="line">3349</span><br><span class="line">3350</span><br><span class="line">3351</span><br><span class="line">3352</span><br><span class="line">3353</span><br><span class="line">3354</span><br><span class="line">3355</span><br><span class="line">3356</span><br><span class="line">3357</span><br><span class="line">3358</span><br><span class="line">3359</span><br><span class="line">3360</span><br><span class="line">3361</span><br><span class="line">3362</span><br><span class="line">3363</span><br><span class="line">3364</span><br><span class="line">3365</span><br><span class="line">3366</span><br><span class="line">3367</span><br><span class="line">3368</span><br><span class="line">3369</span><br><span class="line">3370</span><br><span class="line">3371</span><br><span class="line">3372</span><br><span class="line">3373</span><br><span class="line">3374</span><br><span class="line">3375</span><br><span class="line">3376</span><br><span class="line">3377</span><br><span class="line">3378</span><br><span class="line">3379</span><br><span class="line">3380</span><br><span class="line">3381</span><br><span class="line">3382</span><br><span class="line">3383</span><br><span class="line">3384</span><br><span class="line">3385</span><br><span class="line">3386</span><br><span class="line">3387</span><br><span class="line">3388</span><br><span class="line">3389</span><br><span class="line">3390</span><br><span class="line">3391</span><br><span class="line">3392</span><br><span class="line">3393</span><br><span class="line">3394</span><br><span class="line">3395</span><br><span class="line">3396</span><br><span class="line">3397</span><br><span class="line">3398</span><br><span class="line">3399</span><br><span class="line">3400</span><br><span class="line">3401</span><br><span class="line">3402</span><br><span class="line">3403</span><br><span class="line">3404</span><br><span class="line">3405</span><br><span class="line">3406</span><br><span class="line">3407</span><br><span class="line">3408</span><br><span class="line">3409</span><br><span class="line">3410</span><br><span class="line">3411</span><br><span class="line">3412</span><br><span class="line">3413</span><br><span class="line">3414</span><br><span class="line">3415</span><br><span class="line">3416</span><br><span class="line">3417</span><br><span class="line">3418</span><br><span class="line">3419</span><br><span class="line">3420</span><br><span class="line">3421</span><br><span class="line">3422</span><br><span class="line">3423</span><br><span class="line">3424</span><br><span class="line">3425</span><br><span class="line">3426</span><br><span class="line">3427</span><br><span class="line">3428</span><br><span class="line">3429</span><br><span class="line">3430</span><br><span class="line">3431</span><br><span class="line">3432</span><br><span class="line">3433</span><br><span class="line">3434</span><br><span class="line">3435</span><br><span class="line">3436</span><br><span class="line">3437</span><br><span class="line">3438</span><br><span class="line">3439</span><br><span class="line">3440</span><br><span class="line">3441</span><br><span class="line">3442</span><br><span class="line">3443</span><br><span class="line">3444</span><br><span class="line">3445</span><br><span class="line">3446</span><br><span class="line">3447</span><br><span class="line">3448</span><br><span class="line">3449</span><br><span class="line">3450</span><br><span class="line">3451</span><br><span class="line">3452</span><br><span class="line">3453</span><br><span class="line">3454</span><br><span class="line">3455</span><br><span class="line">3456</span><br><span class="line">3457</span><br><span class="line">3458</span><br><span class="line">3459</span><br><span class="line">3460</span><br><span class="line">3461</span><br><span class="line">3462</span><br><span class="line">3463</span><br><span class="line">3464</span><br><span class="line">3465</span><br><span class="line">3466</span><br><span class="line">3467</span><br><span class="line">3468</span><br><span class="line">3469</span><br><span class="line">3470</span><br><span class="line">3471</span><br><span class="line">3472</span><br><span class="line">3473</span><br><span class="line">3474</span><br><span class="line">3475</span><br><span class="line">3476</span><br><span class="line">3477</span><br><span class="line">3478</span><br><span class="line">3479</span><br><span class="line">3480</span><br><span class="line">3481</span><br><span class="line">3482</span><br><span class="line">3483</span><br><span class="line">3484</span><br><span class="line">3485</span><br><span class="line">3486</span><br><span class="line">3487</span><br><span class="line">3488</span><br><span class="line">3489</span><br><span class="line">3490</span><br><span class="line">3491</span><br><span class="line">3492</span><br><span class="line">3493</span><br><span class="line">3494</span><br><span class="line">3495</span><br><span class="line">3496</span><br><span class="line">3497</span><br><span class="line">3498</span><br><span class="line">3499</span><br><span class="line">3500</span><br><span class="line">3501</span><br><span class="line">3502</span><br><span class="line">3503</span><br><span class="line">3504</span><br><span class="line">3505</span><br><span class="line">3506</span><br><span class="line">3507</span><br><span class="line">3508</span><br><span class="line">3509</span><br><span class="line">3510</span><br><span class="line">3511</span><br><span class="line">3512</span><br><span class="line">3513</span><br><span class="line">3514</span><br><span class="line">3515</span><br><span class="line">3516</span><br><span class="line">3517</span><br><span class="line">3518</span><br><span class="line">3519</span><br><span class="line">3520</span><br><span class="line">3521</span><br><span class="line">3522</span><br><span class="line">3523</span><br><span class="line">3524</span><br><span class="line">3525</span><br><span class="line">3526</span><br><span class="line">3527</span><br><span class="line">3528</span><br><span class="line">3529</span><br><span class="line">3530</span><br><span class="line">3531</span><br><span class="line">3532</span><br><span class="line">3533</span><br><span class="line">3534</span><br><span class="line">3535</span><br><span class="line">3536</span><br><span class="line">3537</span><br><span class="line">3538</span><br><span class="line">3539</span><br><span class="line">3540</span><br><span class="line">3541</span><br><span class="line">3542</span><br><span class="line">3543</span><br><span class="line">3544</span><br><span class="line">3545</span><br><span class="line">3546</span><br><span class="line">3547</span><br><span class="line">3548</span><br><span class="line">3549</span><br><span class="line">3550</span><br><span class="line">3551</span><br><span class="line">3552</span><br><span class="line">3553</span><br><span class="line">3554</span><br><span class="line">3555</span><br><span class="line">3556</span><br><span class="line">3557</span><br><span class="line">3558</span><br><span class="line">3559</span><br><span class="line">3560</span><br><span class="line">3561</span><br><span class="line">3562</span><br><span class="line">3563</span><br><span class="line">3564</span><br><span class="line">3565</span><br><span class="line">3566</span><br><span class="line">3567</span><br><span class="line">3568</span><br><span class="line">3569</span><br><span class="line">3570</span><br><span class="line">3571</span><br><span class="line">3572</span><br><span class="line">3573</span><br><span class="line">3574</span><br><span class="line">3575</span><br><span class="line">3576</span><br><span class="line">3577</span><br><span class="line">3578</span><br><span class="line">3579</span><br><span class="line">3580</span><br><span class="line">3581</span><br><span class="line">3582</span><br><span class="line">3583</span><br><span class="line">3584</span><br><span class="line">3585</span><br><span class="line">3586</span><br><span class="line">3587</span><br><span class="line">3588</span><br><span class="line">3589</span><br><span class="line">3590</span><br><span class="line">3591</span><br><span class="line">3592</span><br><span class="line">3593</span><br><span class="line">3594</span><br><span class="line">3595</span><br><span class="line">3596</span><br><span class="line">3597</span><br><span class="line">3598</span><br><span class="line">3599</span><br><span class="line">3600</span><br><span class="line">3601</span><br><span class="line">3602</span><br><span class="line">3603</span><br><span class="line">3604</span><br><span class="line">3605</span><br><span class="line">3606</span><br><span class="line">3607</span><br><span class="line">3608</span><br><span class="line">3609</span><br><span class="line">3610</span><br><span class="line">3611</span><br><span class="line">3612</span><br><span class="line">3613</span><br><span class="line">3614</span><br><span class="line">3615</span><br><span class="line">3616</span><br><span class="line">3617</span><br><span class="line">3618</span><br><span class="line">3619</span><br><span class="line">3620</span><br><span class="line">3621</span><br><span class="line">3622</span><br><span class="line">3623</span><br><span class="line">3624</span><br><span class="line">3625</span><br><span class="line">3626</span><br><span class="line">3627</span><br><span class="line">3628</span><br><span class="line">3629</span><br><span class="line">3630</span><br><span class="line">3631</span><br><span class="line">3632</span><br><span class="line">3633</span><br><span class="line">3634</span><br><span class="line">3635</span><br><span class="line">3636</span><br><span class="line">3637</span><br><span class="line">3638</span><br><span class="line">3639</span><br><span class="line">3640</span><br><span class="line">3641</span><br><span class="line">3642</span><br><span class="line">3643</span><br><span class="line">3644</span><br><span class="line">3645</span><br><span class="line">3646</span><br><span class="line">3647</span><br><span class="line">3648</span><br><span class="line">3649</span><br><span class="line">3650</span><br><span class="line">3651</span><br><span class="line">3652</span><br><span class="line">3653</span><br><span class="line">3654</span><br><span class="line">3655</span><br><span class="line">3656</span><br><span class="line">3657</span><br><span class="line">3658</span><br><span class="line">3659</span><br><span class="line">3660</span><br><span class="line">3661</span><br><span class="line">3662</span><br><span class="line">3663</span><br><span class="line">3664</span><br><span class="line">3665</span><br><span class="line">3666</span><br><span class="line">3667</span><br><span class="line">3668</span><br><span class="line">3669</span><br><span class="line">3670</span><br><span class="line">3671</span><br><span class="line">3672</span><br><span class="line">3673</span><br><span class="line">3674</span><br><span class="line">3675</span><br><span class="line">3676</span><br><span class="line">3677</span><br><span class="line">3678</span><br><span class="line">3679</span><br><span class="line">3680</span><br><span class="line">3681</span><br><span class="line">3682</span><br><span class="line">3683</span><br><span class="line">3684</span><br><span class="line">3685</span><br><span class="line">3686</span><br><span class="line">3687</span><br><span class="line">3688</span><br><span class="line">3689</span><br><span class="line">3690</span><br><span class="line">3691</span><br><span class="line">3692</span><br><span class="line">3693</span><br><span class="line">3694</span><br><span class="line">3695</span><br><span class="line">3696</span><br><span class="line">3697</span><br><span class="line">3698</span><br><span class="line">3699</span><br><span class="line">3700</span><br><span class="line">3701</span><br><span class="line">3702</span><br><span class="line">3703</span><br><span class="line">3704</span><br><span class="line">3705</span><br><span class="line">3706</span><br><span class="line">3707</span><br><span class="line">3708</span><br><span class="line">3709</span><br><span class="line">3710</span><br><span class="line">3711</span><br><span class="line">3712</span><br><span class="line">3713</span><br><span class="line">3714</span><br><span class="line">3715</span><br><span class="line">3716</span><br><span class="line">3717</span><br><span class="line">3718</span><br><span class="line">3719</span><br><span class="line">3720</span><br><span class="line">3721</span><br><span class="line">3722</span><br><span class="line">3723</span><br><span class="line">3724</span><br><span class="line">3725</span><br><span class="line">3726</span><br><span class="line">3727</span><br><span class="line">3728</span><br><span class="line">3729</span><br><span class="line">3730</span><br><span class="line">3731</span><br><span class="line">3732</span><br><span class="line">3733</span><br><span class="line">3734</span><br><span class="line">3735</span><br><span class="line">3736</span><br><span class="line">3737</span><br><span class="line">3738</span><br><span class="line">3739</span><br><span class="line">3740</span><br><span class="line">3741</span><br><span class="line">3742</span><br><span class="line">3743</span><br><span class="line">3744</span><br><span class="line">3745</span><br><span class="line">3746</span><br><span class="line">3747</span><br><span class="line">3748</span><br><span class="line">3749</span><br><span class="line">3750</span><br><span class="line">3751</span><br><span class="line">3752</span><br><span class="line">3753</span><br><span class="line">3754</span><br><span class="line">3755</span><br><span class="line">3756</span><br><span class="line">3757</span><br><span class="line">3758</span><br><span class="line">3759</span><br><span class="line">3760</span><br><span class="line">3761</span><br><span class="line">3762</span><br><span class="line">3763</span><br><span class="line">3764</span><br><span class="line">3765</span><br><span class="line">3766</span><br><span class="line">3767</span><br><span class="line">3768</span><br><span class="line">3769</span><br><span class="line">3770</span><br><span class="line">3771</span><br><span class="line">3772</span><br><span class="line">3773</span><br><span class="line">3774</span><br><span class="line">3775</span><br><span class="line">3776</span><br><span class="line">3777</span><br><span class="line">3778</span><br><span class="line">3779</span><br><span class="line">3780</span><br><span class="line">3781</span><br><span class="line">3782</span><br><span class="line">3783</span><br><span class="line">3784</span><br><span class="line">3785</span><br><span class="line">3786</span><br><span class="line">3787</span><br><span class="line">3788</span><br><span class="line">3789</span><br><span class="line">3790</span><br><span class="line">3791</span><br><span class="line">3792</span><br><span class="line">3793</span><br><span class="line">3794</span><br><span class="line">3795</span><br><span class="line">3796</span><br><span class="line">3797</span><br><span class="line">3798</span><br><span class="line">3799</span><br><span class="line">3800</span><br><span class="line">3801</span><br><span class="line">3802</span><br><span class="line">3803</span><br><span class="line">3804</span><br><span class="line">3805</span><br><span class="line">3806</span><br><span class="line">3807</span><br><span class="line">3808</span><br><span class="line">3809</span><br><span class="line">3810</span><br><span class="line">3811</span><br><span class="line">3812</span><br><span class="line">3813</span><br><span class="line">3814</span><br><span class="line">3815</span><br><span class="line">3816</span><br><span class="line">3817</span><br><span class="line">3818</span><br><span class="line">3819</span><br><span class="line">3820</span><br><span class="line">3821</span><br><span class="line">3822</span><br><span class="line">3823</span><br><span class="line">3824</span><br><span class="line">3825</span><br><span class="line">3826</span><br><span class="line">3827</span><br><span class="line">3828</span><br><span class="line">3829</span><br><span class="line">3830</span><br><span class="line">3831</span><br><span class="line">3832</span><br><span class="line">3833</span><br><span class="line">3834</span><br><span class="line">3835</span><br><span class="line">3836</span><br><span class="line">3837</span><br><span class="line">3838</span><br><span class="line">3839</span><br><span class="line">3840</span><br><span class="line">3841</span><br><span class="line">3842</span><br><span class="line">3843</span><br><span class="line">3844</span><br><span class="line">3845</span><br><span class="line">3846</span><br><span class="line">3847</span><br><span class="line">3848</span><br><span class="line">3849</span><br><span class="line">3850</span><br><span class="line">3851</span><br><span class="line">3852</span><br><span class="line">3853</span><br><span class="line">3854</span><br><span class="line">3855</span><br><span class="line">3856</span><br><span class="line">3857</span><br><span class="line">3858</span><br><span class="line">3859</span><br><span class="line">3860</span><br><span class="line">3861</span><br><span class="line">3862</span><br><span class="line">3863</span><br><span class="line">3864</span><br><span class="line">3865</span><br><span class="line">3866</span><br><span class="line">3867</span><br><span class="line">3868</span><br><span class="line">3869</span><br><span class="line">3870</span><br><span class="line">3871</span><br><span class="line">3872</span><br><span class="line">3873</span><br><span class="line">3874</span><br><span class="line">3875</span><br><span class="line">3876</span><br><span class="line">3877</span><br><span class="line">3878</span><br><span class="line">3879</span><br><span class="line">3880</span><br><span class="line">3881</span><br><span class="line">3882</span><br><span class="line">3883</span><br><span class="line">3884</span><br><span class="line">3885</span><br><span class="line">3886</span><br><span class="line">3887</span><br><span class="line">3888</span><br><span class="line">3889</span><br><span class="line">3890</span><br><span class="line">3891</span><br><span class="line">3892</span><br><span class="line">3893</span><br><span class="line">3894</span><br><span class="line">3895</span><br><span class="line">3896</span><br><span class="line">3897</span><br><span class="line">3898</span><br><span class="line">3899</span><br><span class="line">3900</span><br><span class="line">3901</span><br><span class="line">3902</span><br><span class="line">3903</span><br><span class="line">3904</span><br><span class="line">3905</span><br><span class="line">3906</span><br><span class="line">3907</span><br><span class="line">3908</span><br><span class="line">3909</span><br><span class="line">3910</span><br><span class="line">3911</span><br><span class="line">3912</span><br><span class="line">3913</span><br><span class="line">3914</span><br><span class="line">3915</span><br><span class="line">3916</span><br><span class="line">3917</span><br><span class="line">3918</span><br><span class="line">3919</span><br><span class="line">3920</span><br><span class="line">3921</span><br><span class="line">3922</span><br><span class="line">3923</span><br><span class="line">3924</span><br><span class="line">3925</span><br><span class="line">3926</span><br><span class="line">3927</span><br><span class="line">3928</span><br><span class="line">3929</span><br><span class="line">3930</span><br><span class="line">3931</span><br><span class="line">3932</span><br><span class="line">3933</span><br><span class="line">3934</span><br><span class="line">3935</span><br><span class="line">3936</span><br><span class="line">3937</span><br><span class="line">3938</span><br><span class="line">3939</span><br><span class="line">3940</span><br><span class="line">3941</span><br><span class="line">3942</span><br><span class="line">3943</span><br><span class="line">3944</span><br><span class="line">3945</span><br><span class="line">3946</span><br><span class="line">3947</span><br><span class="line">3948</span><br><span class="line">3949</span><br><span class="line">3950</span><br><span class="line">3951</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cif.dataservice.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cif.base.Global;</span><br><span class="line"><span class="keyword">import</span> cif.baseutil.EncryptCipher;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.DataEngine;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.DataPath;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.CategoryProperties;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve1D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve2D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve3D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.CurveXD;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCategory;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve1D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve2D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve3D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogDataSource;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogDocument;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogTable;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWell;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWorkSpace;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Logging;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LoggingProperties;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.ReadMode;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.TableFields;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.TableRecords;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.WellProperties;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.WriteMode;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.CategoryNotifiedInfo;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.NotificationMessage;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.NotificationStruct;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.WellNotifiedInfo;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.client.MessageCommunicationClient;</span><br><span class="line"><span class="keyword">import</span> cif.resource.ResourceObject;</span><br><span class="line"><span class="keyword">import</span> cif.resource.ResourceUtilities;</span><br><span class="line"><span class="keyword">import</span> cif.resource.table.TableTemplateXmlRw;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> org.openide.util.Exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServiceBasicIO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;NotificationStruct&gt; wellNotificationList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;NotificationStruct&gt; categoryNotificationList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">strBuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataServiceBasicIO</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exportTextFileData</span><span class="params">(StringBuffer sourceData, File file)</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            <span class="type">byte</span>[] bytes = sourceData.toString().getBytes();</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            Exceptions.printStackTrace(var13);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var12) &#123;</span><br><span class="line">                    Exceptions.printStackTrace(var12);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">spliceFilePath</span><span class="params">(String prePath, String sufPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prePath != <span class="literal">null</span> &amp;&amp; sufPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prePath.endsWith(<span class="string">&quot;\\&quot;</span>) || prePath.endsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                prePath = prePath.substring(<span class="number">0</span>, prePath.length() - <span class="number">1</span>).trim();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> prePath.trim() + File.separator + sufPath.trim();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentWorkDir</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">workDir</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (workDir.endsWith(<span class="string">&quot;\\&quot;</span>) || workDir.endsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            workDir = workDir.substring(<span class="number">0</span>, workDir.length() - <span class="number">1</span>).trim();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> workDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMainProjectPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Global.getTempPath() + File.separator + <span class="string">&quot;maindsinfo.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">                <span class="type">String</span> <span class="variable">mainDSPath</span> <span class="operator">=</span> in.readLine();</span><br><span class="line">                <span class="keyword">return</span> mainDSPath != <span class="literal">null</span> &amp;&amp; !mainDSPath.trim().isEmpty() ? mainDSPath.trim() : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSysInstallationPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Global.getInstallationPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSysResourcePath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Global.getInstallationResourcePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">openCifp</span><span class="params">(String cifpPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cifpPath != <span class="literal">null</span> &amp;&amp; !cifpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> cifpPath.trim();</span><br><span class="line">            <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">            dataPath.parse(temp);</span><br><span class="line">            <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">4</span> ? -<span class="number">1</span> : <span class="built_in">this</span>.getCategoryID(dataPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeCifp</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">referCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (referCategoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> referCategoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                    category.close();</span><br><span class="line">                    ReferCategoryContainer.getInstance().removeElement(categoryID);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWellPropertiesItemValue</span><span class="params">(<span class="type">int</span> categoryID, String itemName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">0</span> &amp;&amp; itemName != <span class="literal">null</span> &amp;&amp; !itemName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">referCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (referCategoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> referCategoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">WellProperties</span> <span class="variable">wellProperties</span> <span class="operator">=</span> category.getWellProperties();</span><br><span class="line">                    <span class="type">return</span> <span class="variable">wellProperties</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : wellProperties.getValue(itemName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWellPropertiesItemValue</span><span class="params">(<span class="type">int</span> categoryID, String itemName, String itemValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">0</span> &amp;&amp; itemName != <span class="literal">null</span> &amp;&amp; !itemName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">referCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (referCategoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> referCategoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">WellProperties</span> <span class="variable">wellProperties</span> <span class="operator">=</span> category.getWellProperties();</span><br><span class="line">                    <span class="keyword">if</span> (wellProperties != <span class="literal">null</span>) &#123;</span><br><span class="line">                        wellProperties.setValue(itemName.trim(), itemValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCategoryDepthUnit</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">referCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (referCategoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> referCategoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (category.getCategoryDepthUnit()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;meter&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;feet&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createWell</span><span class="params">(String wellPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (wellPath != <span class="literal">null</span> &amp;&amp; !wellPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> wellPath.trim();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> temp.indexOf(<span class="string">&quot;@@**&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">                dataPath.parse(temp);</span><br><span class="line">                <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">3</span> ? <span class="number">0</span> : <span class="built_in">this</span>.createLocalWell(dataPath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCifp</span><span class="params">(String cifpPath, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cifpPath != <span class="literal">null</span> &amp;&amp; !cifpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> cifpPath.trim();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> temp.indexOf(<span class="string">&quot;@@**&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">                dataPath.parse(temp);</span><br><span class="line">                <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">4</span> ? <span class="number">0</span> : <span class="built_in">this</span>.createLocalCategory(dataPath, isOverwritten);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dataPathStr</span> <span class="operator">=</span> temp.substring(<span class="number">0</span>, index);</span><br><span class="line">                <span class="type">String</span> <span class="variable">userPath</span> <span class="operator">=</span> temp.substring(index + <span class="string">&quot;@@**&quot;</span>.length());</span><br><span class="line">                index = userPath.indexOf(<span class="string">&quot;%%%&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">                    dataPath.parse(dataPathStr);</span><br><span class="line">                    <span class="keyword">if</span> (dataPath.getPathLevel() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">EncryptCipher</span> <span class="variable">encryptCipher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EncryptCipher</span>();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> encryptCipher.decrypt(userPath.substring(<span class="number">0</span>, index).trim());</span><br><span class="line">                        <span class="type">String</span> <span class="variable">userPassword</span> <span class="operator">=</span> encryptCipher.decrypt(userPath.substring(index + <span class="string">&quot;%%%&quot;</span>.length()).trim());</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.createRemoteCategory(dataPath, userName, userPassword);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCifp</span><span class="params">(String cifpPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cifpPath != <span class="literal">null</span> &amp;&amp; !cifpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> cifpPath.trim();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> temp.indexOf(<span class="string">&quot;@@**&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">                dataPath.parse(temp);</span><br><span class="line">                <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">4</span> ? <span class="number">0</span> : <span class="built_in">this</span>.createLocalCategory(dataPath, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dataPathStr</span> <span class="operator">=</span> temp.substring(<span class="number">0</span>, index);</span><br><span class="line">                <span class="type">String</span> <span class="variable">userPath</span> <span class="operator">=</span> temp.substring(index + <span class="string">&quot;@@**&quot;</span>.length());</span><br><span class="line">                index = userPath.indexOf(<span class="string">&quot;%%%&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">                    dataPath.parse(dataPathStr);</span><br><span class="line">                    <span class="keyword">if</span> (dataPath.getPathLevel() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">EncryptCipher</span> <span class="variable">encryptCipher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EncryptCipher</span>();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> encryptCipher.decrypt(userPath.substring(<span class="number">0</span>, index).trim());</span><br><span class="line">                        <span class="type">String</span> <span class="variable">userPassword</span> <span class="operator">=</span> encryptCipher.decrypt(userPath.substring(index + <span class="string">&quot;%%%&quot;</span>.length()).trim());</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.createRemoteCategory(dataPath, userName, userPassword);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurveEx</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createCurve(categoryID, curveName, arrayNum, arraySize, startDepth, sampleCount, depthLevel, dataType, curveUnit, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createCurve(categoryID, curveName, arrayNum, arraySize, startDepth, sampleCount, depthLevel, dataType, curveUnit, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit, <span class="type">int</span> isCleaningData)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createCurve(categoryID, curveName, arrayNum, arraySize, startDepth, sampleCount, depthLevel, dataType, curveUnit, <span class="literal">false</span>, isCleaningData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> dataType, String curveUnit, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">double</span> xMin, <span class="type">double</span> xMax, <span class="type">double</span> xLevel, <span class="type">double</span> yMin, <span class="type">double</span> yMax, <span class="type">double</span> yLevel, <span class="type">int</span> xCount, <span class="type">int</span> yCount, String xUnit, String yUnit, <span class="type">int</span> isCleaningData)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sampleCount &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">                <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category.getLogCurve(curve_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">Curve3D</span> <span class="variable">curve3D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve3D</span>();</span><br><span class="line">                        curve3D.setCurveType((<span class="type">byte</span>)<span class="number">3</span>);</span><br><span class="line">                        curve3D.setSubCurveType((<span class="type">byte</span>)<span class="number">1</span>);</span><br><span class="line">                        curve3D.setCurveName(curveName);</span><br><span class="line">                        curve3D.setStartDepth(startDepth);</span><br><span class="line">                        curve3D.setEndDepth(startDepth + depthLevel * (<span class="type">double</span>)(sampleCount - <span class="number">1</span>));</span><br><span class="line">                        curve3D.setDepthLevel(depthLevel);</span><br><span class="line">                        curve3D.setDataType((<span class="type">byte</span>)dataType);</span><br><span class="line">                        curve3D.setDepthUnit(category.getCategoryDepthUnit());</span><br><span class="line">                        curve3D.setCurveUnit(curveUnit);</span><br><span class="line">                        curve3D.setXMin(xMin);</span><br><span class="line">                        curve3D.setXMax(xMax);</span><br><span class="line">                        curve3D.setXLevel(xLevel);</span><br><span class="line">                        curve3D.setXCount(xCount);</span><br><span class="line">                        curve3D.setXUnit(xUnit);</span><br><span class="line">                        curve3D.setYMin(yMin);</span><br><span class="line">                        curve3D.setYMax(yMax);</span><br><span class="line">                        curve3D.setYLevel(yLevel);</span><br><span class="line">                        curve3D.setYCount(yCount);</span><br><span class="line">                        curve3D.setYUnit(yUnit);</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.createCurve(curve3D, <span class="literal">false</span>);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">createCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit, <span class="type">boolean</span> isOverWrite, <span class="type">int</span> isCleaningData)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrayNum &gt;= <span class="number">1</span> &amp;&amp; arraySize &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">                <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category.getLogCurve(curve_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!isOverWrite) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (category.deleteLogging(curve_name) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">CurveXD</span> <span class="variable">curveXD</span> <span class="operator">=</span> <span class="built_in">this</span>.buildCurveXD(curve_name, arrayNum, arraySize, startDepth, sampleCount, depthLevel, dataType, curveUnit, category.getCategoryDepthUnit());</span><br><span class="line">                    <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.createCurve(curveXD, isCleaningData == <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                        categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">isCategoryExisted</span><span class="params">(String categoryPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryPath != <span class="literal">null</span> &amp;&amp; !categoryPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> categoryPath.trim();</span><br><span class="line">            <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">            dataPath.parse(temp);</span><br><span class="line">            <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">4</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">isCurveExisted</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">Logging</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogging(curveName.trim());</span><br><span class="line">                    <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve1DCount</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="type">return</span> <span class="variable">categoryStruct</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : categoryStruct.getCategory().getLogCurve1DCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurve1DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> index &gt; categoryStruct.getCategory().getLogCurve1DCount() ? <span class="literal">null</span> : categoryStruct.getCategory().getLogCurve1D(index - <span class="number">1</span>).getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurve2DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> index &gt; categoryStruct.getCategory().getLogCurve2DCount() ? <span class="literal">null</span> : categoryStruct.getCategory().getLogCurve2D(index - <span class="number">1</span>).getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurve3DName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> index &gt; categoryStruct.getCategory().getLogCurve3DCount() ? <span class="literal">null</span> : categoryStruct.getCategory().getLogCurve3D(index - <span class="number">1</span>).getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCommonTableName</span><span class="params">(<span class="type">int</span> categoryID, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> index &gt; categoryStruct.getCategory().getLogCommonTableCount() ? <span class="literal">null</span> : categoryStruct.getCategory().getLogCommonTable(index - <span class="number">1</span>).getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve2DCount</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="type">return</span> <span class="variable">categoryStruct</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : categoryStruct.getCategory().getLogCurve2DCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurve3DCount</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="type">return</span> <span class="variable">categoryStruct</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : categoryStruct.getCategory().getLogCurve3DCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCommonTableCount</span><span class="params">(<span class="type">int</span> categoryID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="type">return</span> <span class="variable">categoryStruct</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : categoryStruct.getCategory().getLogCommonTableCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_1D(categoryID, curveName, startDepth, dataCount, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve1D(categoryID, curveName, startDepth, depthLevel, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer, <span class="type">int</span> interpolationMode)</span> &#123;</span><br><span class="line">        <span class="type">ReadMode</span> <span class="variable">readMode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadMode</span>();</span><br><span class="line">        <span class="keyword">switch</span> (interpolationMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve1D(categoryID, curveName, startDepth, depthLevel, dataCount, buffer, readMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer, ReadMode mode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve1D)curveStruct.curve).readData(startDepth, depthLevel, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve1D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve1D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.readData(startDepth, dataCount, buffer, mode);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_1D(categoryID, curveName, startDepth, upwardCount, downWardCount, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve1D)curveStruct.curve).readData(startDepth, depthLevel, upwardCount, downWardCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve1D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve1D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.readData(startDepth, depthLevel, upwardCount, downWardCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.writeCurve_1D(categoryID, curveName, startDepth, dataCount, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_2D(categoryID, curveName, startDepth, dataCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve2D(categoryID, curveName, startDepth, depthLevel, dataCount, arraySize, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer, <span class="type">int</span> interpolationMode)</span> &#123;</span><br><span class="line">        <span class="type">ReadMode</span> <span class="variable">readMode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadMode</span>();</span><br><span class="line">        <span class="keyword">switch</span> (interpolationMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                readMode.interpolationMode = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve2D(categoryID, curveName, startDepth, depthLevel, dataCount, arraySize, buffer, readMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer, ReadMode readMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, depthLevel, dataCount, data, readMode);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, depthLevel, dataCount, data, readMode);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">short</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_2D(categoryID, curveName, startDepth, dataCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_2D(categoryID, curveName, startDepth, upwardCount, downWardCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> upwardCount + downWardCount + <span class="number">1</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, depthLevel, upwardCount, downWardCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, depthLevel, upwardCount, downWardCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.writeCurve_2D(categoryID, curveName, startDepth, dataCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reacBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="type">int</span> offset;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][xCount][yCount];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readDataWithoutBuffer(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(offset = <span class="number">0</span>; offset &lt; retCode; ++offset) &#123;</span><br><span class="line">                            retCode = offset * yCount * xCount;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; yCount; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[offset][i], <span class="number">0</span>, buffer, retCode + i * xCount, xCount);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][yCount][xCount];</span><br><span class="line">                            retCode = curve.readDataWithoutBuffer(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                    offset = i * yCount * xCount;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yCount; ++j) &#123;</span><br><span class="line">                                        System.arraycopy(data[i][j], <span class="number">0</span>, buffer, offset + j * xCount, xCount);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reacBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[][][] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="keyword">return</span> curve.readDataWithoutBuffer(startDepth, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readDataWithoutBuffer(startDepth, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_3D(categoryID, curveName, arrayIndex, startDepth, dataCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_3D(categoryID, curveName, arrayIndex, startDepth, depthLevel, dataCount, arraySize, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_3D(categoryID, curveName, arrayIndex, startDepth, upwardCount, downWardCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readCurve_3D(categoryID, curveName, arrayIndex, startDepth, depthLevel, upwardCount, downWardCount, arraySize, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.writeCurve_3D(categoryID, curveName, arrayIndex, startDepth, dataCount, arraySize, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="type">int</span> offset;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][yCount][xCount];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(offset = <span class="number">0</span>; offset &lt; dataCount; ++offset) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> offset * yCount * xCount;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; yCount; ++i) &#123;</span><br><span class="line">                            System.arraycopy(buffer, offset + i * xCount, data[offset][i], <span class="number">0</span>, xCount);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    retCode = curve.writeDataWithoutBuffer(startDepth, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][yCount][xCount];</span><br><span class="line">                            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                                offset = i * yCount * xCount;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yCount; ++j) &#123;</span><br><span class="line">                                    System.arraycopy(buffer, offset + j * xCount, data[i][j], <span class="number">0</span>, xCount);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            retCode = curve.writeDataWithoutBuffer(startDepth, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">return</span> retCode;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeBulkCurve3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> xCount, <span class="type">int</span> yCount, <span class="type">float</span>[][][] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    retCode = curve.writeDataWithoutBuffer(startDepth, dataCount, buffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            retCode = curve.writeDataWithoutBuffer(startDepth, dataCount, buffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">return</span> retCode;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveStartDepth</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getStartDepth();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getStartDepth();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveEndDepth</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getEndDepth();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getEndDepth();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveDepthLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getDepthLevel();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getDepthLevel();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXMin</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getXMin();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getXMin();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXMax</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getXMax();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getXMax();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveXLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getXLevel();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getXLevel();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveXCount</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getXCount();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getXCount();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurveXUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getXUnit();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getXUnit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYMin</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getYMin();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getYMin();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYMax</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getYMax();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getYMax();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCurveYLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getYLevel();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getYLevel();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveYCount</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getYCount();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getYCount();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurveYUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve3D)curveStruct.curve).getYUnit();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getYUnit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setCurveDepthLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> newDepthLevel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = curveStruct.curve;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    curve = category.getLogCurve(curve_name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCurve</span> <span class="variable">newCurve</span> <span class="operator">=</span> <span class="built_in">this</span>.changeCurveDepthLevel(category, curve, newDepthLevel, category.getNewCurveSuffix());</span><br><span class="line">                    categoryStruct.removeCurveElement(curve_name);</span><br><span class="line">                    curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, newCurve);</span><br><span class="line">                    categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">changeCurveDepthRange</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> newStartDepth, <span class="type">double</span> newEndDepth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = curveStruct.curve;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    curve = category.getLogCurve(curve_name);</span><br><span class="line">                    curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                    categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.changeDepthRange(newStartDepth, newEndDepth, <span class="literal">true</span>);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">return</span> <span class="variable">retCode</span> <span class="operator">=</span>= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteCurve</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> category.deleteLogging(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    categoryStruct.removeCurveElement(curve_name);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> category.deleteLogging(table_name);</span><br><span class="line">                <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    categoryStruct.removeCurveElement(table_name);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">copyCurve</span><span class="params">(<span class="type">int</span> categoryID, String srcCurveName, String desCurveName, <span class="type">int</span> isOverWritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; srcCurveName != <span class="literal">null</span> &amp;&amp; !srcCurveName.trim().isEmpty() &amp;&amp; desCurveName != <span class="literal">null</span> &amp;&amp; !desCurveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="type">LogCurve</span> <span class="variable">srcCurve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">LogCurve</span> <span class="variable">desCurve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">srcCurve_name</span> <span class="operator">=</span> srcCurveName.trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">desCurve_name</span> <span class="operator">=</span> desCurveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">srcCurveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(srcCurve_name);</span><br><span class="line">                <span class="keyword">if</span> (srcCurveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    srcCurve = srcCurveStruct.curve;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    srcCurve = category.getLogCurve(srcCurve_name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">desCurveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(desCurve_name);</span><br><span class="line">                <span class="keyword">if</span> (desCurveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    desCurve = desCurveStruct.curve;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    desCurve = category.getLogCurve(desCurve_name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (srcCurve == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (desCurve != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isOverWritten == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        category.deleteLogging(desCurve_name);</span><br><span class="line">                        <span class="keyword">if</span> (desCurveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                            categoryStruct.removeCurveElement(desCurveStruct);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">LogCurve</span> <span class="variable">newCurve</span> <span class="operator">=</span> <span class="built_in">this</span>.copyCurveAction(category, srcCurve, desCurve_name);</span><br><span class="line">                    desCurveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(desCurve_name, newCurve);</span><br><span class="line">                    categoryStruct.addCurveElement(desCurveStruct);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CurveProperty <span class="title function_">getCurveProperty</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">CurveProperty</span> <span class="variable">curveProperty</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curveProperty = <span class="keyword">new</span> <span class="title class_">CurveProperty</span>();</span><br><span class="line">                    <span class="type">LoggingProperties</span> <span class="variable">properties</span> <span class="operator">=</span> curveStruct.curve.getLoggingProperties();</span><br><span class="line">                    curveProperty.curveName = properties.getLoggingName();</span><br><span class="line">                    curveProperty.arrayNum = properties.getArrayNum();</span><br><span class="line">                    curveProperty.timeSampleNum = properties.getTimeSampleNum();</span><br><span class="line">                    curveProperty.curveLeftScale = properties.getLeftScale();</span><br><span class="line">                    curveProperty.curveRightScale = properties.getRightScale();</span><br><span class="line">                    curveProperty.dataType = properties.getDataType();</span><br><span class="line">                    curveProperty.startDepth = properties.getStartDepth();</span><br><span class="line">                    curveProperty.endDepth = properties.getEndDepth();</span><br><span class="line">                    curveProperty.depthLevel = properties.getDepthLevel();</span><br><span class="line">                    curveProperty.curveUnit = properties.getCurveUnit();</span><br><span class="line">                    curveProperty.depthUnit = properties.getDepthUnit();</span><br><span class="line">                    curveProperty.timeSampleLevel = properties.getTimeSampleLevel();</span><br><span class="line">                    curveProperty.timeSampleUnit = properties.getTimeSampleUnit();</span><br><span class="line">                    curveProperty.timeSampleStartTime = properties.getTimeSampleStartTime();</span><br><span class="line">                    curveProperty.xMin = properties.getXMin();</span><br><span class="line">                    curveProperty.xMax = properties.getXMax();</span><br><span class="line">                    curveProperty.xLevel = properties.getXLevel();</span><br><span class="line">                    curveProperty.yMin = properties.getYMin();</span><br><span class="line">                    curveProperty.yMax = properties.getYMax();</span><br><span class="line">                    curveProperty.yLevel = properties.getYLevel();</span><br><span class="line">                    curveProperty.xCount = properties.getXCount();</span><br><span class="line">                    curveProperty.yCount = properties.getYCount();</span><br><span class="line">                    curveProperty.xUnit = properties.getXUnit();</span><br><span class="line">                    curveProperty.yUnit = properties.getYUnit();</span><br><span class="line">                    <span class="keyword">return</span> curveProperty;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            curveProperty = <span class="keyword">new</span> <span class="title class_">CurveProperty</span>();</span><br><span class="line">                            <span class="type">LoggingProperties</span> <span class="variable">properties</span> <span class="operator">=</span> curve.getLoggingProperties();</span><br><span class="line">                            curveProperty.curveName = properties.getLoggingName();</span><br><span class="line">                            curveProperty.arrayNum = properties.getArrayNum();</span><br><span class="line">                            curveProperty.timeSampleNum = properties.getTimeSampleNum();</span><br><span class="line">                            curveProperty.curveLeftScale = properties.getLeftScale();</span><br><span class="line">                            curveProperty.curveRightScale = properties.getRightScale();</span><br><span class="line">                            curveProperty.dataType = properties.getDataType();</span><br><span class="line">                            curveProperty.startDepth = properties.getStartDepth();</span><br><span class="line">                            curveProperty.endDepth = properties.getEndDepth();</span><br><span class="line">                            curveProperty.depthLevel = properties.getDepthLevel();</span><br><span class="line">                            curveProperty.curveUnit = properties.getCurveUnit();</span><br><span class="line">                            curveProperty.depthUnit = properties.getDepthUnit();</span><br><span class="line">                            curveProperty.timeSampleLevel = properties.getTimeSampleLevel();</span><br><span class="line">                            curveProperty.timeSampleUnit = properties.getTimeSampleUnit();</span><br><span class="line">                            curveProperty.timeSampleStartTime = properties.getTimeSampleStartTime();</span><br><span class="line">                            curveProperty.xMin = properties.getXMin();</span><br><span class="line">                            curveProperty.xMax = properties.getXMax();</span><br><span class="line">                            curveProperty.xLevel = properties.getXLevel();</span><br><span class="line">                            curveProperty.yMin = properties.getYMin();</span><br><span class="line">                            curveProperty.yMax = properties.getYMax();</span><br><span class="line">                            curveProperty.yLevel = properties.getYLevel();</span><br><span class="line">                            curveProperty.xCount = properties.getXCount();</span><br><span class="line">                            curveProperty.yCount = properties.getYCount();</span><br><span class="line">                            curveProperty.xUnit = properties.getXUnit();</span><br><span class="line">                            curveProperty.yUnit = properties.getYUnit();</span><br><span class="line">                            <span class="keyword">return</span> curveProperty;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveDimension</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getDimension();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getDimension();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveArrayNum</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getArrayNum();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getArrayNum();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurveArraySize</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getTimeSampleCount();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getTimeSampleCount();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCurveTimeSampleLevel</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0F</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="type">float</span>)curveStruct.curve.getLoggingProperties().getTimeSampleLevel();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0.0F</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0.0F</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> (<span class="type">float</span>)curve.getLoggingProperties().getTimeSampleLevel();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0F</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurveUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getCurveUnit();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getCurveUnit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurveDepthUnit</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> curveStruct.curve.getDepthUnit();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.getDepthUnit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">(<span class="type">int</span> categoryID, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curveName.trim());</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span> &amp;&amp; curveStruct.curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curveStruct.curve.flush();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ReferCategoryContainer.getInstance().size(); ++i) &#123;</span><br><span class="line">            categoryStruct = ReferCategoryContainer.getInstance().elemenAt(i);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct.isModified) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; categoryStruct.getCurveSize(); ++j) &#123;</span><br><span class="line">                    curveStruct = categoryStruct.curveElementAt(j);</span><br><span class="line">                    <span class="keyword">if</span> (curveStruct.curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                        curveStruct.curve.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurveInterpolation</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curveStruct.setInterpolationMode((<span class="type">byte</span>)mode);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            curveStruct.setInterpolationMode((<span class="type">byte</span>)mode);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createTable</span><span class="params">(<span class="type">int</span> categoryID, String tableTemplateName, String tableName, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableTemplateName != <span class="literal">null</span> &amp;&amp; !tableTemplateName.trim().isEmpty() &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">template_name</span> <span class="operator">=</span> tableTemplateName.trim() + <span class="string">&quot;.&quot;</span> + ResourceUtilities.getDefault().getResourceExt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ResourceObject</span> <span class="variable">resourceFile</span> <span class="operator">=</span> ResourceUtilities.getDefault().getPreservedResourceObject(<span class="number">1</span>, template_name);</span><br><span class="line">                <span class="type">TableTemplateXmlRw</span> <span class="variable">xmlRw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableTemplateXmlRw</span>();</span><br><span class="line">                <span class="type">TableFields</span> <span class="variable">tableFields</span> <span class="operator">=</span> xmlRw.readTableTemplate(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>((<span class="type">byte</span>[])((<span class="type">byte</span>[])ResourceUtilities.getDefault().getResourceObjectContents(resourceFile))), resourceFile.getResourceType());</span><br><span class="line">                <span class="keyword">if</span> (tableFields == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category.getLogging(table_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isOverwritten == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        category.deleteLogging(table_name);</span><br><span class="line">                        categoryStruct.removeDocElement(table_name);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">TableRecords</span> <span class="variable">tableRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                    tableRecords.init(<span class="number">0</span>, tableFields);</span><br><span class="line">                    <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.createTable(table_name, ResourceUtilities.getDefault().toString(resourceFile), (<span class="type">byte</span>)<span class="number">5</span>, tableRecords);</span><br><span class="line">                    <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                        categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTableRowCount</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tableStruct.table.getRowCount();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="keyword">return</span> table.getRowCount();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCommonTableColumnName</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty() &amp;&amp; columnIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> tableStruct.table;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> table.getColumnCount();</span><br><span class="line">                    <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">TableFields</span> <span class="variable">tableFields</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFields</span>();</span><br><span class="line">                        table.readTableFields(tableFields);</span><br><span class="line">                        <span class="keyword">return</span> tableFields.getName(columnIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> table.getColumnCount();</span><br><span class="line">                            <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="type">TableFields</span> <span class="variable">tableFields</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFields</span>();</span><br><span class="line">                                table.readTableFields(tableFields);</span><br><span class="line">                                <span class="keyword">return</span> tableFields.getName(columnIndex);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTableColumnCount</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tableStruct.table.getColumnCount();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="keyword">return</span> table.getColumnCount();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; columnIndex &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String[] buf = <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="type">int</span> columnCount;</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    columnCount = tableStruct.table.getColumnCount();</span><br><span class="line">                    <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buf = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buf);</span><br><span class="line">                        <span class="keyword">return</span> retCode &gt; <span class="number">0</span> ? buf[columnIndex - <span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            columnCount = table.getColumnCount();</span><br><span class="line">                            <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                buf = <span class="keyword">new</span> <span class="title class_">String</span>[columnCount];</span><br><span class="line">                                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buf);</span><br><span class="line">                                <span class="keyword">return</span> retCode &gt; <span class="number">0</span> ? buf[columnIndex - <span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">readTable_x</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; columnIndex &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">float</span>[] buf = <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="type">float</span>[] buf;</span><br><span class="line">                <span class="type">int</span> columnCount;</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    columnCount = tableStruct.table.getColumnCount();</span><br><span class="line">                    <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buf = <span class="keyword">new</span> <span class="title class_">float</span>[columnCount];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buf);</span><br><span class="line">                        <span class="keyword">return</span> retCode &gt; <span class="number">0</span> ? buf[columnIndex - <span class="number">1</span>] : -<span class="number">99999.0F</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            columnCount = table.getColumnCount();</span><br><span class="line">                            <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">                                <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                buf = <span class="keyword">new</span> <span class="title class_">float</span>[columnCount];</span><br><span class="line">                                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buf);</span><br><span class="line">                                <span class="keyword">return</span> retCode &gt; <span class="number">0</span> ? buf[columnIndex - <span class="number">1</span>] : -<span class="number">99999.0F</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">99999.0F</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buffer);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.readTableData(table, rowIndex, buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, String[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.readTableData(tableStruct.table, rowIndex, buffer);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.readTableData(table, rowIndex, buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCount</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="type">int</span> retCount;</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    retCount = <span class="built_in">this</span>.writeTableData(tableStruct.table, rowIndex, buffer);</span><br><span class="line">                    <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCount;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            retCount = <span class="built_in">this</span>.writeTableData(table, rowIndex, buffer);</span><br><span class="line">                            <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, <span class="type">float</span> buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.writeTable(categoryID, tableName, rowIndex, columnIndex, Float.toString(buffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, String buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; columnIndex &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCount</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="type">int</span> retCount;</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    retCount = <span class="built_in">this</span>.writeTableData(tableStruct.table, rowIndex, columnIndex, buffer);</span><br><span class="line">                    <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCount;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            retCount = <span class="built_in">this</span>.writeTableData(table, rowIndex, columnIndex, buffer);</span><br><span class="line">                            <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeTable</span><span class="params">(<span class="type">int</span> categoryID, String tableName, <span class="type">int</span> rowIndex, String[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; rowIndex &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCount</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="type">int</span> retCount;</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    retCount = <span class="built_in">this</span>.writeTableData(tableStruct.table, rowIndex, buffer);</span><br><span class="line">                    <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCount;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            retCount = <span class="built_in">this</span>.writeTableData(table, rowIndex, buffer);</span><br><span class="line">                            <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">copyTable</span><span class="params">(<span class="type">int</span> srcCategoryID, String srcTableName, <span class="type">int</span> desCategoryID, String desTableName, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (srcCategoryID &gt;= <span class="number">1</span> &amp;&amp; desCategoryID &gt;= <span class="number">1</span> &amp;&amp; srcTableName != <span class="literal">null</span> &amp;&amp; !srcTableName.trim().isEmpty() &amp;&amp; desTableName != <span class="literal">null</span> &amp;&amp; !desTableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">src_name</span> <span class="operator">=</span> srcTableName.trim();</span><br><span class="line">            <span class="type">String</span> <span class="variable">des_name</span> <span class="operator">=</span> desTableName.trim();</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">srcCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(srcCategoryID);</span><br><span class="line">            <span class="keyword">if</span> (srcCategoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ReferCategoryStruct</span> <span class="variable">desCategoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(desCategoryID);</span><br><span class="line">                <span class="keyword">if</span> (desCategoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">srcCategory</span> <span class="operator">=</span> srcCategoryStruct.getCategory();</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">desCategory</span> <span class="operator">=</span> desCategoryStruct.getCategory();</span><br><span class="line">                    <span class="type">LogTable</span> <span class="variable">srcTable</span> <span class="operator">=</span> srcCategory.getLogCommonTable(src_name);</span><br><span class="line">                    <span class="keyword">if</span> (srcTable == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (desCategory.getLogCommonTable(des_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (isOverwritten == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            desCategory.deleteLogging(des_name);</span><br><span class="line">                            desCategoryStruct.removeTableElement(des_name);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> desCategory.copyLoggingFrom(srcTable, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            desCategoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTableAllRecords</span><span class="params">(<span class="type">int</span> categoryID, String tableName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; tableName != <span class="literal">null</span> &amp;&amp; !tableName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">table_name</span> <span class="operator">=</span> tableName.trim();</span><br><span class="line">                <span class="type">ReferTableStruct</span> <span class="variable">tableStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedTableElement(table_name);</span><br><span class="line">                <span class="keyword">if</span> (tableStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TableRecords</span> <span class="variable">tableRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                    tableStruct.table.readTableRecords(tableRecords);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">recordsNum</span> <span class="operator">=</span> tableRecords.getRecordsNum();</span><br><span class="line">                    <span class="keyword">if</span> (recordsNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        tableRecords.deleteTableRecords(<span class="number">0</span>, recordsNum);</span><br><span class="line">                        tableStruct.table.writeTableRecords(tableRecords);</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">LogTable</span> <span class="variable">table</span> <span class="operator">=</span> category.getLogCommonTable(table_name);</span><br><span class="line">                        <span class="keyword">if</span> (table != <span class="literal">null</span>) &#123;</span><br><span class="line">                            tableStruct = <span class="keyword">new</span> <span class="title class_">ReferTableStruct</span>(table_name, table);</span><br><span class="line">                            categoryStruct.addTableElement(tableStruct);</span><br><span class="line">                            <span class="type">TableRecords</span> <span class="variable">tableRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                            tableStruct.table.readTableRecords(tableRecords);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">recordsNum</span> <span class="operator">=</span> tableRecords.getRecordsNum();</span><br><span class="line">                            <span class="keyword">if</span> (recordsNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                tableRecords.deleteTableRecords(<span class="number">0</span>, recordsNum);</span><br><span class="line">                                tableStruct.table.writeTableRecords(tableRecords);</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDocSize</span><span class="params">(<span class="type">int</span> categoryID, String docName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedDocElement(doc_name);</span><br><span class="line">                <span class="keyword">if</span> (docStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> docStruct.doc.getLoggingProperties().getDocSize();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogDocument</span> <span class="variable">doc</span> <span class="operator">=</span> category.getLogDoc(doc_name);</span><br><span class="line">                        <span class="keyword">if</span> (doc == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            docStruct = <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, doc);</span><br><span class="line">                            categoryStruct.addDocElement(docStruct);</span><br><span class="line">                            <span class="keyword">return</span> docStruct.doc.getLoggingProperties().getDocSize();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                <span class="keyword">if</span> (category.getLogDoc(doc_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isOverwritten == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    category.deleteLogging(doc_name);</span><br><span class="line">                    categoryStruct.removeDocElement(doc_name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">LogDocument</span> <span class="variable">doc</span> <span class="operator">=</span> category.createDocument(doc_name);</span><br><span class="line">                <span class="keyword">if</span> (doc == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, doc);</span><br><span class="line">                    categoryStruct.addDocElement(docStruct);</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, String srcFilePath, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty() &amp;&amp; srcFilePath != <span class="literal">null</span> &amp;&amp; !srcFilePath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcFilePath.trim());</span><br><span class="line">                <span class="keyword">if</span> (srcFile.exists() &amp;&amp; srcFile.isFile()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (category.getLogDoc(doc_name) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (isOverwritten == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            category.deleteLogging(doc_name);</span><br><span class="line">                            categoryStruct.removeDocElement(doc_name);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">retCode</span> <span class="operator">=</span> category.createDocument(doc_name, srcFilePath);</span><br><span class="line">                        <span class="keyword">if</span> (!retCode) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, category.getLogDoc(doc_name));</span><br><span class="line">                            categoryStruct.addDocElement(docStruct);</span><br><span class="line">                            categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> offset, <span class="type">int</span> byteSize, <span class="type">byte</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">                <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedDocElement(doc_name);</span><br><span class="line">                <span class="keyword">if</span> (docStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> docStruct.doc.readDoc((<span class="type">long</span>)offset, byteSize, buffer);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogDocument</span> <span class="variable">document</span> <span class="operator">=</span> category.getLogDoc(doc_name);</span><br><span class="line">                        <span class="keyword">if</span> (document == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            docStruct = <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, document);</span><br><span class="line">                            categoryStruct.addDocElement(docStruct);</span><br><span class="line">                            <span class="keyword">return</span> document.readDoc((<span class="type">long</span>)offset, byteSize, buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, String desFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty() &amp;&amp; desFilePath != <span class="literal">null</span> &amp;&amp; !desFilePath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">                <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedDocElement(doc_name);</span><br><span class="line">                <span class="keyword">if</span> (docStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> docStruct.doc.readDoc(desFilePath.trim());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogDocument</span> <span class="variable">document</span> <span class="operator">=</span> category.getLogDoc(doc_name);</span><br><span class="line">                        <span class="keyword">if</span> (document == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            docStruct = <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, document);</span><br><span class="line">                            categoryStruct.addDocElement(docStruct);</span><br><span class="line">                            <span class="keyword">return</span> document.readDoc(desFilePath.trim());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">writeDocument</span><span class="params">(<span class="type">int</span> categoryID, String docName, <span class="type">int</span> offset, <span class="type">int</span> byteSize, <span class="type">byte</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; docName != <span class="literal">null</span> &amp;&amp; !docName.trim().isEmpty() &amp;&amp; buffer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">doc_name</span> <span class="operator">=</span> docName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">ReferDocStruct</span> <span class="variable">docStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedDocElement(doc_name);</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (docStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    retCode = docStruct.doc.writeDoc((<span class="type">long</span>)offset, byteSize, buffer);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">LogDocument</span> <span class="variable">document</span> <span class="operator">=</span> category.getLogDoc(doc_name);</span><br><span class="line">                    <span class="keyword">if</span> (document == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    docStruct = <span class="keyword">new</span> <span class="title class_">ReferDocStruct</span>(doc_name, document);</span><br><span class="line">                    categoryStruct.addDocElement(docStruct);</span><br><span class="line">                    retCode = document.writeDoc((<span class="type">long</span>)offset, byteSize, buffer);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> retCode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeTableData</span><span class="params">(LogTable table, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> table.getRowCount();</span><br><span class="line">        <span class="type">TableRecords</span> <span class="variable">records</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> table.readTableRecords(<span class="number">0</span>, rowCount, records);</span><br><span class="line">        <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableFields</span> <span class="variable">fields</span> <span class="operator">=</span> records.getTableFields();</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> rowIndex - rowCount;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TableRecords</span> <span class="variable">newRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                newRecords.init(value, fields);</span><br><span class="line">                records.appendTableRecords(newRecords);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">bufLength</span> <span class="operator">=</span> buffer.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.getFieldNum() &amp;&amp; bufLength &gt;= i + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (fields.getDataType(i)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        records.setRecordByteData(rowIndex - <span class="number">1</span>, i, (<span class="type">byte</span>)((<span class="type">int</span>)buffer[i]));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        records.setRecordShortData(rowIndex - <span class="number">1</span>, i, (<span class="type">short</span>)((<span class="type">int</span>)buffer[i]));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        records.setRecordIntData(rowIndex - <span class="number">1</span>, i, (<span class="type">int</span>)buffer[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        records.setRecordLongData(rowIndex - <span class="number">1</span>, i, (<span class="type">long</span>)buffer[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        records.setRecordFloatData(rowIndex - <span class="number">1</span>, i, buffer[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                        records.setRecordDoubleData(rowIndex - <span class="number">1</span>, i, (<span class="type">double</span>)buffer[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        records.setRecordStringData(rowIndex - <span class="number">1</span>, i, Float.toString(buffer[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            table.writeTableRecords(records);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeTableData</span><span class="params">(LogTable table, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, String buffer)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> table.getRowCount();</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> table.getColumnCount();</span><br><span class="line">        <span class="keyword">if</span> (columnIndex &gt; columnCount) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableRecords</span> <span class="variable">records</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> table.readTableRecords(<span class="number">0</span>, rowCount, records);</span><br><span class="line">            <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TableFields</span> <span class="variable">fields</span> <span class="operator">=</span> records.getTableFields();</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> rowIndex - rowCount;</span><br><span class="line">                <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">TableRecords</span> <span class="variable">newRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                    newRecords.init(value, fields);</span><br><span class="line">                    records.appendTableRecords(newRecords);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (fields.getDataType(columnIndex - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordByteData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Byte.parseByte(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var17) &#123;</span><br><span class="line">                            records.setRecordByteData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, (<span class="type">byte</span>)-<span class="number">128</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordShortData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Short.parseShort(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var16) &#123;</span><br><span class="line">                            records.setRecordShortData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, (<span class="type">short</span>)-<span class="number">32767</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordIntData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Integer.parseInt(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var15) &#123;</span><br><span class="line">                            records.setRecordIntData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, -<span class="number">99999</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordLongData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Long.parseLong(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var14) &#123;</span><br><span class="line">                            records.setRecordLongData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, -<span class="number">99999L</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordFloatData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Float.parseFloat(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var13) &#123;</span><br><span class="line">                            records.setRecordFloatData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, -<span class="number">99999.0F</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordDoubleData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, Double.parseDouble(buffer));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var12) &#123;</span><br><span class="line">                            records.setRecordDoubleData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, -<span class="number">99999.0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                        records.setRecordStringData(rowIndex - <span class="number">1</span>, columnIndex - <span class="number">1</span>, buffer);</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                table.writeTableRecords(records);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeTableData</span><span class="params">(LogTable table, <span class="type">int</span> rowIndex, String[] buffer)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> table.getRowCount();</span><br><span class="line">        <span class="type">TableRecords</span> <span class="variable">records</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> table.readTableRecords(<span class="number">0</span>, rowCount, records);</span><br><span class="line">        <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableFields</span> <span class="variable">fields</span> <span class="operator">=</span> records.getTableFields();</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> rowIndex - rowCount;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TableRecords</span> <span class="variable">newRecords</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">                newRecords.init(value, fields);</span><br><span class="line">                records.appendTableRecords(newRecords);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">bufLength</span> <span class="operator">=</span> buffer.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.getFieldNum() &amp;&amp; bufLength &gt;= i + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (fields.getDataType(i)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordByteData(rowIndex - <span class="number">1</span>, i, Byte.parseByte(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var17) &#123;</span><br><span class="line">                            records.setRecordByteData(rowIndex - <span class="number">1</span>, i, (<span class="type">byte</span>)-<span class="number">128</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordShortData(rowIndex - <span class="number">1</span>, i, Short.parseShort(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var16) &#123;</span><br><span class="line">                            records.setRecordShortData(rowIndex - <span class="number">1</span>, i, (<span class="type">short</span>)-<span class="number">32767</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordIntData(rowIndex - <span class="number">1</span>, i, Integer.parseInt(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var15) &#123;</span><br><span class="line">                            records.setRecordIntData(rowIndex - <span class="number">1</span>, i, -<span class="number">99999</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordLongData(rowIndex - <span class="number">1</span>, i, Long.parseLong(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var14) &#123;</span><br><span class="line">                            records.setRecordLongData(rowIndex - <span class="number">1</span>, i, -<span class="number">99999L</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordFloatData(rowIndex - <span class="number">1</span>, i, Float.parseFloat(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var13) &#123;</span><br><span class="line">                            records.setRecordFloatData(rowIndex - <span class="number">1</span>, i, -<span class="number">99999.0F</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            records.setRecordDoubleData(rowIndex - <span class="number">1</span>, i, Double.parseDouble(buffer[i]));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException var12) &#123;</span><br><span class="line">                            records.setRecordDoubleData(rowIndex - <span class="number">1</span>, i, -<span class="number">99999.0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                        records.setRecordStringData(rowIndex - <span class="number">1</span>, i, buffer[i]);</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            table.writeTableRecords(records);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readTableData</span><span class="params">(LogTable table, <span class="type">int</span> rowIndex, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="type">TableRecords</span> <span class="variable">records</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> table.readTableRecords(rowIndex - <span class="number">1</span>, <span class="number">1</span>, records);</span><br><span class="line">        <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableFields</span> <span class="variable">fields</span> <span class="operator">=</span> records.getTableFields();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufLength</span> <span class="operator">=</span> buffer.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.getFieldNum() &amp;&amp; bufLength &gt;= i + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (fields.getDataType(i)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        buffer[i] = (<span class="type">float</span>)records.getRecordByteData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        buffer[i] = (<span class="type">float</span>)records.getRecordShortData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        buffer[i] = (<span class="type">float</span>)records.getRecordIntData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        buffer[i] = (<span class="type">float</span>)records.getRecordLongData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        buffer[i] = records.getRecordFloatData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                        buffer[i] = (<span class="type">float</span>)records.getRecordDoubleData(<span class="number">0</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        buffer[i] = -<span class="number">99999.0F</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readTableData</span><span class="params">(LogTable table, <span class="type">int</span> rowIndex, String[] buffer)</span> &#123;</span><br><span class="line">        <span class="type">TableRecords</span> <span class="variable">records</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableRecords</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> table.readTableRecords(rowIndex - <span class="number">1</span>, <span class="number">1</span>, records);</span><br><span class="line">        <span class="keyword">if</span> (retCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableFields</span> <span class="variable">fields</span> <span class="operator">=</span> records.getTableFields();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufLength</span> <span class="operator">=</span> buffer.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.getFieldNum() &amp;&amp; bufLength &gt;= i + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (fields.getDataType(i)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        buffer[i] = Byte.toString(records.getRecordByteData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        buffer[i] = Short.toString(records.getRecordShortData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        buffer[i] = Integer.toString(records.getRecordIntData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        buffer[i] = Long.toString(records.getRecordLongData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        buffer[i] = Float.toString(records.getRecordFloatData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                        buffer[i] = Double.toString(records.getRecordDoubleData(<span class="number">0</span>, i));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        buffer[i] = records.getRecordStringData(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addWellNotification</span><span class="params">(LogWell well, <span class="type">int</span> notifyType)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wsPath</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">DataPath</span>(well.getLogWorkSpace())).toString();</span><br><span class="line">        <span class="type">NotificationStruct</span> <span class="variable">infoStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wellName</span> <span class="operator">=</span> well.getWellName();</span><br><span class="line">        <span class="type">WellNotifiedInfo</span> <span class="variable">wellInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WellNotifiedInfo</span>(wellName, notifyType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.wellNotificationList.size(); ++i) &#123;</span><br><span class="line">            infoStruct = (NotificationStruct)<span class="built_in">this</span>.wellNotificationList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (infoStruct.getDataPath().equalsIgnoreCase(wsPath) &amp;&amp; !infoStruct.contains(wellName)) &#123;</span><br><span class="line">                infoStruct.addNotifiedInfo(wellInfo);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        infoStruct = <span class="keyword">new</span> <span class="title class_">NotificationStruct</span>(wsPath);</span><br><span class="line">        infoStruct.addNotifiedInfo(wellInfo);</span><br><span class="line">        <span class="built_in">this</span>.wellNotificationList.add(infoStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCategoryNotification</span><span class="params">(ReferCategoryStruct categoryStruct, <span class="type">int</span> notifyType)</span> &#123;</span><br><span class="line">        categoryStruct.isModified = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">        <span class="type">String</span> <span class="variable">wellPath</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">DataPath</span>(category.getLogWell())).toString();</span><br><span class="line">        <span class="type">NotificationStruct</span> <span class="variable">infoStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getCategoryName();</span><br><span class="line">        <span class="type">CategoryNotifiedInfo</span> <span class="variable">categoryInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryNotifiedInfo</span>(categoryName, notifyType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.categoryNotificationList.size(); ++i) &#123;</span><br><span class="line">            infoStruct = (NotificationStruct)<span class="built_in">this</span>.categoryNotificationList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (infoStruct.getDataPath().equalsIgnoreCase(wellPath) &amp;&amp; !infoStruct.contains(categoryName)) &#123;</span><br><span class="line">                infoStruct.addNotifiedInfo(categoryInfo);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        infoStruct = <span class="keyword">new</span> <span class="title class_">NotificationStruct</span>(wellPath);</span><br><span class="line">        infoStruct.addNotifiedInfo(categoryInfo);</span><br><span class="line">        <span class="built_in">this</span>.categoryNotificationList.add(infoStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCurve <span class="title function_">copyCurveAction</span><span class="params">(LogCategory category, LogCurve srcCurve, String desCurveName)</span> &#123;</span><br><span class="line">        <span class="type">LoggingProperties</span> <span class="variable">properties</span> <span class="operator">=</span> srcCurve.getLoggingProperties();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">curveType</span> <span class="operator">=</span> properties.getLoggingType();</span><br><span class="line">        <span class="type">double</span> <span class="variable">startDep</span> <span class="operator">=</span> properties.getStartDepth();</span><br><span class="line">        <span class="type">double</span> <span class="variable">depthLevel</span> <span class="operator">=</span> properties.getDepthLevel();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> (<span class="type">int</span>)((properties.getEndDepth() - startDep) / depthLevel + <span class="number">1.5</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="built_in">this</span>.computReadRowCount(curveType, properties);</span><br><span class="line">        <span class="type">int</span> <span class="variable">readingNum</span> <span class="operator">=</span> readCount &gt; dataCount ? dataCount : readCount;</span><br><span class="line">        <span class="type">int</span> <span class="variable">indexToRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">readDep</span> <span class="operator">=</span> startDep;</span><br><span class="line">        <span class="type">LogCurve</span> <span class="variable">newCurve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (curveType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="type">Curve1D</span> <span class="variable">curve1D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve1D</span>();</span><br><span class="line">                curve1D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve1D.setCurveName(desCurveName);</span><br><span class="line">                newCurve = (LogCurve1D)category.createCurve(curve1D);</span><br><span class="line">                <span class="type">double</span>[] data1D = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve1D</span> <span class="variable">oldCurve1D</span> <span class="operator">=</span> (LogCurve1D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * depthLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">double</span>[] data1D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum];</span><br><span class="line">                    oldCurve1D.readData(readDep, readingNum, data1D, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    ((LogCurve1D)newCurve).writeData(readDep, readingNum, data1D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="type">Curve2D</span> <span class="variable">curve2D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve2D</span>();</span><br><span class="line">                curve2D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve2D.setCurveName(desCurveName);</span><br><span class="line">                newCurve = (LogCurve2D)category.createCurve(curve2D);</span><br><span class="line">                <span class="type">double</span>[][] data2D = (<span class="type">double</span>[][])<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve2D</span> <span class="variable">oldCurve2D</span> <span class="operator">=</span> (LogCurve2D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * depthLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    data2D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][properties.getTimeSampleNum()];</span><br><span class="line">                    oldCurve2D.readData(readDep, readingNum, data2D, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    ((LogCurve2D)newCurve).writeData(readDep, readingNum, data2D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="type">Curve3D</span> <span class="variable">curve3D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve3D</span>();</span><br><span class="line">                curve3D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve3D.setCurveName(desCurveName);</span><br><span class="line">                newCurve = (LogCurve3D)category.createCurve(curve3D);</span><br><span class="line">                <span class="type">double</span>[][][] data3D = (<span class="type">double</span>[][][])<span class="literal">null</span>;</span><br><span class="line">                <span class="type">double</span>[][] data = (<span class="type">double</span>[][])<span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">X2Nps</span> <span class="operator">=</span> properties.getArrayNum();</span><br><span class="line">                <span class="type">int</span> <span class="variable">X3Npw</span> <span class="operator">=</span> properties.getTimeSampleNum();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve3D</span> <span class="variable">oldCurve3D</span> <span class="operator">=</span> (LogCurve3D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * depthLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    data3D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][X2Nps][X3Npw];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; X2Nps; ++i) &#123;</span><br><span class="line">                        data = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][X3Npw];</span><br><span class="line">                        oldCurve3D.readData(readDep, readingNum, i, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; readingNum; ++j) &#123;</span><br><span class="line">                            System.arraycopy(data[j], <span class="number">0</span>, data3D[j][i], <span class="number">0</span>, X3Npw);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ((LogCurve3D)newCurve).writeDataWithoutBuffer(readDep, readingNum, data3D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (LogCurve)newCurve;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchNotification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MessageCommunicationClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCommunicationClient</span>();</span><br><span class="line">        <span class="keyword">if</span> (client.connectToServer()) &#123;</span><br><span class="line">            <span class="type">NotificationMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.wellNotificationList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">                message.setCommmand(<span class="number">2</span>);</span><br><span class="line">                message.setNotificationList(<span class="built_in">this</span>.wellNotificationList);</span><br><span class="line">                client.sendMessage(message);</span><br><span class="line">                <span class="built_in">this</span>.wellNotificationList.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ReferCategoryContainer.getInstance().size(); ++i) &#123;</span><br><span class="line">                categoryStruct = ReferCategoryContainer.getInstance().elemenAt(i);</span><br><span class="line">                <span class="keyword">if</span> (categoryStruct.isModified) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.addCategoryNotification(ReferCategoryContainer.getInstance().elemenAt(i), <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.categoryNotificationList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">                message.setCommmand(<span class="number">3</span>);</span><br><span class="line">                message.setNotificationList(<span class="built_in">this</span>.categoryNotificationList);</span><br><span class="line">                client.sendMessage(message);</span><br><span class="line">                <span class="built_in">this</span>.categoryNotificationList.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">            message.setCommmand(<span class="number">1</span>);</span><br><span class="line">            client.sendMessage(message);</span><br><span class="line">            <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">                client.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeCurve_3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                        System.arraycopy(buffer, i * arraySize, data[i], <span class="number">0</span>, arraySize);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    retCode = curve.writeData(startDepth, arrayIndex, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                                System.arraycopy(buffer, i * arraySize, data[i], <span class="number">0</span>, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            retCode = curve.writeData(startDepth, arrayIndex, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">return</span> retCode;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer, ReadMode readMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> upwardCount + downWardCount + <span class="number">1</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, depthLevel, upwardCount, downWardCount, arrayIndex, data, readMode);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, depthLevel, upwardCount, downWardCount, arrayIndex, data, readMode);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> upwardCount + downWardCount + <span class="number">1</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, upwardCount, downWardCount, arrayIndex, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, upwardCount, downWardCount, arrayIndex, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">double</span> depthLevel, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer, ReadMode readMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, depthLevel, dataCount, arrayIndex, data, readMode);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, depthLevel, dataCount, arrayIndex, data, readMode);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_3D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">int</span> arrayIndex, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve3D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve3D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, dataCount, arrayIndex, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve3D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, dataCount, arrayIndex, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeCurve_2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                        System.arraycopy(buffer, i * arraySize, data[i], <span class="number">0</span>, arraySize);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    retCode = curve.writeData(startDepth, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                                System.arraycopy(buffer, i * arraySize, data[i], <span class="number">0</span>, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            retCode = curve.writeData(startDepth, dataCount, data, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> upwardCount + downWardCount + <span class="number">1</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, upwardCount, downWardCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, upwardCount, downWardCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">short</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">short</span>[][] data = <span class="keyword">new</span> <span class="title class_">short</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_2D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">int</span> arraySize, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">LogCurve2D</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">int</span> retCode;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve = (LogCurve2D)curveStruct.curve;</span><br><span class="line">                    <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> curve.readData(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(retCode = <span class="number">0</span>; retCode &lt; retCode; ++retCode) &#123;</span><br><span class="line">                            System.arraycopy(data[retCode], <span class="number">0</span>, buffer, retCode * arraySize, arraySize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curve = category.getLogCurve2D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="type">float</span>[][] data = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][arraySize];</span><br><span class="line">                            retCode = curve.readData(startDepth, dataCount, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; retCode; ++i) &#123;</span><br><span class="line">                                System.arraycopy(data[i], <span class="number">0</span>, buffer, i * arraySize, arraySize);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCode;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">writeCurve_1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">retCount</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="type">int</span> retCount;</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    retCount = ((LogCurve1D)curveStruct.curve).writeData(startDepth, dataCount, buffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> retCount;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve1D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve1D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            retCount = curve.writeData(startDepth, dataCount, buffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (retCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                categoryStruct.isModified = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> retCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> upwardCount, <span class="type">int</span> downWardCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; upwardCount &gt;= <span class="number">0</span> &amp;&amp; downWardCount &gt;= <span class="number">0</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve1D)curveStruct.curve).readData(startDepth, upwardCount, downWardCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve1D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve1D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.readData(startDepth, upwardCount, downWardCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">readCurve_1D</span><span class="params">(<span class="type">int</span> categoryID, String curveName, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryID &gt;= <span class="number">1</span> &amp;&amp; dataCount &gt;= <span class="number">1</span> &amp;&amp; buffer != <span class="literal">null</span> &amp;&amp; curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryID);</span><br><span class="line">            <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curve_name</span> <span class="operator">=</span> curveName.trim();</span><br><span class="line">                <span class="type">ReferCurveStruct</span> <span class="variable">curveStruct</span> <span class="operator">=</span> categoryStruct.getSpecifiedCurveElement(curve_name);</span><br><span class="line">                <span class="keyword">if</span> (curveStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ((LogCurve1D)curveStruct.curve).readData(startDepth, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> categoryStruct.getCategory();</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCurve1D</span> <span class="variable">curve</span> <span class="operator">=</span> category.getLogCurve1D(curve_name);</span><br><span class="line">                        <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            curveStruct = <span class="keyword">new</span> <span class="title class_">ReferCurveStruct</span>(curve_name, curve);</span><br><span class="line">                            categoryStruct.addCurveElement(curveStruct);</span><br><span class="line">                            <span class="keyword">return</span> curve.readData(startDepth, dataCount, buffer, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">isCategoryExisted</span><span class="params">(DataPath dataPath)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">catetgoryPath</span> <span class="operator">=</span> dataPath.toString(<span class="number">4</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (ReferCategoryContainer.getInstance().getSpecifiedElement(catetgoryPath) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">wellPath</span> <span class="operator">=</span> dataPath.toString(<span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(wellPath);</span><br><span class="line">            <span class="keyword">if</span> (file.exists() &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">identifierFilePath</span> <span class="operator">=</span> wellPath + File.separator + <span class="string">&quot;wellproperties.xml&quot;</span>;</span><br><span class="line">                file = <span class="keyword">new</span> <span class="title class_">File</span>(identifierFilePath);</span><br><span class="line">                <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    file = <span class="keyword">new</span> <span class="title class_">File</span>(catetgoryPath + <span class="string">&quot;.cifp&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> !file.exists() ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CurveXD <span class="title function_">buildCurveXD</span><span class="params">(String curveName, <span class="type">int</span> arrayNum, <span class="type">int</span> arraySize, <span class="type">double</span> startDepth, <span class="type">int</span> sampleCount, <span class="type">double</span> depthLevel, <span class="type">int</span> dataType, String curveUnit, String depthUnit)</span> &#123;</span><br><span class="line">        <span class="type">CurveXD</span> <span class="variable">curveXD</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (arrayNum == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arraySize == <span class="number">1</span>) &#123;</span><br><span class="line">                curveXD = <span class="keyword">new</span> <span class="title class_">Curve1D</span>();</span><br><span class="line">                ((CurveXD)curveXD).setCurveType((<span class="type">byte</span>)<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curveXD = <span class="keyword">new</span> <span class="title class_">Curve2D</span>();</span><br><span class="line">                ((Curve2D)curveXD).setTimeSampleNum(arraySize);</span><br><span class="line">                ((CurveXD)curveXD).setCurveType((<span class="type">byte</span>)<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curveXD = <span class="keyword">new</span> <span class="title class_">Curve3D</span>();</span><br><span class="line">            ((Curve3D)curveXD).setArrayNum(arrayNum);</span><br><span class="line">            ((Curve3D)curveXD).setTimeSampleNum(arraySize);</span><br><span class="line">            ((CurveXD)curveXD).setCurveType((<span class="type">byte</span>)<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ((CurveXD)curveXD).setCurveName(curveName);</span><br><span class="line">        ((CurveXD)curveXD).setStartDepth(startDepth);</span><br><span class="line">        ((CurveXD)curveXD).setEndDepth(startDepth + depthLevel * (<span class="type">double</span>)(sampleCount - <span class="number">1</span>));</span><br><span class="line">        ((CurveXD)curveXD).setDepthLevel(depthLevel);</span><br><span class="line">        ((CurveXD)curveXD).setDataType((<span class="type">byte</span>)dataType);</span><br><span class="line">        ((CurveXD)curveXD).setDepthUnit(depthUnit);</span><br><span class="line">        ((CurveXD)curveXD).setCurveUnit(curveUnit);</span><br><span class="line">        <span class="keyword">return</span> (CurveXD)curveXD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">createRemoteCategory</span><span class="params">(DataPath dataPath, String userName, String userPassword)</span> &#123;</span><br><span class="line">        <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;%%%&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">connectPara</span> <span class="operator">=</span> dataPath.getDataSourceName() + str + userName + str + userPassword;</span><br><span class="line">        <span class="keyword">if</span> (!dataSource.connect(connectPara)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(dataPath.getWorkSpaceName());</span><br><span class="line">            <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(dataPath.getWellName());</span><br><span class="line">                <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> dataPath.getCategoryName();</span><br><span class="line">                    <span class="keyword">if</span> (well.getLogCategory(categoryName) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">CategoryProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryProperties</span>();</span><br><span class="line">                        properties.setCategoryName(categoryName);</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.createCategory(properties);</span><br><span class="line">                        <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">categoryID</span> <span class="operator">=</span> <span class="built_in">this</span>.getID();</span><br><span class="line">                            <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferCategoryStruct</span>(dataPath.toString(<span class="number">4</span>, <span class="literal">true</span>), category, categoryID);</span><br><span class="line">                            ReferCategoryContainer.getInstance().addElement(categoryStruct);</span><br><span class="line">                            <span class="built_in">this</span>.addCategoryNotification(categoryStruct, <span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">return</span> categoryID;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">createLocalWell</span><span class="params">(DataPath dataPath)</span> &#123;</span><br><span class="line">        <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">        <span class="keyword">if</span> (!dataSource.connect(dataPath.getDataSourceName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogWorkSpace</span> <span class="variable">workSpace</span> <span class="operator">=</span> dataSource.getLogWorkSpace(dataPath.getWorkSpaceName());</span><br><span class="line">            <span class="keyword">if</span> (workSpace == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">wellName</span> <span class="operator">=</span> dataPath.getWellName();</span><br><span class="line">                <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> workSpace.getLogWell(wellName);</span><br><span class="line">                <span class="keyword">if</span> (well != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    well = workSpace.createWell(wellName);</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.addWellNotification(well, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">createLocalCategory</span><span class="params">(DataPath dataPath, <span class="type">int</span> isOverwritten)</span> &#123;</span><br><span class="line">        <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">        <span class="keyword">if</span> (!dataSource.connect(dataPath.getDataSourceName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogWorkSpace</span> <span class="variable">workSpace</span> <span class="operator">=</span> dataSource.getLogWorkSpace(dataPath.getWorkSpaceName());</span><br><span class="line">            <span class="keyword">if</span> (workSpace == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">wellName</span> <span class="operator">=</span> dataPath.getWellName();</span><br><span class="line">                <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> workSpace.getLogWell(wellName);</span><br><span class="line">                <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                    well = workSpace.createWell(wellName);</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> dataPath.getCategoryName();</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">logCategory</span> <span class="operator">=</span> well.getLogCategory(categoryName);</span><br><span class="line">                <span class="keyword">if</span> (logCategory != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isOverwritten == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!well.deleteCategory(categoryName)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(dataPath.toString(<span class="number">4</span>, <span class="literal">true</span>));</span><br><span class="line">                    <span class="keyword">if</span> (categoryStruct == <span class="literal">null</span>) &#123;</span><br><span class="line">                        categoryStruct = <span class="keyword">new</span> <span class="title class_">ReferCategoryStruct</span>(dataPath.toString(<span class="number">4</span>, <span class="literal">true</span>), logCategory, <span class="built_in">this</span>.getID());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ReferCategoryContainer.getInstance().removeElement(categoryStruct.getCategoryID());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.addCategoryNotification(categoryStruct, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">CategoryProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryProperties</span>();</span><br><span class="line">                properties.setCategoryName(categoryName);</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.createCategory(properties);</span><br><span class="line">                <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">categoryID</span> <span class="operator">=</span> <span class="built_in">this</span>.getID();</span><br><span class="line">                    <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferCategoryStruct</span>(dataPath.toString(<span class="number">4</span>, <span class="literal">true</span>), category, categoryID);</span><br><span class="line">                    ReferCategoryContainer.getInstance().addElement(categoryStruct);</span><br><span class="line">                    <span class="built_in">this</span>.addCategoryNotification(categoryStruct, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> categoryID;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getCategoryID</span><span class="params">(DataPath dataPath)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">categoryPath</span> <span class="operator">=</span> dataPath.toString(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">ReferCategoryStruct</span> <span class="variable">categoryStruct</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().getSpecifiedElement(categoryPath);</span><br><span class="line">        <span class="keyword">if</span> (categoryStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> categoryStruct.getCategoryID();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">            <span class="keyword">if</span> (!dataSource.connect(dataPath.getDataSourceName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LogWorkSpace</span> <span class="variable">workSpace</span> <span class="operator">=</span> dataSource.getLogWorkSpace(dataPath.getWorkSpaceName());</span><br><span class="line">                <span class="keyword">if</span> (workSpace == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> workSpace.getLogWell(dataPath.getWellName());</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(dataPath.getCategoryName());</span><br><span class="line">                        <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="built_in">this</span>.getID();</span><br><span class="line">                            ReferCategoryContainer.getInstance().addElement(<span class="keyword">new</span> <span class="title class_">ReferCategoryStruct</span>(categoryPath, category, id));</span><br><span class="line">                            <span class="keyword">if</span> (DataEngine.getDefault().getMainDataSource() == <span class="literal">null</span>) &#123;</span><br><span class="line">                                DataEngine.getDefault().setMainDataSource(dataSource);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> id;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">categoryID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ReferCategoryContainer.getInstance().size(); ++i) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> ReferCategoryContainer.getInstance().elemenAt(i).getCategoryID();</span><br><span class="line">                <span class="keyword">if</span> (categoryID == id) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    ++categoryID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> categoryID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">computReadRowCount</span><span class="params">(<span class="type">byte</span> curveType, LoggingProperties logPros)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">allowMaxSize</span> <span class="operator">=</span> <span class="number">262144</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Global.sizeof(logPros.getDataType());</span><br><span class="line">        <span class="keyword">switch</span> (curveType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> allowMaxSize / size;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> allowMaxSize / size / logPros.getTimeSampleNum();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> allowMaxSize / size / logPros.getArrayNum() / logPros.getTimeSampleNum();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCurve <span class="title function_">changeCurveDepthLevel</span><span class="params">(LogCategory category, LogCurve srcCurve, <span class="type">double</span> newDepLevel, String newCurveSuffix)</span> &#123;</span><br><span class="line">        <span class="type">LoggingProperties</span> <span class="variable">properties</span> <span class="operator">=</span> srcCurve.getLoggingProperties();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">curveType</span> <span class="operator">=</span> properties.getLoggingType();</span><br><span class="line">        <span class="type">double</span> <span class="variable">startDep</span> <span class="operator">=</span> properties.getStartDepth();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dataCount</span> <span class="operator">=</span> (<span class="type">int</span>)((properties.getEndDepth() - startDep) / newDepLevel + <span class="number">1.5</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newCurveName</span> <span class="operator">=</span> properties.getLoggingName() + newCurveSuffix;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="built_in">this</span>.computReadRowCount(curveType, properties);</span><br><span class="line">        <span class="type">int</span> <span class="variable">readingNum</span> <span class="operator">=</span> readCount &gt; dataCount ? dataCount : readCount;</span><br><span class="line">        <span class="type">int</span> <span class="variable">indexToRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">readDep</span> <span class="operator">=</span> startDep;</span><br><span class="line">        <span class="type">LogCurve</span> <span class="variable">newCurve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (curveType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="type">Curve1D</span> <span class="variable">curve1D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve1D</span>();</span><br><span class="line">                curve1D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve1D.setCurveName(newCurveName);</span><br><span class="line">                curve1D.setDepthLevel(newDepLevel);</span><br><span class="line">                newCurve = (LogCurve1D)category.createCurve(curve1D);</span><br><span class="line">                <span class="type">double</span>[] data1D = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve1D</span> <span class="variable">oldCurve1D</span> <span class="operator">=</span> (LogCurve1D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * newDepLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">double</span>[] data1D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum];</span><br><span class="line">                    oldCurve1D.readData(readDep, newDepLevel, readingNum, data1D, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    ((LogCurve1D)newCurve).writeData(readDep, readingNum, data1D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="type">Curve2D</span> <span class="variable">curve2D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve2D</span>();</span><br><span class="line">                curve2D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve2D.setCurveName(newCurveName);</span><br><span class="line">                curve2D.setDepthLevel(newDepLevel);</span><br><span class="line">                newCurve = (LogCurve2D)category.createCurve(curve2D);</span><br><span class="line">                <span class="type">double</span>[][] data2D = (<span class="type">double</span>[][])<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve2D</span> <span class="variable">oldCurve2D</span> <span class="operator">=</span> (LogCurve2D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * newDepLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    data2D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][properties.getTimeSampleNum()];</span><br><span class="line">                    oldCurve2D.readData(readDep, newDepLevel, readingNum, data2D, (ReadMode)<span class="literal">null</span>);</span><br><span class="line">                    ((LogCurve2D)newCurve).writeData(readDep, readingNum, data2D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="type">Curve3D</span> <span class="variable">curve3D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve3D</span>();</span><br><span class="line">                curve3D.getInfoFromLoggingProperties(properties);</span><br><span class="line">                curve3D.setCurveName(newCurveName);</span><br><span class="line">                curve3D.setDepthLevel(newDepLevel);</span><br><span class="line">                newCurve = (LogCurve3D)category.createCurve(curve3D);</span><br><span class="line">                <span class="type">double</span>[][][] data3D = (<span class="type">double</span>[][][])<span class="literal">null</span>;</span><br><span class="line">                <span class="type">double</span>[][] data = (<span class="type">double</span>[][])<span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">X2Nps</span> <span class="operator">=</span> properties.getArrayNum();</span><br><span class="line">                <span class="type">int</span> <span class="variable">X3Npw</span> <span class="operator">=</span> properties.getTimeSampleNum();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">LogCurve3D</span> <span class="variable">oldCurve3D</span> <span class="operator">=</span> (LogCurve3D)srcCurve; indexToRead &lt; dataCount; readDep += (<span class="type">double</span>)readingNum * newDepLevel) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataCount - indexToRead &lt; readingNum) &#123;</span><br><span class="line">                        readingNum = dataCount - indexToRead;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    data3D = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][X2Nps][X3Npw];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; X2Nps; ++i) &#123;</span><br><span class="line">                        data = <span class="keyword">new</span> <span class="title class_">double</span>[readingNum][X3Npw];</span><br><span class="line">                        oldCurve3D.readData(readDep, readingNum, i, data, (ReadMode)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; readingNum; ++j) &#123;</span><br><span class="line">                            System.arraycopy(data[j], <span class="number">0</span>, data3D[j][i], <span class="number">0</span>, X3Npw);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ((LogCurve3D)newCurve).writeDataWithoutBuffer(readDep, readingNum, data3D, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    indexToRead += readingNum;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ((LogCurve)newCurve).flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> srcCurve.getName();</span><br><span class="line">        category.deleteLogging(oldName);</span><br><span class="line">        ((LogCurve)newCurve).rename(oldName);</span><br><span class="line">        <span class="keyword">return</span> (LogCurve)newCurve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataServiceIntegratedIO-java"><a href="#DataServiceIntegratedIO-java" class="headerlink" title="DataServiceIntegratedIO.java"></a>DataServiceIntegratedIO.java</h2><h3 id="简略方法-2"><a href="#简略方法-2" class="headerlink" title="简略方法"></a>简略方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushData</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataChangedNotification</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProcessState</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setNextDepthRangeDepths</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDEP</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDEPO</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSDEP</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEDEP</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSTDEP</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getENDEP</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRLEV</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRLEVO</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getParameterValues</span><span class="params">(<span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInDataCount</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOutDataCount</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDepthSegmentCount</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveValue</span><span class="params">(<span class="type">int</span> index, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveValues</span><span class="params">(<span class="type">double</span> currentDep, <span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveValues</span><span class="params">(<span class="type">double</span> currentDep, <span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInArrayCurve</span><span class="params">(String str)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutArrayCurve</span><span class="params">(String str)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveUnit</span><span class="params">(String str)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZero</span><span class="params">(<span class="type">int</span> bzero)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setOutputCifpPath</span><span class="params">(String cifpPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterpolation</span><span class="params">(<span class="type">int</span> mode)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInputDepthLevel</span><span class="params">(<span class="type">double</span> depLevel)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputDepthLevel</span><span class="params">(<span class="type">double</span> depLevel)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readInpFile</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInputCurveNames</span><span class="params">(String[] curveNames)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveNames</span><span class="params">(String[] curveNames)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameterNames</span><span class="params">(String[] curveNames)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameterDefaultValues</span><span class="params">(<span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getErrorMessage</span><span class="params">()</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setInpFilePath</span><span class="params">(String inpPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCifpCount</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCifpPath</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setCifpPath</span><span class="params">(String cifpPath)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CurveProperty <span class="title function_">getInputCurveProperty</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRedirectionInputCurveName</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRedirectionOutputCurveName</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveExistFlag</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInputCurveValue</span><span class="params">(<span class="type">double</span> depth, <span class="type">int</span> index, <span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setOutputCurveValue</span><span class="params">(<span class="type">int</span> index, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] values)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveValue</span><span class="params">(<span class="type">double</span> depth, <span class="type">int</span> index, <span class="type">float</span>[] values)</span></span><br></pre></td></tr></table></figure><h3 id="类源码-2"><a href="#类源码-2" class="headerlink" title="类源码"></a>类源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cif.dataservice.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cif.baseutil.CifpFileCardWrapper;</span><br><span class="line"><span class="keyword">import</span> cif.baseutil.InpFileWrapper;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.DataPath;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.CategoryProperties;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve1D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve2D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.Curve3D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.CurveXD;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCategory;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve1D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve2D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogCurve3D;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogDataSource;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWell;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LogWorkSpace;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.LoggingProperties;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.ReadMode;</span><br><span class="line"><span class="keyword">import</span> cif.dataengine.io.WriteMode;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.CategoryNotifiedInfo;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.NotificationMessage;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.NotificationStruct;</span><br><span class="line"><span class="keyword">import</span> cif.dataservice.client.MessageCommunicationClient;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServiceIntegratedIO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InpFileWrapper</span> <span class="variable">inpFileWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">errorMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">inpFilePath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> LogCategory[] inputCategorys = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> LogCategory[] outputCategorys = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> CurveItem[][] inputCurveItems = (CurveItem[][])<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> CurveItem[][] outputCurveItems = (CurveItem[][])<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] depthLevels = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isModifiedInLevel</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] depoLevels = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isModifiedOutLevel</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] inputCurveNames = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] outputCurveNames = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] parameterNames = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] parameterDefaultValues = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">inputCurveCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">outputCurveCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isCleaningData</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> dep;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> depo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ArrayCurveSetItem&gt; inputArrayCurveSets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ArrayCurveSetItem&gt; outputArrayCurveSets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;NotificationStruct&gt; categoryNotificationList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, ModifiedOutputProperty&gt; outputCurvePropertyHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentZoneIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentCategoryIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">inDataCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">outDataCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReadMode</span> <span class="variable">readMode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadMode</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">customDepLevel</span> <span class="operator">=</span> <span class="number">99999.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">customDepoLevel</span> <span class="operator">=</span> <span class="number">99999.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataServiceIntegratedIO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inpFileWrapper = <span class="keyword">new</span> <span class="title class_">InpFileWrapper</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        CurveItem[][] var2 = <span class="built_in">this</span>.outputCurveItems;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> var2.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> var4;</span><br><span class="line">        <span class="keyword">for</span>(var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            CurveItem[] outputCurveItem = var2[var4];</span><br><span class="line">            CurveItem[] var6 = outputCurveItem;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> outputCurveItem.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="number">0</span>; var8 &lt; var7; ++var8) &#123;</span><br><span class="line">                <span class="type">CurveItem</span> <span class="variable">outputCurveItem1</span> <span class="operator">=</span> var6[var8];</span><br><span class="line">                curve = outputCurveItem1.getCurve();</span><br><span class="line">                <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curve.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LogCategory[] var10 = <span class="built_in">this</span>.inputCategorys;</span><br><span class="line">        var3 = var10.length;</span><br><span class="line"></span><br><span class="line">        LogCategory outputCategory;</span><br><span class="line">        <span class="keyword">for</span>(var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            outputCategory = var10[var4];</span><br><span class="line">            outputCategory.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var10 = <span class="built_in">this</span>.outputCategorys;</span><br><span class="line">        var3 = var10.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            outputCategory = var10[var4];</span><br><span class="line">            outputCategory.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataChangedNotification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MessageCommunicationClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCommunicationClient</span>();</span><br><span class="line">        <span class="keyword">if</span> (client.connectToServer()) &#123;</span><br><span class="line">            <span class="type">NotificationMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.categoryNotificationList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">                message.setCommmand(<span class="number">3</span>);</span><br><span class="line">                message.setNotificationList(<span class="built_in">this</span>.categoryNotificationList);</span><br><span class="line">                client.sendMessage(message);</span><br><span class="line">                message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">                message.setCommmand(<span class="number">1</span>);</span><br><span class="line">                client.sendMessage(message);</span><br><span class="line">                message = <span class="keyword">new</span> <span class="title class_">NotificationMessage</span>();</span><br><span class="line">                message.setCommmand(<span class="number">4</span>);</span><br><span class="line">                client.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            client.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProcessState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.currentCategoryIndex == <span class="built_in">this</span>.inputCategorys.length - <span class="number">1</span> &amp;&amp; <span class="built_in">this</span>.currentZoneIndex == <span class="built_in">this</span>.inpFileWrapper.getZoneCount(<span class="built_in">this</span>.currentCategoryIndex) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++<span class="built_in">this</span>.currentCategoryIndex;</span><br><span class="line">            <span class="built_in">this</span>.currentZoneIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.dep = <span class="built_in">this</span>.depo = <span class="built_in">this</span>.inpFileWrapper.getAllZoneStartDepth(<span class="built_in">this</span>.currentCategoryIndex);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setNextDepthRangeDepths</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> <span class="built_in">this</span>.currentZoneIndex;</span><br><span class="line">        ++tempNum;</span><br><span class="line">        <span class="keyword">if</span> (tempNum == <span class="built_in">this</span>.inpFileWrapper.getZoneCount(<span class="built_in">this</span>.currentCategoryIndex)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++<span class="built_in">this</span>.currentZoneIndex;</span><br><span class="line">            <span class="built_in">this</span>.dep = <span class="built_in">this</span>.depo = <span class="built_in">this</span>.inpFileWrapper.getZoneStartDepth(<span class="built_in">this</span>.currentCategoryIndex, <span class="built_in">this</span>.currentZoneIndex);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDEP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.dep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDEPO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.depo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSDEP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inpFileWrapper.getZoneStartDepth(<span class="built_in">this</span>.currentCategoryIndex, <span class="built_in">this</span>.currentZoneIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEDEP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inpFileWrapper.getZoneEndDepth(<span class="built_in">this</span>.currentCategoryIndex, <span class="built_in">this</span>.currentZoneIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSTDEP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inpFileWrapper.getAllZoneStartDepth(<span class="built_in">this</span>.currentCategoryIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getENDEP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inpFileWrapper.getAllZoneEndDepth(<span class="built_in">this</span>.currentCategoryIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRLEV</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRLEVO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.depoLevels[<span class="built_in">this</span>.currentCategoryIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getParameterValues</span><span class="params">(<span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inpFileWrapper.getParameterValues(<span class="built_in">this</span>.currentCategoryIndex, <span class="built_in">this</span>.currentZoneIndex, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInDataCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CurveItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.inputCurveCount; ++i) &#123;</span><br><span class="line">            item = <span class="built_in">this</span>.inputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][i];</span><br><span class="line">            <span class="built_in">this</span>.inDataCount += item.getArrayNum() * item.getArraySize();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inDataCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOutDataCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CurveItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.outputCurveCount; ++i) &#123;</span><br><span class="line">            item = <span class="built_in">this</span>.outputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][i];</span><br><span class="line">            <span class="built_in">this</span>.outDataCount += item.getArrayNum() * item.getArraySize();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.outDataCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDepthSegmentCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inpFileWrapper.getZoneCount(<span class="built_in">this</span>.currentCategoryIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveValue</span><span class="params">(<span class="type">int</span> index, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.inputCurveItems[<span class="built_in">this</span>.currentCategoryIndex].length;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="built_in">this</span>.inputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][index];</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> curveItem.getCurve();</span><br><span class="line">            <span class="type">int</span> array2DSize;</span><br><span class="line">            <span class="type">int</span> array3DSize;</span><br><span class="line">            <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(array2DSize = <span class="number">0</span>; array2DSize &lt; curveItem.getArrayNum(); ++array2DSize) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(array3DSize = <span class="number">0</span>; array3DSize &lt; curveItem.getArraySize(); ++array3DSize) &#123;</span><br><span class="line">                            values[pos++] = -<span class="number">99999.0F</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        pos = ((LogCurve1D)curve).readData(startDepth, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], dataCount, values, <span class="built_in">this</span>.readMode);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        array2DSize = curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][array2DSize];</span><br><span class="line">                        ((LogCurve2D)curve).readData(startDepth, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], dataCount, float2DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(array3DSize = <span class="number">0</span>; array3DSize &lt; dataCount; ++array3DSize) &#123;</span><br><span class="line">                            System.arraycopy(float2DBuffer[array3DSize], pos, values, pos, array2DSize);</span><br><span class="line">                            pos += array2DSize;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> pos;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        array3DSize = curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> curveItem.getRealArrayNum();</span><br><span class="line">                        <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; array3DNum; ++k) &#123;</span><br><span class="line">                            float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][array3DSize];</span><br><span class="line">                            ((LogCurve3D)curve).readData(<span class="built_in">this</span>.dep, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], dataCount, k, float3DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                                System.arraycopy(float3DBuffer[i], <span class="number">0</span>, values, pos, array3DSize);</span><br><span class="line">                                pos += array3DSize;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveValues</span><span class="params">(<span class="type">double</span> currentDep, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dep = currentDep;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.inDataCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.inputCurveCount; ++i) &#123;</span><br><span class="line">                curveItem = <span class="built_in">this</span>.inputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][i];</span><br><span class="line">                curve = curveItem.getCurve();</span><br><span class="line">                <span class="type">int</span> read2DArraySize;</span><br><span class="line">                <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; curveItem.getArrayNum(); ++j) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(read2DArraySize = <span class="number">0</span>; read2DArraySize &lt; curveItem.getArraySize(); ++read2DArraySize) &#123;</span><br><span class="line">                            values[pos++] = -<span class="number">99999.0F</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> read3DArraySize;</span><br><span class="line">                    <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="type">float</span>[] float1DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[]&#123;-<span class="number">99999.0F</span>&#125;;</span><br><span class="line">                            ((LogCurve1D)curve).readData(<span class="built_in">this</span>.dep, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, float1DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                            values[pos++] = float1DBuffer[<span class="number">0</span>];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            read2DArraySize = curveItem.getArraySize();</span><br><span class="line">                            <span class="type">int</span> <span class="variable">array2DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                            <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array2DSize];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(read3DArraySize = <span class="number">0</span>; read3DArraySize &lt; array2DSize; ++read3DArraySize) &#123;</span><br><span class="line">                                float2DBuffer[<span class="number">0</span>][read3DArraySize] = -<span class="number">99999.0F</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            ((LogCurve2D)curve).readData(<span class="built_in">this</span>.dep, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, float2DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                            System.arraycopy(float2DBuffer[<span class="number">0</span>], <span class="number">0</span>, values, pos, Math.min(read2DArraySize, array2DSize));</span><br><span class="line">                            pos += read2DArraySize;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            read3DArraySize = curveItem.getArraySize();</span><br><span class="line">                            <span class="type">int</span> <span class="variable">read3DArrayNum</span> <span class="operator">=</span> curveItem.getArrayNum();</span><br><span class="line">                            <span class="type">int</span> <span class="variable">array3DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                            <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> curveItem.getRealArrayNum();</span><br><span class="line">                            <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; Math.min(read3DArrayNum, array3DNum); ++k) &#123;</span><br><span class="line">                                float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array3DSize];</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array3DSize; ++j) &#123;</span><br><span class="line">                                    float3DBuffer[<span class="number">0</span>][j] = -<span class="number">99999.0F</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                ((LogCurve3D)curve).readData(<span class="built_in">this</span>.dep, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, k, float3DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                                System.arraycopy(float3DBuffer[<span class="number">0</span>], <span class="number">0</span>, values, pos, Math.min(read3DArraySize, array3DSize));</span><br><span class="line">                                pos += read3DArraySize;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveValues</span><span class="params">(<span class="type">double</span> currentDep, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.depo = currentDep;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.outDataCount != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.outputCurveCount; ++i) &#123;</span><br><span class="line">                curveItem = <span class="built_in">this</span>.outputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][i];</span><br><span class="line">                curve = curveItem.getCurve();</span><br><span class="line">                <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="type">float</span>[] float1DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[]&#123;values[pos++]&#125;;</span><br><span class="line">                        ((LogCurve1D)curve).writeData(<span class="built_in">this</span>.depo, <span class="number">1</span>, float1DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="type">int</span> <span class="variable">write2DArraySize</span> <span class="operator">=</span> curveItem.getArraySize();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array2DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array2DSize];</span><br><span class="line">                        System.arraycopy(values, pos, float2DBuffer[<span class="number">0</span>], <span class="number">0</span>, Math.min(write2DArraySize, array2DSize));</span><br><span class="line">                        ((LogCurve2D)curve).writeData(<span class="built_in">this</span>.depo, <span class="number">1</span>, float2DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                        pos += write2DArraySize;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="type">int</span> <span class="variable">write3DArraySize</span> <span class="operator">=</span> curveItem.getArraySize();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">write3DArrayNum</span> <span class="operator">=</span> curveItem.getArrayNum();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> curveItem.getRealArrayNum();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array3DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">init3DSize</span> <span class="operator">=</span> Math.min(write3DArraySize, array3DSize);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; Math.min(write3DArrayNum, array3DNum); ++k) &#123;</span><br><span class="line">                            float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array3DSize];</span><br><span class="line">                            System.arraycopy(values, pos, float3DBuffer[<span class="number">0</span>], <span class="number">0</span>, init3DSize);</span><br><span class="line">                            ((LogCurve3D)curve).writeData(<span class="built_in">this</span>.depo, k, <span class="number">1</span>, float3DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                            pos += write3DArraySize;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInArrayCurve</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; !str.trim().isEmpty()) &#123;</span><br><span class="line">            String[] arrayCurves = str.trim().split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            String[] var3 = arrayCurves;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> arrayCurves.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">arrayCurve</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                String[] curve = arrayCurve.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (curve.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> curve[<span class="number">0</span>].trim();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">arrayNum</span> <span class="operator">=</span> Integer.parseInt(curve[<span class="number">1</span>].trim());</span><br><span class="line">                        <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> Integer.parseInt(curve[<span class="number">2</span>].trim());</span><br><span class="line">                        <span class="built_in">this</span>.inputArrayCurveSets.add(<span class="keyword">new</span> <span class="title class_">ArrayCurveSetItem</span>(name, arrayNum, arraySize));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NumberFormatException var11) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutArrayCurve</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; !str.trim().isEmpty()) &#123;</span><br><span class="line">            String[] arrayCurves = str.trim().split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            String[] var3 = arrayCurves;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> arrayCurves.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">arrayCurve</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                String[] curve = arrayCurve.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (curve.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> curve[<span class="number">0</span>].trim();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">arrayNum</span> <span class="operator">=</span> Integer.parseInt(curve[<span class="number">1</span>].trim());</span><br><span class="line">                        <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> Integer.parseInt(curve[<span class="number">2</span>].trim());</span><br><span class="line">                        <span class="built_in">this</span>.outputArrayCurveSets.add(<span class="keyword">new</span> <span class="title class_">ArrayCurveSetItem</span>(name, arrayNum, arraySize));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NumberFormatException var11) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveUnit</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; !str.trim().isEmpty()) &#123;</span><br><span class="line">            String[] curveUnits = str.trim().split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            String[] var3 = curveUnits;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> curveUnits.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curveUnit1</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                String[] curveUnitItem = curveUnit1.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">curveName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">curveUnit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (curveUnitItem.length == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        curveName = curveUnitItem[<span class="number">0</span>].trim().toUpperCase();</span><br><span class="line">                        curveUnit = curveUnitItem[<span class="number">1</span>].trim();</span><br><span class="line">                        <span class="type">ModifiedOutputProperty</span> <span class="variable">modifiedOutputProperty</span> <span class="operator">=</span> (ModifiedOutputProperty)<span class="built_in">this</span>.outputCurvePropertyHashMap.get(curveName);</span><br><span class="line">                        <span class="keyword">if</span> (modifiedOutputProperty == <span class="literal">null</span>) &#123;</span><br><span class="line">                            modifiedOutputProperty = <span class="keyword">new</span> <span class="title class_">ModifiedOutputProperty</span>();</span><br><span class="line">                            <span class="built_in">this</span>.outputCurvePropertyHashMap.put(curveName, modifiedOutputProperty);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        modifiedOutputProperty.setCurveUnit(curveUnit);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NumberFormatException var11) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZero</span><span class="params">(<span class="type">int</span> bzero)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isCleaningData = bzero == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setOutputCifpPath</span><span class="params">(String cifpPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cifpPath != <span class="literal">null</span> &amp;&amp; !cifpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cifpPath.endsWith(<span class="string">&quot;.wells&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">CifpFileCardWrapper</span> <span class="variable">cifpFileWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CifpFileCardWrapper</span>();</span><br><span class="line">                <span class="keyword">if</span> (cifpFileWrapper.read(cifpPath) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Output Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> cifpFileWrapper.getCifpFileCount();</span><br><span class="line">                <span class="built_in">this</span>.outputCategorys = <span class="keyword">new</span> <span class="title class_">LogCategory</span>[count];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.outputCategorys[i] = <span class="built_in">this</span>.getCategory(cifpFileWrapper.getCifpFile(i), <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.outputCategorys[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Output Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.outputCategorys = <span class="keyword">new</span> <span class="title class_">LogCategory</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">this</span>.outputCategorys[<span class="number">0</span>] = <span class="built_in">this</span>.getCategory(cifpPath, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.outputCategorys[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Output Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Null Path For Output Cifp File!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterpolation</span><span class="params">(<span class="type">int</span> mode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.readMode.interpolationMode = (<span class="type">byte</span>)mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInputDepthLevel</span><span class="params">(<span class="type">double</span> depLevel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customDepLevel = depLevel;</span><br><span class="line">        <span class="built_in">this</span>.isModifiedInLevel = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputDepthLevel</span><span class="params">(<span class="type">double</span> depLevel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customDepoLevel = depLevel;</span><br><span class="line">        <span class="built_in">this</span>.isModifiedOutLevel = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readInpFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.inputCurveNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.inpFileWrapper.setInputCurveNames(<span class="built_in">this</span>.inputCurveNames);</span><br><span class="line">            <span class="built_in">this</span>.inputCurveCount = <span class="built_in">this</span>.inputCurveNames.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.outputCurveNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.inpFileWrapper.setOutputCurveNames(<span class="built_in">this</span>.outputCurveNames);</span><br><span class="line">            <span class="built_in">this</span>.outputCurveCount = <span class="built_in">this</span>.outputCurveNames.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.parameterNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.inpFileWrapper.setParameterNames(<span class="built_in">this</span>.parameterNames);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.parameterDefaultValues != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.inpFileWrapper.setParameterDefaultValues(<span class="built_in">this</span>.parameterDefaultValues);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">retCode</span> <span class="operator">=</span> <span class="built_in">this</span>.inpFileWrapper.readInpFile(<span class="built_in">this</span>.inpFilePath);</span><br><span class="line">        <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.setInputCurves()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.computeDepthLevel();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.setOutputCurves()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.dep = <span class="built_in">this</span>.depo = <span class="built_in">this</span>.inpFileWrapper.getAllZoneStartDepth(<span class="built_in">this</span>.currentCategoryIndex);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.inpFileWrapper.getErrorMessageCount(); ++i) &#123;</span><br><span class="line">                <span class="built_in">this</span>.errorMsg.append(<span class="built_in">this</span>.inpFileWrapper.getErrorMessage(i)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInputCurveNames</span><span class="params">(String[] curveNames)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curveNames != <span class="literal">null</span> &amp;&amp; curveNames.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.inputCurveNames = curveNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveNames</span><span class="params">(String[] curveNames)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curveNames != <span class="literal">null</span> &amp;&amp; curveNames.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.outputCurveNames = curveNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameterNames</span><span class="params">(String[] curveNames)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curveNames != <span class="literal">null</span> &amp;&amp; curveNames.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.parameterNames = curveNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameterDefaultValues</span><span class="params">(<span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.parameterDefaultValues = <span class="keyword">new</span> <span class="title class_">String</span>[values.length];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; ++i) &#123;</span><br><span class="line">                <span class="built_in">this</span>.parameterDefaultValues[i] = String.valueOf(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorMsg.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setInpFilePath</span><span class="params">(String inpPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inpPath != <span class="literal">null</span> &amp;&amp; !inpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.inpFilePath = inpPath.trim();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.inpFilePath);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Parameter Card Not Found!\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Null Path For Parameter Card!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCifpCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inputCategorys != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.inputCategorys.length != <span class="number">0</span> ? <span class="built_in">this</span>.inputCategorys.length : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCifpPath</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.inputCategorys != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.inputCategorys.length != <span class="number">0</span> &amp;&amp; index &gt;= <span class="number">1</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCategorys.length ? (<span class="keyword">new</span> <span class="title class_">DataPath</span>(<span class="built_in">this</span>.inputCategorys[index - <span class="number">1</span>])).toFullString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setCifpPath</span><span class="params">(String cifpPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cifpPath != <span class="literal">null</span> &amp;&amp; !cifpPath.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cifpPath.endsWith(<span class="string">&quot;.wells&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">CifpFileCardWrapper</span> <span class="variable">cifpFileWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CifpFileCardWrapper</span>();</span><br><span class="line">                <span class="keyword">if</span> (cifpFileWrapper.read(cifpPath) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> cifpFileWrapper.getCifpFileCount();</span><br><span class="line">                <span class="built_in">this</span>.inputCategorys = <span class="keyword">new</span> <span class="title class_">LogCategory</span>[count];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.inputCategorys[i] = <span class="built_in">this</span>.getCategory(cifpFileWrapper.getCifpFile(i), <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.inputCategorys[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.inputCategorys = <span class="keyword">new</span> <span class="title class_">LogCategory</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">this</span>.inputCategorys[<span class="number">0</span>] = <span class="built_in">this</span>.getCategory(cifpPath, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.inputCategorys[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Cifp File Path Parsing Error!\r\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.outputCategorys == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.outputCategorys = <span class="built_in">this</span>.inputCategorys;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.errorMsg.append(<span class="string">&quot;Null Path For Cifp File!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCurve <span class="title function_">getSpecifiedCurve</span><span class="params">(LogCategory category, String curveName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curveName != <span class="literal">null</span> &amp;&amp; !curveName.trim().isEmpty() ? category.getLogCurve(curveName.trim()) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CurveProperty <span class="title function_">getInputCurveProperty</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCurveCount - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">CurveProperty</span> <span class="variable">curveProperty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurveProperty</span>();</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="built_in">this</span>.getSpecifiedCurve(<span class="built_in">this</span>.inputCategorys[<span class="built_in">this</span>.currentCategoryIndex], <span class="built_in">this</span>.inpFileWrapper.getInputCurveRedirection(<span class="built_in">this</span>.currentCategoryIndex, index));</span><br><span class="line">            <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">LoggingProperties</span> <span class="variable">properties</span> <span class="operator">=</span> curve.getLoggingProperties();</span><br><span class="line">                curveProperty.curveName = properties.getLoggingName();</span><br><span class="line">                curveProperty.curveUnit = properties.getCurveUnit();</span><br><span class="line">                curveProperty.startDepth = properties.getStartDepth();</span><br><span class="line">                curveProperty.endDepth = properties.getEndDepth();</span><br><span class="line">                curveProperty.depthLevel = properties.getDepthLevel();</span><br><span class="line">                curveProperty.arrayNum = properties.getArrayNum();</span><br><span class="line">                curveProperty.timeSampleNum = properties.getTimeSampleNum();</span><br><span class="line">                curveProperty.timeSampleUnit = properties.getTimeSampleUnit();</span><br><span class="line">                curveProperty.timeSampleStartTime = properties.getTimeSampleStartTime();</span><br><span class="line">                curveProperty.timeSampleLevel = properties.getTimeSampleLevel();</span><br><span class="line">                <span class="keyword">return</span> curveProperty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirectionInputCurveName</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCurveCount - <span class="number">1</span> ? <span class="built_in">this</span>.inpFileWrapper.getInputCurveRedirection(<span class="built_in">this</span>.currentCategoryIndex, index) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirectionOutputCurveName</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCurveCount - <span class="number">1</span> ? <span class="built_in">this</span>.inpFileWrapper.getOutputCurveRedirection(<span class="built_in">this</span>.currentCategoryIndex, index) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInputCurveExistFlag</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCurveCount - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getSpecifiedCurve(<span class="built_in">this</span>.inputCategorys[<span class="built_in">this</span>.currentCategoryIndex], <span class="built_in">this</span>.inpFileWrapper.getInputCurveRedirection(<span class="built_in">this</span>.currentCategoryIndex, index)) == <span class="literal">null</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInputCurveValue</span><span class="params">(<span class="type">double</span> depth, <span class="type">int</span> index, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.inputCurveCount) &#123;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="built_in">this</span>.inputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][index];</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> curveItem.getCurve();</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> curveItem.getArraySize();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; curveItem.getArrayNum(); ++j) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">                        values[j * arraySize + k] = -<span class="number">99999.0F</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> read3DArraySize;</span><br><span class="line">                <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="type">float</span>[] float1DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[]&#123;-<span class="number">99999.0F</span>&#125;;</span><br><span class="line">                        ((LogCurve1D)curve).readData(depth, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, float1DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                        values[<span class="number">0</span>] = float1DBuffer[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        j = curveItem.getArraySize();</span><br><span class="line">                        k = curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][k];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(read3DArraySize = <span class="number">0</span>; read3DArraySize &lt; k; ++read3DArraySize) &#123;</span><br><span class="line">                            float2DBuffer[<span class="number">0</span>][read3DArraySize] = -<span class="number">99999.0F</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        ((LogCurve2D)curve).readData(depth, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, float2DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                        System.arraycopy(float2DBuffer[<span class="number">0</span>], <span class="number">0</span>, values, <span class="number">0</span>, Math.min(j, k));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        read3DArraySize = curveItem.getArraySize();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">read3DArrayNum</span> <span class="operator">=</span> curveItem.getArrayNum();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array3DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> curveItem.getRealArrayNum();</span><br><span class="line">                        <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; Math.min(read3DArrayNum, array3DNum); ++k) &#123;</span><br><span class="line">                            float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array3DSize];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array3DSize; ++j) &#123;</span><br><span class="line">                                float3DBuffer[<span class="number">0</span>][j] = -<span class="number">99999.0F</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            ((LogCurve3D)curve).readData(depth, <span class="built_in">this</span>.depthLevels[<span class="built_in">this</span>.currentCategoryIndex], <span class="number">1</span>, k, float3DBuffer, <span class="built_in">this</span>.readMode);</span><br><span class="line">                            System.arraycopy(float3DBuffer[<span class="number">0</span>], <span class="number">0</span>, values, <span class="number">0</span>, Math.min(read3DArraySize, array3DSize));</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setOutputCurveValue</span><span class="params">(<span class="type">int</span> index, <span class="type">double</span> startDepth, <span class="type">int</span> dataCount, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.outputCurveCount) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">writeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="built_in">this</span>.outputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][index];</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> curveItem.getCurve();</span><br><span class="line">            <span class="type">int</span> array3DSize;</span><br><span class="line">            <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    writeCount = ((LogCurve1D)curve).writeData(startDepth, dataCount, values, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">array2DSize</span> <span class="operator">=</span> ((LogCurve2D)curve).getTimeSampleCount();</span><br><span class="line">                    <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][array2DSize];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(array3DSize = <span class="number">0</span>; array3DSize &lt; dataCount; ++array3DSize) &#123;</span><br><span class="line">                        System.arraycopy(values, array3DSize * array2DSize, float2DBuffer[array3DSize], <span class="number">0</span>, array2DSize);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    writeCount = ((LogCurve2D)curve).writeData(startDepth, dataCount, float2DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    array3DSize = ((LogCurve3D)curve).getTimeSampleCount();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> ((LogCurve3D)curve).getArrayNum();</span><br><span class="line">                    <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; array3DNum; ++k) &#123;</span><br><span class="line">                        float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[dataCount][array3DSize];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataCount; ++i) &#123;</span><br><span class="line">                            System.arraycopy(values, pos, float3DBuffer[i], <span class="number">0</span>, array3DSize);</span><br><span class="line">                            pos += array3DSize;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        writeCount += ((LogCurve3D)curve).writeData(startDepth, k, dataCount, float3DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> writeCount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputCurveValue</span><span class="params">(<span class="type">double</span> depth, <span class="type">int</span> index, <span class="type">float</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.outputCurveCount) &#123;</span><br><span class="line">            <span class="type">CurveItem</span> <span class="variable">curveItem</span> <span class="operator">=</span> <span class="built_in">this</span>.outputCurveItems[<span class="built_in">this</span>.currentCategoryIndex][index];</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> curveItem.getCurve();</span><br><span class="line">            <span class="keyword">switch</span> (curve.getLoggingType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="type">float</span>[] float1DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[]&#123;values[<span class="number">0</span>]&#125;;</span><br><span class="line">                    ((LogCurve1D)curve).writeData(depth, <span class="number">1</span>, float1DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">write2DArraySize</span> <span class="operator">=</span> curveItem.getArraySize();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">array2DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                    <span class="type">float</span>[][] float2DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array2DSize];</span><br><span class="line">                    System.arraycopy(values, <span class="number">0</span>, float2DBuffer[<span class="number">0</span>], <span class="number">0</span>, Math.min(write2DArraySize, array2DSize));</span><br><span class="line">                    ((LogCurve2D)curve).writeData(depth, <span class="number">1</span>, float2DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">write3DArraySize</span> <span class="operator">=</span> curveItem.getArraySize();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">write3DArrayNum</span> <span class="operator">=</span> curveItem.getArrayNum();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">array3DNum</span> <span class="operator">=</span> curveItem.getRealArrayNum();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">array3DSize</span> <span class="operator">=</span> curveItem.getRealArraySize();</span><br><span class="line">                    <span class="type">float</span>[][] float3DBuffer = (<span class="type">float</span>[][])<span class="literal">null</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">init3DSize</span> <span class="operator">=</span> Math.min(write3DArraySize, array3DSize);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; Math.min(write3DArrayNum, array3DNum); ++k) &#123;</span><br><span class="line">                        float3DBuffer = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>][array3DSize];</span><br><span class="line">                        System.arraycopy(values, <span class="number">0</span>, float3DBuffer[<span class="number">0</span>], <span class="number">0</span>, init3DSize);</span><br><span class="line">                        ((LogCurve3D)curve).writeData(depth, k, <span class="number">1</span>, float3DBuffer, (WriteMode)<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">setOutputCurves</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">outputCategoryCount</span> <span class="operator">=</span> <span class="built_in">this</span>.outputCategorys.length;</span><br><span class="line">        <span class="built_in">this</span>.outputCurveItems = <span class="keyword">new</span> <span class="title class_">CurveItem</span>[outputCategoryCount][<span class="built_in">this</span>.outputCurveCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; outputCategoryCount; ++i) &#123;</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">redirectionCurveName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addCurveFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">overwriteCurveFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">processStartDepth</span> <span class="operator">=</span> <span class="built_in">this</span>.inpFileWrapper.getAllZoneStartDepth(i);</span><br><span class="line">            <span class="type">double</span> <span class="variable">processEndDepth</span> <span class="operator">=</span> <span class="built_in">this</span>.inpFileWrapper.getAllZoneEndDepth(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="built_in">this</span>.outputCurveCount; ++j) &#123;</span><br><span class="line">                redirectionCurveName = <span class="built_in">this</span>.inpFileWrapper.getOutputCurveRedirection(i, j);</span><br><span class="line">                curve = <span class="built_in">this</span>.getSpecifiedCurve(<span class="built_in">this</span>.outputCategorys[i], redirectionCurveName);</span><br><span class="line">                <span class="type">ArrayCurveSetItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">outputArrayCurveSetsCount</span> <span class="operator">=</span> <span class="built_in">this</span>.outputArrayCurveSets.size();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>; z &lt; outputArrayCurveSetsCount; ++z) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((ArrayCurveSetItem)<span class="built_in">this</span>.outputArrayCurveSets.get(z)).getCurveName().equalsIgnoreCase(<span class="built_in">this</span>.inpFileWrapper.getOutputCurveOriginName(i, j))) &#123;</span><br><span class="line">                        item = (ArrayCurveSetItem)<span class="built_in">this</span>.outputArrayCurveSets.get(z);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(Math.abs(curve.getDepthLevel() - <span class="built_in">this</span>.depoLevels[i]) &lt; <span class="number">1.0E-5</span>)) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.errorMsg.append(curve.getName()).append(ResourceBundle.getBundle(<span class="string">&quot;cif/dataservice/io/Bundle&quot;</span>).getString(<span class="string">&quot;DataServiceIntegratedIO.setOutputCurves.errorMsg1&quot;</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">double</span> <span class="variable">startDepth</span> <span class="operator">=</span> curve.getStartDepth();</span><br><span class="line">                    <span class="type">double</span> <span class="variable">endDepth</span> <span class="operator">=</span> curve.getEndDepth();</span><br><span class="line">                    <span class="keyword">if</span> (startDepth &gt; processStartDepth || endDepth &lt; processEndDepth) &#123;</span><br><span class="line">                        curve.changeDepthRange(Math.min(startDepth, processStartDepth), Math.max(endDepth, processEndDepth), <span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (item != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (curve.getArrayNum() &lt; item.getArrayNum()) &#123;</span><br><span class="line">                            <span class="built_in">this</span>.errorMsg.append(curve.getName()).append(ResourceBundle.getBundle(<span class="string">&quot;cif/dataservice/io/Bundle&quot;</span>).getString(<span class="string">&quot;DataServiceIntegratedIO.setOutputCurves.errorMsg2&quot;</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (curve.getTimeSampleCount() != item.getArraySize()) &#123;</span><br><span class="line">                            <span class="built_in">this</span>.errorMsg.append(curve.getName()).append(ResourceBundle.getBundle(<span class="string">&quot;cif/dataservice/io/Bundle&quot;</span>).getString(<span class="string">&quot;DataServiceIntegratedIO.setOutputCurves.errorMsg3&quot;</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">this</span>.outputCurveItems[i][j] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve, item.getArrayNum(), item.getArraySize());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.outputCurveItems[i][j] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    overwriteCurveFlag = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    curve = <span class="built_in">this</span>.createOutputCurve(i, <span class="built_in">this</span>.outputCategorys[i], redirectionCurveName, item);</span><br><span class="line">                    <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.errorMsg.append(redirectionCurveName).append(ResourceBundle.getBundle(<span class="string">&quot;cif/dataservice/io/Bundle&quot;</span>).getString(<span class="string">&quot;DataServiceIntegratedIO.setOutputCurves.errorMsg4&quot;</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.outputCurveItems[i][j] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve);</span><br><span class="line">                    addCurveFlag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (addCurveFlag || overwriteCurveFlag) &#123;</span><br><span class="line">                <span class="built_in">this</span>.addCategoryNotification(<span class="built_in">this</span>.outputCategorys[i], <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCurve <span class="title function_">createOutputCurve</span><span class="params">(<span class="type">int</span> categoryIndex, LogCategory category, String curveName, ArrayCurveSetItem item)</span> &#123;</span><br><span class="line">        <span class="type">CurveXD</span> <span class="variable">curveXD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Curve1D</span>();</span><br><span class="line">        <span class="type">ModifiedOutputProperty</span> <span class="variable">curveProperty</span> <span class="operator">=</span> (ModifiedOutputProperty)<span class="built_in">this</span>.outputCurvePropertyHashMap.get(curveName.trim().toUpperCase());</span><br><span class="line">        <span class="keyword">if</span> (item != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">arrayNum</span> <span class="operator">=</span> item.getArrayNum();</span><br><span class="line">            <span class="type">int</span> <span class="variable">arraySize</span> <span class="operator">=</span> item.getArraySize();</span><br><span class="line">            <span class="keyword">if</span> (arrayNum &lt; <span class="number">1</span> || arraySize &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (arrayNum) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (arraySize &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        curveXD = <span class="keyword">new</span> <span class="title class_">Curve2D</span>();</span><br><span class="line">                        ((Curve2D)curveXD).setTimeSampleNum(arraySize);</span><br><span class="line">                        <span class="keyword">if</span> (curveProperty != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (curveProperty.isIsTimeSampleLevelModified()) &#123;</span><br><span class="line">                                ((Curve2D)curveXD).setTimeSampleLevel(curveProperty.getTimeSampleLevel());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (curveProperty.isIsTimeSampleUnitModified()) &#123;</span><br><span class="line">                                ((Curve2D)curveXD).setTimeSampleUnit(curveProperty.getTimeSampleUnit());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (curveProperty.isIsTimeSampleStartTimeModified()) &#123;</span><br><span class="line">                                ((Curve2D)curveXD).setTimeSampleStartTime(curveProperty.getTimeSampleStartTime());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    curveXD = <span class="keyword">new</span> <span class="title class_">Curve3D</span>();</span><br><span class="line">                    ((Curve3D)curveXD).setTimeSampleNum(arraySize);</span><br><span class="line">                    ((Curve3D)curveXD).setArrayNum(arrayNum);</span><br><span class="line">                    <span class="keyword">if</span> (curveProperty != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (curveProperty.isIsTimeSampleLevelModified()) &#123;</span><br><span class="line">                            ((Curve2D)curveXD).setTimeSampleLevel(curveProperty.getTimeSampleLevel());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (curveProperty.isIsTimeSampleUnitModified()) &#123;</span><br><span class="line">                            ((Curve2D)curveXD).setTimeSampleUnit(curveProperty.getTimeSampleUnit());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (curveProperty.isIsTimeSampleStartTimeModified()) &#123;</span><br><span class="line">                            ((Curve2D)curveXD).setTimeSampleStartTime(curveProperty.getTimeSampleStartTime());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ((CurveXD)curveXD).setCurveName(curveName);</span><br><span class="line">        ((CurveXD)curveXD).setStartDepth(<span class="built_in">this</span>.inpFileWrapper.getAllZoneStartDepth(categoryIndex));</span><br><span class="line">        ((CurveXD)curveXD).setEndDepth(<span class="built_in">this</span>.inpFileWrapper.getAllZoneEndDepth(categoryIndex));</span><br><span class="line">        ((CurveXD)curveXD).setDepthLevel(<span class="built_in">this</span>.depoLevels[categoryIndex]);</span><br><span class="line">        ((CurveXD)curveXD).setDataType((<span class="type">byte</span>)<span class="number">5</span>);</span><br><span class="line">        ((CurveXD)curveXD).setDepthUnit(category.getCategoryDepthUnit());</span><br><span class="line">        <span class="keyword">if</span> (curveProperty != <span class="literal">null</span> &amp;&amp; curveProperty.isIsCurveUnitModified()) &#123;</span><br><span class="line">            ((CurveXD)curveXD).setCurveUnit(curveProperty.getCurveUnit());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> category.createCurve((CurveXD)curveXD, <span class="built_in">this</span>.isCleaningData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">computeDepthLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inputCategoryCount</span> <span class="operator">=</span> <span class="built_in">this</span>.inputCategorys.length;</span><br><span class="line">        <span class="built_in">this</span>.depthLevels = <span class="keyword">new</span> <span class="title class_">double</span>[inputCategoryCount];</span><br><span class="line">        <span class="built_in">this</span>.depoLevels = <span class="keyword">new</span> <span class="title class_">double</span>[inputCategoryCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inputCategoryCount; ++i) &#123;</span><br><span class="line">            <span class="built_in">this</span>.depthLevels[i] = <span class="number">99999.0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.isModifiedInLevel) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.inputCurveItems[i].length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    CurveItem[] var6 = <span class="built_in">this</span>.inputCurveItems[i];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> var6.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="number">0</span>; var8 &lt; var7; ++var8) &#123;</span><br><span class="line">                        <span class="type">CurveItem</span> <span class="variable">item</span> <span class="operator">=</span> var6[var8];</span><br><span class="line">                        curve = item.getCurve();</span><br><span class="line">                        <span class="keyword">if</span> (curve != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">double</span> <span class="variable">tempLev</span> <span class="operator">=</span> curve.getDepthLevel();</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">this</span>.depthLevels[i] &gt; tempLev) &#123;</span><br><span class="line">                                <span class="built_in">this</span>.depthLevels[i] = tempLev;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.depthLevels[i] = <span class="built_in">this</span>.inputCategorys[i].getCategoryDepthLevel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.depthLevels[i] = <span class="built_in">this</span>.customDepLevel;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.isModifiedOutLevel) &#123;</span><br><span class="line">                <span class="built_in">this</span>.depoLevels[i] = <span class="built_in">this</span>.depthLevels[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.depoLevels[i] = <span class="built_in">this</span>.customDepoLevel;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">setInputCurves</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inputCategoryCount</span> <span class="operator">=</span> <span class="built_in">this</span>.inputCategorys.length;</span><br><span class="line">        <span class="built_in">this</span>.inputCurveItems = <span class="keyword">new</span> <span class="title class_">CurveItem</span>[inputCategoryCount][<span class="built_in">this</span>.inputCurveCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>; z &lt; inputCategoryCount; ++z) &#123;</span><br><span class="line">            <span class="type">LogCurve</span> <span class="variable">curve</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.inputCurveCount; ++i) &#123;</span><br><span class="line">                curve = <span class="built_in">this</span>.getSpecifiedCurve(<span class="built_in">this</span>.inputCategorys[z], <span class="built_in">this</span>.inpFileWrapper.getInputCurveRedirection(z, i));</span><br><span class="line">                <span class="type">ArrayCurveSetItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="built_in">this</span>.inputArrayCurveSets.size(); ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((ArrayCurveSetItem)<span class="built_in">this</span>.inputArrayCurveSets.get(j)).getCurveName().equalsIgnoreCase(<span class="built_in">this</span>.inpFileWrapper.getInputCurveOriginName(z, i))) &#123;</span><br><span class="line">                        item = (ArrayCurveSetItem)<span class="built_in">this</span>.inputArrayCurveSets.get(j);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (curve == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.inputCurveItems[z][i] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve, item.getArrayNum(), item.getArraySize());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.inputCurveItems[z][i] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.inputCurveItems[z][i] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((curve.getLoggingType() == <span class="number">2</span> || curve.getLoggingType() == <span class="number">1</span>) &amp;&amp; item.getArrayNum() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.errorMsg.append(curve.getName()).append(ResourceBundle.getBundle(<span class="string">&quot;cif/dataservice/io/Bundle&quot;</span>).getString(<span class="string">&quot;DataServiceIntegratedIO.setInputCurves.errorMsg&quot;</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.inputCurveItems[z][i] = <span class="keyword">new</span> <span class="title class_">CurveItem</span>(curve, item.getArrayNum(), item.getArraySize());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCategory <span class="title function_">getCategory</span><span class="params">(String categoryPath, <span class="type">boolean</span> isCreate)</span> &#123;</span><br><span class="line">        <span class="type">DataPath</span> <span class="variable">dataPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPath</span>();</span><br><span class="line">        dataPath.parse(categoryPath.trim());</span><br><span class="line">        <span class="keyword">return</span> dataPath.getPathLevel() &lt; <span class="number">4</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.getCategory(dataPath, isCreate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LogCategory <span class="title function_">getCategory</span><span class="params">(DataPath dataPath, <span class="type">boolean</span> isCreate)</span> &#123;</span><br><span class="line">        <span class="type">LogDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dataPath.getCurrentDataFormat().buildDataSource();</span><br><span class="line">        <span class="keyword">if</span> (!dataSource.connect(dataPath.getDataSourceName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LogWorkSpace</span> <span class="variable">ws</span> <span class="operator">=</span> dataSource.getLogWorkSpace(dataPath.getWorkSpaceName());</span><br><span class="line">            <span class="keyword">if</span> (ws == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">wellName</span> <span class="operator">=</span> dataPath.getWellName();</span><br><span class="line">                <span class="type">LogWell</span> <span class="variable">well</span> <span class="operator">=</span> ws.getLogWell(wellName);</span><br><span class="line">                <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isCreate) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    well = ws.createWell(wellName);</span><br><span class="line">                    <span class="keyword">if</span> (well == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> dataPath.getCategoryName();</span><br><span class="line">                <span class="type">LogCategory</span> <span class="variable">category</span> <span class="operator">=</span> well.getLogCategory(categoryName);</span><br><span class="line">                <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> category;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isCreate) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">CategoryProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryProperties</span>();</span><br><span class="line">                    properties.setCategoryName(categoryName);</span><br><span class="line">                    category = well.createCategory(properties);</span><br><span class="line">                    <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.addCategoryNotification(category, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">return</span> category;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCategoryNotification</span><span class="params">(LogCategory category, <span class="type">int</span> notifyType)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wellPath</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">DataPath</span>(category.getLogWell())).toString();</span><br><span class="line">        <span class="type">NotificationStruct</span> <span class="variable">infoStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getCategoryName();</span><br><span class="line">        <span class="type">CategoryNotifiedInfo</span> <span class="variable">categoryInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryNotifiedInfo</span>(categoryName, notifyType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.categoryNotificationList.size(); ++i) &#123;</span><br><span class="line">            infoStruct = (NotificationStruct)<span class="built_in">this</span>.categoryNotificationList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (infoStruct.getDataPath().equalsIgnoreCase(wellPath) &amp;&amp; !infoStruct.contains(categoryName)) &#123;</span><br><span class="line">                infoStruct.addNotifiedInfo(categoryInfo);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        infoStruct = <span class="keyword">new</span> <span class="title class_">NotificationStruct</span>(wellPath);</span><br><span class="line">        infoStruct.addNotifiedInfo(categoryInfo);</span><br><span class="line">        <span class="built_in">this</span>.categoryNotificationList.add(infoStruct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataSourceContainer-java"><a href="#DataSourceContainer-java" class="headerlink" title="DataSourceContainer.java"></a>DataSourceContainer.java</h2><h3 id="简略方法-3"><a href="#简略方法-3" class="headerlink" title="简略方法"></a>简略方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(DataSourceStruct dataSourceStruct)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeElement</span><span class="params">(DataSourceStruct dataSourceStruct)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DataSourceStruct <span class="title function_">elemenAt</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DataSourceStruct <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> dataSourceID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DataSourceStruct <span class="title function_">getElement</span><span class="params">(String dataSourcePath)</span></span><br></pre></td></tr></table></figure><h3 id="类源码-3"><a href="#类源码-3" class="headerlink" title="类源码"></a>类源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cif.dataservice.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataSourceContainer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSourceContainer</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;DataSourceStruct&gt; dataSourceContainer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    DataSourceContainer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSourceContainer <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">DataSourceContainer</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(DataSourceStruct dataSourceStruct)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourceStruct != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dataSourceContainer.add(dataSourceStruct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeElement</span><span class="params">(DataSourceStruct dataSourceStruct)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataSourceContainer.remove(dataSourceStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.dataSourceContainer.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataSourceStruct <span class="title function_">elemenAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">this</span>.dataSourceContainer.size() ? (DataSourceStruct)<span class="built_in">this</span>.dataSourceContainer.get(index) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataSourceStruct <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> dataSourceID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourceID &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.dataSourceContainer.size(); ++i) &#123;</span><br><span class="line">                dataSourceStruct = (DataSourceStruct)<span class="built_in">this</span>.dataSourceContainer.get(i);</span><br><span class="line">                <span class="keyword">if</span> (dataSourceStruct.id == dataSourceID) &#123;</span><br><span class="line">                    <span class="keyword">return</span> dataSourceStruct;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataSourceStruct <span class="title function_">getElement</span><span class="params">(String dataSourcePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourcePath != <span class="literal">null</span> &amp;&amp; !dataSourcePath.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> dataSourcePath.trim().replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="type">DataSourceStruct</span> <span class="variable">dataSourceStruct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.dataSourceContainer.size(); ++i) &#123;</span><br><span class="line">                dataSourceStruct = (DataSourceStruct)<span class="built_in">this</span>.dataSourceContainer.get(i);</span><br><span class="line">                <span class="keyword">if</span> (dataSourceStruct.dataSource.getConnectParam().replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).contains(path)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> dataSourceStruct;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何在IDEA中编写二次开发插件"><a href="#如何在IDEA中编写二次开发插件" class="headerlink" title="如何在IDEA中编写二次开发插件"></a>如何在IDEA中编写二次开发插件</h1><p>添加基础的cif类库到IDEA包中，即可实现IDEA开发，可以提示错误等</p>]]></content>
    
    
    <summary type="html">CIFLog3二次开发Java接口说明</summary>
    
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/categories/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="测井计算" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Pertrel2018-测井数据导入及基础绘图</title>
    <link href="http://hibiscidai.com/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/"/>
    <id>http://hibiscidai.com/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/</id>
    <published>2023-10-16T14:00:00.000Z</published>
    <updated>2023-10-28T15:00:44.633Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE.png" class="" title="Pertrel2018-测井数据导入及基础绘图"><p>Pertrel2018-测井数据导入及基础绘图</p><span id="more"></span><p>[TOC]</p><h1 id="Pertrel2018-测井数据导入及基础绘图"><a href="#Pertrel2018-测井数据导入及基础绘图" class="headerlink" title="Pertrel2018-测井数据导入及基础绘图"></a>Pertrel2018-测井数据导入及基础绘图</h1><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><h1 id="设置项目"><a href="#设置项目" class="headerlink" title="设置项目"></a>设置项目</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-1.png" class="" title="Pertrel2018-测井数据导入及基础绘图-1"><p>设置项目坐标系统</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-2.png" class="" title="Pertrel2018-测井数据导入及基础绘图-2"><h1 id="新建井文件夹"><a href="#新建井文件夹" class="headerlink" title="新建井文件夹"></a>新建井文件夹</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-3.png" class="" title="Pertrel2018-测井数据导入及基础绘图-3"><h1 id="导入井头信息"><a href="#导入井头信息" class="headerlink" title="导入井头信息"></a>导入井头信息</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-4.png" class="" title="Pertrel2018-测井数据导入及基础绘图-4"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-5.png" class="" title="Pertrel2018-测井数据导入及基础绘图-5"><p>Petrel给出的井头文件示例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Petrel well head</span><br><span class="line">VERSION 1</span><br><span class="line">BEGIN HEADER</span><br><span class="line">Name</span><br><span class="line">UWI</span><br><span class="line">Well symbol</span><br><span class="line">Surface X</span><br><span class="line">Surface Y</span><br><span class="line">Offset</span><br><span class="line">TD (MD)</span><br><span class="line">Cost</span><br><span class="line">Spud date</span><br><span class="line">Operator</span><br><span class="line">END HEADER</span><br><span class="line">&quot;A 1&quot; A1  3      452905.03 6781834.74 -0.00  2313.76 -999   &quot;11/01/1991&quot; &quot;&quot; </span><br><span class="line">&quot;B 1&quot; B1  4      456919.15 6787585.65 -0.00  1998.89 -999   &quot;01/11/1995&quot; &quot;&quot; </span><br></pre></td></tr></table></figure><p>本次加载示例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WELLNAMEUWIKBTMDY1X1</span><br><span class="line">3430100120708324W6006862307.00 622983700575118</span><br><span class="line">3449102121708325W600810.24466.00 623296000565650</span><br><span class="line">3466100022808325W602778.34176.00 623509900567926</span><br><span class="line">3481100161708325W600777.52605.00 623163300567843</span><br><span class="line">3509100040908422W600637.31995.00 623920500597766</span><br><span class="line">3510100062208422W60301939624271300599579</span><br></pre></td></tr></table></figure><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-6.png" class="" title="Pertrel2018-测井数据导入及基础绘图-6"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-7.png" class="" title="Pertrel2018-测井数据导入及基础绘图-7"><p>2维窗口显示井位</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-8.png" class="" title="Pertrel2018-测井数据导入及基础绘图-8"><h1 id="导入井斜数据"><a href="#导入井斜数据" class="headerlink" title="导入井斜数据"></a>导入井斜数据</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-9.png" class="" title="Pertrel2018-测井数据导入及基础绘图-9"><p>导入后会自动匹配井名</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-10.png" class="" title="Pertrel2018-测井数据导入及基础绘图-10"><p>本次导入的井斜数据都是直井。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WELLNAMEUWIKBTMDTVDY1X1Y2X2</span><br><span class="line">20100040605424W5041271.93956.03910.359583238612875958563861177</span><br></pre></td></tr></table></figure><p>如果是斜井、水平井、定向井，需要指定X、Y和TVD。</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-11.png" class="" title="Pertrel2018-测井数据导入及基础绘图-11"><h1 id="导入测井数据"><a href="#导入测井数据" class="headerlink" title="导入测井数据"></a>导入测井数据</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-12.png" class="" title="Pertrel2018-测井数据导入及基础绘图-12"><p>给出示例数据：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">This loader is completely general and can be used</span><br><span class="line">with different well log formats.</span><br><span class="line"> </span><br><span class="line">Important: When importing multiple data files, make sure all files have the same format.</span><br><span class="line"> </span><br><span class="line">~Version Information Block</span><br><span class="line">VERS .                 2.00:  CWLS LOG ASCII STANDARD - VERSION 2.00</span><br><span class="line">use_wrap .                   NO:  One line per depth step</span><br><span class="line">~Well information block</span><br><span class="line">#MNEM.UNIT        Data Type   Information</span><br><span class="line">#---------- ----------------  -----------</span><br><span class="line">STRT .M             45.8724:  START DEPTH</span><br><span class="line">STOP .M           3889.8576:  STOP DEPTH</span><br><span class="line">STEP .M              0.1524:  STEP</span><br><span class="line">NULL .          -999.250000:  NULL VALUE</span><br><span class="line">COMP .                     :  COMPANY</span><br><span class="line">WELL .                2_1-1:  WELL</span><br><span class="line">FLD  .                     :  FIELD</span><br><span class="line">LOC  .                     :  LOCATION</span><br><span class="line">PROV .                     :  PROVINCE</span><br><span class="line">SRVC .                     :  SERVICE COMPANY</span><br><span class="line">DATE .                     :  LOG DATE</span><br><span class="line">UWI  .                     :  UNIQUE WELL ID</span><br><span class="line">~Curve Information Block</span><br><span class="line">#MNEM.UNIT         API CODE   Curve Description</span><br><span class="line">#---------- ----------------  -----------------</span><br><span class="line">DEPTH.M                    :  </span><br><span class="line">DT   .US/F                 :  DELTA-T</span><br><span class="line">GR   .GAPI                 :  Gamma ray RAY</span><br><span class="line">HPHI .LPU                  :  </span><br><span class="line">ILD  .OHMM                 :  INDUCTION LOG DEEP</span><br><span class="line">RHOB .G/C3                 :  BULK DENSITY</span><br><span class="line">~Parameter Information Block</span><br><span class="line">#MNEM.UNIT            Value   Description</span><br><span class="line">#---------- ----------------  -----------</span><br><span class="line">PROJECT.             ULA_GYDA:  </span><br><span class="line">SET  .                 BEST:  </span><br><span class="line">~A        DEPTH             DT             GR           HPHI            ILD           RHOB </span><br><span class="line">45.8724      -999.250000         0.2373      -999.250000      -999.250000      -999.250000 </span><br><span class="line">46.0248      -999.250000         0.2083      -999.250000      -999.250000      -999.250000 </span><br><span class="line">46.1772      -999.250000         0.1792      -999.250000      -999.250000      -999.250000 </span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>只导入目标层目标曲线：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEPTH       PERM         POR          SW           </span><br><span class="line">954.0000     0.3740       9.7433       32.2979      </span><br><span class="line">954.0508     0.2293       8.5035       38.6421      </span><br><span class="line">954.1016     0.0976       6.3390       53.3102         </span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>会提示对照井位，注意检查没有出现的井：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-13.png" class="" title="Pertrel2018-测井数据导入及基础绘图-13"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-14.png" class="" title="Pertrel2018-测井数据导入及基础绘图-14"><p>数据导入过程会提示有问题的井数据：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-15.png" class="" title="Pertrel2018-测井数据导入及基础绘图-15"><blockquote><p>数据出错才会报错，需要检查输入数据。</p></blockquote><h1 id="导入层位数据"><a href="#导入层位数据" class="headerlink" title="导入层位数据"></a>导入层位数据</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-16.png" class="" title="Pertrel2018-测井数据导入及基础绘图-16"><p>点选左边Well tops，右键导入数据</p><p>层位数据示例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Petrel well tops</span><br><span class="line"># Lines starting with # are comments</span><br><span class="line">VERSION 2</span><br><span class="line">BEGIN HEADER</span><br><span class="line">X</span><br><span class="line">Y</span><br><span class="line">Z</span><br><span class="line">MD</span><br><span class="line">TWT</span><br><span class="line"># Valid types: HORIZON, FAULT, OTHER</span><br><span class="line">Type</span><br><span class="line">Surface name</span><br><span class="line">Well name</span><br><span class="line">Symbol</span><br><span class="line">Interpreter</span><br><span class="line">Dip angle</span><br><span class="line">Dip azimuth</span><br><span class="line">END HEADER</span><br><span class="line">457920.31 6784738.68 -1783.84 -1701.53 HORIZON &quot;Base Cretaceous&quot; &quot;B4&quot; Unknown 2068.47 &quot;&quot;   &quot;&quot;   -999   -999   </span><br><span class="line">457746.94 6787092.61 -1886.76 -999     HORIZON &quot;Base Cretaceous&quot; &quot;B8&quot; Unknown 1886.76 &quot;&quot;   &quot;&quot;   -999   -999   </span><br><span class="line">456719.08 6785550.13 -1836.19 -1740.00 HORIZON &quot;Base Cretaceous&quot; &quot;B9&quot; Unknown 1836.97 &quot;&quot;   &quot;&quot;   -999   -999   </span><br><span class="line">453078.12 6786788.35 -1996.92 -1894.14 HORIZON &quot;Base Cretaceous&quot; &quot;C1&quot; Unknown 2003.34 &quot;&quot;   &quot;&quot;   -999   -999   </span><br><span class="line">454686.86 6787607.12 -1977.81 -1878.58 HORIZON &quot;Base Cretaceous&quot; &quot;C2&quot; Unknown 1998.97 &quot;&quot;   &quot;&quot;   -999   -999   </span><br><span class="line">456306.69 6788724.75 -1989.68 -1883.87 HORIZON &quot;Base Cretaceous&quot; &quot;C3&quot; Unknown 2004.29 &quot;&quot;   &quot;&quot;   88.86  -54.66 </span><br><span class="line">454693.38 6786210.63 -1965.23 -1859.14 HORIZON &quot;Base Cretaceous&quot; &quot;C4&quot; Unknown 1980.43 &quot;&quot;   &quot;&quot;   88.23  -70.43 </span><br></pre></td></tr></table></figure><p>导入层位格式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Montney34301995.25</span><br><span class="line">Belloy34302262</span><br><span class="line">Montney34492346.4</span><br><span class="line">Belloy34492484.7</span><br><span class="line">Montney34662272</span><br><span class="line">Belloy34662449.5</span><br><span class="line">Montney34812257</span><br><span class="line">Belloy34812536</span><br><span class="line">Montney35091654</span><br><span class="line">Belloy35091961.25</span><br><span class="line">Montney35101636.625</span><br><span class="line">Belloy35101939</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-17.png" class="" title="Pertrel2018-测井数据导入及基础绘图-17"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-18.png" class="" title="Pertrel2018-测井数据导入及基础绘图-18"><p>移动层标识，将层顶底挪入stratigraphy中，自动切分地层。</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-21.png" class="" title="Pertrel2018-测井数据导入及基础绘图-21"><p>同理，导入大层和小层，分两个层位文件夹：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-21-1.png" class="" title="Pertrel2018-测井数据导入及基础绘图-21-1"><h1 id="工区边界导入"><a href="#工区边界导入" class="headerlink" title="工区边界导入"></a>工区边界导入</h1><p>在左侧空白地方右键点击import file</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-19.png" class="" title="Pertrel2018-测井数据导入及基础绘图-19"><p>示例工区边界：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FDASCI 0 2 &quot;Computed&quot; 0 99999 0</span><br><span class="line">FDATTR 4 2 1 0</span><br><span class="line">FDATNM 1 &quot;Depth&quot; &quot;real&quot;</span><br><span class="line">!Coordinate System:</span><br><span class="line">!  Projection System ID: 7740565      Initialized  Quick: 0</span><br><span class="line">!  Secondary Horizontal: Units: m  Per/Meter: 1.000000000000</span><br><span class="line">!        Geodetic Datum: ERP50-GB  Ellipsoid: INTNL</span><br><span class="line">!     Projection Method: Transverse Mercator</span><br><span class="line">!      Central Meridian: 3.00000000000</span><br><span class="line">!       User Horizontal: Units: m  Per/Secondary: 1.000000000000</span><br><span class="line">(3D25.16)</span><br><span class="line">-&gt; Cut_0</span><br><span class="line">   0.3354165721485568D+06   0.6459140906319961D+07   0.1086545605468750D+05</span><br><span class="line">   0.3355314799575806D+06   0.6459136397933483D+07   0.1059374804687500D+05</span><br><span class="line">   0.3356463885192871D+06   0.6459131889515877D+07   0.1042337988281250D+05</span><br><span class="line">   0.3357563007507324D+06   0.6459127577129364D+07   0.1012011328125000D+05</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>导入的工区边界：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FFASCI 0 1 &quot;LINES&quot; 0 1e+10</span><br><span class="line">FFATTR 0 1</span><br><span class="line">-&gt;1</span><br><span class="line">55632762128280</span><br><span class="line">52231662852980</span><br><span class="line">47212364888370</span><br><span class="line">48272564884350</span><br><span class="line">49991964871280</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-20.png" class="" title="Pertrel2018-测井数据导入及基础绘图-20"><p>也可以选line-type为：generic boundary</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-29.png" class="" title="Pertrel2018-测井数据导入及基础绘图-29"><p>导入后左侧可以看到工区边界</p><p>闭合工区边界：不闭合的话不可以进行平面图展布计算</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-28.png" class="" title="Pertrel2018-测井数据导入及基础绘图-28"><h1 id="顶部构造图-Z"><a href="#顶部构造图-Z" class="headerlink" title="顶部构造图-Z"></a>顶部构造图-Z</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E9%A1%B6%E9%83%A8%E6%9E%84%E9%80%A0%E5%9B%BE-1.png" class="" title="顶部构造图-1"><p>Z值就是海拔</p><p>调整网格大小</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E9%A1%B6%E9%83%A8%E6%9E%84%E9%80%A0%E5%9B%BE-2.png" class="" title="顶部构造图-2"><p>选择算法</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E9%A1%B6%E9%83%A8%E6%9E%84%E9%80%A0%E5%9B%BE-3.png" class="" title="顶部构造图-3"><p>调整色标</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E9%A1%B6%E9%83%A8%E6%9E%84%E9%80%A0%E5%9B%BE-4.png" class="" title="顶部构造图-4"><p>先点击最大最小，然后适当调整色标</p><h1 id="地层埋深图-MD"><a href="#地层埋深图-MD" class="headerlink" title="地层埋深图-MD"></a>地层埋深图-MD</h1><p>同顶部构造图类似，选择MD属性就可以</p><h1 id="等厚图绘制-Thickness"><a href="#等厚图绘制-Thickness" class="headerlink" title="等厚图绘制-Thickness"></a>等厚图绘制-Thickness</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-32.png" class="" title="Pertrel2018-测井数据导入及基础绘图-32"><p>是否使用过滤器，选择no</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-33.png" class="" title="Pertrel2018-测井数据导入及基础绘图-33"><p>得到以下点集：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-34.png" class="" title="Pertrel2018-测井数据导入及基础绘图-34"><p>层位名称及点集规范：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-34-1.png" class="" title="Pertrel2018-测井数据导入及基础绘图-34-1"><p>创建surface：</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-35.png" class="" title="Pertrel2018-测井数据导入及基础绘图-35"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-36.png" class="" title="Pertrel2018-测井数据导入及基础绘图-36"><h1 id="孔隙度-渗透率平面图"><a href="#孔隙度-渗透率平面图" class="headerlink" title="孔隙度-渗透率平面图"></a>孔隙度-渗透率平面图</h1><p>1、创建孔隙度属性</p><p>Well tops → Attributes → 新建属性</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-22.png" class="" title="Pertrel2018-测井数据导入及基础绘图-22"><p>选择连续参数</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-23.png" class="" title="Pertrel2018-测井数据导入及基础绘图-23"><p>制作POR/SW连续参数</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-24.png" class="" title="Pertrel2018-测井数据导入及基础绘图-24"><p>2、相同步骤，制作PERM的连续参数</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-25.png" class="" title="Pertrel2018-测井数据导入及基础绘图-25"><p>3、制作层段孔渗SW数值</p><p>按enter，变粗后为当前所选</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-26.png" class="" title="Pertrel2018-测井数据导入及基础绘图-26"><p>制作POR和PERM的层段数值，注意选择算法为Convergent interpolation</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-27.png" class="" title="Pertrel2018-测井数据导入及基础绘图-27"><p>boundary必须闭合才可以进行计算，需要检查边界是否闭合。</p><p>提示数据，点击ok。</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-30.png" class="" title="Pertrel2018-测井数据导入及基础绘图-30"><p>根据电脑速度运行</p><p>运行结束后左侧显示命名的surfacePOR，后自动成图。</p><p>4、调整参数-色标</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE-31.png" class="" title="Pertrel2018-测井数据导入及基础绘图-31"><p>显示刻度尺：<br>右键 Color Legend → Color Legend</p><p>5、出图</p><p>点击菜单栏 HOME window 创建 map window</p><p>在map菜单栏中可以设置指南针 尺度等 调整视域大小</p><p>中间工具条可以快速调整视域缩放</p><p>出图 菜单栏map capture</p><h1 id="图件导出"><a href="#图件导出" class="headerlink" title="图件导出"></a>图件导出</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E5%9B%BE%E4%BB%B6%E5%AF%BC%E5%87%BA-1.png" class="" title="图件导出-1"><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E5%9B%BE%E4%BB%B6%E5%AF%BC%E5%87%BA-2.png" class="" title="图件导出-2"><blockquote><p>右上角capture→export graphic可以导出<br>选择emf格式最清楚(数据较大)<br>导出emf后在本地进行裁剪，删去右下角图标<br>再导出一个png格式，方便数据传输</p></blockquote><h1 id="插值方法说明"><a href="#插值方法说明" class="headerlink" title="插值方法说明"></a>插值方法说明</h1><p>地层等厚度用Isochore interpolation，不会有负数<br>构造、埋深、孔隙度、渗透率、饱和度等用Convergent interpolation，反距离加权平均。</p><h1 id="牛眼修改方法"><a href="#牛眼修改方法" class="headerlink" title="牛眼修改方法"></a>牛眼修改方法</h1><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/%E7%89%9B%E7%9C%BC%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95-1.png" class="" title="牛眼修改方法-1"><h1 id="wellpath用-Excel把每一行各导出为一个txt文本"><a href="#wellpath用-Excel把每一行各导出为一个txt文本" class="headerlink" title="wellpath用-Excel把每一行各导出为一个txt文本"></a>wellpath用-Excel把每一行各导出为一个txt文本</h1><p>excel→文件→选项→信任中心→信任中心设置→宏设置→启用所有宏</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Excel%E6%8A%8A%E6%AF%8F%E4%B8%80%E8%A1%8C%E5%90%84%E5%AF%BC%E5%87%BA%E4%B8%BA%E4%B8%80%E4%B8%AAtxt%E6%96%87%E6%9C%AC-1.png" class="" title="Excel把每一行各导出为一个txt文本-1"><p><code>alt+f11</code>调出vb编辑界面</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Excel%E6%8A%8A%E6%AF%8F%E4%B8%80%E8%A1%8C%E5%90%84%E5%AF%BC%E5%87%BA%E4%B8%BA%E4%B8%80%E4%B8%AAtxt%E6%96%87%E6%9C%AC-2.png" class="" title="Excel把每一行各导出为一个txt文本-2"><p>VB代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> txt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> i, j, arr(), brr(), myRow, myCol</span><br><span class="line"></span><br><span class="line">arr = Sheet1.UsedRange</span><br><span class="line"></span><br><span class="line">myRow = UBound(arr, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">myCol = UBound(arr, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> myRow</span><br><span class="line"></span><br><span class="line">Open ThisWorkbook.Path &amp; <span class="string">&quot;\&quot;</span> &amp; arr(i, <span class="number">1</span>) &amp; <span class="string">&quot;.txt&quot;</span> <span class="keyword">For</span> Output <span class="keyword">As</span> #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Print #<span class="number">1</span>, <span class="keyword">Join</span>(Application.Index(arr, <span class="number">1</span>), <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">Print #<span class="number">1</span>, <span class="keyword">Join</span>(Application.Index(arr, i), <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">Close #<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>运行结果3</p><img src="/2023/10/16/Pertrel2018-%E6%B5%8B%E4%BA%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE/Excel%E6%8A%8A%E6%AF%8F%E4%B8%80%E8%A1%8C%E5%90%84%E5%AF%BC%E5%87%BA%E4%B8%BA%E4%B8%80%E4%B8%AAtxt%E6%96%87%E6%9C%AC-3.png" class="" title="Excel把每一行各导出为一个txt文本-3">]]></content>
    
    
    <summary type="html">pertrel2018-测井数据导入及基础绘图</summary>
    
    
    
    <category term="石油地质" scheme="http://hibiscidai.com/categories/%E7%9F%B3%E6%B2%B9%E5%9C%B0%E8%B4%A8/"/>
    
    
    <category term="石油地质" scheme="http://hibiscidai.com/tags/%E7%9F%B3%E6%B2%B9%E5%9C%B0%E8%B4%A8/"/>
    
    <category term="Petrel" scheme="http://hibiscidai.com/tags/Petrel/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降-最速下降-共轭梯度</title>
    <link href="http://hibiscidai.com/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/"/>
    <id>http://hibiscidai.com/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/</id>
    <published>2023-10-08T11:29:07.000Z</published>
    <updated>2023-10-09T13:00:41.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6.png" class="" title="梯度下降-最速下降-共轭梯度"><p>梯度下降-最速下降-共轭梯度</p><span id="more"></span><p>[TOC]</p><h1 id="梯度下降-最速下降-共轭梯度"><a href="#梯度下降-最速下降-共轭梯度" class="headerlink" title="梯度下降-最速下降-共轭梯度"></a>梯度下降-最速下降-共轭梯度</h1><h1 id="hessian矩阵"><a href="#hessian矩阵" class="headerlink" title="hessian矩阵"></a>hessian矩阵</h1><p>黑塞矩阵（Hessian Matrix），是一个多元函数的二阶偏导数构成的方阵，描述了函数的局部曲率。黑塞矩阵常用于牛顿法解决优化问题，利用黑塞矩阵可判定多元函数的极值问题。在工程实际问题的优化设计中，所列的目标函数往往很复杂，为了使问题简化，常常将目标函数在某点邻域展开成泰勒多项式来逼近原函数，此时函数在某点泰勒展开式的矩阵形式中会涉及到黑塞矩阵。</p><p>基于Hessian矩阵，可以判断多元函数的极值情况，结论如下：<br>（1）如果是正定矩阵，则临界点处是一个局部极小值<br>（2）如果是负定矩阵，则临界点处是一个局部极大值<br>（3）如果是不定矩阵，则临界点处不是极值</p><p>如何判断一个矩阵是否是正定的，负定的，还是不定的。一个最常用的方法就是借助其顺序主子式。实对称矩阵为正定矩阵的充要条件是各顺序主子式都大于0。当然这个判定方法的计算量比较大。对于实二次型矩阵还有一个判定方法：实二次型矩阵为正定二次型的充要条件是矩阵的特征值全大于0。为负定二次型的充要条件是矩阵的特征值全小于0，否则是不定的。</p><p>牛顿法是收敛速度最快的方法，其缺点在于要求Hessian矩阵（二阶导数矩阵）。牛顿法大致的思路是采用泰勒展开的二阶近似。若Hessian矩阵是正定的，函数的局部最小值可以通过使上面的二次型的一阶导数等于0来获取</p><h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><h2 id="一文看懂常用的梯度下降算法-转载自知乎"><a href="#一文看懂常用的梯度下降算法-转载自知乎" class="headerlink" title="一文看懂常用的梯度下降算法-转载自知乎"></a>一文看懂常用的梯度下降算法-转载自知乎</h2><p><a href="https://zhuanlan.zhihu.com/p/31630368">一文看懂常用的梯度下降算法</a></p><p>梯度下降算法（Gradient Descent Optimization）是神经网络模型训练最常用的优化算法。对于深度学习模型，基本都是采用梯度下降算法来进行优化训练的。梯度下降算法背后的原理：目标函数 <script type="math/tex">J(\theta)</script> 关于参数 <script type="math/tex">\theta</script> 的梯度将是损失函数（loss function）上升最快的方向。而我们要最小化loss，只需要将参数沿着梯度相反的方向前进一个步长，就可以实现目标函数（loss function）的下降。这个步长 <script type="math/tex">\eta</script> 又称为学习速率。参数更新公式如下：</p><script type="math/tex; mode=display">\theta \leftarrow \theta - \eta · \nabla J(\theta)</script><p>其中 <script type="math/tex">\nabla J(\theta)</script> 是参数的梯度，根据计算目标函数采用数据量的不同，梯度下降算法又可以分为<strong>批量梯度下降算法（Batch Gradient Descent）</strong>，<strong>随机梯度下降算法（Stochastic Gradient Descent）</strong>和<strong>小批量梯度下降算法（Mini-batch Gradient Descent）</strong>。<br>对于批量梯度下降算法，其 <script type="math/tex">J(\theta)</script> 是在整个训练集上计算的，如果数据集比较大，可能会面临内存不足问题，而且其收敛速度一般比较慢。<br>随机梯度下降算法是另外一个极端， <script type="math/tex">J(\theta)</script> 是针对训练集中的一个训练样本计算的，又称为在线学习，即得到了一个样本，就可以执行一次参数更新。所以其收敛速度会快一些，但是有可能出现目标函数值震荡现象，因为高频率的参数更新导致了高方差。<br>小批量梯度下降算法是折中方案，选取训练集中一个小批量样本（一般是2的倍数，如32，64,128等）计算，这样可以保证训练过程更稳定，而且采用批量训练方法也可以利用矩阵计算的优势。这是目前最常用的梯度下降算法。</p><p>对于神经网络模型，借助于BP算法可以高效地计算梯度，这非常利于采用梯度下降算法对神经网络进行训练。</p><p>梯度下降算法中一个重要的参数是学习速率，适当的学习速率很重要：学习速率过小时收敛速度慢，而过大时导致训练震荡，而且可能会发散。</p><p>理想的梯度下降算法要满足两点：收敛速度要快；而且能全局收敛。为了这个理想，出现了很多经典梯度下降算法的变种，下面将分别介绍它们。</p><h3 id="Exponentially-weighted-moving-averages-指数加权移动平均"><a href="#Exponentially-weighted-moving-averages-指数加权移动平均" class="headerlink" title="Exponentially weighted moving averages-指数加权移动平均"></a>Exponentially weighted moving averages-指数加权移动平均</h3><script type="math/tex; mode=display">t $$ 时刻的观测数值为 $$ x(t) $$ ，那么评估t时刻的移动平均值为：$$ v(t) \leftarrow \beta · v(t-1) + (1 - \beta) · x(t)</script><p>其中 <script type="math/tex">v(t-1)</script> 是上一时刻的移动平均值，其实也可以看成历史积累量，一般 <script type="math/tex">v(0) = 0</script> ，而 <script type="math/tex">\beta</script> 是一个系数，其在 0 ~ 1 之间，可以看到移动平均值是按比例合并历史量与当前观测量。</p><p>展开上式：</p><script type="math/tex; mode=display">v(0) = 0</script><script type="math/tex; mode=display">v(1) = \beta · v(0) + (1 - \beta) · x(1)</script><script type="math/tex; mode=display">v(2) = \beta · v(1) + (1 - \beta) · x(2) = \beta(1 - \beta) · x(1) + (1 - \beta) · x(2)</script><script type="math/tex; mode=display">v(t) = \beta · v(t - 1) + (1 - \beta) · x(t) = \sum_{i=1}^{t} \beta^{t-i} (1 - \beta) · x(i)</script><p>展开之后，每个 <script type="math/tex">x</script> 值，其权重是不一样的，实际上是指数递减的，从当前往后指数递减，所以距离时刻较近的数据会对当前值影响较大，这样计算的好处是平均数会比较平稳。</p><p>由于权重指数衰减，所以移动平均数只是计算比较相近时刻数据的加权平均数，一般可认为这个时间范围为 <script type="math/tex">\frac{1}{1-\beta}</script> ，比如 <script type="math/tex">\beta = 0.9</script>，近似认为只是平均了10时刻之内的数据，因为再往前权重太小了，基本没影响了。<br>如果你熟悉级数的话，也可以计算出权重和是近似为1的，这是在无穷的情况下，但是在前期计算时，权重之和是会小于1的，为了解决这个问题，指数加权移动平均数会引入偏差修正：</p><script type="math/tex; mode=display">v(t) \leftarrow \frac{v(t)}{ 1 - \beta^{t}}</script><p>就是前期计算时要放大一下计算结果，而后期不需要，此时 <script type="math/tex">1- \beta^{t}</script> 的值也接近1了。</p><h3 id="Momentum-optimization-动量优化"><a href="#Momentum-optimization-动量优化" class="headerlink" title="Momentum optimization-动量优化"></a>Momentum optimization-动量优化</h3><p>冲量梯度下降算法是Boris Polyak在1964年提出的，其基于这样一个物理事实：将一个小球从山顶滚下，其初始速率很慢，但在加速度作用下速率很快增加，并最终由于阻力的存在达到一个稳定速。</p><p>对于冲量梯度下降算法，其更新方程如下：</p><script type="math/tex; mode=display">m \leftarrow \gamma · m + \eta · \nabla J(\theta)</script><script type="math/tex; mode=display">\theta \leftarrow \theta - m</script><p>参数更新时不仅考虑当前梯度值，而且加上了一个积累项（冲量），但多了一个超参 <script type="math/tex">\gamma</script>  ，一般取接近1的值如0.9。相比原始梯度下降算法，冲量梯度下降算法有助于加速收敛。当梯度与冲量方向一致时，冲量项会增加，而相反时，冲量项减少，因此冲量梯度下降算法可以减少训练的震荡过程。</p><p>有时候，冲量梯度下降算法也可以按下面方式实现：</p><script type="math/tex; mode=display">m \leftarrow \beta · m + (1- \beta) · \nabla J(\theta)</script><script type="math/tex; mode=display">\theta \leftarrow \theta - \eta · m</script><p>冲量项其实只是梯度的指数加权移动平均值。这个实现和之前的实现没有本质区别，只是学习速率进行了放缩一下而已。</p><p>TensorFlow中提供了冲量梯度下降算法的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.MomentumOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><h3 id="Nesterov-Accelerated-Gradient-NAG-加速梯度"><a href="#Nesterov-Accelerated-Gradient-NAG-加速梯度" class="headerlink" title="Nesterov Accelerated Gradient(NAG)-加速梯度"></a>Nesterov Accelerated Gradient(NAG)-加速梯度</h3><p>NAG算法是<code>Yurii Nesterov</code>在1983年提出的对冲量梯度下降算法的改进版本，其速度更快。其变化之处在于计算“超前梯度”更新冲量项，具体公式如下：</p><script type="math/tex; mode=display">m \leftarrow \gamma · m + \eta · \nabla J( \theta - \gamma · m )</script><script type="math/tex; mode=display">\theta \leftarrow \theta - m</script><p>既然参数要沿着 <script type="math/tex">\gamma · m</script> 更新，不妨计算未来位置 <script type="math/tex">\theta - \gamma · m</script> 的梯度，然后合并两项作为最终的更新项，其具体效果如下所示，可以看到一定的加速效果。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/NAG%E6%95%88%E6%9E%9C%E5%9B%BE.png" class="" title="NAG效果图"><p>在TensorFlow中，NAG优化器为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.MomentumOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>, use_nesterov=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h3><p>AdaGrad是Duchi在2011年提出的一种学习速率自适应的梯度下降算法。<br>在训练迭代过程，其学习速率是逐渐衰减的，经常更新的参数其学习速率衰减更快，这是一种自适应算法。</p><p>其更新过程如下：</p><script type="math/tex; mode=display">s \leftarrow s + \nabla J(\theta) \odot \nabla J(\theta)</script><script type="math/tex; mode=display">\theta \leftarrow \theta - \frac{\eta}{ \sqrt{s + \varepsilon} } \odot \nabla J(\theta)</script><p>梯度平方的积累量 <script type="math/tex">s</script> ，在进行参数更新时，学习速率要除以这个积累量的平方根，其中加上一个很小值 <script type="math/tex">\varepsilon</script> 是为了防止除0的出现。由于 <script type="math/tex">s</script>  是逐渐增加的，那么学习速率是衰减的。考虑如下图所示的情况，目标函数在两个方向的坡度不一样，如果是原始的梯度下降算法，在接近坡底时收敛速度比较慢。而当采用AdaGrad，这种情况可以被改观。由于比较陡的方向 <script type="math/tex">s</script> 比较大，其学习速率将衰减得更快，这有利于参数沿着更接近坡底的方向移动，从而加速收敛。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/AdaGrad%E6%95%88%E6%9E%9C%E5%9B%BE.png" class="" title="AdaGrad效果图"><p>前面说到AdaGrad其学习速率实际上是不断衰减的，这会导致一个很大的问题，就是训练后期学习速率很小，<strong>导致训练过早停止</strong>，因此在实际中AdaGrad一般不会被采用，下面的算法将改进这一致命缺陷。不过TensorFlow也提供了这一优化器：<code>tf.train.AdagradOptimizer</code>。</p><h3 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h3><p>RMSprop是Hinton在他的课程上讲到的，其算是对Adagrad算法的改进，主要是解决学习速率过快衰减的问题。其实思路很简单，类似Momentum思想，引入一个超参数，在积累梯度平方项进行衰减：</p><script type="math/tex; mode=display">s \leftarrow \gamma · s + (1 - \gamma) · \nabla J(\theta) \odot \nabla J(\theta)</script><script type="math/tex; mode=display">\theta \leftarrow \theta - \frac{\eta}{ \sqrt{s + \varepsilon} } \odot \nabla J(\theta)</script><p>此时可以看到 <script type="math/tex">s</script> 是梯度平方的指数加权移动平均值，其中 <script type="math/tex">\gamma</script> 一般取值0.9，此时 <script type="math/tex">s</script> 更平稳，减少了出现的爆炸情况，因此有助于避免学习速率很快下降的问题。</p><p>同时Hinton也建议学习速率设置为0.001。RMSprop是属于一种比较好的优化算法了，在TensorFlow中当然有其身影：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>, decay=<span class="number">0.9</span>, epsilon=<span class="number">1e-10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>同时期还有一个Adadelta算法，其也是Adagrad算法的改进，而且改进思路和RMSprop很像，但是其背后是基于一次梯度近似代替二次梯度的思想。</p></blockquote><h3 id="Adaptive-moment-estimation-Adam-自适应矩估计"><a href="#Adaptive-moment-estimation-Adam-自适应矩估计" class="headerlink" title="Adaptive moment estimation(Adam)-自适应矩估计"></a>Adaptive moment estimation(Adam)-自适应矩估计</h3><p>Adam是Kingma等在2015年提出的一种新的优化算法，其结合了Momentum和RMSprop算法的思想。相比Momentum算法，其学习速率是自适应的，而相比RMSprop，其增加了冲量项。</p><p>所以，Adam是两者的结合体：</p><script type="math/tex; mode=display">m \leftarrow \beta_{1} · m + (1 - \beta_{1}) · \nabla J(\theta)</script><script type="math/tex; mode=display">s \leftarrow \beta_{2} · s + (1 - \beta_{2}) · \nabla J(\theta) \odot \nabla J(\theta)</script><script type="math/tex; mode=display">m \leftarrow \frac{m}{1 - \beta_{2}^{t} }</script><script type="math/tex; mode=display">s \leftarrow \frac{s}{1 - \beta_{2}^{t} }</script><script type="math/tex; mode=display">\theta \leftarrow \theta - \frac{\eta}{ \sqrt{s + \varepsilon} } \odot m</script><p>可以看到前两项和Momentum和RMSprop是非常一致的， 由于和的初始值一般设置为0，在训练初期其可能较小，第三和第四项主要是为了放大它们。最后一项是参数更新。其中超参数的建议值是: <script type="math/tex">\beta_{1} = 0.9, \beta_{2} = 0.999, \varepsilon = 1e - 8</script> 。Adm是性能非常好的算法，在TensorFlow其实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>, beta1=<span class="number">0.9</span>, beta2=<span class="number">0.999</span>, epsilon=<span class="number">1e-08</span>)</span><br></pre></td></tr></table></figure><h3 id="学习速率"><a href="#学习速率" class="headerlink" title="学习速率"></a>学习速率</h3><p>对于梯度下降算法，这应该是一个最重要的超参数。<br>如果学习速率设置得非常大，那么训练可能不会收敛，就直接发散了；如果设置的比较小，虽然可以收敛，但是训练时间可能无法接受；如果设置的稍微高一些，训练速度会很快，但是当接近最优点会发生震荡，甚至无法稳定。不同学习速率的选择影响可能非常大，如下图所示。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E4%B8%8D%E5%90%8C%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%87%E7%9A%84%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C.png" class="" title="不同学习速率的训练效果"><p>理想的学习速率是：刚开始设置较大，有很快的收敛速度，然后慢慢衰减，保证稳定到达最优点。所以，前面的很多算法都是学习速率自适应的。除此之外，还可以手动实现这样一个自适应过程，如实现学习速率指数式衰减：</p><script type="math/tex; mode=display">\eta(t) = \eta_{0} · 10^{- \frac{t}{r}}</script><p>在TensorFlow中，你可以这样实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">initial_learning_rate = <span class="number">0.1</span></span><br><span class="line">decay_steps = <span class="number">10000</span></span><br><span class="line">decay_rate = <span class="number">1</span>/<span class="number">10</span></span><br><span class="line">global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">learning_rate = tf.train.exponential_decay(initial_learning_rate, </span><br><span class="line">global_step, decay_steps,</span><br><span class="line">decay_rate)</span><br><span class="line"><span class="comment"># decayed_learning_rate = learning_rate *decay_rate ^ (global_step / decay_steps)</span></span><br><span class="line">optimizer = tf.train.MomentumOptimizer(learning_rate, momentum=<span class="number">0.9</span>)</span><br><span class="line">training_op = optimizer.minimize(loss, global_step=global_step)</span><br></pre></td></tr></table></figure><h3 id="局部最优和鞍点"><a href="#局部最优和鞍点" class="headerlink" title="局部最优和鞍点"></a>局部最优和鞍点</h3><p>前面说到，我们希望优化算法能够收敛速度快，并且想找到全局最优。对于凸函数来说，其仅有一个极值点，就是全局最优点，如下图所示，此时采用梯度下降算法是可以收敛到最优点的，因为沿着下坡的道路走就可以了。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E5%87%B8%E5%87%BD%E6%95%B0%EF%BC%8C%E6%97%A0%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98.png" class="" title="凸函数，无局部最优"><p>但是其实现在的深度学习模型是一个庞大的非线性结构，这样其一般是非凸函数，就如下图所示那样，存在很多局部最优点（local optimum），一旦梯度下降算法跳进局部陷阱，可以想象其很难走出来，这就很尴尬了，此时梯度下降算法变得不再那么可靠，因为我们想要的是全局最优。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E5%AD%98%E5%9C%A8%E5%BE%88%E5%A4%9A%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98%E7%82%B9%E7%9A%84%E9%9D%9E%E5%87%B8%E5%87%BD%E6%95%B0.png" class="" title="存在很多局部最优点的非凸函数"><p>很难找到全局最优，这可能是目前优化算法共同面对的问题，如进化算法。不过到底深度学习的损失函数是不是存在很多局部最优点呢？前面所有的分析都是基于低维空间，我们很容易观察到局部最优点。但是深度学习的参数一般庞大，其损失函数已经成为了超高维空间。但是Bengio等最新的研究表明，对于高维空间，非凸函数最大的存在不是局部最优点，而是鞍点（saddle point），鞍点也是梯度为0的点，但是它不像局部最优点或者全局最优点。对于局部最优或者全局最优点，其周围的所有方向要朝向上（最小）或者朝向上（最大），但是考虑到参数庞大，很有可能是一部分方向朝下，一部分方向朝上，这就成为了鞍点。意思就是说在高维度空间，不大可能像低维度空间那样出现很多局部最优。而且鞍点也不大可能会成为梯度下降算法的葬身之地。那么真正影响梯度下降算法会是什么呢？可能是平稳区（plateaus），如果出现大面积梯度很小或者近似为0的区域，那么梯度下降算法就找不到方向，想象你自己站在一望无际的平原，估计你也方向感全无了。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E5%AD%98%E5%9C%A8%E9%9E%8D%E7%82%B9%E7%9A%84%E5%87%BD%E6%95%B0.png" class="" title="存在鞍点的函数"><h2 id="维基百科-梯度下降"><a href="#维基百科-梯度下降" class="headerlink" title="维基百科-梯度下降"></a>维基百科-梯度下降</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95">维基百科-梯度下降</a></p><p>梯度下降法（英语：Gradient descent）是一个一阶最优化算法，通常也称为最陡下降法，但是不该与近似积分的最陡下降法（英语：Method of steepest descent）混淆。 要使用梯度下降法找到一个函数的局部极小值，必须向函数上当前点对应梯度（或者是近似梯度）的反方向的规定步长距离点进行迭代搜索。如果相反地向梯度正方向迭代进行搜索，则会接近函数的局部极大值点；这个过程则被称为梯度上升法。</p><p>梯度下降方法基于以下的观察：如果实值函数 <script type="math/tex">F(x)</script> 在点 <script type="math/tex">a</script> 处可微且有定义，那么函数 <script type="math/tex">F(x)</script> 在 <script type="math/tex">a</script> 点沿着梯度相反的方向 <script type="math/tex">- \nabla F(a)</script> 下降最多。</p><p>因而，如果：</p><script type="math/tex; mode=display">b = a - \gamma \nabla F(a)</script><p>对于一个足够小数值 <script type="math/tex">\gamma > 0</script> 时成立，那么 <script type="math/tex">F(a) \geqslant F(b)</script> 考虑到这一点，我们可以从函数 <script type="math/tex">F</script> 的局部极小值的初始估计 <script type="math/tex">x_{0}</script> 出发，并考虑如下序列 <script type="math/tex">x_{0}, x_{1}, x_{2}, ...</script> 使得</p><script type="math/tex; mode=display">x_{n+1} = x_{n} - \gamma \nabla F(x_{n}) , n \geqslant 0</script><p>因此可得到</p><script type="math/tex; mode=display">F(x_{0}) \geqslant F(x_{1}) \geqslant F(x_{2}) \geqslant ...,</script><p>如果顺利的话序列 <script type="math/tex">(x_{n})</script> 收敛到期望的局部极小值。注意每次迭代步长 <script type="math/tex">\gamma</script> 可以改变。</p><p>下图示例了这一过程，这里假设 <script type="math/tex">F</script> 定义在平面上，并且函数图像是一个碗形。蓝色的曲线是等高线（水平集），即函数 <script type="math/tex">F</script> 为常数的集合构成的曲线。红色的箭头指向该点梯度的反方向。（一点处的梯度方向与通过该点的等高线垂直）。沿着梯度下降方向，将最终到达碗底，即函数 <script type="math/tex">F</script> 局部极小值的点。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E7%9A%84%E6%8F%8F%E8%BF%B0.png" class="" title="梯度下降法的描述"><p>梯度下降法处理一些复杂的非线性函数会出现问题，例如Rosenbrock函数：</p><script type="math/tex; mode=display">f(x, y) = (1 - x)^{2} + 100 (y - x^{2})^{2}</script><p>其最小值在 <script type="math/tex">(x, y) = (1, 1)</script> 处，数值为 <script type="math/tex">f(x, y) = 0</script> 。但是此函数具有狭窄弯曲的山谷，最小值 <script type="math/tex">(x, y) = (1, 1)</script> 就在这些山谷之中，并且谷底很平。优化过程是之字形的向极小值点靠近，速度非常缓慢。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/Rosenbrock%E5%87%BD%E6%95%B0.png" class="" title="Rosenbrock函数"><p>下面这个例子也鲜明的示例了”之字”的上升（非下降），这个例子用梯度上升（非梯度下降）法求 <script type="math/tex">F(x, y) = sin (\frac{1}{2} x^{2} - \frac{1}{4} y^{2} + 3) cos (2x + 1 - e^{y})</script> 的局部极大值（非局部极小值）。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E4%B9%8B%E5%AD%97%E4%B8%8A%E5%8D%87%E7%A4%BA%E4%BE%8B-1.png" class="" title="之字上升示例-1"><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E4%B9%8B%E5%AD%97%E4%B8%8A%E5%8D%87%E7%A4%BA%E4%BE%8B-2.png" class="" title="之字上升示例-2"><p>梯度下降法的缺点包括：</p><ul><li>靠近局部极小值时速度减慢。</li><li>直线搜索可能会产生一些问题。</li><li>可能会“之字型”地下降。</li></ul><h2 id="百度百科-梯度下降"><a href="#百度百科-梯度下降" class="headerlink" title="百度百科-梯度下降"></a>百度百科-梯度下降</h2><p><a href="https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/4864937">百度百科-梯度下降</a></p><p>梯度下降是迭代法的一种，可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法。</p><p>梯度：对于可微的数量场 <script type="math/tex">f(x, y, z)</script>，以 <script type="math/tex">(\frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partial z})</script> 为分量的向量场称为f的梯度或斜量。</p><p>梯度下降法(gradient descent)是一个最优化算法，常用于机器学习和人工智能当中用来递归性地逼近最小偏差模型。</p><p>顾名思义，梯度下降法的计算过程就是沿梯度下降的方向求解极小值（也可以沿梯度上升方向求解极大值）。</p><p>其迭代公式为 <script type="math/tex">a_{k+1} = a_{k} + \rho_{k}^{s^{-(k)}}</script> ，其中 <script type="math/tex">s^{-(k)}</script> 代表梯度负方向，<script type="math/tex">\rho_{k}</script> 表示梯度方向上的搜索步长。梯度方向我们可以通过对函数求导得到，步长的确定比较麻烦，太大了的话可能会发散，太小收敛速度又太慢。一般确定步长的方法是由线性搜索算法来确定，即把下一个点的坐标看做是 <script type="math/tex">a_{k+1}</script>的函数，然后求满足 <script type="math/tex">f_{(a_{k}+1)}</script> 的最小值的<script type="math/tex">a_{k}+1</script> 即可。</p><p>因为一般情况下，梯度向量为0的话说明是到了一个极值点，此时梯度的幅值也为0。而采用梯度下降算法进行最优化求解时，算法迭代的终止条件是梯度向量的幅值接近0即可，可以设置个非常小的常数阈值。</p><p>举一个非常简单的例子，如求函数 <script type="math/tex">f(x) = x^2</script> 的最小值。<br>利用梯度下降的方法解题步骤如下：<br>1、求梯度，<script type="math/tex">\nabla = 2x</script><br>2、向梯度相反的方向移动 <script type="math/tex">x</script> ，如下</p><script type="math/tex; mode=display">x \leftarrow x - \gamma · \nabla $$ ，其中，$$ \gamma $$ 为步长。如果步长足够小，则可以保证每一次迭代都在减小，但可能导致收敛太慢，如果步长太大，则不能保证每一次迭代都减少，也不能保证收敛。3、循环迭代步骤2，直到 $$ x $$ 的值变化到使得 $$ f(x) $$ 在两次迭代之间的差值足够小，比如0.00000001，也就是说，直到两次迭代计算出来的 $$ f(x) $$  基本没有变化，则说明此时 $$ f(x) $$  已经达到局部最小值了。4、此时，输出 $$ x $$，这个 $$ x $$ 就是使得函数 $$ f(x) $$ 最小时的 $$ x $$ 的取值 。## 梯度下降方法的直观解释（Momentum、AdaGrad、RMSProp、Adam）博客：https://towardsdatascience.com/a-visual-explanation-of-gradient-descent-methods-momentum-adagrad-rmsprop-adam-f898b102325cgithub：https://github.com/lilipads/gradient_descent_viz# 最速下降## 【机器学习之数学】02 梯度下降法、最速下降法、牛顿法、共轭方向法、拟牛顿法[02 梯度下降法、最速下降法、牛顿法、共轭方向法、拟牛顿法](https://www.cnblogs.com/wuliytTaotao/p/10603576.html#%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95)<img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95-1.png" class="" title="最速下降法-1">## 一文搞懂最速下降法[一文搞懂最速下降法](https://zhuanlan.zhihu.com/p/32709034)最速梯度下降法解决的问题是无约束优化问题，而所谓的无约束优化问题就是对目标函数的求解，没有任何的约束限制的优化问题，比如求下方最小值：$$ min f(x)</script><p>其中的函数 <script type="math/tex">f ：R^{n} \rightarrow R</script></p><p>求解这类的问题可以分为两大类：一个是最优条件法和迭代法。</p><p>最优条件法是是指当函数存在解析形式，能够通过最优性条件求解出显式最优解。对于无约束最优化问题，如果 <script type="math/tex">f(x)</script> 在最优点 <script type="math/tex">x^{ * }</script> 附近可微，那么 <script type="math/tex">x^{ * }</script> 是局部极小点的必要条件为：<script type="math/tex">df(x^{ * }) = 0</script><br>我们常常就是通过这个必要条件去求取可能的极小值点，再验证这些点是否真的是极小值点。当上式方程可以求解的时候，无约束最优化问题基本就解决了。<br>实际中，这个方程往往难以求解。这就引出了第二大类方法：迭代法。</p><p>最速下降法就是一种迭代法。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95%E8%AE%A1%E7%AE%97%E6%AD%A5%E9%AA%A4.png" class="" title="最速下降法计算步骤"><p>由以上计算步骤可知，最速下降法迭代终止时，求得的是目标函数驻点的一个近似点。</p><ul><li>第一步：迭代法的初始点选择。</li><li>第二步：终止条件的解释：</li></ul><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95-%E5%AE%9A%E7%90%862.png" class="" title="最速下降法-定理2"><p>最终如果到达了局部最优解的话，求出来的梯度值是为0的，也就是说该点梯度为0是该点是局部最优解的必要条件。</p><p>所以我们的终止条件就是到达某处的梯度为0，在一些条件不是太苛刻的情况下，我们也可以不让它严格为0，只是逼近于0即可。这就是第二步的解释。</p><ul><li>第三步：这步在是在选取迭代方向，也就是从当前点迭代的方向。这里选取当前点的梯度负方向，为什么选择这个方向，是因为梯度的负方向是局部下降最快的方向。</li><li>第四步：第四步也是非常重要的，因为在第三步我们虽然确定了迭代方向，并且知道这个方向是局部函数值下降最快的方向，但是还没有确定走的步长，如果选取的步长不合适，也是非常不可取的，下面会给出一个例子图，那么第四步的作用就是在确定迭代方向的前提上，确定在该方向上使得函数值最小的迭代步长。</li></ul><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95%E6%AD%A5%E9%95%BF-%E5%90%88%E9%80%82%E6%AD%A5%E9%95%BF.png" class="" title="最速下降法步长-合适步长"><p>其中确定最优步长 <script type="math/tex">t_{k}</script> 的方法如下：</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95%E6%AD%A5%E9%95%BF%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.png" class="" title="最速下降法步长计算方法"><ul><li>算法缺点</li></ul><p>某点的负梯度方向，通常只是在该点附近才具有这种最速下降的性质。</p><p>在一般情况下，当用最速下降法寻找极小点时，其搜索路径呈直角锯齿状（如下图），在开头 几步，目标函数下降较快；但在接近极小点时，收敛速度长久不理想了。特别适当目标函数的等值 线为比较扁平的椭圆时，收敛就更慢了。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BC%BA%E7%82%B9.png" class="" title="最速下降法-算法缺点"><p>因此，在实用中常用最速下降法和其他方法联合应用，在前期使用最速下降法，而在接近极小值点时，可改用收敛较快的其他方法。</p><ul><li>最速下降法与梯度下降法的区别</li></ul><p>准确来说，它们并不是完全等价。</p><p>对于梯度下降法，我们需要预先设定步长 <script type="math/tex">\alpha</script> ：</p><script type="math/tex; mode=display">x_{i+1} = x_{i} - \alpha \nabla f_{xi}</script><p>而最速下降法的步长 <script type="math/tex">\alpha_{k}</script> 是通过一个优化函数计算得到的：</p><script type="math/tex; mode=display">\alpha_{k} = argmin_{\alpha_{k}} f(x_{i} - \alpha_{k}   \nabla f_{xi})</script><h2 id="最优化学习笔记（四）——最速下降法"><a href="#最优化学习笔记（四）——最速下降法" class="headerlink" title="最优化学习笔记（四）——最速下降法"></a>最优化学习笔记（四）——最速下降法</h2><p><a href="https://blog.csdn.net/chunyun0716/article/details/51530700">最优化学习笔记（四）——最速下降法</a></p><p>最速下降法是梯度方法的一种实现，它的理念是在每次的迭代过程中，选取一个合适的步长，使得目标函数的值能够最大程度的减小。可以认为是函数的极小值点：</p><script type="math/tex; mode=display">\alpha_{k} = arg min f( x^{(k)} - \alpha  \nabla f(x^{(k)})) , \alpha >=0</script><p>由梯度迭代公式可知：<script type="math/tex">x^{(k+1)} = x^{(k)} - \nabla f(x^{(k)})</script> ，上式的解释是找到最优的迭代点 <script type="math/tex">x^{(k+1)}</script>，使得函数 <script type="math/tex">f(x)</script> 取得极小值时，求出步长 <script type="math/tex">\alpha_{k}</script>。</p><p>概述最速下降法的过程：在每一步的迭代中，从点 <script type="math/tex">x^{(k)}</script> 出发，沿着梯度的负方向（求极小值点）展开一维搜索，直到找到步长最优值，确定新的迭代点 <script type="math/tex">x^{(k+1)}</script>。<strong>最速下降法的相邻搜索方向都是正交的</strong>。</p><h1 id="共轭梯度法"><a href="#共轭梯度法" class="headerlink" title="共轭梯度法"></a>共轭梯度法</h1><h2 id="维基百科-共轭梯度"><a href="#维基百科-共轭梯度" class="headerlink" title="维基百科-共轭梯度"></a>维基百科-共轭梯度</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6%E6%B3%95">维基百科-共轭梯度</a></p><p>共轭梯度法（英语：Conjugate gradient method），是求解系数矩阵为对称正定矩阵的线性方程组的数值解的方法。共轭梯度法是一个迭代方法，它适用于<strong>系数矩阵为稀疏矩阵的线性方程组</strong>，因为使用像Cholesky分解这样的直接方法求解这些系统所需的计算量太大了。这种方程组在数值求解偏微分方程时很常见。</p><p>共轭梯度法也可以用于求解无约束的最优化问题。</p><p>双共轭梯度法（英语：BiConjugate gradient method）提供了一种处理非对称矩阵情况的推广。</p><h2 id="共轭梯度法通俗讲义"><a href="#共轭梯度法通俗讲义" class="headerlink" title="共轭梯度法通俗讲义"></a>共轭梯度法通俗讲义</h2><p><a href="https://flat2010.github.io/2018/10/26/%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6%E6%B3%95%E9%80%9A%E4%BF%97%E8%AE%B2%E4%B9%89/#1-%E7%AE%80%E4%BB%8B">共轭梯度法通俗讲义</a></p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E4%BA%8C%E6%AC%A1%E5%9E%8B.png" class="" title="二次型"><p>对于正定阵最直观的理解方式就是它的二次型函数的图形是一个开口向上的抛物面。如果矩阵A非正定，那么其全局最小值点就可能不止一个。</p><img src="/2023/10/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E6%9C%80%E9%80%9F%E4%B8%8B%E9%99%8D-%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6/%E4%B8%8D%E5%90%8C%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%9E%8B%E5%87%BD%E6%95%B0%E5%9B%BE.png" class="" title="不同情况下的二次型函数图"><p>(a) 正定矩阵的二次型函数图形。<br>(b) 负定矩阵二次函数图。<br>(c) 正定奇异阵的函数图，过谷底的一条直线为解集。<br>(d) 不定矩阵函数图对于三维及以上的情况，奇异矩阵也可能会存在鞍点</p><h2 id="共轭梯度法，-百度百科"><a href="#共轭梯度法，-百度百科" class="headerlink" title="共轭梯度法， 百度百科"></a>共轭梯度法， 百度百科</h2><p><a href="https://baike.baidu.com/item/%E5%85%B1%E8%BD%AD%E6%A2%AF%E5%BA%A6%E6%B3%95/7139204">共轭梯度法， 百度百科</a></p><p>共轭梯度法（Conjugate Gradient）是介于最速下降法与牛顿法之间的一个方法，它仅需利用一阶导数信息，但克服了最速下降法收敛慢的缺点，又避免了牛顿法需要存储和计算Hesse矩阵并求逆的缺点，共轭梯度法不仅是解决大型线性方程组最有用的方法之一，也是解大型非线性最优化最有效的算法之一。 在各种优化算法中，共轭梯度法是非常重要的一种。其优点是所需存储量小，具有步收敛性，稳定性高，而且不需要任何外来参数。</p><p>共轭梯度法是一个典型的共轭方向法，它的每一个搜索方向是互相共轭的，而这些搜索方向d仅仅是负梯度方向与上一次迭代的搜索方向的组合，因此，存储量少，计算方便。</p>]]></content>
    
    
    <summary type="html">梯度下降-最速下降-共轭梯度</summary>
    
    
    
    <category term="算法" scheme="http://hibiscidai.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://hibiscidai.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="神经网络" scheme="http://hibiscidai.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-07-17T02:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算"><p>人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算"><a href="#人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算"></a>人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算</h1><h1 id="本讲目标：学会神经网络计算过程，使用基于TF2原生"><a href="#本讲目标：学会神经网络计算过程，使用基于TF2原生" class="headerlink" title="本讲目标：学会神经网络计算过程，使用基于TF2原生"></a>本讲目标：学会神经网络计算过程，使用基于TF2原生</h1><p>代码搭建你的第一个的神经网络训练模型</p><ul><li>当今人工智能主流方向——连接主义</li><li>前向传播</li><li>损失函数（初体会）</li><li>梯度下降（初体会）</li><li>学习率（初体会）</li><li>反向传播更新参数</li><li>Tensorflow 2 常用函数</li></ul><p>人工智能：让机器具备人的思维和意识。</p><h1 id="人工智能三学派"><a href="#人工智能三学派" class="headerlink" title="人工智能三学派"></a>人工智能三学派</h1><p>我们常说的人工智能，就是让机器具备人的思维和意识。 人工智能主要有三个学派，即<code>行为主义</code>、<code>符号主义</code>和<code>连接主义</code>。</p><ul><li><p>行为主义： 基于控制论，构建感知-动作控制系统。 （控制论，如平衡、行走、避障等自适应控制系统）<br>是基于控制论的，是在构建感知、动作的控制系统。单脚站立是行为主义一个典型例子， 通过感知要摔倒的方向，控制两只手的动作，保持身体的平衡。这就构建了一个感知、动作的控制系统，是典型的行为主义。</p></li><li><p>符号主义： 基于算数逻辑表达式，求解问题时先把问题描述为表达式，再求解表达式。 （可用公式描述、实现理性思维，如专家系统）<br>基于算数逻辑表达式。即在求解问题时，先把问题描述为表达式，再求解表达式。 例如在求解某个问题时， 利用 <code>if case</code> 等条件语句和若干计算公式描述出来， 即使用了符号主义的方法， 如专家系统。符号主义是能用公式描述的人工智能，它让计算机具备了理性思维。</p></li><li><p>连接主义： 仿生学，模仿神经元连接关系。 （仿脑神经元连接，实现感性思维，如神经网络）<br>仿造人脑内的神经元连接关系，使人类不仅具备理性思维， 还具备无法用公式描述的感性思维，如对某些知识产生记忆。</p></li></ul><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E4%BA%BA%E8%84%91%E4%B8%AD%E7%9A%84%E4%B8%80%E6%A0%B9%E7%A5%9E%E7%BB%8F%E5%85%83.png" class="" title="人脑中的一根神经元"><p>人脑中的一根神经元，其中紫色部分为树突，其作为神经元的输入。黄色部分为轴突，其作为神经元的输出。人脑就是由 860 亿个这样的神经元首尾相接组成的网络。</p><p>基于连接主义的神经网络模仿上图的神经元，使计算机具有感性思维。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E4%BA%BA%E8%84%91%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%98%E5%8C%96%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="人脑神经网络变化示意图"><p>随着我们的成长，大量的数据通过视觉、听觉涌入大脑，使我们的神经网络连接，也就是这些神经元连接线上的权重发生了变化，有些线上的权重增强了，有些线上的权重减弱了。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9D%83%E9%87%8D%E5%8F%98%E5%8C%96%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="神经网络权重变化示意图"><h1 id="神经网络设计过程"><a href="#神经网络设计过程" class="headerlink" title="神经网络设计过程"></a>神经网络设计过程</h1><p>计算机具备感性思维的几个步骤</p><ul><li><p>准备数据<br>准备 数据-标签，数量越多越好。</p></li><li><p>搭建网络</p></li><li><p>优化参数<br><code>反向传播</code>，优化权重直到准确率达到要求。</p></li><li><p>应用网络<br>新数据<code>向前传播</code>，输出概率值最大的一个。</p></li></ul><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="搭建与使用神经网络示意图"><h2 id="用神经网络实现鸢尾花分类"><a href="#用神经网络实现鸢尾花分类" class="headerlink" title="用神经网络实现鸢尾花分类"></a>用神经网络实现鸢尾花分类</h2><h3 id="准备数据-数据集特征"><a href="#准备数据-数据集特征" class="headerlink" title="准备数据/数据集特征"></a>准备数据/数据集特征</h3><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/0%E7%8B%97%E5%B0%BE%E8%8D%89%E8%8E%BA%E5%B0%BE.png" class="" title="0狗尾草莺尾"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/1%E6%9D%82%E8%89%B2%E8%8E%BA%E5%B0%BE.png" class="" title="1杂色莺尾"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/2%E5%BC%97%E5%90%89%E5%B0%BC%E4%BA%9A%E9%B8%A2%E5%B0%BE.png" class="" title="2弗吉尼亚鸢尾"><p>人们通过经验总结出了规律：通过测量花的花萼长、花萼宽、花瓣长、花瓣宽，可以得出鸢尾花的类别。<br>例如：花萼长&gt;花萼宽 且 花瓣长/花瓣宽&gt;2 则为 1杂色鸢尾</p><blockquote><p>f语句 case语句 —— 专家系统 把专家的经验告知计算机，计算机执行逻辑判别（理性计算） ，给出分类。</p></blockquote><p>神经网络算法：采用搭建神经网络的办法对其进行分类，即将鸢尾花花萼长、花萼宽、花瓣长、花瓣宽四个输入属性喂入搭建好的神经网络，网络优化参数得到模型，输出分类结果。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E7%94%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="用神经网络实现鸢尾花分类示意图"><p>粉色小球是神经元，1943年已经提出神经元的计算模型——MP模型。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/MP%E6%A8%A1%E5%9E%8B.png" class="" title="MP模型"><h3 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h3><p>为本次求解简单，将MP模型中的非线性函数去掉，得到简化的MP模型。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E7%AE%80%E5%8C%96%E7%9A%84MP%E6%A8%A1%E5%9E%8B.png" class="" title="简化的MP模型"><p>x是1行4列的输入特征<br>w是4行3列的权重<br>b是偏置项，3个<br>y是1行3列的输出(三种鸢尾花的可能大小)</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B1%95%E5%BC%80%E6%A8%A1%E5%9E%8B.png" class="" title="鸢尾花神经网络展开模型"><blockquote><p>输入特征为标签0狗尾鸢尾</p></blockquote><p>y0、y1、y2和x0、x1、x2、x3都有连接，称为全连接网络。</p><p>网络搭建完成后进行参数初始化，为随机数。</p><h3 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h3><script type="math/tex; mode=display">y = x * w +b</script><script type="math/tex; mode=display">\begin{bmatrix}5.8 & 4.0 & 0.2\end{bmatrix} \tag{2} $$ * $$ \begin{bmatrix}-0.8 & -0.34 & -1.4\\ 0.6 & 1.3 & 0.25 \\ 0.5 & 1.45 & 0.9 \\ 0.65 & 0.7 & -1.2 \end{bmatrix} \tag{2} $$ + $$ \begin{bmatrix} 2.52 & -3.1 & 5.62 \end{bmatrix} \tag{2} $$ = $$ \begin{bmatrix} 1.01 & 2.01 & -0.66\end{bmatrix} \tag{2}</script><p>这个结果发现0类的鸢尾得分不是最高的。</p><p>因为初始权重值是随机给的。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p><strong>损失函数(loss function) = 预测值（y）与标准答案（y_）的差距。</strong></p><p>损失函数可以定量判断参数w、偏置项b的优劣，当损失函数输出最小时，参数w、偏置项b会出现最优值。</p><p>均方误差：<script type="math/tex">MSE(y, y_{\_}) =  \frac{\sum_{k=0}^{n} (y-y_{\_})^{2}}{n}</script></p><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>目的：想找到一组参数w和b，使得损失函数最小。</p><p>梯度：函数对各参数求偏导后的向量。函数梯度下降方向是函数减小方向。</p><p>梯度下降法：沿损失函数梯度下降的方向，寻找损失函数的最小值，得到最优参数的方法。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="梯度下降示意图"><script type="math/tex; mode=display">w_{t+1} = w_{t} - lr * \frac{\partial loss}{\partial w_{t}}</script><script type="math/tex; mode=display">b_{t+1} = b - lr * \frac{\partial loss}{\partial b_{t}}</script><script type="math/tex; mode=display">w_{t+1} * x + b_{t+1} → y</script><p><strong>学习率（learning rate，lr）</strong>：当学习率设置过小，收敛过程将变得很缓慢。当学习率设置过大，梯度可能会在最小值附近来回震荡，甚至可能无法收敛。</p><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><script type="math/tex; mode=display">w_{t+1} = w_{t} - lr * \frac{\partial loss}{\partial w_{t}}</script><p><strong>反向传播</strong>：从后向前，逐层求损失函数对每层神经元参数的偏导数，迭代更新所有参数。</p><p>例如：损失函数 $ loss = (w+1)^{2} $， $ \frac{\partial loss}{\partial w} = 2w+2 $</p><p>参数w初始化为5，学习率为0.2，则：<br>1次    参数w：5    5 - 0.2 <em> ( 2 </em> 5 + 2 ) = 2.6<br>2次    参数w：2.6    2.6 - 0.2 <em> ( 2 </em> 2.6 +2 ) = 1.16<br>3次    参数w：1.16    1.16 - 0.2 <em> ( 2 </em> 1.16 + 2 ) = 0.296<br>4次    参数w：0.296<br>…</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%84%8F%E5%9B%BE.png" class="" title="反向传播意图"><p>目的是找到反向w=-1，损失函数最低的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.constant(<span class="number">5</span>, dtype=tf.float32))</span><br><span class="line">lr = <span class="number">0.2</span></span><br><span class="line">epoch = <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># for epoch 定义顶层循环，表示对数据集循环epoch次，此例数据集数据仅有1个w,初始化时候constant赋值为5，循环40次迭代。</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构到grads框起了梯度的计算过程。</span></span><br><span class="line">        loss = tf.square(w + <span class="number">1</span>)</span><br><span class="line">    grads = tape.gradient(loss, w)  <span class="comment"># .gradient函数告知谁对谁求导</span></span><br><span class="line"></span><br><span class="line">    w.assign_sub(lr * grads)  <span class="comment"># .assign_sub 对变量做自减 即：w -= lr*grads 即 w = w - lr*grads</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After %s epoch,w is %f,loss is %f&quot;</span> % (epoch, w.numpy(), loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># lr初始值：0.2   请自改学习率  0.001  0.999 看收敛过程</span></span><br><span class="line"><span class="comment"># 最终目的：找到 loss 最小 即 w = -1 的最优参数w</span></span><br></pre></td></tr></table></figure><h1 id="张量生成"><a href="#张量生成" class="headerlink" title="张量生成"></a>张量生成</h1><p><strong>张量(Tensor)：多维数组（列表）</strong></p><p><strong>阶：张亮的维数</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">维数</th><th style="text-align:center">阶</th><th style="text-align:center">名字</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">0-D</td><td style="text-align:center">0</td><td style="text-align:center">标量 scalar</td><td style="text-align:center">s = 123</td></tr><tr><td style="text-align:center">1-D</td><td style="text-align:center">1</td><td style="text-align:center">向量 vector</td><td style="text-align:center">v = [1, 2, 3]</td></tr><tr><td style="text-align:center">2-D</td><td style="text-align:center">2</td><td style="text-align:center">矩阵 matrix</td><td style="text-align:center">m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</td></tr><tr><td style="text-align:center">n-D</td><td style="text-align:center">n</td><td style="text-align:center">张量 tensor</td><td style="text-align:center">t = [[[.. n个</td></tr></tbody></table></div><p>张量可以表示0阶到n阶数组（列表）</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>tf.int, tf.float ......</code></p><p>tf.int 32, tf.float 32, tf.float 64</p><p><code>tf.bool</code></p><p>tf.constant([True, False])</p><p><code>tf.string</code></p><p>tf.constant(“Hello, world!”)</p><h2 id="创建一个张量"><a href="#创建一个张量" class="headerlink" title="创建一个张量"></a>创建一个张量</h2><p><code>tf.constant(张量内容, dtype = 数据类型(可选))</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1</span>, <span class="number">5</span>], dtype = tf.int64)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;tf.Tensor([1,5], shape=(2 ,), dtype = int64)</span><br><span class="line">&lt;dtype:&#x27;int64&#x27;&gt;</span><br><span class="line">(2,)</span><br></pre></td></tr></table></figure></p><p>shape隔开1个数组说明是1纬，值为2，说明有两数字。</p><h2 id="创建一个Tensor"><a href="#创建一个Tensor" class="headerlink" title="创建一个Tensor"></a>创建一个Tensor</h2><h3 id="将numpy的数据类型转换为Tensor数据类型"><a href="#将numpy的数据类型转换为Tensor数据类型" class="headerlink" title="将numpy的数据类型转换为Tensor数据类型"></a>将numpy的数据类型转换为Tensor数据类型</h3><p><code>tf.convert_to_tensor(数据名, dtype = 数据类型(可选))</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">b = tf.convert_to_tensor(a, dtype = tf.int64)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0 1 2 3 4]</span><br><span class="line">tf.Tensor([0 1 2 3 4], shape=(5,), dtype = int64)</span><br></pre></td></tr></table></figure></p><p>纬度：<br>一维 直接写个数<br>二维 用[行, 列]<br>多维 用[n, m, j, k ……]</p><h3 id="创建全为0的张量"><a href="#创建全为0的张量" class="headerlink" title="创建全为0的张量"></a>创建全为0的张量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.zero(维度)</span><br></pre></td></tr></table></figure><h3 id="创建全为1的张量"><a href="#创建全为1的张量" class="headerlink" title="创建全为1的张量"></a>创建全为1的张量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.ones(纬度)</span><br></pre></td></tr></table></figure><h3 id="创建全为指定值的张量"><a href="#创建全为指定值的张量" class="headerlink" title="创建全为指定值的张量"></a>创建全为指定值的张量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.fill(纬度, 指定值)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = tf.zeros([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = tf.ones(<span class="number">4</span>)</span><br><span class="line">c = tf.fill([<span class="number">2</span>, <span class="number">2</span>], <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[0. 0. 0.][0. 0. 0.]], shape = (2, 3), dtype = float32)</span><br><span class="line">tf.Tensor([1. 1. 1. 1.], shape = (4, ), dtype = float32)</span><br><span class="line">tf.Tensor([[9 9][9 9]], shape = (2, 2), dtype = int32)</span><br></pre></td></tr></table></figure><h3 id="生成正态分布的随机数，默认均值为0，标准差为1"><a href="#生成正态分布的随机数，默认均值为0，标准差为1" class="headerlink" title="生成正态分布的随机数，默认均值为0，标准差为1"></a>生成正态分布的随机数，默认均值为0，标准差为1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.random.normal(纬度, mean=均值，stddev=标准差)</span><br></pre></td></tr></table></figure><h3 id="生成截断式正态分布的随机数"><a href="#生成截断式正态分布的随机数" class="headerlink" title="生成截断式正态分布的随机数"></a>生成截断式正态分布的随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.random.truncated_normal(纬度, mean=均值, stddev=标准差)</span><br></pre></td></tr></table></figure><p>在<code>tf.turncated_normal</code>中如果随机生成数据的取值在$ (\mu - 2 \sigma, \mu +2 \sigma) $之外则重新进行生成，保证了生成值在均值附近。</p><p>$ \mu $：均值<br>$ \sigma $：标准差</p><p>标准差计算公式：<script type="math/tex">\sigma = \sqrt{\frac{ \sum_{i=1}^{n}  (x_{i} - \bar{x})^{2}} {n}}</script></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = tf.random.normal ([<span class="number">2</span>, <span class="number">2</span>], mean=<span class="number">0.5</span>, stddev=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">e = tf.random.truncated_normal ([<span class="number">2</span>, <span class="number">2</span>], mean=<span class="number">0.5</span>, stddev=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[0.7925745 0.643315 ]</span><br><span class="line">[1.4752257 0.2533372]], shape=(2, 2), dtype=float32)</span><br><span class="line"></span><br><span class="line">tf.Tensor(</span><br><span class="line">[[ 1.3688478 1.0125661 ]</span><br><span class="line">[ 0.17475659 -0.02224463]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="生成均匀分布随机数-minval-maxval"><a href="#生成均匀分布随机数-minval-maxval" class="headerlink" title="生成均匀分布随机数[minval, maxval)"></a>生成均匀分布随机数[minval, maxval)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.random.uniform(维度, minval=最小值, maxval=最大值)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = tf.random.uniform([<span class="number">2</span>, <span class="number">2</span>], minval=<span class="number">0</span>, maxval=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[0.28219545 0.15581512]</span><br><span class="line">[0.77972126 0.47817433]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="强制tensor转换为该数据类型"><a href="#强制tensor转换为该数据类型" class="headerlink" title="强制tensor转换为该数据类型"></a>强制tensor转换为该数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.cast(张量名, dtype=数据类型)</span><br></pre></td></tr></table></figure><h2 id="计算张量维度上元素的最小值"><a href="#计算张量维度上元素的最小值" class="headerlink" title="计算张量维度上元素的最小值"></a>计算张量维度上元素的最小值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.reduce_min(张量名)</span><br></pre></td></tr></table></figure><h2 id="计算张量维度上元素的最大值"><a href="#计算张量维度上元素的最大值" class="headerlink" title="计算张量维度上元素的最大值"></a>计算张量维度上元素的最大值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.reduce_max(张量名)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x1 = tf.constant([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], dtype=tf.float64)</span><br><span class="line"><span class="built_in">print</span>(x1)</span><br><span class="line"></span><br><span class="line">x2 = tf.cast(x1, tf.int32)</span><br><span class="line"><span class="built_in">print</span>(x2)</span><br><span class="line"><span class="built_in">print</span>(tf.reduce_min(x2), tf.reduce_max(x2))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([1. 2. 3.], shape=(3,), dtype=float64)</span><br><span class="line"></span><br><span class="line">tf.Tensor([1 2 3], shape=(3,), dtype=int32)</span><br><span class="line"></span><br><span class="line">tf.Tensor(1, shape=(), dtype=int32)</span><br><span class="line"></span><br><span class="line">tf.Tensor(3, shape=(), dtype=int32)</span><br></pre></td></tr></table></figure><h2 id="axis"><a href="#axis" class="headerlink" title="axis"></a>axis</h2><p>在一个二维张量或数组中，可以通过调整 axis 等于0或1控制执行维度。</p><ul><li>axis=0代表跨行（经度， down)，而axis=1代表跨列（纬度， across)</li><li>如果不指定axis，则所有元素参与计算。</li></ul><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/axis%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="axis示意图"><h3 id="计算张量沿着指定维度的平均值"><a href="#计算张量沿着指定维度的平均值" class="headerlink" title="计算张量沿着指定维度的平均值"></a>计算张量沿着指定维度的平均值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.reduce_mean(张量名, axis=操作轴)</span><br></pre></td></tr></table></figure><h3 id="计算张量沿着指定维度的和"><a href="#计算张量沿着指定维度的和" class="headerlink" title="计算张量沿着指定维度的和"></a>计算张量沿着指定维度的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.reduce_sum(张量名, axis=操作轴)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=tf.constant([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(tf.reduce_mean(x))</span><br><span class="line"><span class="built_in">print</span>(tf.reduce_sum(x, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[1 2 3]</span><br><span class="line">[2 2 3]], shape=(2, 3), dtype=int32)</span><br><span class="line"></span><br><span class="line">tf.Tensor(2, shape=(), dtype=int32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([6 7], shape=(2,), dtype=int32)</span><br></pre></td></tr></table></figure><h2 id="tf-Variable"><a href="#tf-Variable" class="headerlink" title="tf.Variable"></a>tf.Variable</h2><p><code>tf.Variable()</code> 将变量标记为“可训练” ，被标记的变量会在反向传播中记录梯度信息。神经网络训练中，常用该函数标记待训练参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.Variable(初始值)</span><br><span class="line">w = tf.Variable(tf.random.normal([<span class="number">2</span>, <span class="number">2</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="TensorFlow中的数学运算"><a href="#TensorFlow中的数学运算" class="headerlink" title="TensorFlow中的数学运算"></a>TensorFlow中的数学运算</h2><ul><li>对应元素的四则运算： <code>tf.add</code>, <code>tf.subtract</code>, <code>tf.multiply</code>, <code>tf.divide</code></li><li>平方、次方与开方： <code>tf.square</code>, <code>tf.pow</code>, <code>tf.sqrt</code></li><li>矩阵乘： <code>tf.matmul</code></li></ul><h3 id="对应元素的四则运算"><a href="#对应元素的四则运算" class="headerlink" title="对应元素的四则运算"></a>对应元素的四则运算</h3><ul><li>实现两个张量的对应元素相加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.add(张量<span class="number">1</span>, 张量<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>实现两个张量的对应元素相减</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.subtract(张量<span class="number">1</span>, 张量<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>实现两个张量的对应元素相乘</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.multiply(张量<span class="number">1</span>, 张量<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>实现两个张量的对应元素相除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.divide(张量<span class="number">1</span>, 张量<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>只有维度相同的张量才可以做四则运算</p></blockquote><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = tf.ones([<span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">b = tf.fill([<span class="number">1</span>, <span class="number">3</span>], <span class="number">3.</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(tf.add(a,b))</span><br><span class="line"><span class="built_in">print</span>(tf.subtract(a,b))</span><br><span class="line"><span class="built_in">print</span>(tf.multiply(a,b))</span><br><span class="line"><span class="built_in">print</span>(tf.divide(b,a))</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[1. 1. 1.]], shape=(1, 3), dtype=float32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([[3. 3. 3.]], shape=(1, 3), dtype=float32</span><br><span class="line"></span><br><span class="line">tf.Tensor([[4. 4. 4.]], shape=(1, 3), dtype=float32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([[-2. -2. -2.]], shape=(1, 3), dtype=float32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([[3. 3. 3.]], shape=(1, 3), dtype=float32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([[3. 3. 3.]], shape=(1, 3), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="平方、次方与开方"><a href="#平方、次方与开方" class="headerlink" title="平方、次方与开方"></a>平方、次方与开方</h3><ul><li>计算某个张量的平方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.square(张量名)</span><br></pre></td></tr></table></figure><ul><li>计算某个张量的n次方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.<span class="built_in">pow</span>(张量名, n次方数)</span><br></pre></td></tr></table></figure><ul><li>计算某个张量的开方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.sqrt(张量名）</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = tf.fill([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3.</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(tf.<span class="built_in">pow</span>(a, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(tf.square(a))</span><br><span class="line"><span class="built_in">print</span>(tf.sqrt(a))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[3. 3.]], shape=(1, 2), dtype=float32)</span><br><span class="line">tf.Tensor([[27. 27.]], shape=(1, 2), dtype=float32)</span><br><span class="line">tf.Tensor([[9. 9.]], shape=(1, 2), dtype=float32)</span><br><span class="line">tf.Tensor([[1.7320508 1.7320508]], shape=(1, 2), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="矩阵乘-tf-matmul"><a href="#矩阵乘-tf-matmul" class="headerlink" title="矩阵乘 tf.matmul"></a>矩阵乘 tf.matmul</h3><ul><li>实现两个矩阵的相乘</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.matmul(矩阵<span class="number">1</span>, 矩阵<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = tf.ones([<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">b = tf.fill([<span class="number">2</span>, <span class="number">3</span>], <span class="number">3.</span>)</span><br><span class="line"><span class="built_in">print</span>(tf.matmul(a, b))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>[3, 2] * [2 ,3] = [3, 3]<br>1 1  3 3 3<br>1 1  3 3 3<br>1 1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[6. 6. 6.]</span><br><span class="line">[6. 6. 6.]</span><br><span class="line">[6. 6. 6.]], shape=(3, 3), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="tf-data-Dataset-from-tensor-slices"><a href="#tf-data-Dataset-from-tensor-slices" class="headerlink" title="tf.data.Dataset.from_tensor_slices"></a>tf.data.Dataset.from_tensor_slices</h2><p>神经网络在训练时，是将输入特征和标签配对后喂入网络的。</p><h3 id="切分传入张量的第一维度，生成输入特征-标签对，构建数据集"><a href="#切分传入张量的第一维度，生成输入特征-标签对，构建数据集" class="headerlink" title="切分传入张量的第一维度，生成输入特征/标签对，构建数据集"></a>切分传入张量的第一维度，生成输入特征/标签对，构建数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = tf.data.Dataset.from_tensor_slices((输入特征, 标签))</span><br></pre></td></tr></table></figure><p>（Numpy和Tensor格式都可用该语句读入数据）</p><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 收集特征</span></span><br><span class="line">features = tf.constant([<span class="number">12</span>,<span class="number">23</span>,<span class="number">10</span>,<span class="number">17</span>])</span><br><span class="line"><span class="comment"># 对应标签</span></span><br><span class="line">labels = tf.constant([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 打特征和标签</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((features, labels))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dataset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> dataset:</span><br><span class="line"><span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(特征, 标签) 配对</span></span><br><span class="line">&lt;TensorSliceDataset shapes: ((), ()), types: (tf.int32, tf.int32))&gt;</span><br><span class="line"></span><br><span class="line">(&lt;tf.Tensor: id=9, shape=(), dtype=int32, numpy=12&gt;, &lt;tf.Tensor: id=10, shape=(), dtype=int32, numpy=0&gt;)</span><br><span class="line"></span><br><span class="line">(&lt;tf.Tensor: id=11, shape=(), dtype=int32, numpy=23&gt;, &lt;tf.Tensor: id=12, shape=(), dtype=int32, numpy=1&gt;)</span><br><span class="line"></span><br><span class="line">(&lt;tf.Tensor: id=13, shape=(), dtype=int32, numpy=10&gt;, &lt;tf.Tensor: id=14, shape=(), dtype=int32, numpy=1&gt;)</span><br><span class="line"></span><br><span class="line">(&lt;tf.Tensor: id=15, shape=(), dtype=int32, numpy=17&gt;, &lt;tf.Tensor: id=16, shape=(), dtype=int32, numpy=0&gt;)</span><br></pre></td></tr></table></figure><h2 id="张量梯度求导tf-GradientTape"><a href="#张量梯度求导tf-GradientTape" class="headerlink" title="张量梯度求导tf.GradientTape"></a>张量梯度求导tf.GradientTape</h2><p>with 结构中使用来实现对指定参数的求导运算<br>with 结构记录计算过程， gradient求出张量的梯度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.GradientTape( ) <span class="keyword">as</span> tape:</span><br><span class="line">若干个计算过程</span><br><span class="line">grad=tape.gradient(函数, 对谁求导)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.GradientTape( ) <span class="keyword">as</span> tape:</span><br><span class="line">w = tf.Variable(tf.constant(<span class="number">3.0</span>))</span><br><span class="line">loss = tf.<span class="built_in">pow</span>(w,<span class="number">2</span>) <span class="comment">#loss=w^2 loss’=2w</span></span><br><span class="line">grad = tape.gradient(loss,w)</span><br><span class="line"><span class="built_in">print</span>(grad)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\frac{ \sigma w^{2} } { \sigma w } = 2 w = 2 * 3.0 = 6.0</script><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(6.0, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="枚举enumerate"><a href="#枚举enumerate" class="headerlink" title="枚举enumerate"></a>枚举enumerate</h2><p><code>enumerate</code>是python的内建函数，它可遍历每个元素(如列表、元组或字符串)， 组合为：索引 元素，常在for循环中使用。</p><p>可以在元素前配上对应的索引号</p><p><code>enumerate(列表名)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line"><span class="built_in">print</span>(i, element)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 one</span><br><span class="line">1 two</span><br><span class="line">2 three</span><br></pre></td></tr></table></figure><h2 id="独热编码tf-one-hot"><a href="#独热编码tf-one-hot" class="headerlink" title="独热编码tf.one_hot"></a>独热编码tf.one_hot</h2><p><strong>独热编码（one-hot encoding</strong>：在分类问题中，常用独热码做标签，标记类别： 1表示是， 0表示非。</p><p>例如：0狗尾草鸢尾 1杂色鸢尾 2弗吉尼亚鸢尾 三种<br>对于标签1，对应独热码是(0. 1. 0.)</p><p>即标签1，0%概率是0狗尾草鸢尾，100%概率是1杂色鸢尾，0%概率是2弗吉尼亚鸢尾</p><p><code>tf.one_hot()</code>函数将待转换数据，转换为one-hot形式的数据输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.one_hot(待转换数据, depth=几分类)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classes = <span class="number">3</span></span><br><span class="line">labels = tf.constant([<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]) <span class="comment"># 输入的元素值最小为0, 最大为2</span></span><br><span class="line">output = tf.one_hot(labels, depth=classes)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[0. 1. 0.]</span><br><span class="line">[1. 0. 0.]</span><br><span class="line">[0. 0. 1.]], shape=(3, 3), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="正态分布tf-nn-softmax"><a href="#正态分布tf-nn-softmax" class="headerlink" title="正态分布tf.nn.softmax"></a>正态分布tf.nn.softmax</h2><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%ADsoftmax.png" class="" title="神经网络完成前向传播softmax"><p>神经网络完成前向传播，计算出了每一种类型的可能性大小，数字在符合概率分布后才可以和独热码的标签作比较。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%ADsoftmax2.png" class="" title="神经网络完成前向传播softmax2"><script type="math/tex; mode=display">Softmax(y_{i}) = \frac{e^{y_{i}}}{\sum_{j=0}^{n} e^{y_{i}}}</script><p><code>tf.nn.softmax(x)</code> 使输出符合概率分布</p><p>当n分类的n个输出</p><script type="math/tex; mode=display">( y_{ 0 }, y_{1},  ……, y_{ n  - 1})</script><p>通过 <code>softmax()</code> 函数，便符合概率分布了。</p><p>即每个输出值变为0~1之间的概率值。</p><script type="math/tex; mode=display">\forall x P(X = x) \in [0, 1] $$ 且 $$ \sum_{x} P(X = x) = 1</script><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = tf.constant ( [<span class="number">1.01</span>, <span class="number">2.01</span>, -<span class="number">0.66</span>] )</span><br><span class="line">y_pro = tf.nn.softmax(y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After softmax, y_pro is:&quot;</span>, y_pro)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">After softmax, y_pro <span class="keyword">is</span>: tf.Tensor([<span class="number">0.25598174</span> <span class="number">0.69583046</span> <span class="number">0.0481878</span>], shape=(<span class="number">3</span>, ), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="参数自更新assign-sub"><a href="#参数自更新assign-sub" class="headerlink" title="参数自更新assign_sub"></a>参数自更新assign_sub</h2><ul><li>赋值操作，更新参数的值并返回。</li><li>调用<code>assign_sub</code>前，先用<code>tf.Variable</code>定义变量 w 为可训练（可自更新）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.assign_sub(w要自减的内容)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w = tf.Variable(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># w -= 1 即 w = w - 1</span></span><br><span class="line">w.assign_sub(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tf.Variable &#x27;Variable:0&#x27; shape=() dtype=int32, numpy=3&gt;</span><br></pre></td></tr></table></figure><h2 id="返回最大索引tf-argmax"><a href="#返回最大索引tf-argmax" class="headerlink" title="返回最大索引tf.argmax"></a>返回最大索引tf.argmax</h2><p>返回张量沿指定维度最大值的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis=0经度，纵向列</span></span><br><span class="line"><span class="comment"># axis=1纬度，横向行</span></span><br><span class="line">tf.argmax(张量名, axis=操作轴)</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">test = np.array(</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], </span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>], </span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="built_in">print</span>(tf.argmax(test, axis=<span class="number">0</span>)) <span class="comment">#返回每一列（经度）最大值的索引</span></span><br><span class="line"><span class="built_in">print</span>(tf.argmax(test, axis=<span class="number">1</span>)) <span class="comment">#返回每一行（纬度）最大值的索引</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[1 2 3]</span><br><span class="line">[2 3 4]</span><br><span class="line">[5 4 3]</span><br><span class="line">[8 7 2]]</span><br><span class="line"></span><br><span class="line">tf.Tensor([3 3 1], shape=(3, ), dtype=int64)</span><br><span class="line">tf.Tensor([2 2 0 0], shape=(4, ), dtype=int64)</span><br></pre></td></tr></table></figure><h1 id="鸢尾花数据集读入"><a href="#鸢尾花数据集读入" class="headerlink" title="鸢尾花数据集读入"></a>鸢尾花数据集读入</h1><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>共有数据150组，每组包括花萼长、花萼宽、花瓣长、花瓣宽4个输入特征。<br>同时给出了，这一组特征对应的鸢尾花类别。<br>类别包括Setosa Iris（狗尾草鸢尾）， Versicolour Iris（杂色鸢尾）， Virginica Iris（弗吉尼亚鸢尾）三类，分别用数字0， 1， 2表示。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%80%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%A1%E7%AE%97/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D.png" class="" title="鸢尾花数据集介绍"><h2 id="读入数据集"><a href="#读入数据集" class="headerlink" title="读入数据集"></a>读入数据集</h2><p>从<code>sklearn</code>包<code>datasets</code>读入数据集，语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">x_data = datasets.load_iris().data <span class="comment"># 返回iris数据集所有输入特征</span></span><br><span class="line">y_data = datasets.load_iris().target <span class="comment"># 返回iris数据集所有标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">x_data = datasets.load_iris().data  <span class="comment"># .data返回iris数据集所有输入特征</span></span><br><span class="line">y_data = datasets.load_iris().target  <span class="comment"># .target返回iris数据集所有标签</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_data from datasets: \n&quot;</span>, x_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_data from datasets: \n&quot;</span>, y_data)</span><br><span class="line"></span><br><span class="line">x_data = DataFrame(x_data, columns=[<span class="string">&#x27;花萼长度&#x27;</span>, <span class="string">&#x27;花萼宽度&#x27;</span>, <span class="string">&#x27;花瓣长度&#x27;</span>, <span class="string">&#x27;花瓣宽度&#x27;</span>]) <span class="comment"># 为表格增加行索引（左侧）和列标签（上方）</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 设置列名对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_data add index: \n&quot;</span>, x_data)</span><br><span class="line"></span><br><span class="line">x_data[<span class="string">&#x27;类别&#x27;</span>] = y_data  <span class="comment"># 新加一列，列标签为‘类别’，数据为y_data</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_data add a column: \n&quot;</span>, x_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类型维度不确定时，建议用print函数打印出来确认效果</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">x_data from datasets: </span><br><span class="line"> [[5.1 3.5 1.4 0.2]</span><br><span class="line"> [4.9 3.  1.4 0.2]</span><br><span class="line"> [4.7 3.2 1.3 0.2]</span><br><span class="line"> [4.6 3.1 1.5 0.2]</span><br><span class="line"> [5.  3.6 1.4 0.2]</span><br><span class="line"> [5.4 3.9 1.7 0.4]</span><br><span class="line"> [4.6 3.4 1.4 0.3]</span><br><span class="line"> [5.  3.4 1.5 0.2]</span><br><span class="line"> [4.4 2.9 1.4 0.2]</span><br><span class="line"> [4.9 3.1 1.5 0.1]</span><br><span class="line"> [5.4 3.7 1.5 0.2]</span><br><span class="line"> [4.8 3.4 1.6 0.2]</span><br><span class="line"> [4.8 3.  1.4 0.1]</span><br><span class="line"> [4.3 3.  1.1 0.1]</span><br><span class="line"> [5.8 4.  1.2 0.2]</span><br><span class="line"> [5.7 4.4 1.5 0.4]</span><br><span class="line"> [5.4 3.9 1.3 0.4]</span><br><span class="line"> [5.1 3.5 1.4 0.3]</span><br><span class="line"> [5.7 3.8 1.7 0.3]</span><br><span class="line"> [5.1 3.8 1.5 0.3]</span><br><span class="line"> [5.4 3.4 1.7 0.2]</span><br><span class="line"> [5.1 3.7 1.5 0.4]</span><br><span class="line"> [4.6 3.6 1.  0.2]</span><br><span class="line"> [5.1 3.3 1.7 0.5]</span><br><span class="line"> [4.8 3.4 1.9 0.2]</span><br><span class="line"> [5.  3.  1.6 0.2]</span><br><span class="line"> [5.  3.4 1.6 0.4]</span><br><span class="line"> [5.2 3.5 1.5 0.2]</span><br><span class="line"> [5.2 3.4 1.4 0.2]</span><br><span class="line"> [4.7 3.2 1.6 0.2]</span><br><span class="line"> [4.8 3.1 1.6 0.2]</span><br><span class="line"> [5.4 3.4 1.5 0.4]</span><br><span class="line"> [5.2 4.1 1.5 0.1]</span><br><span class="line"> [5.5 4.2 1.4 0.2]</span><br><span class="line"> [4.9 3.1 1.5 0.2]</span><br><span class="line"> [5.  3.2 1.2 0.2]</span><br><span class="line"> [5.5 3.5 1.3 0.2]</span><br><span class="line"> [4.9 3.6 1.4 0.1]</span><br><span class="line"> [4.4 3.  1.3 0.2]</span><br><span class="line"> [5.1 3.4 1.5 0.2]</span><br><span class="line"> [5.  3.5 1.3 0.3]</span><br><span class="line"> [4.5 2.3 1.3 0.3]</span><br><span class="line"> [4.4 3.2 1.3 0.2]</span><br><span class="line"> [5.  3.5 1.6 0.6]</span><br><span class="line"> [5.1 3.8 1.9 0.4]</span><br><span class="line"> [4.8 3.  1.4 0.3]</span><br><span class="line"> [5.1 3.8 1.6 0.2]</span><br><span class="line"> [4.6 3.2 1.4 0.2]</span><br><span class="line"> [5.3 3.7 1.5 0.2]</span><br><span class="line"> [5.  3.3 1.4 0.2]</span><br><span class="line"> [7.  3.2 4.7 1.4]</span><br><span class="line"> [6.4 3.2 4.5 1.5]</span><br><span class="line"> [6.9 3.1 4.9 1.5]</span><br><span class="line"> [5.5 2.3 4.  1.3]</span><br><span class="line"> [6.5 2.8 4.6 1.5]</span><br><span class="line"> [5.7 2.8 4.5 1.3]</span><br><span class="line"> [6.3 3.3 4.7 1.6]</span><br><span class="line"> [4.9 2.4 3.3 1. ]</span><br><span class="line"> [6.6 2.9 4.6 1.3]</span><br><span class="line"> [5.2 2.7 3.9 1.4]</span><br><span class="line"> [5.  2.  3.5 1. ]</span><br><span class="line"> [5.9 3.  4.2 1.5]</span><br><span class="line"> [6.  2.2 4.  1. ]</span><br><span class="line"> [6.1 2.9 4.7 1.4]</span><br><span class="line"> [5.6 2.9 3.6 1.3]</span><br><span class="line"> [6.7 3.1 4.4 1.4]</span><br><span class="line"> [5.6 3.  4.5 1.5]</span><br><span class="line"> [5.8 2.7 4.1 1. ]</span><br><span class="line"> [6.2 2.2 4.5 1.5]</span><br><span class="line"> [5.6 2.5 3.9 1.1]</span><br><span class="line"> [5.9 3.2 4.8 1.8]</span><br><span class="line"> [6.1 2.8 4.  1.3]</span><br><span class="line"> [6.3 2.5 4.9 1.5]</span><br><span class="line"> [6.1 2.8 4.7 1.2]</span><br><span class="line"> [6.4 2.9 4.3 1.3]</span><br><span class="line"> [6.6 3.  4.4 1.4]</span><br><span class="line"> [6.8 2.8 4.8 1.4]</span><br><span class="line"> [6.7 3.  5.  1.7]</span><br><span class="line"> [6.  2.9 4.5 1.5]</span><br><span class="line"> [5.7 2.6 3.5 1. ]</span><br><span class="line"> [5.5 2.4 3.8 1.1]</span><br><span class="line"> [5.5 2.4 3.7 1. ]</span><br><span class="line"> [5.8 2.7 3.9 1.2]</span><br><span class="line"> [6.  2.7 5.1 1.6]</span><br><span class="line"> [5.4 3.  4.5 1.5]</span><br><span class="line"> [6.  3.4 4.5 1.6]</span><br><span class="line"> [6.7 3.1 4.7 1.5]</span><br><span class="line"> [6.3 2.3 4.4 1.3]</span><br><span class="line"> [5.6 3.  4.1 1.3]</span><br><span class="line"> [5.5 2.5 4.  1.3]</span><br><span class="line"> [5.5 2.6 4.4 1.2]</span><br><span class="line"> [6.1 3.  4.6 1.4]</span><br><span class="line"> [5.8 2.6 4.  1.2]</span><br><span class="line"> [5.  2.3 3.3 1. ]</span><br><span class="line"> [5.6 2.7 4.2 1.3]</span><br><span class="line"> [5.7 3.  4.2 1.2]</span><br><span class="line"> [5.7 2.9 4.2 1.3]</span><br><span class="line"> [6.2 2.9 4.3 1.3]</span><br><span class="line"> [5.1 2.5 3.  1.1]</span><br><span class="line"> [5.7 2.8 4.1 1.3]</span><br><span class="line"> [6.3 3.3 6.  2.5]</span><br><span class="line"> [5.8 2.7 5.1 1.9]</span><br><span class="line"> [7.1 3.  5.9 2.1]</span><br><span class="line"> [6.3 2.9 5.6 1.8]</span><br><span class="line"> [6.5 3.  5.8 2.2]</span><br><span class="line"> [7.6 3.  6.6 2.1]</span><br><span class="line"> [4.9 2.5 4.5 1.7]</span><br><span class="line"> [7.3 2.9 6.3 1.8]</span><br><span class="line"> [6.7 2.5 5.8 1.8]</span><br><span class="line"> [7.2 3.6 6.1 2.5]</span><br><span class="line"> [6.5 3.2 5.1 2. ]</span><br><span class="line"> [6.4 2.7 5.3 1.9]</span><br><span class="line"> [6.8 3.  5.5 2.1]</span><br><span class="line"> [5.7 2.5 5.  2. ]</span><br><span class="line"> [5.8 2.8 5.1 2.4]</span><br><span class="line"> [6.4 3.2 5.3 2.3]</span><br><span class="line"> [6.5 3.  5.5 1.8]</span><br><span class="line"> [7.7 3.8 6.7 2.2]</span><br><span class="line"> [7.7 2.6 6.9 2.3]</span><br><span class="line"> [6.  2.2 5.  1.5]</span><br><span class="line"> [6.9 3.2 5.7 2.3]</span><br><span class="line"> [5.6 2.8 4.9 2. ]</span><br><span class="line"> [7.7 2.8 6.7 2. ]</span><br><span class="line"> [6.3 2.7 4.9 1.8]</span><br><span class="line"> [6.7 3.3 5.7 2.1]</span><br><span class="line"> [7.2 3.2 6.  1.8]</span><br><span class="line"> [6.2 2.8 4.8 1.8]</span><br><span class="line"> [6.1 3.  4.9 1.8]</span><br><span class="line"> [6.4 2.8 5.6 2.1]</span><br><span class="line"> [7.2 3.  5.8 1.6]</span><br><span class="line"> [7.4 2.8 6.1 1.9]</span><br><span class="line"> [7.9 3.8 6.4 2. ]</span><br><span class="line"> [6.4 2.8 5.6 2.2]</span><br><span class="line"> [6.3 2.8 5.1 1.5]</span><br><span class="line"> [6.1 2.6 5.6 1.4]</span><br><span class="line"> [7.7 3.  6.1 2.3]</span><br><span class="line"> [6.3 3.4 5.6 2.4]</span><br><span class="line"> [6.4 3.1 5.5 1.8]</span><br><span class="line"> [6.  3.  4.8 1.8]</span><br><span class="line"> [6.9 3.1 5.4 2.1]</span><br><span class="line"> [6.7 3.1 5.6 2.4]</span><br><span class="line"> [6.9 3.1 5.1 2.3]</span><br><span class="line"> [5.8 2.7 5.1 1.9]</span><br><span class="line"> [6.8 3.2 5.9 2.3]</span><br><span class="line"> [6.7 3.3 5.7 2.5]</span><br><span class="line"> [6.7 3.  5.2 2.3]</span><br><span class="line"> [6.3 2.5 5.  1.9]</span><br><span class="line"> [6.5 3.  5.2 2. ]</span><br><span class="line"> [6.2 3.4 5.4 2.3]</span><br><span class="line"> [5.9 3.  5.1 1.8]]</span><br><span class="line">y_data from datasets: </span><br><span class="line"> [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span><br><span class="line"> 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2</span><br><span class="line"> 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2</span><br><span class="line"> 2 2]</span><br><span class="line">x_data add index: </span><br><span class="line">      花萼长度  花萼宽度  花瓣长度  花瓣宽度</span><br><span class="line">0         5.1       3.5       1.4       0.2</span><br><span class="line">1         4.9       3.0       1.4       0.2</span><br><span class="line">2         4.7       3.2       1.3       0.2</span><br><span class="line">3         4.6       3.1       1.5       0.2</span><br><span class="line">4         5.0       3.6       1.4       0.2</span><br><span class="line">..        ...       ...       ...       ...</span><br><span class="line">145       6.7       3.0       5.2       2.3</span><br><span class="line">146       6.3       2.5       5.0       1.9</span><br><span class="line">147       6.5       3.0       5.2       2.0</span><br><span class="line">148       6.2       3.4       5.4       2.3</span><br><span class="line">149       5.9       3.0       5.1       1.8</span><br><span class="line">[150 rows x 4 columns]</span><br><span class="line">x_data add a column: </span><br><span class="line">      花萼长度  花萼宽度  花瓣长度  花瓣宽度  类别</span><br><span class="line">0         5.1       3.5       1.4       0.2     0</span><br><span class="line">1         4.9       3.0       1.4       0.2     0</span><br><span class="line">2         4.7       3.2       1.3       0.2     0</span><br><span class="line">3         4.6       3.1       1.5       0.2     0</span><br><span class="line">4         5.0       3.6       1.4       0.2     0</span><br><span class="line">..        ...       ...       ...       ...   ...</span><br><span class="line">145       6.7       3.0       5.2       2.3     2</span><br><span class="line">146       6.3       2.5       5.0       1.9     2</span><br><span class="line">147       6.5       3.0       5.2       2.0     2</span><br><span class="line">148       6.2       3.4       5.4       2.3     2</span><br><span class="line">149       5.9       3.0       5.1       1.8     2</span><br><span class="line">[150 rows x 5 columns]</span><br></pre></td></tr></table></figure><h1 id="神经网络实现鸢尾花分类"><a href="#神经网络实现鸢尾花分类" class="headerlink" title="神经网络实现鸢尾花分类"></a>神经网络实现鸢尾花分类</h1><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><h3 id="数据集读入"><a href="#数据集读入" class="headerlink" title="数据集读入"></a>数据集读入</h3><ul><li>从sklearn包datasets 读入数据集：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> datasets</span><br><span class="line">x_data = datasets.load_iris().data <span class="comment"># 返回iris数据集所有输入特征</span></span><br><span class="line">y_data = datasets.load_iris().target <span class="comment"># 返回iris数据集所有标签</span></span><br></pre></td></tr></table></figure><h3 id="数据集乱序"><a href="#数据集乱序" class="headerlink" title="数据集乱序"></a>数据集乱序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">116</span>) <span class="comment"># 使用相同的seed，使输入特征/标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br></pre></td></tr></table></figure><h3 id="生成训练集和测试集（即-x-train-y-train-x-test-y-test）"><a href="#生成训练集和测试集（即-x-train-y-train-x-test-y-test）" class="headerlink" title="生成训练集和测试集（即 x_train / y_train , x_test / y_test）"></a>生成训练集和测试集（即 x_train / y_train , x_test / y_test）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br></pre></td></tr></table></figure><h3 id="配成-（输入特征，标签）-对，每次读入一小撮（batch）"><a href="#配成-（输入特征，标签）-对，每次读入一小撮（batch）" class="headerlink" title="配成 （输入特征，标签） 对，每次读入一小撮（batch）"></a>配成 （输入特征，标签） 对，每次读入一小撮（batch）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br></pre></td></tr></table></figure><h2 id="搭建网络-1"><a href="#搭建网络-1" class="headerlink" title="搭建网络"></a>搭建网络</h2><h3 id="定义神经网路中所有可训练参数"><a href="#定义神经网路中所有可训练参数" class="headerlink" title="定义神经网路中所有可训练参数"></a>定义神经网路中所有可训练参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w1 = tf.Variable(tf.random.truncated_normal([ <span class="number">4</span>, <span class="number">3</span> ], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([ <span class="number">3</span> ], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h2><h3 id="嵌套循环迭代，-with结构更新参数，显示当前loss"><a href="#嵌套循环迭代，-with结构更新参数，显示当前loss" class="headerlink" title="嵌套循环迭代， with结构更新参数，显示当前loss"></a>嵌套循环迭代， with结构更新参数，显示当前loss</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch): <span class="comment">#数据集级别迭代</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span> (train_db): <span class="comment">#batch级别迭代</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape: <span class="comment"># 记录梯度信息</span></span><br><span class="line">        <span class="comment"># 前向传播过程计算y</span></span><br><span class="line">        <span class="comment"># 计算总loss</span></span><br><span class="line">        grads = tape.gradient(loss, [ w1, b1 ])</span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>]) <span class="comment">#参数自更新</span></span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all/<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><h3 id="计算当前参数前向传播后的准确率，显示当前acc"><a href="#计算当前参数前向传播后的准确率，显示当前acc" class="headerlink" title="计算当前参数前向传播后的准确率，显示当前acc"></a>计算当前参数前向传播后的准确率，显示当前acc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">    y = tf.matmul(h, w) + b <span class="comment"># y为预测结果</span></span><br><span class="line">    y = tf.nn.softmax(y) <span class="comment"># y符合概率分布</span></span><br><span class="line">    pred = tf.argmax(y, axis=<span class="number">1</span>) <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">    pred = tf.cast(pred, dtype=y_test.dtype) <span class="comment">#调整数据类型与标签一致</span></span><br><span class="line">    correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">    correct = tf.reduce_sum (correct) <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">    total_correct += <span class="built_in">int</span> (correct) <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">    total_number += x_test.shape [<span class="number">0</span>]</span><br><span class="line">acc = total_correct / total_number</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test_acc:&quot;</span>, acc)</span><br></pre></td></tr></table></figure><h2 id="acc-loss可视化"><a href="#acc-loss可视化" class="headerlink" title="acc / loss可视化"></a>acc / loss可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>) <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>) <span class="comment"># x轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>) <span class="comment"># y轴名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>) <span class="comment"># 逐点画出test_acc值并连线</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h1><p>1、安装Anaconda（Python3.7版本）<br>2、安装Pycharm<br>3、打开Anaconda Powershell Prompt<br>4、安装软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conda create -n TF2.1 python=3.7</span><br><span class="line">y</span><br><span class="line">conda activate TF2.1</span><br><span class="line">conda install cudatoolkit=10.1</span><br><span class="line">y</span><br><span class="line">conda install cudnn=7.6</span><br><span class="line">y</span><br><span class="line">pip install tensorflow==2.1</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">import tensorflow as tf</span><br><span class="line">tf.__version__</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install tensorflow==2.1</span><br></pre></td></tr></table></figure><p>5、配置Pycharm</p>]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第一讲神经网络计算</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-08-09T04:40:15.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股"><p>人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股"><a href="#人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股"></a>人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股</h1><h1 id="神经网络搭建八股"><a href="#神经网络搭建八股" class="headerlink" title="神经网络搭建八股"></a>神经网络搭建八股</h1><h2 id="用Tensorflow-API：-tf-keras搭建网络八股"><a href="#用Tensorflow-API：-tf-keras搭建网络八股" class="headerlink" title="用Tensorflow API： tf.keras搭建网络八股"></a>用Tensorflow API： tf.keras搭建网络八股</h2><p>六步法</p><h3 id="1-import"><a href="#1-import" class="headerlink" title="1-import"></a>1-import</h3><p>第一步： import 相关模块，如 <code>import tensorflow as tf</code>。</p><h3 id="2-train-test"><a href="#2-train-test" class="headerlink" title="2-train, test"></a>2-train, test</h3><p>第二步： 指定输入网络的训练集和测试集，如指定训练集的输入 <code>x_train</code> 和标签<br><code>y_train</code>，测试集的输入 <code>x_test</code> 和标签 <code>y_test</code>。</p><h3 id="3-model-tf-keras-models-Sequential"><a href="#3-model-tf-keras-models-Sequential" class="headerlink" title="3-model = tf.keras.models.Sequential"></a>3-model = tf.keras.models.Sequential</h3><p>第三步： 逐层搭建网络结构，<code>model = tf.keras.models.Sequential()</code>，相当于走了一遍前向传播。</p><h3 id="4-model-compile"><a href="#4-model-compile" class="headerlink" title="4-model.compile"></a>4-model.compile</h3><p>第四步： 在 <code>model.compile()</code> 中配置训练方法，选择训练时使用的优化器、损失函数和最终评价指标。</p><h3 id="5-model-fit"><a href="#5-model-fit" class="headerlink" title="5-model.fit"></a>5-model.fit</h3><p>第五步： 在 <code>model.fit()</code> 中执行训练过程，告知训练集和测试集的输入值和标签、每个 <code>batch</code> 的大小（batchsize）和数据集的迭代次数（epoch）。</p><h3 id="6-model-summary"><a href="#6-model-summary" class="headerlink" title="6-model.summary"></a>6-model.summary</h3><p>第六步： 使用 <code>model.summary()</code> 打印网络结构，统计参数数目。</p><h2 id="函数用法介绍"><a href="#函数用法介绍" class="headerlink" title="函数用法介绍"></a>函数用法介绍</h2><h3 id="tf-keras-models-Sequential"><a href="#tf-keras-models-Sequential" class="headerlink" title="tf.keras.models.Sequential()"></a>tf.keras.models.Sequential()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential ([网络结构]) <span class="comment">#描述各层网络</span></span><br></pre></td></tr></table></figure><p>网络结构举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉直层</span></span><br><span class="line">tf.keras.layers.Flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">tf.keras.layers.Dense(<span class="string">&quot;神经元个数&quot;</span>, activation = <span class="string">&quot;激活函数&quot;</span>, kernel_regularizer = <span class="string">&quot;哪种正则化&quot;</span>)</span><br><span class="line"><span class="comment"># activation（字符串给出）可选: relu、 softmax、 sigmoid、 tanh</span></span><br><span class="line"><span class="comment"># kernel_regularizer可选: tf.keras.regularizers.l1()、 tf.keras.regularizers.l2()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积层</span></span><br><span class="line">tf.keras.layers.Conv2D(filters = <span class="string">&quot;卷积核个数&quot;</span>, kernel_size = <span class="string">&quot;卷积核尺寸&quot;</span>,</span><br><span class="line">strides = <span class="string">&quot;卷积步长&quot;</span>, padding = <span class="string">&quot; valid&quot;</span> <span class="keyword">or</span> <span class="string">&quot;same&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LSTM层</span></span><br><span class="line">tf.keras.layers.LSTM()</span><br><span class="line"><span class="comment"># 本章只使用拉直层和全连接层，卷积层和循环神经网络层将在之后的章节介绍</span></span><br></pre></td></tr></table></figure><h3 id="model-compile"><a href="#model-compile" class="headerlink" title="model.compile()"></a>model.compile()</h3><p>Compile 用于配置神经网络的训练方法，告知训练时使用的优化器、损失函数和准确率评测标准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer = 优化器, loss = 损失函数, metrics = [“准确率”] )</span><br></pre></td></tr></table></figure><h4 id="optimizer"><a href="#optimizer" class="headerlink" title="optimizer"></a>optimizer</h4><p><code>optimizer</code> 可以是字符串形式给出的优化器名字，也可以是函数形式，使用函数形式可以设置学习率、动量和超参数。</p><p>可选项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">‘sgd’ <span class="keyword">or</span> tf.keras.optimizers.SGD(lr=<span class="string">&#x27;学习率&#x27;</span>, momentum=<span class="string">&#x27;动量参数&#x27;</span>)</span><br><span class="line">‘adagrad’ <span class="keyword">or</span> tf.keras.optimizers.Adagrad(lr=<span class="string">&#x27;学习率&#x27;</span>)</span><br><span class="line">‘adadelta’ <span class="keyword">or</span> tf.keras.optimizers.Adadelta(lr=<span class="string">&#x27;学习率&#x27;</span>)</span><br><span class="line">‘adam’ <span class="keyword">or</span> tf.keras.optimizers.Adam(lr=<span class="string">&#x27;学习率&#x27;</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>)</span><br></pre></td></tr></table></figure><h4 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h4><p><code>Loss</code> 可以是字符串形式给出的损失函数的名字，也可以是函数形式。</p><p>可选项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">‘mse’ <span class="keyword">or</span> tf.keras.losses.MeanSquaredError()</span><br><span class="line">‘sparse_categorical_crossentropy’ <span class="keyword">or</span> tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>) <span class="comment"># 询问是否是原始输出，经不经过概率分布输出</span></span><br><span class="line"><span class="comment"># False : 神经网络预测结果输出前,经过概率分布</span></span><br><span class="line"><span class="comment"># True : 神经网络预测结果输出前,没有经过概率分布</span></span><br><span class="line"><span class="comment"># 比如十分类问题，概率是1/10，可能是概率参数设置问题</span></span><br></pre></td></tr></table></figure><p>损失函数常需要经过 <code>softmax</code> 等函数将输出转化为概率分布的形式。</p><p><code>from_logits</code> 则用来标注该损失函数是否需要转换为概率的形式， 取 False 时表示转化为概率分布，取 True 时表示没有转化为概率分布，直接输出。</p><h4 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h4><p><code>Metrics</code> 标注网络评测指标。</p><p>可选项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;accuracy&#x27;</span> : y_和y都是数值, 如y_=[<span class="number">1</span>] y=[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;categorical_accuracy&#x27;</span> : y_和y都是独热码(概率分布), 如y_=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>] y=[<span class="number">0.256</span>,<span class="number">0.695</span>,<span class="number">0.048</span>]</span><br><span class="line"><span class="string">&#x27;sparse_categorical_accuracy&#x27;</span> : y_是数值, y是独热码(概率分布), 如y_=[<span class="number">1</span>] y=[<span class="number">0.256</span>,<span class="number">0.695</span>,<span class="number">0.048</span>]</span><br></pre></td></tr></table></figure><h3 id="model-fit"><a href="#model-fit" class="headerlink" title="model.fit()"></a>model.fit()</h3><p>fit 函数用于执行训练过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model.fit(</span><br><span class="line">    训练集的输入特征, </span><br><span class="line">    训练集的标签, </span><br><span class="line">    batch_size, <span class="comment"># 每次喂入神经网络的样本数</span></span><br><span class="line">    epochs, <span class="comment"># 迭代总次数</span></span><br><span class="line">    validation_data = (测试集的输入特征, 测试集的标签), <span class="comment"># 与validataion_split选其一</span></span><br><span class="line">    validataion_split = 从测试集划分多少比例给训练集, <span class="comment"># 与validation_data选其一</span></span><br><span class="line">    validation_freq = 测试的 epoch 间隔次数) <span class="comment"># 每多少次epoch迭代，使用测试集验证一次结果</span></span><br></pre></td></tr></table></figure><h3 id="model-summary"><a href="#model-summary" class="headerlink" title="model.summary()"></a>model.summary()</h3><p>summary 函数用于打印网络结构和参数统计</p><p>例如鸢尾花分类的神经网络，是四输入三输出的一层网络</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BBsummary%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B.png" class="" title="鸢尾花分类summary函数示例"><p>上图是 model.summary()对鸢尾花分类网络的网络结构和参数统计，对于一个输入为 4 输出为 3 的全连接网络，共有 15 个参数。</p><h1 id="iris代码复现"><a href="#iris代码复现" class="headerlink" title="iris代码复现"></a>iris代码复现</h1><h2 id="用Sequential搭建网路"><a href="#用Sequential搭建网路" class="headerlink" title="用Sequential搭建网路"></a>用Sequential搭建网路</h2><p><code>p8_iris_sequential.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-train, test</span></span><br><span class="line">x_train = datasets.load_iris().data</span><br><span class="line">y_train = datasets.load_iris().target</span><br><span class="line"><span class="comment"># 其中测试集的输入特征 x_test 和标签 y_test 可以像 x_train 和 y_train 一样直接从数据集获取， 也可以如上述在 fit 中按比例从训练集中划分， 本例选择从训练集中划分，所以只需加载 x_train， y_train 即可。</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"><span class="comment"># 以上代码实现了数据集的乱序。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3-model = tf.keras.models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Dense(<span class="number">3</span>, activation=<span class="string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 如上所示，本例使用了单层全连接网络，第一个参数表示神经元个数，第二个参数表示网络所使用的激活函数，第三个参数表示选用的正则化方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4-model.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.SGD(lr=<span class="number">0.1</span>), loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5-model.fit</span></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">500</span>, validation_split=<span class="number">0.2</span>, validation_freq=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6-model.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Train on 120 samples, validate on 30 samples</span><br><span class="line">Epoch 1/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 3.8177 - sparse_categorical_accuracy: 0.3438</span><br><span class="line">120/120 [==============================] - 0s 2ms/sample - loss: 2.1962 - sparse_categorical_accuracy: 0.3500</span><br><span class="line">Epoch 2/500</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3353 - sparse_categorical_accuracy: 1.0000</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3535 - sparse_categorical_accuracy: 0.9500</span><br><span class="line">Epoch 150/500</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3871 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3718 - sparse_categorical_accuracy: 0.9417</span><br><span class="line">Epoch 300/500</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3613 - sparse_categorical_accuracy: 0.9375</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3658 - sparse_categorical_accuracy: 0.9583</span><br><span class="line">Epoch 450/500</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3630 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3486 - sparse_categorical_accuracy: 0.9583</span><br><span class="line">Epoch 500/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3122 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 63us/sample - loss: 0.3333 - sparse_categorical_accuracy: 0.9667 - val_loss: 0.4002 - val_sparse_categorical_accuracy: 1.0000</span><br><span class="line">Model: &quot;sequential&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                multiple                  15        </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 15</span><br><span class="line">Trainable params: 15</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><h2 id="用类Class搭建网络"><a href="#用类Class搭建网络" class="headerlink" title="用类Class搭建网络"></a>用类Class搭建网络</h2><p>使用 Sequential 可以快速搭建网络结构，即上层输入下层输出。但是如果网络包含跳连等其他复杂(非顺序)网络结构， Sequential 就无法表示了。 这就需要使用 class 来声明网络结构。</p><ul><li>1-import</li><li>2-train, test</li><li>3-class MyModel(Model) model=MyModel</li><li>4-model.compile</li><li>5-model.fit</li><li>6-model.summary</li></ul><p>可以使用class类封装一个神经网络结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 定义所需网络结构块</span></span><br><span class="line"><span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">//初始化网络结构</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):<span class="comment"># 写出向前传播</span></span><br><span class="line">y = self.d1(x)</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = MyModel()</span><br></pre></td></tr></table></figure><p>使用 <code>class</code> 类封装网络结构，如上所示是一个 <code>class</code> 模板。</p><p><code>MyModel</code> 表示声明的神经网络的名字，括号中的 <code>Model</code> 表示创建的类需要继承 <code>tensorflow</code> 库中的 <code>Model</code> 类。</p><p>类中需要定义两个函数，<code>__init__()</code> 函数为类的构造函数用于初始化类的参数， <code>spuer(MyModel,self).__init__()</code> 这行表示初始化父类的参数。 </p><p>之后便可初始化网络结构，搭建出神经网络所需的各种网络结构块。</p><p><code>call()</code>函数中调用<code>__init__()</code>函数中完成初始化的网络块，实现前向传播并返回推理值。使用 <code>class</code> 方式搭建鸢尾花网络结构的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IrisModel</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>(IrisModel, self).__init__()</span><br><span class="line">self.d1 = Dense(<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">y = self.d1(x)</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">model = IrisModel <span class="comment"># 搭建好网络结构后只需要使用 Model=MyModel()构建类的对象，就可以使用该模型了。</span></span><br></pre></td></tr></table></figure><p><code>p11_iris_class.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-train, test</span></span><br><span class="line">x_train = datasets.load_iris().data</span><br><span class="line">y_train = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3-class MyModel</span></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IrisModel</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(IrisModel, self).__init__()</span><br><span class="line">        self.d1 = Dense(<span class="number">3</span>, activation=<span class="string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = self.d1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = IrisModel()</span><br><span class="line"><span class="comment">#对比使用 Sequential()方法和 class 方法， 有两点区别：</span></span><br><span class="line"><span class="comment">#①import 中添加了 Model 模块和 Dense 层、 Flatten 层。</span></span><br><span class="line"><span class="comment">#②使用 class 声明网络结构， model = IrisModel()初始化模型对象。</span></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4-model compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.SGD(lr=<span class="number">0.1</span>), loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"><span class="comment"># 如上所示，本例使用SGD优化器，并将学习率设置为0.1，选择SparseCategoricalCrossentrop 作为损失函数。 由于神经网络输出使用了softmax 激活函数，使得输出是概率分布，而不是原始输出， 所以需要将from_logits 参数设置为 False。 鸢尾花数据集给的标签是 0， 1， 2 这样的数值，而网络前向传播的输出为概率分布，所以 metrics 需要设置为sparse_categorical_accuracy。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5-model.fit</span></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">500</span>, validation_split=<span class="number">0.2</span>, validation_freq=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 在 fit 中执行训练过程, x_train,y_train 分别表示网络的输入特征和标签，batch_size 表示一次喂入神经网络的数据量, epochs 表示数据集的迭代次数validation_split 表示数据集中测试集的划分比例, validation_freq 表示每迭代 20 次在测试集上测试一次准确率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6-model.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Train on 120 samples, validate on 30 samples</span><br><span class="line">Epoch 1/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 3.8177 - sparse_categorical_accuracy: 0.3438</span><br><span class="line">120/120 [==============================] - 0s 2ms/sample - loss: 2.1962 - sparse_categorical_accuracy: 0.3500</span><br><span class="line">Epoch 2/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3353 - sparse_categorical_accuracy: 1.0000</span><br><span class="line">120/120 [==============================] - 0s 23us/sample - loss: 0.3535 - sparse_categorical_accuracy: 0.9500</span><br><span class="line">Epoch 150/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3871 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3718 - sparse_categorical_accuracy: 0.9417</span><br><span class="line">Epoch 300/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3613 - sparse_categorical_accuracy: 0.9375</span><br><span class="line">120/120 [==============================] - 0s 21us/sample - loss: 0.3658 - sparse_categorical_accuracy: 0.9583</span><br><span class="line">Epoch 450/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3630 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 25us/sample - loss: 0.3486 - sparse_categorical_accuracy: 0.9583</span><br><span class="line">Epoch 500/500</span><br><span class="line"></span><br><span class="line"> 32/120 [=======&gt;......................] - ETA: 0s - loss: 0.3122 - sparse_categorical_accuracy: 0.9688</span><br><span class="line">120/120 [==============================] - 0s 66us/sample - loss: 0.3333 - sparse_categorical_accuracy: 0.9667 - val_loss: 0.4002 - val_sparse_categorical_accuracy: 1.0000</span><br><span class="line">Model: &quot;iris_model&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                multiple                  15        </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 15</span><br><span class="line">Trainable params: 15</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><h1 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h1><ul><li>数据集介绍</li></ul><p>MNIST 数据集一共有 7 万张图片，是 28×28 像素的 0 到 9 手写数字数据集，其中 6 万张用于训练， 1 万张用于测试。每张图片包括 784（28×28）个像素点，使用全连接网络时可将 784 个像素点组成长度为 784 的一维数组，作为输入特征。数据集图片如下所示。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/MNIST%E6%95%B0%E6%8D%AE%E9%9B%86%E5%9B%BE%E7%89%87%E5%B1%95%E7%A4%BA.png" class="" title="MNIST数据集图片展示"><ul><li>导入MNIST数据集</li></ul><p><code>keras</code> 函数库中提供了使用 <code>mnist</code> 数据集的接口，代码如下所示，可以使用<code>load_data()</code>直接从 <code>mnist</code> 中读取测试集和训练集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br></pre></td></tr></table></figure><ul><li>输入全连接网络时需要先将数据拉直为一维数组，把 784 个像素点的灰度值作为输入特征输入神经网络。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.Flatten()</span><br><span class="line"><span class="comment"># [ 0 0 0 48 238 252 252 …… …… …… 253 186 12 0 0 0 0 0]</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>plt</code> 库中的两个函数可视化训练集中的图片。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(x_train[<span class="number">0</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E9%9B%86%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87.png" class="" title="可视化训练集中的图片"><ul><li>使用 print 打印出训练集中第一个样本以二位数组的形式打印出来，如下所示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train[0]:&quot;</span>, x_train[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/%E6%89%93%E5%8D%B0%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%89%87.png" class="" title="打印的可视化图片"><ul><li>打印出第一个样本的标签，为 5。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train[0]:&quot;</span>, y_train[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># y_train[0]:5</span></span><br></pre></td></tr></table></figure><ul><li>打印出测试集样本的形状，共有 10000 个 28 行 28 列的三维数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_test.shape:&quot;</span>, x_test.shape)</span><br><span class="line"><span class="comment"># x_test.shape:(10000, 28, 28)</span></span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><p><code>p13_mnist_datasets.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化训练集输入特征的第一个元素</span></span><br><span class="line">plt.imshow(x_train[<span class="number">0</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)  <span class="comment"># 绘制灰度图</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出训练集输入特征的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train[0]:\n&quot;</span>, x_train[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 打印出训练集标签的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train[0]:\n&quot;</span>, y_train[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出整个训练集输入特征形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train.shape:\n&quot;</span>, x_train.shape)</span><br><span class="line"><span class="comment"># 打印出整个训练集标签的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train.shape:\n&quot;</span>, y_train.shape)</span><br><span class="line"><span class="comment"># 打印出整个测试集输入特征的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_test.shape:\n&quot;</span>, x_test.shape)</span><br><span class="line"><span class="comment"># 打印出整个测试集标签的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_test.shape:\n&quot;</span>, y_test.shape)</span><br></pre></td></tr></table></figure><h1 id="训练MNIST数据集"><a href="#训练MNIST数据集" class="headerlink" title="训练MNIST数据集"></a>训练MNIST数据集</h1><h2 id="使用-Sequential-实现手写数字识别"><a href="#使用-Sequential-实现手写数字识别" class="headerlink" title="使用 Sequential 实现手写数字识别"></a>使用 Sequential 实现手写数字识别</h2><p><code>p14_mnist_sequential.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"><span class="comment"># 输入特征归一化，使得原本0-255之间的灰度值变为0-1之间数值</span></span><br><span class="line"><span class="comment"># 输入特征的数值变小更适合神经网络吸收</span></span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建Sequential数组</span></span><br><span class="line"><span class="comment"># 先把输入特拉直为一维数组</span></span><br><span class="line"><span class="comment"># 第一层网络128个神经元</span></span><br><span class="line"><span class="comment"># 第二层网络10个神经元</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile配置训练方法</span></span><br><span class="line"><span class="comment"># 优化器选择adam</span></span><br><span class="line"><span class="comment"># 损失函数选择sparse_categorical_accuracy</span></span><br><span class="line"><span class="comment"># 输出满足概率分布，from_logits=False</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>是使用测试集测试的准确率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">60000/60000 [==============================] - 3s 48us/sample - loss: 0.0455 - sparse_categorical_accuracy: 0.9852 - val_loss: 0.0700 - val_sparse_categorical_accuracy: 0.9789</span><br><span class="line">Model: &quot;sequential&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">flatten (Flatten)            multiple                  0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                multiple                  100480    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              multiple                  1290      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 101,770</span><br><span class="line">Trainable params: 101,770</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><h2 id="使用-class-实现手写数字识别"><a href="#使用-class-实现手写数字识别" class="headerlink" title="使用 class 实现手写数字识别"></a>使用 class 实现手写数字识别</h2><p><code>p15_mnist_class.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Flatten</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MnistModel</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MnistModel, self).__init__()</span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.d1 = Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d2 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line">        y = self.d2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line"></span><br><span class="line">model = MnistModel()</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>训练时每个 step 给出的是训练集 accuracy 不具有参考价值，有实际评判价值的是 validation_freq 中设置的隔若干轮输出的测试集 accuracy。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">60000/60000 [==============================] - 3s 48us/sample - loss: 0.0440 - sparse_categorical_accuracy: 0.9869 - val_loss: 0.0836 - val_sparse_categorical_accuracy: 0.9741</span><br><span class="line">Model: &quot;mnist_model&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">flatten (Flatten)            multiple                  0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                multiple                  100480    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              multiple                  1290      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 101,770</span><br><span class="line">Trainable params: 101,770</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><h1 id="Fashion数据集"><a href="#Fashion数据集" class="headerlink" title="Fashion数据集"></a>Fashion数据集</h1><p><code>Fashion_mnis</code>t 数据集具有 <code>mnist</code> 近乎所有的特征，包括 60000 张训练图片和 10000 张测试图片，图片被分为十类，每张图像为 28×28 的分辨率。</p><p>类别如下所示：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/Fashion%E6%95%B0%E6%8D%AE%E9%9B%86%E7%B1%BB%E5%88%AB.png" class="" title="Fashion数据集类别"><p>图片示例如下：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%B8%89%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1/Fashion%E6%95%B0%E6%8D%AE%E9%9B%86%E7%A4%BA%E4%BE%8B.png" class="" title="Fashion数据集示例"><p>由于 <code>Fashion_mnist</code> 数据集和 <code>mnist</code> 数据集具有相似的属性，所以对于 <code>mnist</code> 只需讲 <code>mnist</code> 数据集的加载换成 <code>Fashion_mnist</code> 就可以训练 <code>Fashion</code> 数据集了</p><ul><li>sequential构建</li></ul><p><code>p16_fashion_sequential.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train),(x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">60000/60000 [==============================] - 3s 48us/sample - loss: 0.2981 - sparse_categorical_accuracy: 0.8900 - val_loss: 0.3429 - val_sparse_categorical_accuracy: 0.8777</span><br><span class="line">Model: &quot;sequential&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">flatten (Flatten)            multiple                  0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                multiple                  100480    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              multiple                  1290      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 101,770</span><br><span class="line">Trainable params: 101,770</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><ul><li>class构建</li></ul><p><code>p16_fashion_class.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Flatten</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train),(x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MnistModel</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MnistModel, self).__init__()</span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.d1 = Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d2 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line">        y = self.d2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = MnistModel()</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">60000/60000 [==============================] - 3s 48us/sample - loss: 0.2965 - sparse_categorical_accuracy: 0.8910 - val_loss: 0.3379 - val_sparse_categorical_accuracy: 0.8780</span><br><span class="line">Model: &quot;mnist_model&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">flatten (Flatten)            multiple                  0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                multiple                  100480    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              multiple                  1290      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 101,770</span><br><span class="line">Trainable params: 101,770</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第三讲神经网络八股</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-08-10T08:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展"><p>人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展"><a href="#人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展"></a>人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展</h1><h1 id="tf-keras-搭建神经网络八股——六步法"><a href="#tf-keras-搭建神经网络八股——六步法" class="headerlink" title="tf.keras 搭建神经网络八股——六步法"></a>tf.keras 搭建神经网络八股——六步法</h1><h2 id="六步法"><a href="#六步法" class="headerlink" title="六步法"></a>六步法</h2><p>1)import——导入所需的各种库和包<br>2)x_train, y_train——导入数据集、 自制数据集、数据增强<br>3)model=tf.keras.models.Sequential<br>/class MyModel(Model) model=MyModel——定义模型<br>4)model.compile——配置模型<br>5)model.fit——训练模型、 断点续训<br>6)model.summary——参数提取、 acc/loss 可视化、前向推理实现应用</p><h2 id="本讲的目标"><a href="#本讲的目标" class="headerlink" title="本讲的目标"></a>本讲的目标</h2><p>① 自制数据集，解决本领域应用<br>② 数据增强，扩充数据集<br>③ 断点续训，存取模型<br>④ 参数提取，把参数存入文本<br>⑤ acc/loss可视化，查看训练效果<br>⑥ 应用程序，给图识物</p><h2 id="上节代码回顾"><a href="#上节代码回顾" class="headerlink" title="上节代码回顾"></a>上节代码回顾</h2><p><code>p14_mnist_sequential.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># train test</span></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># model.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># model.fit</span></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># model.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><h1 id="1-自制数据集-解决本领域问题"><a href="#1-自制数据集-解决本领域问题" class="headerlink" title="1-自制数据集-解决本领域问题"></a>1-自制数据集-解决本领域问题</h1><p>训练集图片：<code>...\class4\MNIST_FC\mnist_image_label\mnist_test_jpg_60000</code></p><p>训练集标签：<code>...\class4\MNIST_FC\mnist_image_label\mnist_test_jpg_60000.txt</code></p><p>测试集图片：<code>...\class4\MNIST_FC\mnist_image_label\mnist_test_jpg_10000</code></p><p>测试集标签：<code>...\class4\MNIST_FC\mnist_image_label\mnist_test_jpg_10000.txt</code></p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E8%87%AA%E5%88%B6%E6%95%B0%E6%8D%AE%E9%9B%86-%E5%9B%BE%E7%89%87.png" class="" title="自制数据集-图片"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E8%87%AA%E5%88%B6%E6%95%B0%E6%8D%AE%E9%9B%86-%E6%A0%87%E7%AD%BE.png" class="" title="自制数据集-标签"><p>训练60000张图片，测试10000张图片，黑底白字的灰度图，每张图28行28列像素点，每个像素点都是0到255之间的整数，纯黑色用数值0，纯白色用255表示。</p><p>在上一讲中，导入<code>mnist</code>数据集时，看到了数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入训练和测试集</span></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># x_train.shape:(60000, 28, 28)</span></span><br><span class="line"><span class="comment"># y_train.shape:(60000,)</span></span><br><span class="line"><span class="comment"># x_test.shape:(10000, 28, 28)</span></span><br><span class="line"><span class="comment"># y_test.shape:(10000,)</span></span><br></pre></td></tr></table></figure><h2 id="def-generateds-图片路径-标签文件-定义数据集"><a href="#def-generateds-图片路径-标签文件-定义数据集" class="headerlink" title="def generateds(图片路径, 标签文件) 定义数据集"></a>def generateds(图片路径, 标签文件) 定义数据集</h2><p>标签文件<code>mnist_train_jpg_xxxxx.txt</code>:</p><div class="table-container"><table><thead><tr><th style="text-align:center">value[0]</th><th style="text-align:center">value[1]</th></tr></thead><tbody><tr><td style="text-align:center">0_5.jpg</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">1_0.jpg</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2_4.jpg</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">3_1.jpg</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4_9.jpg</td><td style="text-align:center">9</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generateds</span>(<span class="params">path, txt</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(txt, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    contents = f.readlines()  <span class="comment"># 按行读取</span></span><br><span class="line">    f.close()</span><br><span class="line">    x, y_ = [], []</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">        value = content.split()  <span class="comment"># 以空格分开，存入数组</span></span><br><span class="line">        img_path = path + value[<span class="number">0</span>]<span class="comment"># 存储图片路径</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)<span class="comment"># 打开图片</span></span><br><span class="line">        img = np.array(img.convert(<span class="string">&#x27;L&#x27;</span>))<span class="comment"># 图片转为数组</span></span><br><span class="line">        img = img / <span class="number">255.</span><span class="comment"># 归一化</span></span><br><span class="line">        x.append(img)</span><br><span class="line">        y_.append(value[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loading : &#x27;</span> + content)<span class="comment"># 打印状态提示</span></span><br><span class="line"></span><br><span class="line">    x = np.array(x)</span><br><span class="line">    y_ = np.array(y_)</span><br><span class="line">    y_ = y_.astype(np.int64)</span><br><span class="line">    <span class="keyword">return</span> x, y_</span><br></pre></td></tr></table></figure><h2 id="自生成数据集完整代码"><a href="#自生成数据集完整代码" class="headerlink" title="自生成数据集完整代码"></a>自生成数据集完整代码</h2><p><code>P8_fashion_train_ex1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1-impirt</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">train_path = <span class="string">&#x27;./fashion_image_label/fashion_train_jpg_60000/&#x27;</span></span><br><span class="line">train_txt = <span class="string">&#x27;./fashion_image_label/fashion_train_jpg_60000.txt&#x27;</span></span><br><span class="line">x_train_savepath = <span class="string">&#x27;./fashion_image_label/fashion_x_train.npy&#x27;</span></span><br><span class="line">y_train_savepath = <span class="string">&#x27;./fashion_image_label/fahion_y_train.npy&#x27;</span></span><br><span class="line"></span><br><span class="line">test_path = <span class="string">&#x27;./fashion_image_label/fashion_test_jpg_10000/&#x27;</span></span><br><span class="line">test_txt = <span class="string">&#x27;./fashion_image_label/fashion_test_jpg_10000.txt&#x27;</span></span><br><span class="line">x_test_savepath = <span class="string">&#x27;./fashion_image_label/fashion_x_test.npy&#x27;</span></span><br><span class="line">y_test_savepath = <span class="string">&#x27;./fashion_image_label/fashion_y_test.npy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateds</span>(<span class="params">path, txt</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(txt, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    contents = f.readlines()  <span class="comment"># 按行读取</span></span><br><span class="line">    f.close()</span><br><span class="line">    x, y_ = [], []</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">        value = content.split()  <span class="comment"># 以空格分开，存入数组</span></span><br><span class="line">        img_path = path + value[<span class="number">0</span>]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        img = np.array(img.convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">        img = img / <span class="number">255.</span></span><br><span class="line">        x.append(img)</span><br><span class="line">        y_.append(value[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loading : &#x27;</span> + content)</span><br><span class="line"></span><br><span class="line">    x = np.array(x)</span><br><span class="line">    y_ = np.array(y_)</span><br><span class="line">    y_ = y_.astype(np.int64)</span><br><span class="line">    <span class="keyword">return</span> x, y_</span><br><span class="line"></span><br><span class="line"><span class="comment">### 2-train test</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(x_train_savepath) <span class="keyword">and</span> os.path.exists(y_train_savepath) <span class="keyword">and</span> os.path.exists(</span><br><span class="line">        x_test_savepath) <span class="keyword">and</span> os.path.exists(y_test_savepath):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------Load Datasets-----------------&#x27;</span>)</span><br><span class="line">    x_train_save = np.load(x_train_savepath)</span><br><span class="line">    y_train = np.load(y_train_savepath)</span><br><span class="line">    x_test_save = np.load(x_test_savepath)</span><br><span class="line">    y_test = np.load(y_test_savepath)</span><br><span class="line">    x_train = np.reshape(x_train_save, (<span class="built_in">len</span>(x_train_save), <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    x_test = np.reshape(x_test_save, (<span class="built_in">len</span>(x_test_save), <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------Generate Datasets-----------------&#x27;</span>)</span><br><span class="line">    x_train, y_train = generateds(train_path, train_txt)</span><br><span class="line">    x_test, y_test = generateds(test_path, test_txt)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------Save Datasets-----------------&#x27;</span>)</span><br><span class="line">    x_train_save = np.reshape(x_train, (<span class="built_in">len</span>(x_train), -<span class="number">1</span>))</span><br><span class="line">    x_test_save = np.reshape(x_test, (<span class="built_in">len</span>(x_test), -<span class="number">1</span>))</span><br><span class="line">    np.save(x_train_savepath, x_train_save)</span><br><span class="line">    np.save(y_train_savepath, y_train)</span><br><span class="line">    np.save(x_test_savepath, x_test_save)</span><br><span class="line">    np.save(y_test_savepath, y_test)</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3-models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4-model.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5-model.fit</span></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 6-model.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>运行过程时，会生成<code>generateds()</code>函数制作了<code>.npy</code>格式的数据集，数据集生成好后，程序开始执行训练过程，随着迭代轮数的增加，识别准确率在不断提升。</p><p>当第一次运行完毕后，再次运行，程序直接加载数据集，执行训练过程。</p><h1 id="2-数据增强-扩充数据集"><a href="#2-数据增强-扩充数据集" class="headerlink" title="2-数据增强-扩充数据集"></a>2-数据增强-扩充数据集</h1><p>对图像的增强，就是对图像的形变，用来应对因拍照角度不同引起的图片变形</p><h2 id="TensorFlow2数据增强函数："><a href="#TensorFlow2数据增强函数：" class="headerlink" title="TensorFlow2数据增强函数："></a>TensorFlow2数据增强函数：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_gen_train=tf.keras.preprocessing.image.ImageDataGenerator(增强方法)</span><br><span class="line">image_gen_train.fit(x_train)</span><br></pre></td></tr></table></figure><ul><li>常用增强方法</li></ul><p>缩放系数： <code>rescale</code> = 所有数据将乘以提供的值<br>随机旋转： <code>rotation_range</code> = 随机旋转角度数范围<br>宽度偏移： <code>width_shift_range</code> = 随机宽度偏移量<br>高度偏移： <code>height_shift_range</code> = 随机高度偏移量<br>水平翻转： <code>horizontal_flip</code> = 是否水平随机翻转<br>随机缩放： <code>zoom_range</code> = 随机缩放的范围 [1-n, 1+n]</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">image_gen_train = ImageDataGenerator(</span><br><span class="line">rescale=<span class="number">1.</span>/<span class="number">255</span>, <span class="comment">#原像素值 0～255 归至 0～1</span></span><br><span class="line">rotation_range=<span class="number">45</span>, <span class="comment">#随机 45 度旋转</span></span><br><span class="line">width_shift_range=<span class="number">.15</span>, <span class="comment">#随机宽度偏移 [-0.15,0.15)</span></span><br><span class="line">height_shift_range=<span class="number">.15</span>, <span class="comment">#随机高度偏移 [-0.15,0.15)</span></span><br><span class="line">horizontal_flip=<span class="literal">True</span>, <span class="comment">#随机水平翻转</span></span><br><span class="line">zoom_range=<span class="number">0.5</span> <span class="comment">#随机缩放到 [1-50％， 1+50%]</span></span><br><span class="line">image_gen_train.fit(x_train)</span><br></pre></td></tr></table></figure><p>由于<code>image_gen_train.fit()</code>需要输入四维数据，需要对<code>x_train</code>进行reshape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># (60000, 28, 28) → (60000, 28, 28, 1)</span></span><br><span class="line"><span class="comment"># 四位数的1，表示单通道，是灰度值</span></span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, ……)</span><br><span class="line"><span class="comment"># ↓</span></span><br><span class="line">model.fit(image_gen_train.flow(x_train, y_train, batch_size=<span class="number">32</span>), ……)</span><br></pre></td></tr></table></figure><blockquote><p>1、 model.fit(x_train,y_train,batch_size=32,……)变为model.fit(image_gen_train.flow(x_train, y_train,batch_size=32), ……)；<br>2、数据增强函数的输入要求是 4 维，通过 reshape 调整；<br>3、如果报错：缺少scipy 库， pip install scipy 即可。</p></blockquote><h2 id="数据增强代码"><a href="#数据增强代码" class="headerlink" title="数据增强代码"></a>数据增强代码</h2><p><code>p13_fashion_train_ex2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2-train test</span></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  <span class="comment"># 给数据增加一个维度，使数据和网络结构匹配</span></span><br><span class="line"></span><br><span class="line">image_gen_train = ImageDataGenerator(</span><br><span class="line">    rescale=<span class="number">1.</span> / <span class="number">1.</span>,  <span class="comment"># 如为图像，分母为255时，可归至0～1</span></span><br><span class="line">    rotation_range=<span class="number">45</span>,  <span class="comment"># 随机45度旋转</span></span><br><span class="line">    width_shift_range=<span class="number">.15</span>,  <span class="comment"># 宽度偏移</span></span><br><span class="line">    height_shift_range=<span class="number">.15</span>,  <span class="comment"># 高度偏移</span></span><br><span class="line">    horizontal_flip=<span class="literal">True</span>,  <span class="comment"># 水平翻转</span></span><br><span class="line">    zoom_range=<span class="number">0.5</span>  <span class="comment"># 将图像随机缩放阈量50％</span></span><br><span class="line">)</span><br><span class="line">image_gen_train.fit(x_train)</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3-models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4-models.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">### model.fit</span></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line">model.fit(image_gen_train.flow(x_train, y_train, batch_size=<span class="number">32</span>), epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>)</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### model.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>数据增强在小数据量上可以增加模型泛化性，在实际应用模型时能体现出效果。</p><p>标准minist数据集单单从准确率上是看不出来模型效果的。</p><h1 id="3-断点续训-存取模型"><a href="#3-断点续训-存取模型" class="headerlink" title="3-断点续训-存取模型"></a>3-断点续训-存取模型</h1><h2 id="读取模型"><a href="#读取模型" class="headerlink" title="读取模型"></a>读取模型</h2><p><code>load_weights(路径文件名)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/mnist.ckpt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------Load the model-----------------&#x27;</span>)</span><br><span class="line">model.load_weights(checkpoint_save_path)</span><br></pre></td></tr></table></figure><h2 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h2><p>借助 <code>tensorflow</code> 给出的回调函数，直接保存参数和网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.callbacks.ModelChcekpoint(</span><br><span class="line">filepath = 路径文件名,</span><br><span class="line">save_weights_only = <span class="literal">True</span>/<span class="literal">False</span>,</span><br><span class="line">monitor = <span class="string">&#x27;val_loss&#x27;</span>, <span class="comment"># val_loss or loss</span></span><br><span class="line">save_best_only = <span class="literal">True</span>/<span class="literal">False</span>)</span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>,</span><br><span class="line">validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,</span><br><span class="line">callbacks=[cp_callback])</span><br></pre></td></tr></table></figure><p>注： <code>monitor</code> 配合 <code>save_best_only</code> 可以保存最优模型，包括：训练损失最小模型、测试损失最小模型、训练准确率最高模型、测试准确率最高模型等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path, save_weights_only=<span class="literal">True</span>, save_best_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>, callbacks=[cp_callback])</span><br></pre></td></tr></table></figure><h2 id="断点续训代码"><a href="#断点续训代码" class="headerlink" title="断点续训代码"></a>断点续训代码</h2><p><code>p16_fashion_train_ex3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2-train test</span></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3-models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4-models.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/fashion.ckpt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path, save_weights_only=<span class="literal">True</span>, save_best_only=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 5-models.history</span></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 6-models.summary</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>运行第一次会生成<code>checkpoint</code>文件夹，再次运行会在前一次训练结果上继续</p><h1 id="4-参数提取-把参数存入文本"><a href="#4-参数提取-把参数存入文本" class="headerlink" title="4-参数提取-把参数存入文本"></a>4-参数提取-把参数存入文本</h1><p>返回模型中可训练的参数：<code>model.trainable_variables</code></p><blockquote><p>直接print，中间有很多数据被省略号替换掉.</p></blockquote><p>设置print输出格式：<code>np.set_printoptions(threshold = 超过多少省略显示)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.set_printoptions(threshold = np.inf) <span class="comment">#np.inf表示无限大</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.set_printoptions(</span><br><span class="line">precision=小数点后按四舍五入保留几位,</span><br><span class="line">threshold=数组元素数量少于或等于门槛值, 打印全部元素;否则打印门槛值+<span class="number">1</span>个元素, 中间用省略号补充)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.set_printoptions(precision=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(np.array([<span class="number">1.123456789</span>]))</span><br><span class="line">[<span class="number">1.12346</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.set_printoptions(threshold=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(np.arange(<span class="number">10</span>))</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> … , <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>注： <code>precision=np.inf</code> 打印完整小数位； <code>threshold=np.nan</code> 打印全部数组元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.trainable_variables)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>在断点续训基础上增加参数提取功能</p><p><code>p19_fashion_train_ex4.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"><span class="comment">################## ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2-train test</span></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3-models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4-models.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/fashion.ckpt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5-models.fit</span></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,</span><br><span class="line">                    callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 6-models.summary</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="built_in">print</span>(model.trainable_variables)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"><span class="comment">####################</span></span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E5%8F%82%E6%95%B0%E6%8F%90%E5%8F%96-%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.png" class="" title="参数提取-打印结果"><h1 id="5-acc-loss可视化-查看训练效果"><a href="#5-acc-loss可视化-查看训练效果" class="headerlink" title="5-acc/loss可视化-查看训练效果"></a>5-acc/loss可视化-查看训练效果</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history=model.fit(</span><br><span class="line">训练集数据,</span><br><span class="line">训练集标签,</span><br><span class="line">batch_size = ,</span><br><span class="line">epochs = ,</span><br><span class="line">validation_split = 用作测试数据的比例,</span><br><span class="line">validation_data = 测试集,</span><br><span class="line">validation_freq = 测试频率)</span><br></pre></td></tr></table></figure><p>在<code>model.fit</code>执行训练过程时，同步记录了：</p><p><code>loss</code>：训练集 loss<br><code>val_loss</code>：测试集 loss<br><code>sparse_categorical_accuracy</code>：训练集准确率<br><code>val_sparse_categorical_accuracy</code>：测试集准确率</p><p>可以使用<code>history.history</code>提取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br></pre></td></tr></table></figure><p>画图的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)<span class="comment"># 将图像分为1行2列，画出第1列</span></span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)<span class="comment"># 将图像分为1行2列，画出第2列</span></span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>acc/loss可视化在第4部分基础上增加绘图plt模块和绘图代码</p><p><code>p23_fashion_train_ex5.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1-import</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 2-train test</span></span><br><span class="line">fashion = tf.keras.datasets.fashion_mnist</span><br><span class="line">(x_train, y_train), (x_test, y_test) = fashion.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3-models.Sequential</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4-models.compile</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/fashion.ckpt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path, save_weights_only=<span class="literal">True</span>, save_best_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5-models.fit</span></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5-models.summary</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.trainable_variables)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/acc_loss%E5%8F%AF%E8%A7%86%E5%8C%96.png" class="" title="acc_loss可视化"><h1 id="6-应用程序-给图识物"><a href="#6-应用程序-给图识物" class="headerlink" title="6-应用程序-给图识物"></a>6-应用程序-给图识物</h1><p>输入一张手写数字图片：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E8%BE%93%E5%85%A5%E4%B8%80%E5%BC%A0%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%9B%BE%E7%89%87.png" class="" title="输入一张手写数字图片"><p>输出识别结果：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%9B%9B%E8%AE%B2%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/%E8%BE%93%E5%87%BA%E8%AF%86%E5%88%AB%E7%BB%93%E6%9E%9C.png" class="" title="输出识别结果"><p>向前传播执行应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict(输入特征, batch_size = 整数)<span class="comment">#返回向前传播计算结果</span></span><br></pre></td></tr></table></figure><p>注： predict 参数详解。<br>(1)<code>x</code>： 输入数据， Numpy 数组（或者 Numpy 数组的列表，如果模型有多个输出）；<br>(2)<code>batch_size</code>： 整数，由于 GPU 的特性， batch_size最好选用 8， 16， 32， 64……， 如果未指定，默认为 32；<br>(3)<code>verbose</code>: 日志显示模式， 0 或 1；<br>(4)<code>steps</code>: 声明预测结束之前的总步数（批次样本）， 默认值 None；<br>(5)<code>返回</code>：预测的 Numpy 数组（或数组列表）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1-复现模型(向前传播)</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">tf.keras.layers.Flatten(),</span><br><span class="line">tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax’)])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2-加载参数</span></span><br><span class="line"><span class="string">model.load_weights(model_save_path)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3-预测结果</span></span><br><span class="line"><span class="string">result = model.predict(x_predict)</span></span><br></pre></td></tr></table></figure><p>案例代码：</p><p><code>p27_fashion_app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> = [<span class="string">&#x27;T-shirt/top&#x27;</span>, <span class="string">&#x27;Trouser&#x27;</span>, <span class="string">&#x27;Pullover&#x27;</span>, <span class="string">&#x27;Dress&#x27;</span>, <span class="string">&#x27;Coat&#x27;</span>, <span class="string">&#x27;Sandal&#x27;</span>, <span class="string">&#x27;Shirt&#x27;</span>, <span class="string">&#x27;Sneaker&#x27;</span>, <span class="string">&#x27;Bag&#x27;</span>, <span class="string">&#x27;Ankle boot&#x27;</span>]</span><br><span class="line"></span><br><span class="line">model_save_path = <span class="string">&#x27;./checkpoint/fashion.ckpt&#x27;</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line">                                        </span><br><span class="line">model.load_weights(model_save_path)</span><br><span class="line"></span><br><span class="line">preNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input the number of test pictures:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(preNum):</span><br><span class="line">    image_path = <span class="built_in">input</span>(<span class="string">&quot;the path of test picture:&quot;</span>)</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    img=img.resize((<span class="number">28</span>,<span class="number">28</span>),Image.ANTIALIAS)</span><br><span class="line">    img_arr = np.array(img.convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    img_arr = <span class="number">255</span> - img_arr  <span class="comment">#每个像素点= 255 - 各自点当前灰度值，颜色取反</span></span><br><span class="line">    </span><br><span class="line">    img_arr = img_arr/<span class="number">255.0</span></span><br><span class="line">    x_predict = img_arr[tf.newaxis,...]</span><br><span class="line"></span><br><span class="line">    result = model.predict(x_predict)</span><br><span class="line">    pred=tf.argmax(result, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>[<span class="built_in">int</span>(pred)])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第四讲网络八股扩展</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-10-03T14:12:36.554Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络"><p>人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络"><a href="#人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络"></a>人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络</h1><p>通过脑记忆体提取历史数据的特征，预测出接下来最可能发生的情况。</p><h1 id="循环核"><a href="#循环核" class="headerlink" title="循环核"></a>循环核</h1><p>参数时间共享，循环层提取时间信息。</p><p>循环核具有记忆力，通过不同时刻的参数共享，实现了对时间序列的信息提取。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/RNN%E5%BE%AA%E7%8E%AF%E6%A0%B8.png" class="" title="RNN循环核"><p>前向传播时：记忆体内存储的状态信息ht ，在每个时刻都被刷新，三个参数矩阵wxh whh why自始至终都是固定不变的。<br>反向传播时：三个参数矩阵wxh whh why被梯度下降法更新。</p><script type="math/tex; mode=display">y_{t} = softmax( h_{t} w_{hy} + by)</script><script type="math/tex; mode=display">h_{t} = tanh( x_{t} w_{xh} + h_{t-1} w_{hh} + bh)</script><p>可以设定记忆体个数，改变记忆体容量，当记忆体个数被指定，输入xt、输出yt维度被指定，周围这些待训练参数的维度也就被限定了。<br>记忆体内存储着每个时刻的状态信息ht，记忆体当前时刻存储的状态信息ht等于当前时刻的输入特征xt乘以矩阵wxh加上记忆体上一时刻存储的状态信息ht-1乘以矩阵whh再加上偏置项bh，他们的和过tanh激活函数。<br>当前时刻循环核的输出特征yt等于记忆体内存储的状态信息ht乘以矩阵why，再加上偏置项by，过softmax激活函数，实际上是一层全连接。<br>在前向传播时，记忆体内存储的状态信息ht，在每个时刻都被刷新，三个参数矩阵wxh、whh和why自始至终都是固定不变的。<br>只有反向传播时候，三个参数矩阵wxh、whh、why被梯度下降法更新，</p><h1 id="循环核时间步展开"><a href="#循环核时间步展开" class="headerlink" title="循环核时间步展开"></a>循环核时间步展开</h1><p>按照时间步骤展开，就是把循环核按照时间轴方向展开，如下图所示。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/RNN%E5%BE%AA%E7%8E%AF%E6%A0%B8%E6%8C%89%E6%97%B6%E9%97%B4%E6%AD%A5%E5%B1%95%E5%BC%80.png" class="" title="RNN循环核按时间步展开"><p>每个时刻记忆体状态信息ht被刷新，记忆体周围的参数矩阵wxh、whh和why是固定不变的，我们训练优化的就是这些参数矩阵。</p><p>训练完成后，使用效果最好的参数矩阵，执行前向传播，输出预测结果。</p><p>人类脑中的记忆体每时每刻都根据当前的输入而更新，当前的预测推理，是根据你以往的知识积累，用固化下来的参数矩阵进行的推理判断，循环神经网络就是借助循环核实现的时间特征提取，再把提取到的信息送入全连接网络，实现连续数据的预测，yt是整个循环网络的末层，从公式来看，就是一个全连接网络，借助全连接网络，实现连续数据预测。</p><h1 id="循环计算层"><a href="#循环计算层" class="headerlink" title="循环计算层"></a>循环计算层</h1><p>每个循环核构成一层循环计算层，循环计算层的层数是向输出方向增长的。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%BE%AA%E7%8E%AF%E8%AE%A1%E7%AE%97%E5%B1%82.png" class="" title="循环计算层"><p>左图的网络有一个循环核，构成了一层循环计算层；<br>中图的网络有两个循环核，构成了两层循环计算层；<br>右图的网络有三个循环核，构成了三层循环计算层。<br>其中，三个网络中每个循环核中记忆体的个数可以根据我们的需求任意指定。</p><h1 id="TF描述循环计算层"><a href="#TF描述循环计算层" class="headerlink" title="TF描述循环计算层"></a>TF描述循环计算层</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.SimpleRNN(记忆体个数, activation=‘激活函数’, return_sequences=是否每个时刻输出ht到下一层)</span><br></pre></td></tr></table></figure><p>activation=‘激活函数’ （不写，默认使用tanh）<br>return_sequences=True 各时间步输出ht<br>return_sequences=False 仅最后时间步输出ht（默认）</p><p>例： SimpleRNN(3, return_sequences=True)，定义了一个具有三个记忆体的循环核，这个循环核会在每个时间步输出ht。</p><p>循环核在每个实践步输出ht，可以用这张图表示：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/return_sequences=True.png" class="" title="return_sequences&#x3D;True"><p>循环核仅在最后一个时间步输出ht，可以用这张图表示：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/return_sequences=False.png" class="" title="return_sequences&#x3D;False"><p>API对送入循环层的数据维度是有要求的，要求送入循环层的数据是三维的，第一维是送入样本的总数量，第二维是循环核按时间展开的步数，第三维是每个时间步输入特征的个数。</p><p><strong> 入RNN时， x_train维度：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数] </strong></p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/RNN%E5%B1%82%E8%BE%93%E5%85%A5%E7%BB%B4%E5%BA%A6.png" class="" title="RNN层输入维度"><p>左图一共要送入RNN层两组数据，每组数据经过一个时间步就会得到输出结果，每个时间步送入三个数值，输入循环层的数据维度就是 [2, 1, 3] 。</p><p>右图只有一组数据，分四个时间步送入循环层，每个时间步送入输入两个数值，输入循环层的数据维度就是 [1, 4, 2] 。</p><h1 id="循环计算过程I"><a href="#循环计算过程I" class="headerlink" title="循环计算过程I"></a>循环计算过程I</h1><p>字母预测：输入a预测出b，输入b预测出c，输入c预测出d，输入d预测出e，输入e预测出a。</p><p>神经网络的输入都是数字，所以我们先要把用到的 a b c d e 这五个字母，用数字表示出来，最简单直接的方法就是用独热码对这五个字母编码。</p><div class="table-container"><table><thead><tr><th style="text-align:center">词向量空间</th><th style="text-align:center">词向量空间</th></tr></thead><tbody><tr><td style="text-align:center">10000</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">01000</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">00100</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">00010</td><td style="text-align:center">d</td></tr><tr><td style="text-align:center">00001</td><td style="text-align:center">e</td></tr></tbody></table></div><p>随机生成了Wxh、Whh和Why三个参数矩阵，记忆体的个数选取3，记忆体状态信息ht等于xt乘以wxh加上ht-1乘以whh加上bh，再过tanh激活函数。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%BE%AA%E7%8E%AF%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-1.png" class="" title="循环计算过程-1"><p>当前输入xt[0, 1, 0, 0, 0]乘以黄色的参数矩阵wxh，得到[-2.3 0.8 1.1]，上一时刻，也就是最开始时，记忆体状态信息等于0，所以这里加上0，再加上偏置矩阵bh，[0.5 0.3 -0.2]，过tanh激活函数后，得到当前时刻的状态信息ht，记忆体存储状态信息被刷新为[-0.9 0.8 0.7]</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%BE%AA%E7%8E%AF%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-2.png" class="" title="循环计算过程-2"><p>这个过程可以认为脑中的记忆因为当前输入的事物而更新了。</p><p>输出yt是把提取到的时间信息，通过全连接进行识别预测的过程，是整个网络的输出层。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%BE%AA%E7%8E%AF%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-3.png" class="" title="循环计算过程-3"><h1 id="用RNN实现输入一个字母，预测下一个字母（One-hot-编码）"><a href="#用RNN实现输入一个字母，预测下一个字母（One-hot-编码）" class="headerlink" title="用RNN实现输入一个字母，预测下一个字母（One hot 编码）"></a>用RNN实现输入一个字母，预测下一个字母（One hot 编码）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, SimpleRNN</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_word = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">w_to_id = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">4</span>&#125;  <span class="comment"># 单词映射到数值id的词典</span></span><br><span class="line">id_to_onehot = &#123;<span class="number">0</span>: [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">1</span>: [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">2</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">3</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">                <span class="number">4</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]&#125;  <span class="comment"># id编码为one-hot</span></span><br><span class="line"></span><br><span class="line">x_train = [id_to_onehot[w_to_id[<span class="string">&#x27;a&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;b&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;c&#x27;</span>]],</span><br><span class="line">           id_to_onehot[w_to_id[<span class="string">&#x27;d&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;e&#x27;</span>]]]</span><br><span class="line">y_train = [w_to_id[<span class="string">&#x27;b&#x27;</span>], w_to_id[<span class="string">&#x27;c&#x27;</span>], w_to_id[<span class="string">&#x27;d&#x27;</span>], w_to_id[<span class="string">&#x27;e&#x27;</span>], w_to_id[<span class="string">&#x27;a&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入，送入样本数为len(x_train)；输入1个字母出结果，循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class="line">x_train = np.reshape(x_train, (<span class="built_in">len</span>(x_train), <span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    SimpleRNN(<span class="number">3</span>),</span><br><span class="line">    Dense(<span class="number">5</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.01</span>),</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/rnn_onehot_1pre1.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;loss&#x27;</span>)  <span class="comment"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">100</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(model.trainable_variables)</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">############### predict #############</span></span><br><span class="line"></span><br><span class="line">preNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(preNum):</span><br><span class="line">    alphabet1 = <span class="built_in">input</span>(<span class="string">&quot;input test alphabet:&quot;</span>)</span><br><span class="line">    alphabet = [id_to_onehot[w_to_id[alphabet1]]]</span><br><span class="line">    <span class="comment"># 使alphabet符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。此处验证效果送入了1个样本，送入样本数为1；输入1个字母出结果，所以循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class="line">    alphabet = np.reshape(alphabet, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    result = model.predict([alphabet])</span><br><span class="line">    pred = tf.argmax(result, axis=<span class="number">1</span>)</span><br><span class="line">    pred = <span class="built_in">int</span>(pred)</span><br><span class="line">    tf.<span class="built_in">print</span>(alphabet1 + <span class="string">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure><h1 id="用RNN实现输入四个字母，预测下一个字母（One-hot-编码）"><a href="#用RNN实现输入四个字母，预测下一个字母（One-hot-编码）" class="headerlink" title="用RNN实现输入四个字母，预测下一个字母（One hot 编码）"></a>用RNN实现输入四个字母，预测下一个字母（One hot 编码）</h1><p>每个时刻内，参数矩阵是固定的，记忆体会在每个时刻被更新。</p><p>第一个时刻：b输入[0, 1, 0, 0, 0]，记忆体更新为[-0.9, 0.2, 0.2]</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%97%B6%E5%88%BB.png" class="" title="第一个时刻"><p>第二个时刻：c输入[0, 0, 1, 0, 0]，记忆体更新[0.8, 1.0, 0.8]</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%97%B6%E5%88%BB.png" class="" title="第二个时刻"><p>第三个时刻：d输入[0, 0, 0, 1, 0]，记忆体更新为[0.6, 0.5,- 1.0]</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E4%B8%AA%E6%97%B6%E5%88%BB.png" class="" title="第三个时刻"><p>第四个时刻：e输入[0, 0, 0, 0, 1]，记忆体更新为[-1.0, -1.0, 0.8]</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E5%9B%9B%E4%B8%AA%E6%97%B6%E5%88%BB.png" class="" title="第四个时刻"><p>四个时间步骤中，所用到的参数矩阵wxh核偏置项bh数值是相同的，输出预测通过全连接完成，带入yt计算公式，得到[0.71 0.14 0.10 0.05 0.00]，输出预测结果为a。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%94%E4%B8%AA%E6%97%B6%E5%88%BB%E8%BE%93%E5%87%BA.png" class="" title="第五个时刻输出"><p>因为输入的是e，下一个是e可能性最小。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>输入abcd输出e<br>输入bcde输出a<br>输入cdea输出b<br>输入deab输出c<br>输入eabc输出d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, SimpleRNN</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_word = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">w_to_id = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">4</span>&#125;  <span class="comment"># 单词映射到数值id的词典</span></span><br><span class="line">id_to_onehot = &#123;<span class="number">0</span>: [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">1</span>: [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">2</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>], <span class="number">3</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">                <span class="number">4</span>: [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]&#125;  <span class="comment"># id编码为one-hot</span></span><br><span class="line"></span><br><span class="line">x_train = [</span><br><span class="line">    [id_to_onehot[w_to_id[<span class="string">&#x27;a&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;b&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;c&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;d&#x27;</span>]]],</span><br><span class="line">    [id_to_onehot[w_to_id[<span class="string">&#x27;b&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;c&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;d&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;e&#x27;</span>]]],</span><br><span class="line">    [id_to_onehot[w_to_id[<span class="string">&#x27;c&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;d&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;e&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;a&#x27;</span>]]],</span><br><span class="line">    [id_to_onehot[w_to_id[<span class="string">&#x27;d&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;e&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;a&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;b&#x27;</span>]]],</span><br><span class="line">    [id_to_onehot[w_to_id[<span class="string">&#x27;e&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;a&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;b&#x27;</span>]], id_to_onehot[w_to_id[<span class="string">&#x27;c&#x27;</span>]]],</span><br><span class="line">]</span><br><span class="line">y_train = [w_to_id[<span class="string">&#x27;e&#x27;</span>], w_to_id[<span class="string">&#x27;a&#x27;</span>], w_to_id[<span class="string">&#x27;b&#x27;</span>], w_to_id[<span class="string">&#x27;c&#x27;</span>], w_to_id[<span class="string">&#x27;d&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入，送入样本数为len(x_train)；输入4个字母出结果，循环核时间展开步数为4; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class="line">x_train = np.reshape(x_train, (<span class="built_in">len</span>(x_train), <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    SimpleRNN(<span class="number">3</span>),</span><br><span class="line">    Dense(<span class="number">5</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.01</span>),</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/rnn_onehot_4pre1.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;loss&#x27;</span>)  <span class="comment"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">100</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(model.trainable_variables)</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">############### predict #############</span></span><br><span class="line"></span><br><span class="line">preNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(preNum):</span><br><span class="line">    alphabet1 = <span class="built_in">input</span>(<span class="string">&quot;input test alphabet:&quot;</span>)</span><br><span class="line">    alphabet = [id_to_onehot[w_to_id[a]] <span class="keyword">for</span> a <span class="keyword">in</span> alphabet1]</span><br><span class="line">    <span class="comment"># 使alphabet符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。此处验证效果送入了1个样本，送入样本数为1；输入4个字母出结果，所以循环核时间展开步数为4; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class="line">    alphabet = np.reshape(alphabet, (<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">    result = model.predict([alphabet])</span><br><span class="line">    pred = tf.argmax(result, axis=<span class="number">1</span>)</span><br><span class="line">    pred = <span class="built_in">int</span>(pred)</span><br><span class="line">    tf.<span class="built_in">print</span>(alphabet1 + <span class="string">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure><h1 id="Embedding-一种编码方法"><a href="#Embedding-一种编码方法" class="headerlink" title="Embedding-一种编码方法"></a>Embedding-一种编码方法</h1><p>独热码：数据量大 过于稀疏，映射之间是独立的，没有表现出关联性</p><p>Embedding：是一种单词编码方法，用低维向量实现了编码，这种编码通过神经网络训练优化，能表达出单词间的相关性。</p><p><code>tf.keras.layers.Embedding(词汇表大小, 编码维度)</code></p><p>编码维度就是用几个数字表达一个单词</p><p>对1-100进行编码， [4] 编码为 [0.25, 0.1, 0.11]<br>例 ： <code>tf.keras.layers.Embedding(100, 3)</code></p><p>入Embedding时， x_train维度：<br><code>[送入样本数, 循环核时间展开步数]</code></p><h1 id="用RNN实现输入一个字母，预测下一个字母（Embedding-编码）"><a href="#用RNN实现输入一个字母，预测下一个字母（Embedding-编码）" class="headerlink" title="用RNN实现输入一个字母，预测下一个字母（Embedding 编码）"></a>用RNN实现输入一个字母，预测下一个字母（Embedding 编码）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, SimpleRNN, Embedding</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_word = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">w_to_id = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">4</span>&#125;  <span class="comment"># 单词映射到数值id的词典</span></span><br><span class="line"></span><br><span class="line">x_train = [w_to_id[<span class="string">&#x27;a&#x27;</span>], w_to_id[<span class="string">&#x27;b&#x27;</span>], w_to_id[<span class="string">&#x27;c&#x27;</span>], w_to_id[<span class="string">&#x27;d&#x27;</span>], w_to_id[<span class="string">&#x27;e&#x27;</span>]]</span><br><span class="line">y_train = [w_to_id[<span class="string">&#x27;b&#x27;</span>], w_to_id[<span class="string">&#x27;c&#x27;</span>], w_to_id[<span class="string">&#x27;d&#x27;</span>], w_to_id[<span class="string">&#x27;e&#x27;</span>], w_to_id[<span class="string">&#x27;a&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合Embedding输入要求：[送入样本数， 循环核时间展开步数] ，</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入所以送入，送入样本数为len(x_train)；输入1个字母出结果，循环核时间展开步数为1。</span></span><br><span class="line">x_train = np.reshape(x_train, (<span class="built_in">len</span>(x_train), <span class="number">1</span>))</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    Embedding(<span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">    SimpleRNN(<span class="number">3</span>),</span><br><span class="line">    Dense(<span class="number">5</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.01</span>),</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/run_embedding_1pre1.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;loss&#x27;</span>)  <span class="comment"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">100</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(model.trainable_variables)</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">############### predict #############</span></span><br><span class="line"></span><br><span class="line">preNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(preNum):</span><br><span class="line">    alphabet1 = <span class="built_in">input</span>(<span class="string">&quot;input test alphabet:&quot;</span>)</span><br><span class="line">    alphabet = [w_to_id[alphabet1]]</span><br><span class="line">    <span class="comment"># 使alphabet符合Embedding输入要求：[送入样本数， 循环核时间展开步数]。</span></span><br><span class="line">    <span class="comment"># 此处验证效果送入了1个样本，送入样本数为1；输入1个字母出结果，循环核时间展开步数为1。</span></span><br><span class="line">    alphabet = np.reshape(alphabet, (<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    result = model.predict(alphabet)</span><br><span class="line">    pred = tf.argmax(result, axis=<span class="number">1</span>)</span><br><span class="line">    pred = <span class="built_in">int</span>(pred)</span><br><span class="line">    tf.<span class="built_in">print</span>(alphabet1 + <span class="string">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure><h1 id="用RNN实现输入四个字母，预测下一个字母（Embedding-编码）"><a href="#用RNN实现输入四个字母，预测下一个字母（Embedding-编码）" class="headerlink" title="用RNN实现输入四个字母，预测下一个字母（Embedding 编码）"></a>用RNN实现输入四个字母，预测下一个字母（Embedding 编码）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, SimpleRNN, Embedding</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_word = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">w_to_id = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">           <span class="string">&#x27;f&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">9</span>,</span><br><span class="line">           <span class="string">&#x27;k&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">14</span>,</span><br><span class="line">           <span class="string">&#x27;p&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">           <span class="string">&#x27;u&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">25</span>&#125;  <span class="comment"># 单词映射到数值id的词典</span></span><br><span class="line"></span><br><span class="line">training_set_scaled = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>,</span><br><span class="line">                       <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>,</span><br><span class="line">                       <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">26</span>):</span><br><span class="line">    x_train.append(training_set_scaled[i - <span class="number">4</span>:i])</span><br><span class="line">    y_train.append(training_set_scaled[i])</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合Embedding输入要求：[送入样本数， 循环核时间展开步数] ，</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入所以送入，送入样本数为len(x_train)；输入4个字母出结果，循环核时间展开步数为4。</span></span><br><span class="line">x_train = np.reshape(x_train, (<span class="built_in">len</span>(x_train), <span class="number">4</span>))</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    Embedding(<span class="number">26</span>, <span class="number">2</span>),</span><br><span class="line">    SimpleRNN(<span class="number">10</span>),</span><br><span class="line">    Dense(<span class="number">26</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.01</span>),</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/rnn_embedding_4pre1.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;loss&#x27;</span>)  <span class="comment"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">100</span>, callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">################# predict ##################</span></span><br><span class="line"></span><br><span class="line">preNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(preNum):</span><br><span class="line">    alphabet1 = <span class="built_in">input</span>(<span class="string">&quot;input test alphabet:&quot;</span>)</span><br><span class="line">    alphabet = [w_to_id[a] <span class="keyword">for</span> a <span class="keyword">in</span> alphabet1]</span><br><span class="line">    <span class="comment"># 使alphabet符合Embedding输入要求：[送入样本数， 时间展开步数]。</span></span><br><span class="line">    <span class="comment"># 此处验证效果送入了1个样本，送入样本数为1；输入4个字母出结果，循环核时间展开步数为4。</span></span><br><span class="line">    alphabet = np.reshape(alphabet, (<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">    result = model.predict([alphabet])</span><br><span class="line">    pred = tf.argmax(result, axis=<span class="number">1</span>)</span><br><span class="line">    pred = <span class="built_in">int</span>(pred)</span><br><span class="line">    tf.<span class="built_in">print</span>(alphabet1 + <span class="string">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure><h1 id="用RNN实现股票预测"><a href="#用RNN实现股票预测" class="headerlink" title="用RNN实现股票预测"></a>用RNN实现股票预测</h1><p>贵州茅台股票数据，只使用C列数据</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%94%A8RNN%E5%AE%9E%E7%8E%B0%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B-1.png" class="" title="用RNN实现股票预测-1"><p>用连续60天开盘价预测第61天开盘价，使用以下代码下载真实数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df1 = ts.get_k_data(<span class="string">&#x27;600519&#x27;</span>, ktype=<span class="string">&#x27;D&#x27;</span>, start=<span class="string">&#x27;2010-04-26&#x27;</span>, end=<span class="string">&#x27;2020-04-26&#x27;</span>)</span><br><span class="line"></span><br><span class="line">datapath1 = <span class="string">&quot;./SH600519.csv&quot;</span></span><br><span class="line">df1.to_csv(datapath1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dropout, Dense, SimpleRNN</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">maotai = pd.read_csv(<span class="string">&#x27;./SH600519.csv&#x27;</span>)  <span class="comment"># 读取股票文件</span></span><br><span class="line"></span><br><span class="line">training_set = maotai.iloc[<span class="number">0</span>:<span class="number">2426</span> - <span class="number">300</span>, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 前(2426-300=2126)天的开盘价作为训练集,表格从0开始计数，2:3 是提取[2:3)列，前闭后开,故提取出C列开盘价</span></span><br><span class="line">test_set = maotai.iloc[<span class="number">2426</span> - <span class="number">300</span>:, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 后300天的开盘价作为测试集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">sc = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment"># 定义归一化：归一化到(0，1)之间</span></span><br><span class="line">training_set_scaled = sc.fit_transform(training_set)  <span class="comment"># 求得训练集的最大值，最小值这些训练集固有的属性，并在训练集上进行归一化</span></span><br><span class="line">test_set = sc.transform(test_set)  <span class="comment"># 利用训练集的属性对测试集进行归一化</span></span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line"></span><br><span class="line">x_test = []</span><br><span class="line">y_test = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集：csv表格中前2426-300=2126天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个训练集，提取训练集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建2426-300-60=2066组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(training_set_scaled)):</span><br><span class="line">    x_train.append(training_set_scaled[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_train.append(training_set_scaled[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 对训练集进行打乱</span></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 将训练集由list格式变为array格式</span></span><br><span class="line">x_train, y_train = np.array(x_train), np.array(y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入，送入样本数为x_train.shape[0]即2066组数据；输入60个开盘价，预测出第61天的开盘价，循环核时间展开步数为60; 每个时间步送入的特征是某一天的开盘价，只有1个数据，故每个时间步输入特征个数为1</span></span><br><span class="line">x_train = np.reshape(x_train, (x_train.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 测试集：csv表格中后300天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个测试集，提取测试集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建300-60=240组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(test_set)):</span><br><span class="line">    x_test.append(test_set[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_test.append(test_set[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 测试集变array并reshape为符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]</span></span><br><span class="line">x_test, y_test = np.array(x_test), np.array(y_test)</span><br><span class="line">x_test = np.reshape(x_test, (x_test.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    SimpleRNN(<span class="number">80</span>, return_sequences=<span class="literal">True</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    SimpleRNN(<span class="number">100</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)  <span class="comment"># 损失函数用均方误差</span></span><br><span class="line"><span class="comment"># 该应用只观测loss数值，不观测准确率，所以删去metrics选项，一会在每个epoch迭代显示时只显示loss值</span></span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/rnn_stock.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">64</span>, epochs=<span class="number">50</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,</span><br><span class="line">                    callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">################## predict ######################</span></span><br><span class="line"><span class="comment"># 测试集输入模型进行预测</span></span><br><span class="line">predicted_stock_price = model.predict(x_test)</span><br><span class="line"><span class="comment"># 对预测数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">predicted_stock_price = sc.inverse_transform(predicted_stock_price)</span><br><span class="line"><span class="comment"># 对真实数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">real_stock_price = sc.inverse_transform(test_set[<span class="number">60</span>:])</span><br><span class="line"><span class="comment"># 画出真实数据和预测数据的对比曲线</span></span><br><span class="line">plt.plot(real_stock_price, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.plot(predicted_stock_price, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Predicted MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;MaoTai Stock Price Prediction&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">##########evaluate##############</span></span><br><span class="line"><span class="comment"># calculate MSE 均方误差 ---&gt; E[(预测值-真实值)^2] (预测值减真实值求平方后求均值)</span></span><br><span class="line">mse = mean_squared_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="comment"># calculate RMSE 均方根误差---&gt;sqrt[MSE]    (对均方误差开方)</span></span><br><span class="line">rmse = math.sqrt(mean_squared_error(predicted_stock_price, real_stock_price))</span><br><span class="line"><span class="comment"># calculate MAE 平均绝对误差-----&gt;E[|预测值-真实值|](预测值减真实值求绝对值后求均值）</span></span><br><span class="line">mae = mean_absolute_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方误差: %.6f&#x27;</span> % mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方根误差: %.6f&#x27;</span> % rmse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平均绝对误差: %.6f&#x27;</span> % mae)</span><br></pre></td></tr></table></figure><h1 id="用LSTM实现股票预测"><a href="#用LSTM实现股票预测" class="headerlink" title="用LSTM实现股票预测"></a>用LSTM实现股票预测</h1><p>传统RNN可以通过记忆体实现短期记忆进行连续数据的预测，当连续数据的序列变长时，会使展开时间步过长，在反向传播更新参数时，梯度要按照时间步连续相乘，会导致梯度消失。</p><p>LSTM 由Hochreiter &amp; Schmidhuber 于1997年提出，通过门控单元改善了RNN长期依赖问题。<br>Sepp Hochreiter,Jurgen Schmidhuber.LONG SHORT-TERM MEMORY.Neural Computation,December 1997.</p><h2 id="LSTM计算过程"><a href="#LSTM计算过程" class="headerlink" title="LSTM计算过程"></a>LSTM计算过程</h2><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/LSTM%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-1.png" class="" title="LSTM计算过程-1"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/LSTM%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-2.png" class="" title="LSTM计算过程-2"><p>LSTM 引入了三个门限：<br>输入门 <script type="math/tex">i_{t}</script> </p><p>遗忘门 <script type="math/tex">f_{t}</script></p><p>输出门 <script type="math/tex">o_{t}</script></p><p>引入了表征长期记忆的细胞态 $ C_{t} $</p><p>引入了等待存入长期记忆的候选态 $ \widetilde{C}_{t} $</p><p>三个门限都是当前时刻的输入特征 <script type="math/tex">x_{t}</script> 和上个时刻的短期记忆 <script type="math/tex">h_{t-1}</script> 的函数，分别表示为：</p><ul><li><p>输入门（门限）： <script type="math/tex">i_{t} = \sigma(W_{i} · [h_{t-1}, x_{t}] + b_{i} )</script>， 决定了多少比例的信息会被存入当前细胞态；</p></li><li><p>遗忘门（门限）： <script type="math/tex">f_{t} = \sigma (W_{f} · [ h_{t-1} , x_{t} ] + b_{f} )</script>， 将细胞态中的信息选择性的遗忘；</p></li><li><p>输出门（门限）： <script type="math/tex">o_{t} = \sigma( W_{o} · [h_{t-1}, x_{t}] + b_{o})</script>，将细胞态中的信息选择性的进行输出；</p></li></ul><p>三个公式中<script type="math/tex">W_{i}</script>、 <script type="math/tex">W_{f}</script> 和 <script type="math/tex">W_{o}</script> 是待训练参数矩阵， <script type="math/tex">b_{i}</script> 、 <script type="math/tex">b_{f}</script> 和 <script type="math/tex">b_{o}</script> 是待训练偏置项。 <script type="math/tex">\sigma</script>为 sigmoid 激活函数，它可以使门限的范围在 0 到 1 之间。</p><p>定义<script type="math/tex">h_{t}</script>为记忆体，它表征短期记忆，是当前细胞态经过输出门得到的：</p><ul><li>记忆体（短期记忆）： <script type="math/tex">h_{t} = o_{t} × tanh(C_{t})</script></li></ul><p>候选态表示归纳出的待存入细胞态的新知识， 是当前时刻的输入特征 <script type="math/tex">x_{t}</script> 和上个时刻的短期记忆 <script type="math/tex">h_{t-1}</script> 的函数：</p><ul><li>候选态（归纳出的新知识）： <script type="math/tex">\widetilde{C}_{t} = tanh( W_{c} · [h_{t-1}, x_{t}] + b_{c} )</script></li></ul><p>细胞态 <script type="math/tex">C_{t}</script> 表示长期记忆， 它等于上个时刻的长期记忆 <script type="math/tex">C_{t-1}</script> 通过遗忘门的值和当前时刻归纳出的新知识 <script type="math/tex">\widetilde{C}_{t}</script> 通过输入门的值之和：</p><ul><li>细胞态（长期记忆） ：<script type="math/tex">C_{t} = f_{t} × C_{t-1} + i_{t} × \widetilde{C}_{t}</script></li></ul><p>当明确了这些概念， 这里举一个简单的例子理解一下 LSTM:</p><p>假设 LSTM 就是我们听老师讲课的过程， 目前老师讲到了第 45 页 PPT。我们的脑袋里记住的内容，是 PPT 第 1 页到第 45 页的长期记忆 <script type="math/tex">C_{t}</script> 。 </p><p>它由两部分组成：一部分是 PPT 第 1 页到第 44 页的内容，也就是上一时刻的长期记忆 <script type="math/tex">C_{t-1}</script> 。我们不可能一字不差的记住全部内容，会不自觉地忘记了一些，所以上个时刻的长期记忆 <script type="math/tex">C_{t-1}</script> 要乘以遗忘门，这个乘积项就表示留存在我们脑中的对过去的记忆；另一部分是当前我们归纳出的新知识 <script type="math/tex">\widetilde{C}_{t}</script> ，它由老师正在讲的第 45 页 PPT(当前时刻的输入<script type="math/tex">x_{t}</script> ) 和第 44 页 PPT 的短期记忆留存(上一时刻的短期记忆 <script type="math/tex">h_{t-1}</script> )组成。</p><p>将现在的记忆 <script type="math/tex">\widetilde{C}_{t}</script> 乘以输入门后与过去的记忆一同存储为当前的长期记忆 <script type="math/tex">C_{t}</script>。接下来，如果我们想把我们学到的知识(当前的长期记忆 <script type="math/tex">C_{t}</script> )复述给朋友， 我们不可能一字不落的讲出来， 所以 <script type="math/tex">C_{t}</script> 需要经过输出门筛选后才成为了输出 <script type="math/tex">h_{t}</script> 。</p><p>当有多层循环网络时，第二层循环网络的输入 <script type="math/tex">x_{t}</script> 就是第一层循环网络的输出 <script type="math/tex">h_{t}</script> ，即输入第二层网络的是第一层网络提取出的精华。 可以这么想， 老师现在扮演的就是第一层循环网络，每一页 PPT 都是老师从一篇一篇论文中提取出的精华，输出给我们。 作为第二层循环网络的我们，接收到的数据就是老师的长期记忆 <script type="math/tex">C_{t}</script> 过 tanh 激活函数后乘以输出门提取出的短期记忆 <script type="math/tex">h_{t}</script> 。</p><h2 id="TF描述LSTM层"><a href="#TF描述LSTM层" class="headerlink" title="TF描述LSTM层"></a>TF描述LSTM层</h2><p><code>tf.keras.layers.LSTM(记忆体个数， return_sequences=是否返回输出)</code></p><p><code>return_sequences=True</code> 各时间步输出ht</p><p><code>return_sequences=False</code> 仅最后时间步输出ht（默认）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">LSTM(<span class="number">80</span>, return_sequences=<span class="literal">True</span>),</span><br><span class="line">Dropout(<span class="number">0.2</span>),</span><br><span class="line">LSTM(<span class="number">100</span>),</span><br><span class="line">Dropout(<span class="number">0.2</span>),</span><br><span class="line">Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dropout, Dense, LSTM</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">maotai = pd.read_csv(<span class="string">&#x27;./SH600519.csv&#x27;</span>)  <span class="comment"># 读取股票文件</span></span><br><span class="line"></span><br><span class="line">training_set = maotai.iloc[<span class="number">0</span>:<span class="number">2426</span> - <span class="number">300</span>, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 前(2426-300=2126)天的开盘价作为训练集,表格从0开始计数，2:3 是提取[2:3)列，前闭后开,故提取出C列开盘价</span></span><br><span class="line">test_set = maotai.iloc[<span class="number">2426</span> - <span class="number">300</span>:, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 后300天的开盘价作为测试集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">sc = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment"># 定义归一化：归一化到(0，1)之间</span></span><br><span class="line">training_set_scaled = sc.fit_transform(training_set)  <span class="comment"># 求得训练集的最大值，最小值这些训练集固有的属性，并在训练集上进行归一化</span></span><br><span class="line">test_set = sc.transform(test_set)  <span class="comment"># 利用训练集的属性对测试集进行归一化</span></span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line"></span><br><span class="line">x_test = []</span><br><span class="line">y_test = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集：csv表格中前2426-300=2126天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个训练集，提取训练集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建2426-300-60=2066组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(training_set_scaled)):</span><br><span class="line">    x_train.append(training_set_scaled[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_train.append(training_set_scaled[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 对训练集进行打乱</span></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 将训练集由list格式变为array格式</span></span><br><span class="line">x_train, y_train = np.array(x_train), np.array(y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入，送入样本数为x_train.shape[0]即2066组数据；输入60个开盘价，预测出第61天的开盘价，循环核时间展开步数为60; 每个时间步送入的特征是某一天的开盘价，只有1个数据，故每个时间步输入特征个数为1</span></span><br><span class="line">x_train = np.reshape(x_train, (x_train.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 测试集：csv表格中后300天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个测试集，提取测试集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建300-60=240组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(test_set)):</span><br><span class="line">    x_test.append(test_set[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_test.append(test_set[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 测试集变array并reshape为符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]</span></span><br><span class="line">x_test, y_test = np.array(x_test), np.array(y_test)</span><br><span class="line">x_test = np.reshape(x_test, (x_test.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">########</span></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    LSTM(<span class="number">80</span>, return_sequences=<span class="literal">True</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    LSTM(<span class="number">100</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">########</span></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)  <span class="comment"># 损失函数用均方误差</span></span><br><span class="line"><span class="comment"># 该应用只观测loss数值，不观测准确率，所以删去metrics选项，一会在每个epoch迭代显示时只显示loss值</span></span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/LSTM_stock.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">64</span>, epochs=<span class="number">50</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,</span><br><span class="line">                    callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">################## predict ######################</span></span><br><span class="line"><span class="comment"># 测试集输入模型进行预测</span></span><br><span class="line">predicted_stock_price = model.predict(x_test)</span><br><span class="line"><span class="comment"># 对预测数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">predicted_stock_price = sc.inverse_transform(predicted_stock_price)</span><br><span class="line"><span class="comment"># 对真实数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">real_stock_price = sc.inverse_transform(test_set[<span class="number">60</span>:])</span><br><span class="line"><span class="comment"># 画出真实数据和预测数据的对比曲线</span></span><br><span class="line">plt.plot(real_stock_price, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.plot(predicted_stock_price, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Predicted MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;MaoTai Stock Price Prediction&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">##########evaluate##############</span></span><br><span class="line"><span class="comment"># calculate MSE 均方误差 ---&gt; E[(预测值-真实值)^2] (预测值减真实值求平方后求均值)</span></span><br><span class="line">mse = mean_squared_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="comment"># calculate RMSE 均方根误差---&gt;sqrt[MSE]    (对均方误差开方)</span></span><br><span class="line">rmse = math.sqrt(mean_squared_error(predicted_stock_price, real_stock_price))</span><br><span class="line"><span class="comment"># calculate MAE 平均绝对误差-----&gt;E[|预测值-真实值|](预测值减真实值求绝对值后求均值）</span></span><br><span class="line">mae = mean_absolute_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方误差: %.6f&#x27;</span> % mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方根误差: %.6f&#x27;</span> % rmse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平均绝对误差: %.6f&#x27;</span> % mae)</span><br></pre></td></tr></table></figure><h1 id="用GRU实现股票预测"><a href="#用GRU实现股票预测" class="headerlink" title="用GRU实现股票预测"></a>用GRU实现股票预测</h1><p>GRU由Cho等人于2014年提出，优化LSTM结构。<br>Kyunghyun Cho,Bart van Merrienboer,Caglar Gulcehre,Dzmitry Bahdanau,Fethi Bougares,Holger<br>Schwenk,Yoshua Bengio.Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation.Computer ence, 2014</p><p>门控循环单元(Gated Recurrent Unit， GRU)是 LSTM 的一种变体，将 LSTM 中遗忘门与输入门合二为一为更新门，模型比 LSTM 模型更简单。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/GRU%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-1.png" class="" title="GRU计算过程-1"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E5%85%AD%E8%AE%B2%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/GRU%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B-2.png" class="" title="GRU计算过程-2"><p>GRU 使记忆体 <script type="math/tex">h_{t}</script> 融合了长期记忆和短期记忆。   <script type="math/tex">h_{t}</script> 包含了过去信息  <script type="math/tex">h_{t-1}</script> 和现在信息(候选隐藏层)  <script type="math/tex">\widetilde{h}_{t}</script> ， 由更新门 <script type="math/tex">z_{t}</script> 分配重要性：</p><ul><li>记忆体：<script type="math/tex">h_{t} = (1 - z_{t}) × h_{t-1} + z_{t} * \widetilde{h}_{t}</script></li></ul><p>现在信息是过去信息 <script type="math/tex">h_{t-1}</script>  过重置门 <script type="math/tex">r_{t}</script>  与当前输入 <script type="math/tex">x_{t}</script>  共同决定的：</p><ul><li>候选隐藏层： <script type="math/tex">\widetilde{h}_{t} = tanh(W · [r_{t} × h_{t-1}， x_{t}])</script></li></ul><p>更新门和重置门的取值范围也是 0 到 1 之间：</p><ul><li>更新门： <script type="math/tex">z_{t}  = \sigma(W_{z} · [h_{t-1}, x_{t})]</script></li><li>重置门： <script type="math/tex">r_{t}  = \sigma(W_{z} · [h_{t-1}, x_{t})]</script></li></ul><h2 id="TF描述GRU层"><a href="#TF描述GRU层" class="headerlink" title="TF描述GRU层"></a>TF描述GRU层</h2><p><code>tf.keras.layers.GRU(记忆体个数, return_sequences=是否返回输出)</code></p><p><code>return_sequences=True</code> 各时间步输出ht</p><p><code>return_sequences=False</code> 仅最后时间步输出ht（默认）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">GRU(<span class="number">80</span>, return_sequences=<span class="literal">True</span>),</span><br><span class="line">Dropout(<span class="number">0.2</span>),</span><br><span class="line">LSTM(<span class="number">100</span>),</span><br><span class="line">Dropout(<span class="number">0.2</span>),</span><br><span class="line">Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dropout, Dense, GRU</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">maotai = pd.read_csv(<span class="string">&#x27;./SH600519.csv&#x27;</span>)  <span class="comment"># 读取股票文件</span></span><br><span class="line"></span><br><span class="line">training_set = maotai.iloc[<span class="number">0</span>:<span class="number">2426</span> - <span class="number">300</span>, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 前(2426-300=2126)天的开盘价作为训练集,表格从0开始计数，2:3 是提取[2:3)列，前闭后开,故提取出C列开盘价</span></span><br><span class="line">test_set = maotai.iloc[<span class="number">2426</span> - <span class="number">300</span>:, <span class="number">2</span>:<span class="number">3</span>].values  <span class="comment"># 后300天的开盘价作为测试集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">sc = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment"># 定义归一化：归一化到(0，1)之间</span></span><br><span class="line">training_set_scaled = sc.fit_transform(training_set)  <span class="comment"># 求得训练集的最大值，最小值这些训练集固有的属性，并在训练集上进行归一化</span></span><br><span class="line">test_set = sc.transform(test_set)  <span class="comment"># 利用训练集的属性对测试集进行归一化</span></span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line"></span><br><span class="line">x_test = []</span><br><span class="line">y_test = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集：csv表格中前2426-300=2126天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个训练集，提取训练集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建2426-300-60=2066组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(training_set_scaled)):</span><br><span class="line">    x_train.append(training_set_scaled[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_train.append(training_set_scaled[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 对训练集进行打乱</span></span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(x_train)</span><br><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">np.random.shuffle(y_train)</span><br><span class="line">tf.random.set_seed(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 将训练集由list格式变为array格式</span></span><br><span class="line">x_train, y_train = np.array(x_train), np.array(y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使x_train符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class="line"><span class="comment"># 此处整个数据集送入，送入样本数为x_train.shape[0]即2066组数据；输入60个开盘价，预测出第61天的开盘价，循环核时间展开步数为60; 每个时间步送入的特征是某一天的开盘价，只有1个数据，故每个时间步输入特征个数为1</span></span><br><span class="line">x_train = np.reshape(x_train, (x_train.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 测试集：csv表格中后300天数据</span></span><br><span class="line"><span class="comment"># 利用for循环，遍历整个测试集，提取测试集中连续60天的开盘价作为输入特征x_train，第61天的数据作为标签，for循环共构建300-60=240组数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>, <span class="built_in">len</span>(test_set)):</span><br><span class="line">    x_test.append(test_set[i - <span class="number">60</span>:i, <span class="number">0</span>])</span><br><span class="line">    y_test.append(test_set[i, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 测试集变array并reshape为符合RNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]</span></span><br><span class="line">x_test, y_test = np.array(x_test), np.array(y_test)</span><br><span class="line">x_test = np.reshape(x_test, (x_test.shape[<span class="number">0</span>], <span class="number">60</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    GRU(<span class="number">80</span>, return_sequences=<span class="literal">True</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    GRU(<span class="number">100</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),</span><br><span class="line">    Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)  <span class="comment"># 损失函数用均方误差</span></span><br><span class="line"><span class="comment"># 该应用只观测loss数值，不观测准确率，所以删去metrics选项，一会在每个epoch迭代显示时只显示loss值</span></span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/stock.ckpt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class="line">                                                 save_weights_only=<span class="literal">True</span>,</span><br><span class="line">                                                 save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                 monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">64</span>, epochs=<span class="number">50</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,</span><br><span class="line">                    callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 参数提取</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">################## predict ######################</span></span><br><span class="line"><span class="comment"># 测试集输入模型进行预测</span></span><br><span class="line">predicted_stock_price = model.predict(x_test)</span><br><span class="line"><span class="comment"># 对预测数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">predicted_stock_price = sc.inverse_transform(predicted_stock_price)</span><br><span class="line"><span class="comment"># 对真实数据还原---从（0，1）反归一化到原始范围</span></span><br><span class="line">real_stock_price = sc.inverse_transform(test_set[<span class="number">60</span>:])</span><br><span class="line"><span class="comment"># 画出真实数据和预测数据的对比曲线</span></span><br><span class="line">plt.plot(real_stock_price, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.plot(predicted_stock_price, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Predicted MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;MaoTai Stock Price Prediction&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;MaoTai Stock Price&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">##########evaluate##############</span></span><br><span class="line"><span class="comment"># calculate MSE 均方误差 ---&gt; E[(预测值-真实值)^2] (预测值减真实值求平方后求均值)</span></span><br><span class="line">mse = mean_squared_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="comment"># calculate RMSE 均方根误差---&gt;sqrt[MSE]    (对均方误差开方)</span></span><br><span class="line">rmse = math.sqrt(mean_squared_error(predicted_stock_price, real_stock_price))</span><br><span class="line"><span class="comment"># calculate MAE 平均绝对误差-----&gt;E[|预测值-真实值|](预测值减真实值求绝对值后求均值）</span></span><br><span class="line">mae = mean_absolute_error(predicted_stock_price, real_stock_price)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方误差: %.6f&#x27;</span> % mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均方根误差: %.6f&#x27;</span> % rmse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平均绝对误差: %.6f&#x27;</span> % mae)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第六讲循环神经网络</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-10-01T12:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络"><p>人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络"><a href="#人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络"></a>人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络</h1><h1 id="卷积核计算过程"><a href="#卷积核计算过程" class="headerlink" title="卷积核计算过程"></a>卷积核计算过程</h1><p>全连接NN：每个神经元与前后相邻层的每一个神经元都有连接关系，输入是特征，输出为预测的结果。</p><p>全连接网络对识别和预测都有非常好的效果，可以实现分类和预测。</p><p>全连接网络的参数个数为：<script type="math/tex">\sum_{各层}(前层×后层+后层)</script></p><p>如下图所示，针对一张分辨率仅为 28 <em> 28 的黑白图像（像素值个数为 28 </em> 28 * 1 = 784），全连接网络的参数总量就有将近 10 万个。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E9%87%8F.png" class="" title="全连接网络的参数量"><p>在实际应用中，图像的分辨率远高于此，且大多数是彩色图像，如下图所示。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%81%B0%E5%BA%A6%E5%9B%BE%E4%B8%8E%E5%BD%A9%E8%89%B2%E5%9B%BE.png" class="" title="灰度图与彩色图"><p>虽然全连接网络一般被认为是分类预测的最佳网络，但待优化的参数过多，容易导致模型过拟合。</p><p>为了解决参数量过大而导致模型过拟合的问题，一般不会将原始图像直接输入，而是先对图像进行特征提取，再将提取到的特征输入全连接网络，如下图所示，就是将汽车图片经过多次特征提取后再喂入全连接网络。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%E7%9A%84%E6%94%B9%E8%BF%9B.png" class="" title="全连接网络的改进"><ul><li>卷积计算可认为是一种有效提取图像特征的方法。</li><li>一般会用一个正方形的卷积核，按指定步长， 在输入特征图上滑动， 遍历输入特征图中的每个像素点。每一个步长，卷积核会与输入特征图出现重合区域，重合区域对应元素相乘、求和再加上偏置项得到输出特征的一个像素点。</li></ul><p>如果输入是灰度图，使用单通道卷积核。</p><p>如果输入特征是三通道彩色图，可以使用 3 <em> 3 </em> 3 的卷积核，或者 5 <em> 5 </em> 3 的卷积核。</p><p>要使卷积核的通道数与输入特征图的通道数一致，要想卷积核与输入特征图对应点匹配上，必须让卷积核的深度与输入特征图的深度一致。</p><p>输入特征图的深度（channel数），决定了当前层卷积核的深度；</p><p>由于每个卷积核在卷积计算后会得到一张输出特征图，当前层使用了几个卷积核，就有几张输出特征图；当前层卷积核的个数，决定了当前层输出特征图的深度。</p><p>如果某层模型的特征提取能力不足，可以在这一层多用几个卷积核提高这一层的特征提取能力。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8D%B7%E7%A7%AF%E6%A0%B8%E4%BB%8B%E7%BB%8D.png" class="" title="卷积核介绍"><p>每一个小颗粒都存储一个带训练的参数。在执行卷积计算时，卷积核里的参数都是固定的。在每次反向传播时，这些小颗粒中存储的带训练参数，会被梯度下降法更新，卷积就是利用立体卷积核，实现了参数的空间共享。</p><p>对于输入图是单通道的，选择单通道卷积核，这个例子的输入特征图是5行5列单通道，选用3 * 3单通道卷积核，滑动步长是1，在输入图上滑动，每滑动一步，输入特征图与卷积核里的9个元素重合，他们对应元素相乘求和再加上偏置项b</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97.png" class="" title="神经网络中的卷积计算"><p>对于输入特征图是三通道的，选择3通道卷积核，该例子输入特征图是5行5列红绿蓝三通道数据，选用3 * 3 三通道卷积核，滑动步长是1，在这个输入特征上滑动，每滑动一步，输入特征图与卷积核里的27个元素重合，对应元素相乘再加上偏置项b，得到输出特则图中的一个像素值。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%B8%89%E9%80%9A%E9%81%93%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97.png" class="" title="三通道彩色图像的卷积计算"><p>卷积核在输入特征图上按指定步长滑动，每个步长，卷积核会与输入特征图上部分像素点重合，重合区域，输入特征图与卷积核对应元素相乘求和，得到输出特征图中的一个像素点，当输入特征图被遍历完成，得到一张输出特征图，完成了一个卷积核的卷积计算过程。当有n个卷积核时，会有n张输出特征图，叠加在这张输出特征图的后边。<br>来源：<a href="https://mlnotebook.github.io/post/CNN1/">https://mlnotebook.github.io/post/CNN1/</a></p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/The%20kernel%20is%20moved%20over%20the%20image%20performing%20the%20convolution%20as%20it%20goes.gif" class="" alt="The kernel is moved over the image performing the convolution as it goes"><p>输出特征尺寸计算： 在了解神经网络中卷积计算的整个过程后， 就可以对输出特征图的尺寸进行计算，如上图所示， 5 × 5 的图像经过 3 × 3 大小的卷积核做卷积计算后输出特征尺寸为 3 × 3。</p><h1 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h1><p>感受野（Receptive Field）：卷积神经网络各输出特征图中的每个像素点，在原始输入图片上映射区域的大小。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%84%9F%E5%8F%97%E9%87%8E%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="感受野示意图"><p>如果对 5 <em> 5 的原始图片用黄色的 3 </em> 3 卷积核作用，会输出绿色这样一个 3 <em> 3 的输出特征图，输出特征图上的每个像素点，映射到原始图片是 3 </em> 3 的区域，所以它的感受野是3。</p><p>对 3 <em> 3 的特征图用绿色的 3 </em> 3卷积核作用，会输出一个 1 <em> 1 的输出特征图，该输出特征的像素点，映射到原始图片是 5 </em> 5 的区域，其感受野是5。</p><p>如果对 5 <em> 5 的原始图片直接用蓝色的 5 </em> 5 卷积核作用，会输出一个 1 <em> 1 的输出特征图，这个像素点映射到原始输入图片是 5 </em> 5 的区域，其感受野是5。</p><p>同样一个 5 <em> 5 的原始图片，经过两层 3 </em> 3 的卷积核作用，和经过一层 5 <em> 5 的卷积核作用，都得到一个感受野是 5 的输出特征图，这两层 3 </em> 3 卷积核和一层 5 * 5 卷积核的特征提取能力是一样的。 </p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%B8%A4%E5%B1%823x3%E5%8D%B7%E7%A7%AF%E6%A0%B8%E4%B8%8E%E4%B8%80%E5%B1%825x5%E5%8D%B7%E7%A7%AF%E6%A0%B8%E7%9A%84%E5%AF%B9%E6%AF%94.png" class="" title="两层3x3卷积核与一层5x5卷积核的对比"><p>对于两层 3 <em> 3 的卷积核与一层 5 </em> 5 的卷积核的选取，需要考虑带训练参数量和计算量。</p><p>假设输入特征图宽、高为x，卷积计算步长为1。显然，两个 3 <em> 3 卷积核的参数量为 9 + 9 = 18，小于 5 </em> 5 卷积核的 25，前者的参数量更少。  </p><p>对于两层 3 <em> 3 卷积核计算，待训练参数共有18个，每个 3 </em> 3 <em> 1 的卷积核计算得到一个输出像素点，需要9次乘加计算，两层 3 </em> 3 卷积核共需要 <script type="math/tex">18 x^{2} - 108 x + 180</script> 次的乘加计算。第一个 3 <em> 3 卷积核输出特征图共有 <script type="math/tex">(x – 3 + 1)^2</script> 个像素点，每个像素点需要进行 3 </em> 3 = 9 次乘加运算， 第二个 3 <em> 3 卷积核输出特征图共有 <script type="math/tex">(x – 3 + 1 – 3 + 1)^2</script>个像素点， 每个像素点同样需要进行 9 次乘加运算，总计算量为 $$ 9 </em> (x – 3 + 1)^2 + 9 * (x – 3 + 1 – 3 + 1)^2 = 18 x^2 – 108x + 180 $$。  </p><p>对于一层 5 <em> 5 卷积核计算，待训练参数共有25个，每个 5 </em> 5 <em> 1 的卷积核计算得到一个输出像素点，需要25次乘加计算，一层 5 </em> 5 卷积核，共需要 <script type="math/tex">25 x^{2} - 200 x + 400</script> 次乘加计算。输出特征图共有 <script type="math/tex">(x – 5 + 1)^2</script> 个像素点， 每个像素点需要进行 5 <em> 5 = 25 次乘加运算，总计算量为 $$ 25 </em> (x – 5 + 1)^2 = 25x^2 – 200x + 400 $$ 。</p><p>当输入特征图边长大于10个像素点时，两层 3 <em> 3 卷积核比一层 5 </em> 5 卷积性能要好，这也就是为什么现在的神经网络在卷积计算中常使用两层 3 <em> 3 卷积核替换一层 5 </em> 5 卷积核的原因。</p><p>对二者的总计算量（乘加运算的次数） 进行对比，<script type="math/tex">18 x^2 – 200x + 400 < 25x^2 – 200x + 400</script> ，经过简单数学运算可得 <script type="math/tex">x < 22/7 or x > 10</script>， x 作为特征图的边长，在大多数情况下显然会是一个大于 10 的值（非常简单的 MNIST 数据集的尺寸也达到了 28 <em> 28），所以两层 3 </em> 3 卷积核的参数量和计算量，在通常情况下都优于一层 5 <em> 5 卷积核，尤其是当特征图尺寸比较大的情况下，两层 3 </em> 3 卷积核在计算量上的优势会更加明显。  </p><h1 id="全零填充"><a href="#全零填充" class="headerlink" title="全零填充"></a>全零填充</h1><p>卷积计算保持输入特征图的尺寸不变，可以使用全零填充，在输入特征图周围填充0。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%85%A8%E9%9B%B6%E5%A1%AB%E5%85%85.png" class="" title="全零填充"><p>如图所示，在 5×5×1 的输入图像周围填 0，在通过 3×3×1的卷积核，进行步长为1的卷积计算，输出特征图仍是 5×5×1。</p><p>在 Tensorflow 框架中， 用参数 <code>padding = &#39;SAME&#39;</code> 或 <code>padding = &#39;VALID&#39;</code> 表示是否进行全零填充，其对输出特征尺寸大小的影响如下：</p><script type="math/tex; mode=display">padding \left\{ \begin{array} & SAME(全0填充) & \frac{入长}{步长} (向上取整) \\ VALID(不全0填充) & \frac{入长 - 核长 + 1}{步长} (向上取整) \end{array} \right.</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%85%A8%E9%9B%B6%E5%A1%AB%E5%85%85%E8%BE%93%E5%87%BA%E7%89%B9%E5%BE%81%E5%9B%BE%E5%A4%A7%E5%B0%8F.png" class="" title="全零填充输出特征图大小"><p>上下两行分别代表对输入图像进行全零填充或不进行填充， 对于 5×5×1 的图像来说，当 <code>padding = &#39;SAME&#39;</code> 时， 步长是1，输出图像边长为 5 / 1 = 5； 当 <code>padding = &#39;VALID&#39;</code> 时， 核长是3，步长是1，输出图像边长为 (5 - 3 + 1) / 1 = 3。</p><h1 id="TF描述卷积计算层"><a href="#TF描述卷积计算层" class="headerlink" title="TF描述卷积计算层"></a>TF描述卷积计算层</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.Conv2D(</span><br><span class="line">filters = 卷积核个数,</span><br><span class="line">kernel_size = 卷积核尺寸,<span class="comment">#正方形写核长整数，或（核高h，核宽w）</span></span><br><span class="line">strides = 卷积步长,<span class="comment">#横纵向相同写步长整数，或(纵向步长h，横向步长w)，默认1</span></span><br><span class="line">padding = ‘SAME’ <span class="keyword">or</span> ‘VALID’,<span class="comment">#使用全零填充是“same”，不使用“valid”（默认）</span></span><br><span class="line">activation = ‘relu’ <span class="keyword">or</span> ‘sigmoid’ <span class="keyword">or</span> ‘tanh’ <span class="keyword">or</span> ‘softmax’等 <span class="comment">#使用什么激活函数，如果这一层卷积后还有批标准化操作，不在这里进行激活，如有 BN 则此处不用写</span></span><br><span class="line">input_shape = (高, 宽, 通道数), <span class="comment">#输入特征图纬度，可以省略仅在第一层有</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述三层卷积计算，每一层用自己的表述形式</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(<span class="number">6</span>, <span class="number">5</span>, padding=<span class="string">&#x27;valid&#x27;</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),<span class="comment">##</span></span><br><span class="line">    MaxPool2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    </span><br><span class="line">    Conv2D(<span class="number">6</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;valid&#x27;</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),<span class="comment">##</span></span><br><span class="line">    MaxPool2D(<span class="number">2</span>, (<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    </span><br><span class="line">    Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;valid&#x27;</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),<span class="comment">##关键字传递参数，可读性更强</span></span><br><span class="line">    </span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>),</span><br><span class="line">    Flatten(),</span><br><span class="line">    Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>使用此函数构建卷积层时，需要给出的信息有：<br>A） 输入图像的信息，即宽高和通道数；<br>B） 卷积核的个数以及尺寸，如 filters = 16, kernel_size = (3, 3)代表采用 16 个大小为 3×3 的<br>卷积核；<br>C） 卷积步长，即卷积核在输入图像上滑动的步长，纵向步长与横向步长通常是相同的，默<br>认值为 1；<br>D） 是否进行全零填充，全零填充的具体作用上文有描述；<br>E） 采用哪种激活函数，例如 relu、 softmax 等，各种函数的具体效果在前面章节中有详细描述；<br>这里需要注意的是，在利用 Tensorflow 框架构建卷积网络时，一般会利用 BatchNormalization<br>函数来构建 BN 层，进行批归一化操作，所以在 Conv2D 函数中经常不写 BN。 BN 操作的<br>具体含义和作用见下文。</p><h1 id="批标准化-Batch-Normalization-BN"><a href="#批标准化-Batch-Normalization-BN" class="headerlink" title="批标准化(Batch Normalization, BN)"></a>批标准化(Batch Normalization, BN)</h1><p>神经网络对0附近的数据更敏感，但是随着网络层数的增加，特征数据会出现偏离0均值的情况，标准化可以使数据符合以0为均值，1为标准差的标准正态分布。把偏移的特征数据重新拉回到0附近，常用在卷积操作和激活操作之间。</p><p>标准化：使数据符合0均值，1为标准差的分布。</p><p>批标准化：对一小批数据（batch），做标准化处理。</p><p>批标准化后，第k个卷积核的输出特征图（feature map）中第i个像素点。</p><p>可以通过以下公式计算批标准化后的输出特征图：</p><script type="math/tex; mode=display">H_{i}^{’k} = \frac {H_{i}^{k} - \mu_{batch}^{k} } { \sigma_{batch}^{k} }</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96%E5%90%8E%E8%BE%93%E5%87%BA%E5%9B%BE.png" class="" title="批标准化后输出图"><p>$ H<em>{i}^{k} $ ：批标准化前，第k个卷积核，输出特征图中第 i 个像素点<br>$ \mu</em>{batch}^{k} $ ： 批标准化前，第k个卷积核， batch张输出特征图中所有像素点平均值<br>$ \sigma_{batch}^{k} $ ： 批标准化前，第k个卷积核， batch张输出特征图中所有像素点标准差</p><p>批标准化操作，会让每个像素点进行减均值除以标准差的自更新计算，对于 第k个卷积核batch张输出特征图中所有像素点平均值和标准差，是对 第k个卷积核产生的batch张输出特征图 集体求均值和标准差。</p><p>其中 $ \mu<em>{batch}^{k} $ 和 $ \sigma</em>{batch}^{k} $ 就是对第k个卷积核计算出来的batch张输出特征图中的所有像素点求均值和标准差。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Batch%20Normalization%20%E7%9A%84%E4%BD%9C%E7%94%A8.png" class="" alt="Batch Normalization 的作用"><p>BN操作将原本偏移的特征数据重新拉回到0均值，使进入激活函数的数据分布在激活函数线性区，使得输入数据的微小变化更明显体现到激活函数的输出，提升了激活函数对输入数据的区分力。</p><p>但是这种简单的特征数据标准化，使特征数据完全满足标准正态分布，集中在激活函数中心的线性区域，使激活函数丧失了非线性特性，因此在BN操作中为每个卷积核引入了两个可训练参数。缩放因子γ和偏移因子β。</p><p>反向传播时，缩放因子γ和偏移因子β会与其他待训练参数一同被训练优化，使标准正态分布后的特征数据通过缩放因子γ和偏移因子β优化了特征数据分布的宽窄和偏移量，保证了网络的非线性表达力。</p><p><em>BN层位于卷积层之后，激活层之前。</em></p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BN%E5%B1%82%E4%BD%8D%E4%BA%8E%E5%8D%B7%E7%A7%AF%E5%B1%82%E4%B9%8B%E5%90%8E%E6%BF%80%E6%B4%BB%E5%B1%82%E4%B9%8B%E5%89%8D.png" class="" title="BN层位于卷积层之后激活层之前"><p>BN操作函数</p><p><code>tf.keras.layers.BatchNormalization()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 卷积层</span></span><br><span class="line">    BatchNormalization(), <span class="comment"># BN层</span></span><br><span class="line">    Activation(<span class="string">&#x27;relu&#x27;</span>), <span class="comment"># 激活层</span></span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 池化层</span></span><br><span class="line">    Dropout(<span class="number">0.2</span>), <span class="comment"># dropout层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="池化-Pooling"><a href="#池化-Pooling" class="headerlink" title="池化(Pooling)"></a>池化(Pooling)</h1><p>池化操作作用于减少卷积神经网络中特征数据量（降维）。</p><p>池化的方法有最大池化和均值池化。<br>最大值池化可提取图片纹理，均值池化可保留背景特征。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%9C%80%E5%A4%A7%E5%80%BC%E6%B1%A0%E5%8C%96%E4%B8%8E%E5%9D%87%E5%80%BC%E6%B1%A0%E5%8C%96.png" class="" title="最大值池化与均值池化"><p>如果用2×2的池化核对输入图片以2为步长进行池化，输出图片将变为输入图片的四分之一大小。</p><p>最大池化是用2×2的池化核框住左上4个像素点，选择最大的6输出。步长为2滑动到右上，选择最大的8输出，依次遍历图片。<br>均值池化和最大池化类似，提取的是4个像素点的均值，得到输出图片。</p><h2 id="TF描述池化"><a href="#TF描述池化" class="headerlink" title="TF描述池化"></a>TF描述池化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.MaxPool2D(</span><br><span class="line">    pool_size = 池化核尺寸,<span class="comment">#正方形写核长整数，或（核高h，核宽w）</span></span><br><span class="line">    strides = 池化步长,<span class="comment">#步长整数， 或(纵向步长h，横向步长w)，默认为pool_size</span></span><br><span class="line">    padding = <span class="string">&#x27;valid&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;same&#x27;</span><span class="comment">#使用全零填充是“same”， 不使用是“valid”（默认）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tf.keras.layers.AveragePooling2D(</span><br><span class="line">    pool_size = 池化核尺寸,<span class="comment">#正方形写核长整数，或（核高h，核宽w）</span></span><br><span class="line">    strides = 池化步长,<span class="comment">#步长整数， 或(纵向步长h，横向步长w)，默认为pool_size</span></span><br><span class="line">    padding = <span class="string">&#x27;valid&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;same&#x27;</span> <span class="comment">#使用全零填充是“same”， 不使用是“valid”（默认）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(filters = <span class="number">6</span>, kernel_size = (<span class="number">5</span>, <span class="number">5</span>), padding = <span class="string">&#x27;same&#x27;</span>), <span class="comment"># 卷积层</span></span><br><span class="line">    BatchNormalization(), <span class="comment"># BN层</span></span><br><span class="line">    Activation(<span class="string">&#x27;relu&#x27;</span>), <span class="comment"># 激活层</span></span><br><span class="line">    MaxPool2D(pool_size = (<span class="number">2</span>, <span class="number">2</span>), strides = <span class="number">2</span>, padding = <span class="string">&#x27;same&#x27;</span>), <span class="comment"># 池化层</span></span><br><span class="line">    Dropout(<span class="number">0.2</span>), <span class="comment"># dropout层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="舍弃-Dropout"><a href="#舍弃-Dropout" class="headerlink" title="舍弃(Dropout)"></a>舍弃(Dropout)</h1><p>为了缓解神经网络过拟合，在神经网络训练过程中，常将隐藏层的部分神经元按照一定比例从神经网络中临时舍弃。在使用神经网络时，再把所有神经元恢复到神经网络中。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%88%8D%E5%BC%83-Dropout%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="舍弃-Dropout示意图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.Dropout(舍弃的概率)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 卷积层</span></span><br><span class="line">    BatchNormalization(), <span class="comment"># BN层</span></span><br><span class="line">    Activation(<span class="string">&#x27;relu&#x27;</span>), <span class="comment"># 激活层</span></span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 池化层</span></span><br><span class="line">    Dropout(<span class="number">0.2</span>), <span class="comment"># dropout层,随机舍弃掉20%神经元</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><p>卷积神经网络：借助卷积核提取特征后，送入全连接网络。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97.png" class="" title="卷积神经网络网络的主要模块"><p><strong>卷积是什么？ 卷积就是特征提取器，就是CBAPD</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">CConv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 卷积层</span></span><br><span class="line">BBatchNormalization(), <span class="comment"># BN层</span></span><br><span class="line">AActivation(<span class="string">&#x27;relu&#x27;</span>), <span class="comment"># 激活层</span></span><br><span class="line">PMaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>), <span class="comment"># 池化层</span></span><br><span class="line">DDropout(<span class="number">0.2</span>), <span class="comment"># dropout层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="cifar10数据集"><a href="#cifar10数据集" class="headerlink" title="cifar10数据集"></a>cifar10数据集</h1><p>提供 5万张 32 <em> 32 像素点的十分类彩色图片和标签，用于训练。<br>提供 1万张 32 </em> 32 像素点的十分类彩色图片和标签，用于测试。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cifar10%E6%95%B0%E6%8D%AE%E9%9B%86.png" class="" title="cifar10数据集"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入cifar10数据集</span></span><br><span class="line">cifar10 = tf.keras.datasets.cifar10</span><br><span class="line">(x_train, y_train), (x_test, y_test) = cifar10.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化训练集输入特征的第一个元素</span></span><br><span class="line">plt.imshow(x_train[<span class="number">0</span>])  <span class="comment"># 绘制图片</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出训练集输入特征的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train[0]:\n&quot;</span>, x_train[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 打印出训练集标签的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train[0]:\n&quot;</span>, y_train[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出整个训练集输入特征形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train.shape:\n&quot;</span>, x_train.shape)</span><br><span class="line"><span class="comment"># 打印出整个训练集标签的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train.shape:\n&quot;</span>, y_train.shape)</span><br><span class="line"><span class="comment"># 打印出整个测试集输入特征的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_test.shape:\n&quot;</span>, x_test.shape)</span><br><span class="line"><span class="comment"># 打印出整个测试集标签的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_test.shape:\n&quot;</span>, y_test.shape)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> [[177 144 116]</span><br><span class="line">  [168 129  94]</span><br><span class="line">  [179 142  87]</span><br><span class="line">  [188 149  67]</span><br><span class="line">  [202 168  68]</span><br><span class="line">  [218 189  76]</span><br><span class="line">  [218 191  72]</span><br><span class="line">  [207 181  70]</span><br><span class="line">  [191 163  79]</span><br><span class="line">  [175 143  82]</span><br><span class="line">  [166 132  86]</span><br><span class="line">  [163 128  92]</span><br><span class="line">  [163 127  94]</span><br><span class="line">  [161 123  92]</span><br><span class="line">  [153 114  84]</span><br><span class="line">  [159 120  90]</span><br><span class="line">  [162 124  93]</span><br><span class="line">  [149 116  91]</span><br><span class="line">  [140 104  83]</span><br><span class="line">  [148 103  77]</span><br><span class="line">  [161 105  69]</span><br><span class="line">  [144  95  55]</span><br><span class="line">  [112  90  59]</span><br><span class="line">  [119  91  58]</span><br><span class="line">  [130  96  65]</span><br><span class="line">  [120  87  59]</span><br><span class="line">  [ 92  67  46]</span><br><span class="line">  [103  78  57]</span><br><span class="line">  [170 140 104]</span><br><span class="line">  [216 184 140]</span><br><span class="line">  [151 118  84]</span><br><span class="line">  [123  92  72]]]</span><br><span class="line">y_train[0]:</span><br><span class="line"> [6]</span><br><span class="line">x_train.shape:</span><br><span class="line"> (50000, 32, 32, 3)</span><br><span class="line">y_train.shape:</span><br><span class="line"> (50000, 1)</span><br><span class="line">x_test.shape:</span><br><span class="line"> (10000, 32, 32, 3)</span><br><span class="line">y_test.shape:</span><br><span class="line"> (10000, 1)</span><br></pre></td></tr></table></figure><h1 id="卷积神经网络搭建示例"><a href="#卷积神经网络搭建示例" class="headerlink" title="卷积神经网络搭建示例"></a>卷积神经网络搭建示例</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E7%A4%BA%E4%BE%8B.png" class="" title="卷积神经网络搭建示例"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"></span><br><span class="line">cifar10 = tf.keras.datasets.cifar10</span><br><span class="line">(x_train, y_train), (x_test, y_test) = cifar10.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网络结构--start</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Baseline</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Baseline, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&#x27;same&#x27;</span>)  <span class="comment"># 卷积层</span></span><br><span class="line">        self.b1 = BatchNormalization()  <span class="comment"># BN层</span></span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层</span></span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)  <span class="comment"># 池化层</span></span><br><span class="line">        self.d1 = Dropout(<span class="number">0.2</span>)  <span class="comment"># dropout层</span></span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d2 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line"></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.d2(x)</span><br><span class="line">        y = self.f2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = Baseline()</span><br><span class="line"></span><br><span class="line"><span class="comment">#网络结构--end</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>), metrics=[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">checkpoint_save_path = <span class="string">&quot;./checkpoint/Baseline.ckpt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path + <span class="string">&#x27;.index&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path, save_weights_only=<span class="literal">True</span>, save_best_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="number">1</span>,  callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(model.trainable_variables)</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./weights.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.name) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.shape) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(v.numpy()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################    show   ###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/LeNet-1.png" class="" title="LeNet-1"><p><a href="https://ieeexplore.ieee.org/abstract/document/726791">LeCun Y, Bottou L, Bengio Y, et al. Gradient-based learning applied to document recognition.Proceedings of the IEEE, 1998, 86(11): 2278-2324.</a></p><p>通过共享卷积核减少了网络参数。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/LeNet-2.png" class="" title="LeNet-2"><p>输入： 32<em>32</em>3<br>C1卷积<br>C（核： 6<em>5</em>5，步长： 1，填充： valid ）<br>B（ None）<br>A（ sigmoid）<br>P（ max，核： 2*2，步长： 2，填充： valid ）<br>D（ None）</p><p>C3卷积<br>C（核： 16<em>5</em>5，步长： 1，填充： valid ）<br>B（ None）<br>A（ sigmoid）<br>P（ max，核： 2*2，步长： 2，填充： valid ）<br>D（ None）</p><p>Flatten<br>Dense（神经元： 120，激活： sigmoid）<br>Dense（神经元： 84，激活： sigmoid）<br>Dense（神经元： 10，激活： softmax）</p><p>统计卷积神经网络层数时，一般只统计卷积计算层和全连接计算层，其余操作可以认为是卷积计算层的附属。</p><p>LeNet一共有五层网络</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/LeNet-3.png" class="" title="LeNet-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet5</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet5, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">120</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">84</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/AlexNet-1.png" class="" title="AlexNet-1"><p><a href="https://proceedings.neurips.cc/paper/2012/hash/c399862d3b9d6b76c8436e924a68c45b-Abstract.html">Alex Krizhevsky, Ilya Sutskever, Geoffrey E. Hinton. ImageNet Classification with Deep Convolutional NeuralNetworks. In NIPS, 2012.</a></p><p>使用relu激活函数提升激活速度，使用了dropout缓解了过拟合，</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/AlexNet-2.png" class="" title="AlexNet-2"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/AlexNet-3.png" class="" title="AlexNet-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNet8</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNet8, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">96</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.c3 = Conv2D(filters=<span class="number">384</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">                         </span><br><span class="line">        self.c4 = Conv2D(filters=<span class="number">384</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">                         </span><br><span class="line">        self.c5 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)        </span><br><span class="line">        self.p3 = MaxPool2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">2048</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d1 = Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">2048</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d2 = Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/VGGNet-1.png" class="" title="VGGNet-1"><p><a href="https://arxiv.org/abs/1409.1556">K. Simonyan, A. Zisserman. Very Deep Convolutional Networks for Large-Scale Image Recognition.In ICLR,2015</a></p><p>适合硬件加速</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/VGGNet-2.png" class="" title="VGGNet-2"><p>16层VGG网络<br><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/VGGNet-3.png" class="" title="VGGNet-3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VGG16</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(VGG16, self).__init__()</span><br><span class="line">        <span class="comment"># A） 第一部分： 两次卷积（64 个 3 * 3 卷积核、 BN、 Relu 激活） →最大池化→Dropout</span></span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)  <span class="comment"># 卷积层1</span></span><br><span class="line">        self.b1 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>, )</span><br><span class="line">        self.b2 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d1 = Dropout(<span class="number">0.2</span>)  <span class="comment"># dropout层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># B） 第二部分： 两次卷积（128 个 3 * 3 卷积核、 BN、 Relu 激活） →最大池化→Dropout</span></span><br><span class="line">        self.c3 = Conv2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b3 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a3 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c4 = Conv2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b4 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a4 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d2 = Dropout(<span class="number">0.2</span>)  <span class="comment"># dropout层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># C） 第三部分： 三次卷积（256 个 3 * 3 卷积核、 BN、 Relu 激活） →最大池化→Dropout</span></span><br><span class="line">        self.c5 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b5 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a5 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c6 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b6 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a6 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c7 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b7 = BatchNormalization()</span><br><span class="line">        self.a7 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p3 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d3 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># D） 第四部分： 三次卷积（512 个 3 * 3 卷积核、 BN、 Relu 激活） →最大池化→Dropout</span></span><br><span class="line">        self.c8 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b8 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a8 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c9 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b9 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a9 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c10 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b10 = BatchNormalization()</span><br><span class="line">        self.a10 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p4 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d4 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># E） 第五部分： 三次卷积（ 512 个 3 * 3 卷积核、 BN、 Relu 激活） →最大池化→Dropout</span></span><br><span class="line">        self.c11 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b11 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a11 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c12 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b12 = BatchNormalization()  <span class="comment"># BN层1</span></span><br><span class="line">        self.a12 = Activation(<span class="string">&#x27;relu&#x27;</span>)  <span class="comment"># 激活层1</span></span><br><span class="line">        </span><br><span class="line">        self.c13 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b13 = BatchNormalization()</span><br><span class="line">        self.a13 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p5 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d5 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># F） 第六部分： 全连接（ 512 个神经元） →Dropout→全连接（ 512 个神经元） →Dropout→全连接（ 10 个神经元）</span></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">512</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d6 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">512</span>, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d7 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure><p>卷积核的个数从64到128到256到512，逐渐增加，因为越靠后，特征图尺寸越小，通过增加卷积核的个数，增加了特征图深度，保持了信息的承载能力。</p><h1 id="InceptionNet"><a href="#InceptionNet" class="headerlink" title="InceptionNet"></a>InceptionNet</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/InceptionNet-1.png" class="" title="InceptionNet-1"><p><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Szegedy_Going_Deeper_With_2015_CVPR_paper.html">Szegedy C, Liu W, Jia Y, et al. Going Deeper with Convolutions. In CVPR, 2015.</a></p><p>InceptionNet引入了Inception结构块，在同一层网络内使用不同尺寸的卷积核，提升了模型感知力，使用了批标准化，缓解了梯度消失。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Inception%E7%BB%93%E6%9E%84%E5%9D%97.png" class="" title="Inception结构块"><p>Inception结构块在同一层网络中使用了多个尺寸的卷积核，可以提取不同尺寸的特征，通过1 × 1卷积核，作用到输入特征图的每个像素点。通过设定少于输入特征图深度的1 × 1卷积核个数，减少了输出特征图深度，起到了降维的作用，减少了参数量和计算量。</p><p>一个Inception结构块包含四个分支，<br>分别经过 1 × 1 卷积核输出到卷积连接器，<br>经过 1 × 1 卷积核配合 3 × 3 卷积核输出到卷积连接器，<br>经过 1 × 1 卷积核配合 5 × 5 卷积核输出到卷积连接器，<br>经过 3 × 3 最大池化核配合 1 × 1 卷积核输出到卷积连接器。</p><p>送到卷积连接器的特征数据尺寸相同，卷积连接器会把收到的这四路特征数据按深度方向拼接，形成Inception结构块的输出。</p><p>Inception结构块中的卷积操作均采用了CBA结构，先卷积，再BN，再采用relu激活函数，所以将其定义成一个新的类<code>ConvBNRelu</code>，可以减少代码长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBNRelu</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ch, kernelsz=<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">&#x27;same&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBNRelu, self).__init__()</span><br><span class="line">        self.model = tf.keras.models.Sequential([</span><br><span class="line">            Conv2D(ch, kernelsz, strides=strides, padding=padding),</span><br><span class="line">            BatchNormalization(),</span><br><span class="line">            Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model(x, training=<span class="literal">False</span>) <span class="comment">#在training=False时，BN通过整个训练集计算均值、方差去做批归一化，training=True时，通过当前batch的均值、方差去做批归一化。推理时 training=False效果好</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Inception%E7%BB%93%E6%9E%84%E5%9D%97%E5%AE%9E%E7%8E%B0.png" class="" title="Inception结构块实现"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InceptionBlk</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ch, strides=<span class="number">1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(InceptionBlk, self).__init__()</span><br><span class="line">        self.ch = ch</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.c1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line">        self.c2_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line">        self.c2_2 = ConvBNRelu(ch, kernelsz=<span class="number">3</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.c3_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line">        self.c3_2 = ConvBNRelu(ch, kernelsz=<span class="number">5</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.p4_1 = MaxPool2D(<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.c4_2 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x1 = self.c1(x)</span><br><span class="line">        x2_1 = self.c2_1(x)</span><br><span class="line">        x2_2 = self.c2_2(x2_1)</span><br><span class="line">        x3_1 = self.c3_1(x)</span><br><span class="line">        x3_2 = self.c3_2(x3_1)</span><br><span class="line">        x4_1 = self.p4_1(x)</span><br><span class="line">        x4_2 = self.c4_2(x4_1)</span><br><span class="line">        <span class="comment"># concat along axis=channel</span></span><br><span class="line">        x = tf.concat([x1, x2_2, x3_2, x4_2], axis=<span class="number">3</span>)<span class="comment"># 深度方向堆叠</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%B2%BE%E7%AE%80%E7%89%88%E6%9C%ACInceptionNet.png" class="" title="精简版本InceptionNet"><p>每两个inception结构块组合成一个block，每个block中第一个Inception结构块卷积步长是2，第二个Inception结构块卷积步长是1，这使得第一个Inception结构块输出特征图尺寸减半。因此将输出图特征图深度加深，尽可能保证特征抽取中信息的承载量一致，block_0 设置的通道数是16，经过了四个分支，输出的深度为 4 × 16 = 64。在这里给通道数加倍了，所以 block_1 通道数是 block_0 通道数的两倍，是32，同样，经过了四个分支，输出深度是 4 × 32 = 128。128个数据会被送进平均池化，送进十个分类的全连接，这里实例化了Inception10的类，指定了InceptionNet的block数是2，也就是 block_0 和 block_1 ，而后网络指定分几类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Inception10</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_blocks, num_classes, init_ch=<span class="number">16</span>, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(Inception10, self).__init__(**kwargs)</span><br><span class="line">        self.in_channels = init_ch</span><br><span class="line">        self.out_channels = init_ch</span><br><span class="line">        self.num_blocks = num_blocks</span><br><span class="line">        self.init_ch = init_ch</span><br><span class="line">        self.c1 = ConvBNRelu(init_ch)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> <span class="built_in">range</span>(num_blocks):</span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> layer_id == <span class="number">0</span>:</span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">1</span>)</span><br><span class="line">                self.blocks.add(block)</span><br><span class="line">            <span class="comment"># enlarger out_channels per block</span></span><br><span class="line">            self.out_channels *= <span class="number">2</span></span><br><span class="line">        self.p1 = GlobalAveragePooling2D()</span><br><span class="line">        self.f1 = Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = Inception10(num_blocks=<span class="number">2</span>, num_classes=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>训练时候可以调节batchsize大小，使显卡达到70%利用率即可。</p><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet-1.png" class="" title="ResNet-1"><p><a href="https://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html">Kaiming He, Xiangyu Zhang, Shaoqing Ren. Deep Residual Learning for Image Recognition. In CPVR,2016</a></p><p>ResNet提出了层间残差跳连，引入前方信息，缓解梯度消失，使神经网络层数增加成为可能。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet-2.png" class="" title="ResNet-2"><p>通过加深网络层数，取得了越来越好的效果。</p><p>然56层卷积网络错误率要高于20层卷积网络。</p><p>单纯的堆叠网络层数会使得网络模型退化，以至于后边特征丢失了前边特征的原本模样。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet%E4%B8%AD%E7%9A%84%E6%AE%8B%E5%B7%AE%E7%BB%93%E6%9E%84-1.png" class="" title="ResNet中的残差结构-1"><p>于是使用跳连线，将前边特征直接接到了后边，使得 H(x) 包含了堆叠卷积的非线性输出 F(x) ，和跳过这两层堆叠卷积，直接连接过来的恒等映射x，让它们的对应元素相加，这一操作有效缓解了神经网络模型堆叠导致的退化，使得神经网络可以向更深层级发展。</p><blockquote><p>Inception块中的 “+” 是沿深度方向叠加（千层蛋糕层数叠加）<br>ResNet块中的 “+” 是特征图对应元素值相加（矩阵值相加）</p></blockquote><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet%E4%B8%AD%E7%9A%84%E6%AE%8B%E5%B7%AE%E7%BB%93%E6%9E%84-2.png" class="" title="ResNet中的残差结构-2"><p>ResNet块中有两种情况，一种情况用图中的实线表示，这种情况两层堆叠卷积，没有改变特征图的维度，也就是它们特征图的个数、高、宽和深度都相同，可以直接将 F(x) 与 x 相加。<br>另一种情况用图中的虚线表示，这种情况中两层堆叠卷积改变了特征图的维度，需要借助 1 × 1 的卷积来调整 x 的维度，使 W(x) 与 F(x) 的维度一致。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet%E4%B8%AD%E7%9A%84%E6%AE%8B%E5%B7%AE%E7%BB%93%E6%9E%84-3.png" class="" title="ResNet中的残差结构-3"><p>ResNet块有两种形式，一种在堆叠卷积前后维度相同，另一种在堆叠卷积前后维度不同。<br>将ResNet块的两种结构封装到一个橙色块中，写出ResnetBlock类，每调用一次ResnetBlock类，会生成一个黄色块，如果堆叠卷积前后维度不同，residual_path 等于1，调用红色块里的代码，使用1 × 1卷积操作，调整输入特征图inputs的尺寸或深度后，将堆叠卷积输出特征 y 和 if 语句计算出的residual 相加，过激活，输出。<br>如果堆叠卷积前后维度相同，不执行红色块内的代码，直接将堆叠卷积输出特征y和输入特征图inputs相加，过激活，输出。<br>后续代码用橙色块拼接完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResnetBlock</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filters, strides=<span class="number">1</span>, residual_path=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ResnetBlock, self).__init__()</span><br><span class="line">        self.filters = filters</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.residual_path = residual_path</span><br><span class="line"></span><br><span class="line">        self.c1 = Conv2D(filters, (<span class="number">3</span>, <span class="number">3</span>), strides=strides, padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters, (<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">1</span>, padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span></span><br><span class="line">        <span class="keyword">if</span> residual_path:</span><br><span class="line">            self.down_c1 = Conv2D(filters, (<span class="number">1</span>, <span class="number">1</span>), strides=strides, padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">            self.down_b1 = BatchNormalization()</span><br><span class="line">        </span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">        residual = inputs  <span class="comment"># residual等于输入值本身，即residual=x</span></span><br><span class="line">        <span class="comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span></span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        y = self.b2(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.residual_path:</span><br><span class="line">            residual = self.down_c1(inputs)</span><br><span class="line">            residual = self.down_b1(residual)</span><br><span class="line"></span><br><span class="line">        out = self.a2(y + residual)  <span class="comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/ResNet%E4%B8%AD%E7%9A%84%E6%AE%8B%E5%B7%AE%E7%BB%93%E6%9E%84-4.png" class="" title="ResNet中的残差结构-4"><p>左侧给出的框图是ResNet18用CBAPD表示的结构，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResNet18</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, block_list, initial_filters=<span class="number">64</span></span>):  <span class="comment"># block_list表示每个block有几个卷积层</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet18, self).__init__()</span><br><span class="line">        self.num_blocks = <span class="built_in">len</span>(block_list)  <span class="comment"># 共有几个block</span></span><br><span class="line">        self.block_list = block_list</span><br><span class="line">        self.out_filters = initial_filters</span><br><span class="line">        self.c1 = Conv2D(self.out_filters, (<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">1</span>, padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line">        <span class="comment"># 构建ResNet网络结构</span></span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block_list)):  <span class="comment"># 第几个resnet block</span></span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> <span class="built_in">range</span>(block_list[block_id]):  <span class="comment"># 第几个卷积层</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> block_id != <span class="number">0</span> <span class="keyword">and</span> layer_id == <span class="number">0</span>:  <span class="comment"># 对除第一个block以外的每个block的输入进行下采样</span></span><br><span class="line">                    block = ResnetBlock(self.out_filters, strides=<span class="number">2</span>, residual_path=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    block = ResnetBlock(self.out_filters, residual_path=<span class="literal">False</span>)</span><br><span class="line">                self.blocks.add(block)  <span class="comment"># 将构建好的block加入resnet</span></span><br><span class="line">            self.out_filters *= <span class="number">2</span>  <span class="comment"># 下一个block的卷积核数是上一个block的2倍</span></span><br><span class="line">        self.p1 = tf.keras.layers.GlobalAveragePooling2D()</span><br><span class="line">        self.f1 = tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = ResNet18([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="经典卷积及网络小结"><a href="#经典卷积及网络小结" class="headerlink" title="经典卷积及网络小结"></a>经典卷积及网络小结</h1><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BB%8F%E5%85%B8%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C-1.png" class="" title="经典卷积网络-1"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%94%E8%AE%B2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BB%8F%E5%85%B8%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%E5%B0%8F%E7%BB%93.png" class="" title="经典卷积网络小结">]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第五讲卷积神经网络</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化</title>
    <link href="http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/"/>
    <id>http://hibiscidai.com/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2023-08-01T07:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96.png" class="" title="人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化"><p>人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化</p><span id="more"></span><p>[TOC]</p><h1 id="人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化"><a href="#人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化" class="headerlink" title="人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化"></a>人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化</h1><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="tf-where-判断"><a href="#tf-where-判断" class="headerlink" title="tf.where() | 判断"></a>tf.where() | 判断</h2><ul><li>条件语句真返回A，条件语句假返回B</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.where(条件语句, 真返回A, 假返回B)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">b=tf.constant([<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">c=tf.where(tf.greater(a, b), a, b) <span class="comment"># 若a&gt;b,返回a对应位置的元素，否则返回b对应位置的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c:&quot;</span>, c)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c: tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)</span><br></pre></td></tr></table></figure></p><h2 id="np-random-RandomState-rand-随机数"><a href="#np-random-RandomState-rand-随机数" class="headerlink" title="np.random.RandomState.rand() | 随机数"></a>np.random.RandomState.rand() | 随机数</h2><ul><li>返回一个[0, 1)之间的随机数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.RandomState.rand(维度)<span class="comment">#维度为空，返回标量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">rdm = np.random.RandomState(seed = <span class="number">1</span>) <span class="comment"># seed=常数每次生成随机数相同</span></span><br><span class="line">a = rdm.rand() <span class="comment"># 返回一个随机标量</span></span><br><span class="line">b = rdm.rand(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 返回维度为2行3列随机数矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b:&quot;</span>, b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a: 0.417022004702574</span><br><span class="line">b: [[7.20324493e-01 1.14374817e-04 3.02332573e-01]</span><br><span class="line">[1.46755891e-01 9.23385948e-02 1.86260211e-01]]</span><br></pre></td></tr></table></figure><h2 id="np-vstack-拼接叠加"><a href="#np-vstack-拼接叠加" class="headerlink" title="np.vstack() | 拼接叠加"></a>np.vstack() | 拼接叠加</h2><ul><li>将两个数组按垂直方向叠加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.vstack(数组<span class="number">1</span>, 数组<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">c = np.vstack((a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c:\n&quot;</span>, c)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:</span><br><span class="line">[[1 2 3]</span><br><span class="line">[4 5 6]]</span><br></pre></td></tr></table></figure><h2 id="np-mgrid-ravel-c-网格坐标点"><a href="#np-mgrid-ravel-c-网格坐标点" class="headerlink" title="np.mgrid .ravel .c | 网格坐标点"></a>np.mgrid .ravel .c | 网格坐标点</h2><p>通常配合使用，可以生成网格坐标点</p><h3 id="np-mgrid"><a href="#np-mgrid" class="headerlink" title="np.mgrid"></a>np.mgrid</h3><ul><li>返回若干组纬度相同的等差数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[起始值 : 结束值 : 步长 , 起始值 : 结束值 : 步长 , … ]</span><br><span class="line"><span class="comment"># [起始值, 结束值)</span></span><br></pre></td></tr></table></figure><h3 id="x-ravel"><a href="#x-ravel" class="headerlink" title="x.ravel()"></a>x.ravel()</h3><ul><li>将x变为一维数组</li></ul><p>相当于把变量拉直</p><h3 id="np-c"><a href="#np-c" class="headerlink" title="np.c"></a>np.c</h3><ul><li>使返回的间隔数值点配对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.c_[数组<span class="number">1</span>, 数组<span class="number">2</span>, ...]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x, y = np.mgrid [<span class="number">1</span>:<span class="number">3</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">4</span>:<span class="number">0.5</span>]</span><br><span class="line"><span class="comment"># 第一个等差数组返回 1., 2.</span></span><br><span class="line"><span class="comment"># 第二个等差数组返回 2., 2.5, 3., 3.5</span></span><br><span class="line"><span class="comment"># 为了保证纬度相同, 以数多的为准, 所以返回两行四列</span></span><br><span class="line"></span><br><span class="line">grid = np.c_[x.ravel(), y.ravel()]</span><br><span class="line"><span class="comment"># 讲x和y配对输出</span></span><br><span class="line"><span class="comment"># x = 1. 时</span></span><br><span class="line"><span class="comment"># y = 2., 2.5, 3., 3.5</span></span><br><span class="line"><span class="comment"># [1. 2.] [1. 2.5] [1. 3.] [1. 3.5]</span></span><br><span class="line"><span class="comment"># x = 2. 时</span></span><br><span class="line"><span class="comment"># y = 2., 2.5, 3., 3.5</span></span><br><span class="line"><span class="comment"># [2. 2.] [2. 2.5] [2. 3.] [2. 3.5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;grid:\n&#x27;</span>, grid)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = [[1. 1. 1. 1.]</span><br><span class="line">[2. 2. 2. 2.]]</span><br><span class="line">y = [[2. 2.5 3. 3.5]</span><br><span class="line">[2. 2.5 3. 3.5]]</span><br><span class="line"></span><br><span class="line">grid:</span><br><span class="line">[[1. 2. ]</span><br><span class="line">[1. 2.5]</span><br><span class="line">[1. 3. ]</span><br><span class="line">[1. 3.5]</span><br><span class="line">[2. 2. ]</span><br><span class="line">[2. 2.5]</span><br><span class="line">[2. 3. ]</span><br><span class="line">[2. 3.5]]</span><br></pre></td></tr></table></figure><h1 id="复杂度学习率"><a href="#复杂度学习率" class="headerlink" title="复杂度学习率"></a>复杂度学习率</h1><p><strong>空间复杂度</strong>用神经网络层数和神经网络中待优化参数的个数表示</p><p><strong>时间复杂度</strong>可以用神经网络中乘加运算的次数表示</p><p>计算神经网络层数时，只统计具有运算能力的层</p><p>输入层仅仅把数据传输过来，没有运算，统计网络层数时候，不算输入层</p><p>输入层和输出层之间，所有层都叫做隐藏层</p><p>神经网络的层数是n个隐藏层的层数加上1个输出层</p><h2 id="时间空间复杂度"><a href="#时间空间复杂度" class="headerlink" title="时间空间复杂度"></a>时间空间复杂度</h2><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E6%A1%88%E4%BE%8B.png" class="" title="网络结构案例"><p>输入层有三个节点</p><p>隐藏层只有一层，有四个节点</p><p>输出层有两个节点</p><p>这个网络共有两层神经网络，分别是隐藏层和输出层</p><p>参数的个数是所有w和b的总数</p><p>第一层参数是三行四列个w加上4个偏置项b，每个神经元有一个偏置项b，有3 * 4 + 4 = 16 个参数</p><p>第二层参数是四行两列个w加上2个偏置项b，每个神经元有一个偏置项b，有4 * 2 + 2 = 10 个参数</p><p>每个具有计算能力的神经元小球，都要收集前一层的每一个输入特征乘以各自线上的权重w，再加上这个神经元的偏置项b。</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>层数 = 隐藏层的层数 + 1个输出层 = 2</p><p>总参数 = 总w + 总b = 26<br>    第一层 = 3×4+4 = 16<br>    第二层 = 4×2+2 = 10</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>乘加运算次数 = 20<br>    第一层 = 3×4 = 12<br>    第二层 = 4×2 = 8</p><h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><script type="math/tex; mode=display">w_{t+1} = w_{t} - lr * \frac{\partial loss}{\partial w_{t}}</script><p>$ w_{t+1} $ : 更新后的参数</p><p>$ w_{t} $ : 当前参数</p><p>$ lr $ : 学习率</p><p>$ \frac{\partial loss}{\partial w_{t}} $ ：损失函数的梯度（偏导数）</p><p>损失函数：<script type="math/tex">loss = (w+1)^{2}</script></p><p>$ \frac{\partial loss}{\partial w_{t}} = 2w+2 $</p><p>参数w初始化为5，学习率为0.2，则<br>1次    参数w=5    5-0.2×(2×5+2)=2.6<br>2次    参数w=2.6    2.6-0.2×(2×2.6+2)=1.16<br>3次    参数w=1.16    1.16-0.2×(2×1.16+2)=0.296<br>4次    参数w=0.296<br>…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.constant(<span class="number">5</span>, dtype=tf.float32))</span><br><span class="line">lr = <span class="number">0.2</span></span><br><span class="line">epoch = <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># for epoch 定义顶层循环，表示对数据集循环epoch次，此例数据集数据仅有1个w,初始化时候constant赋值为5，循环40次迭代。</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构到grads框起了梯度的计算过程。</span></span><br><span class="line">        loss = tf.square(w + <span class="number">1</span>)</span><br><span class="line">    grads = tape.gradient(loss, w)  <span class="comment"># .gradient函数告知谁对谁求导</span></span><br><span class="line"></span><br><span class="line">    w.assign_sub(lr * grads)  <span class="comment"># .assign_sub 对变量做自减 即：w -= lr*grads 即 w = w - lr*grads</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After %s epoch,w is %f,loss is %f&quot;</span> % (epoch, w.numpy(), loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># lr初始值：0.2   请自改学习率  0.001  0.999 看收敛过程</span></span><br><span class="line"><span class="comment"># 最终目的：找到 loss 最小 即 w = -1 的最优参数w</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">After 0 epoch,w is 2.600000,loss is 36.000000</span><br><span class="line">After 1 epoch,w is 1.160000,loss is 12.959999</span><br><span class="line">After 2 epoch,w is 0.296000,loss is 4.665599</span><br><span class="line">After 3 epoch,w is -0.222400,loss is 1.679616</span><br><span class="line">After 4 epoch,w is -0.533440,loss is 0.604662</span><br><span class="line">After 5 epoch,w is -0.720064,loss is 0.217678</span><br><span class="line">After 6 epoch,w is -0.832038,loss is 0.078364</span><br><span class="line">After 7 epoch,w is -0.899223,loss is 0.028211</span><br><span class="line">After 8 epoch,w is -0.939534,loss is 0.010156</span><br><span class="line">After 9 epoch,w is -0.963720,loss is 0.003656</span><br><span class="line">After 10 epoch,w is -0.978232,loss is 0.001316</span><br><span class="line">After 11 epoch,w is -0.986939,loss is 0.000474</span><br><span class="line">After 12 epoch,w is -0.992164,loss is 0.000171</span><br><span class="line">After 13 epoch,w is -0.995298,loss is 0.000061</span><br><span class="line">After 14 epoch,w is -0.997179,loss is 0.000022</span><br><span class="line">After 15 epoch,w is -0.998307,loss is 0.000008</span><br><span class="line">After 16 epoch,w is -0.998984,loss is 0.000003</span><br><span class="line">After 17 epoch,w is -0.999391,loss is 0.000001</span><br><span class="line">After 18 epoch,w is -0.999634,loss is 0.000000</span><br><span class="line">After 19 epoch,w is -0.999781,loss is 0.000000</span><br><span class="line">After 20 epoch,w is -0.999868,loss is 0.000000</span><br><span class="line">After 21 epoch,w is -0.999921,loss is 0.000000</span><br><span class="line">After 22 epoch,w is -0.999953,loss is 0.000000</span><br><span class="line">After 23 epoch,w is -0.999972,loss is 0.000000</span><br><span class="line">After 24 epoch,w is -0.999983,loss is 0.000000</span><br><span class="line">After 25 epoch,w is -0.999990,loss is 0.000000</span><br><span class="line">After 26 epoch,w is -0.999994,loss is 0.000000</span><br><span class="line">After 27 epoch,w is -0.999996,loss is 0.000000</span><br><span class="line">After 28 epoch,w is -0.999998,loss is 0.000000</span><br><span class="line">After 29 epoch,w is -0.999999,loss is 0.000000</span><br><span class="line">After 30 epoch,w is -0.999999,loss is 0.000000</span><br><span class="line">After 31 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 32 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 33 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 34 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 35 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 36 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 37 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 38 epoch,w is -1.000000,loss is 0.000000</span><br><span class="line">After 39 epoch,w is -1.000000,loss is 0.000000</span><br></pre></td></tr></table></figure></p><p>lr=0.001过慢</p><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">After 0 epoch,w is 4.988000,loss is 36.000000</span><br><span class="line">After 1 epoch,w is 4.976024,loss is 35.856144</span><br><span class="line">After 2 epoch,w is 4.964072,loss is 35.712864</span><br><span class="line">After 3 epoch,w is 4.952144,loss is 35.570156</span><br><span class="line">After 4 epoch,w is 4.940240,loss is 35.428020</span><br><span class="line">After 5 epoch,w is 4.928360,loss is 35.286449</span><br><span class="line">After 6 epoch,w is 4.916503,loss is 35.145447</span><br><span class="line">After 7 epoch,w is 4.904670,loss is 35.005009</span><br><span class="line">After 8 epoch,w is 4.892860,loss is 34.865124</span><br><span class="line">After 9 epoch,w is 4.881075,loss is 34.725803</span><br><span class="line">After 10 epoch,w is 4.869313,loss is 34.587044</span><br><span class="line">After 11 epoch,w is 4.857574,loss is 34.448833</span><br><span class="line">After 12 epoch,w is 4.845859,loss is 34.311172</span><br><span class="line">After 13 epoch,w is 4.834167,loss is 34.174068</span><br><span class="line">After 14 epoch,w is 4.822499,loss is 34.037510</span><br><span class="line">After 15 epoch,w is 4.810854,loss is 33.901497</span><br><span class="line">After 16 epoch,w is 4.799233,loss is 33.766029</span><br><span class="line">After 17 epoch,w is 4.787634,loss is 33.631104</span><br><span class="line">After 18 epoch,w is 4.776059,loss is 33.496712</span><br><span class="line">After 19 epoch,w is 4.764507,loss is 33.362858</span><br><span class="line">After 20 epoch,w is 4.752978,loss is 33.229538</span><br><span class="line">After 21 epoch,w is 4.741472,loss is 33.096756</span><br><span class="line">After 22 epoch,w is 4.729989,loss is 32.964497</span><br><span class="line">After 23 epoch,w is 4.718529,loss is 32.832775</span><br><span class="line">After 24 epoch,w is 4.707092,loss is 32.701576</span><br><span class="line">After 25 epoch,w is 4.695678,loss is 32.570904</span><br><span class="line">After 26 epoch,w is 4.684287,loss is 32.440750</span><br><span class="line">After 27 epoch,w is 4.672918,loss is 32.311119</span><br><span class="line">After 28 epoch,w is 4.661572,loss is 32.182003</span><br><span class="line">After 29 epoch,w is 4.650249,loss is 32.053402</span><br><span class="line">After 30 epoch,w is 4.638949,loss is 31.925320</span><br><span class="line">After 31 epoch,w is 4.627671,loss is 31.797745</span><br><span class="line">After 32 epoch,w is 4.616416,loss is 31.670683</span><br><span class="line">After 33 epoch,w is 4.605183,loss is 31.544128</span><br><span class="line">After 34 epoch,w is 4.593973,loss is 31.418077</span><br><span class="line">After 35 epoch,w is 4.582785,loss is 31.292530</span><br><span class="line">After 36 epoch,w is 4.571619,loss is 31.167484</span><br><span class="line">After 37 epoch,w is 4.560476,loss is 31.042938</span><br><span class="line">After 38 epoch,w is 4.549355,loss is 30.918892</span><br><span class="line">After 39 epoch,w is 4.538256,loss is 30.795341</span><br></pre></td></tr></table></figure><p>lr=0.999不收敛</p><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">After 0 epoch,w is -6.988000,loss is 36.000000</span><br><span class="line">After 1 epoch,w is 4.976024,loss is 35.856144</span><br><span class="line">After 2 epoch,w is -6.964072,loss is 35.712860</span><br><span class="line">After 3 epoch,w is 4.952145,loss is 35.570156</span><br><span class="line">After 4 epoch,w is -6.940241,loss is 35.428024</span><br><span class="line">After 5 epoch,w is 4.928361,loss is 35.286461</span><br><span class="line">After 6 epoch,w is -6.916504,loss is 35.145462</span><br><span class="line">After 7 epoch,w is 4.904671,loss is 35.005020</span><br><span class="line">After 8 epoch,w is -6.892861,loss is 34.865135</span><br><span class="line">After 9 epoch,w is 4.881076,loss is 34.725815</span><br><span class="line">After 10 epoch,w is -6.869314,loss is 34.587051</span><br><span class="line">After 11 epoch,w is 4.857575,loss is 34.448849</span><br><span class="line">After 12 epoch,w is -6.845860,loss is 34.311192</span><br><span class="line">After 13 epoch,w is 4.834168,loss is 34.174084</span><br><span class="line">After 14 epoch,w is -6.822500,loss is 34.037521</span><br><span class="line">After 15 epoch,w is 4.810855,loss is 33.901508</span><br><span class="line">After 16 epoch,w is -6.799233,loss is 33.766033</span><br><span class="line">After 17 epoch,w is 4.787635,loss is 33.631107</span><br><span class="line">After 18 epoch,w is -6.776060,loss is 33.496716</span><br><span class="line">After 19 epoch,w is 4.764508,loss is 33.362869</span><br><span class="line">After 20 epoch,w is -6.752979,loss is 33.229557</span><br><span class="line">After 21 epoch,w is 4.741473,loss is 33.096771</span><br><span class="line">After 22 epoch,w is -6.729990,loss is 32.964516</span><br><span class="line">After 23 epoch,w is 4.718530,loss is 32.832787</span><br><span class="line">After 24 epoch,w is -6.707093,loss is 32.701580</span><br><span class="line">After 25 epoch,w is 4.695680,loss is 32.570911</span><br><span class="line">After 26 epoch,w is -6.684288,loss is 32.440765</span><br><span class="line">After 27 epoch,w is 4.672919,loss is 32.311131</span><br><span class="line">After 28 epoch,w is -6.661573,loss is 32.182014</span><br><span class="line">After 29 epoch,w is 4.650250,loss is 32.053413</span><br><span class="line">After 30 epoch,w is -6.638950,loss is 31.925329</span><br><span class="line">After 31 epoch,w is 4.627672,loss is 31.797762</span><br><span class="line">After 32 epoch,w is -6.616417,loss is 31.670694</span><br><span class="line">After 33 epoch,w is 4.605185,loss is 31.544140</span><br><span class="line">After 34 epoch,w is -6.593974,loss is 31.418095</span><br><span class="line">After 35 epoch,w is 4.582787,loss is 31.292547</span><br><span class="line">After 36 epoch,w is -6.571621,loss is 31.167505</span><br><span class="line">After 37 epoch,w is 4.560478,loss is 31.042959</span><br><span class="line">After 38 epoch,w is -6.549357,loss is 30.918919</span><br><span class="line">After 39 epoch,w is 4.538259,loss is 30.795368</span><br></pre></td></tr></table></figure><h3 id="指数衰减学习率"><a href="#指数衰减学习率" class="headerlink" title="指数衰减学习率"></a>指数衰减学习率</h3><p>可以先用较大的学习率，快速得到较优解，然后逐步减小学习率，使模型在训练后期稳定。</p><p><strong><script type="math/tex">指数衰减学习率 = 初始学习率 × 学习率衰减率^{（ 当前轮数 / 多少轮衰减一次 ）}</script></strong></p><p><code>初始学习率</code>、<code>学习率衰减率</code>、<code>多少轮衰减一次</code>：超参数</p><p><code>当前轮数</code>：变量、计数器，可以用当前跌倒了多少次数据集，也就是epoch数值表示；也可以用当前一共迭代了多少次batch也就是golobal_step表示</p><p><code>多少轮衰减一次</code>：迭代多少次数据集，或者迭代多少次batch更新一次学习率；决定了学习率更新的频率</p><p>指数衰减学习率的计算一般写在for循环中</p><p>在上个代码中添加指数衰减学习率后</p><p>使得学习率根据迭代的轮数指数衰减了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.constant(<span class="number">5</span>, dtype=tf.float32))</span><br><span class="line"></span><br><span class="line">epoch = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">LR_BASE = <span class="number">0.2</span>  <span class="comment"># 最初学习率</span></span><br><span class="line">LR_DECAY = <span class="number">0.99</span>  <span class="comment"># 学习率衰减率</span></span><br><span class="line">LR_STEP = <span class="number">1</span>  <span class="comment"># 喂入多少轮BATCH_SIZE后，更新一次学习率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># for epoch 定义顶层循环，表示对数据集循环epoch次，此例数据集数据仅有1个w,初始化时候constant赋值为5，循环100次迭代。</span></span><br><span class="line">    lr = LR_BASE * LR_DECAY ** (epoch / LR_STEP)<span class="comment">#指数衰减学习率</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构到grads框起了梯度的计算过程。</span></span><br><span class="line">        loss = tf.square(w + <span class="number">1</span>)</span><br><span class="line">    grads = tape.gradient(loss, w)  <span class="comment"># .gradient函数告知谁对谁求导</span></span><br><span class="line"></span><br><span class="line">    w.assign_sub(lr * grads)  <span class="comment"># .assign_sub 对变量做自减 即：w -= lr*grads 即 w = w - lr*grads</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After %s epoch,w is %f,loss is %f,lr is %f&quot;</span> % (epoch, w.numpy(), loss, lr))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">After 0 epoch,w is 2.600000,loss is 36.000000,lr is 0.200000</span><br><span class="line">After 1 epoch,w is 1.174400,loss is 12.959999,lr is 0.198000</span><br><span class="line">After 2 epoch,w is 0.321948,loss is 4.728015,lr is 0.196020</span><br><span class="line">After 3 epoch,w is -0.191126,loss is 1.747547,lr is 0.194060</span><br><span class="line">After 4 epoch,w is -0.501926,loss is 0.654277,lr is 0.192119</span><br><span class="line">After 5 epoch,w is -0.691392,loss is 0.248077,lr is 0.190198</span><br><span class="line">After 6 epoch,w is -0.807611,loss is 0.095239,lr is 0.188296</span><br><span class="line">After 7 epoch,w is -0.879339,loss is 0.037014,lr is 0.186413</span><br><span class="line">After 8 epoch,w is -0.923874,loss is 0.014559,lr is 0.184549</span><br><span class="line">After 9 epoch,w is -0.951691,loss is 0.005795,lr is 0.182703</span><br><span class="line">After 10 epoch,w is -0.969167,loss is 0.002334,lr is 0.180876</span><br><span class="line">After 11 epoch,w is -0.980209,loss is 0.000951,lr is 0.179068</span><br><span class="line">After 12 epoch,w is -0.987226,loss is 0.000392,lr is 0.177277</span><br><span class="line">After 13 epoch,w is -0.991710,loss is 0.000163,lr is 0.175504</span><br><span class="line">After 14 epoch,w is -0.994591,loss is 0.000069,lr is 0.173749</span><br><span class="line">After 15 epoch,w is -0.996452,loss is 0.000029,lr is 0.172012</span><br><span class="line">After 16 epoch,w is -0.997660,loss is 0.000013,lr is 0.170292</span><br><span class="line">After 17 epoch,w is -0.998449,loss is 0.000005,lr is 0.168589</span><br><span class="line">After 18 epoch,w is -0.998967,loss is 0.000002,lr is 0.166903</span><br><span class="line">After 19 epoch,w is -0.999308,loss is 0.000001,lr is 0.165234</span><br><span class="line">After 20 epoch,w is -0.999535,loss is 0.000000,lr is 0.163581</span><br><span class="line">After 21 epoch,w is -0.999685,loss is 0.000000,lr is 0.161946</span><br><span class="line">After 22 epoch,w is -0.999786,loss is 0.000000,lr is 0.160326</span><br><span class="line">After 23 epoch,w is -0.999854,loss is 0.000000,lr is 0.158723</span><br><span class="line">After 24 epoch,w is -0.999900,loss is 0.000000,lr is 0.157136</span><br><span class="line">After 25 epoch,w is -0.999931,loss is 0.000000,lr is 0.155564</span><br><span class="line">After 26 epoch,w is -0.999952,loss is 0.000000,lr is 0.154009</span><br><span class="line">After 27 epoch,w is -0.999967,loss is 0.000000,lr is 0.152469</span><br><span class="line">After 28 epoch,w is -0.999977,loss is 0.000000,lr is 0.150944</span><br><span class="line">After 29 epoch,w is -0.999984,loss is 0.000000,lr is 0.149434</span><br><span class="line">After 30 epoch,w is -0.999989,loss is 0.000000,lr is 0.147940</span><br><span class="line">After 31 epoch,w is -0.999992,loss is 0.000000,lr is 0.146461</span><br><span class="line">After 32 epoch,w is -0.999994,loss is 0.000000,lr is 0.144996</span><br><span class="line">After 33 epoch,w is -0.999996,loss is 0.000000,lr is 0.143546</span><br><span class="line">After 34 epoch,w is -0.999997,loss is 0.000000,lr is 0.142111</span><br><span class="line">After 35 epoch,w is -0.999998,loss is 0.000000,lr is 0.140690</span><br><span class="line">After 36 epoch,w is -0.999999,loss is 0.000000,lr is 0.139283</span><br><span class="line">After 37 epoch,w is -0.999999,loss is 0.000000,lr is 0.137890</span><br><span class="line">After 38 epoch,w is -0.999999,loss is 0.000000,lr is 0.136511</span><br><span class="line">After 39 epoch,w is -0.999999,loss is 0.000000,lr is 0.135146</span><br></pre></td></tr></table></figure><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p>鸢尾花的神经网络模型如下图所示，其激活函数是线性函数，即使增加网络层数，依旧为线性，模型的表达能力不够。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" class="" title="鸢尾花神经网络激活函数"><script type="math/tex; mode=display">y = x * w + b</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/MP%E6%A8%A1%E5%9E%8B%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" class="" title="MP模型激活函数"><script type="math/tex; mode=display">y = f ( x * w + b )</script><p>相较于线性网络结构，多了一个非线性函数，叫做激活函数，提升了模型的表达力。</p><p>使得网络不再是简单的线性组合，可以随着层数的增加提升表达能力。</p><h2 id="优秀的激活函数"><a href="#优秀的激活函数" class="headerlink" title="优秀的激活函数"></a>优秀的激活函数</h2><p>• 非线性： 激活函数非线性时，多层神经网络可逼近所有函数</p><p>• 可微性： 优化器大多用梯度下降更新参数</p><p>• 单调性： 当激活函数是单调的，能保证单层网络的损失函数是凸函数</p><p>• 近似恒等性： f(x)≈x当参数初始化为随机小值时，神经网络更稳定</p><h2 id="激活函数输出值的范围"><a href="#激活函数输出值的范围" class="headerlink" title="激活函数输出值的范围"></a>激活函数输出值的范围</h2><p>• 激活函数输出为有限值时，权重对特征的影响会更显著，基于梯度的优化方法更稳定</p><p>• 激活函数输出为无限值时，参数的初始值对模型的影响非常大，建议调小学习率</p><h2 id="常用激活函数"><a href="#常用激活函数" class="headerlink" title="常用激活函数"></a>常用激活函数</h2><h3 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.sigmoid(x)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(x) = \frac{1}{1 + e^{-x}}</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/sigmoid%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="sigmoid函数图像"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/sigmoid%E5%AF%BC%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="sigmoid导数图像"><p>Sigmoid函数把输入值变换到0~1之间输出</p><p>输入非常大的负数，为0；输入非常大的整数，为1。相当于归一化操作。</p><p>深层神经网络更新参数时，需要从输出层到输入层逐层进行链式求导。但Sigmoid函数的倒数输出是0~0.25之间的小数。会出现多个0到0.25之间的连续相乘，结果将趋近于0，产生梯度消失，使得参数无法继续更新。我们希望输入每层神经网络的特征是以0为均值的小数值。但是如果Sigmoid激活函数后的数据都是正数，会使得收敛变慢。另外，Sigmoid函数存在幂运算计算复杂度过大，训练时间长。</p><p>特点：</p><p>（1）易造成梯度消失</p><p>（2）输出非0均值，收敛慢</p><p>（3）幂运算复杂，训练时间长</p><h4 id="Sigmoid函数API"><a href="#Sigmoid函数API" class="headerlink" title="Sigmoid函数API"></a>Sigmoid函数API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.math.sigmoid(</span><br><span class="line">x, name = <span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算x每一个元素的Sigmoid值</li><li>等价API：<code>tf.nn.sigmoid, tf.sigmoid</code></li><li>参数：<br>  <code>x</code> : 张量x</li><li>返回：与x shape相同的张量</li><li>案例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], )</span><br><span class="line"><span class="built_in">print</span>(tf.math.sigmoid(x))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.7310586</span> <span class="number">0.880797</span> <span class="number">0.95257413</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>/(<span class="number">1</span>+tf.math.exp(-x)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.7310586</span> <span class="number">0.880797</span> <span class="number">0.95257413</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="Tanh函数"><a href="#Tanh函数" class="headerlink" title="Tanh函数"></a>Tanh函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.math.tanh(x)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(x) = \frac{1 - e^{-2x}}{1 + e^{-2x}}</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/tanh%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="tanh函数图像"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/tanh%E5%AF%BC%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="tanh导数图像"><p>特点：</p><p>（1）输出是0均值</p><p>（2）易造成梯度消失</p><p>（3）幂运算复杂，训练时间长</p><h4 id="Tanh函数API"><a href="#Tanh函数API" class="headerlink" title="Tanh函数API"></a>Tanh函数API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.math.tanh(</span><br><span class="line">x, name = <span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算x每一个元素的Tanh值</li><li>等价API：<code>tf.nn.tanh, tf.tanh</code></li><li>参数：<br>  <code>x</code> : 张量x</li><li>返回：与x shape相同的张量</li><li>案例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([-<span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>), -<span class="number">5</span>, -<span class="number">0.5</span>, <span class="number">1</span>, <span class="number">1.2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)])</span><br><span class="line"><span class="built_in">print</span>(tf.math.tanh(x))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([-<span class="number">1.</span> -<span class="number">0.99990916</span> -<span class="number">0.46211717</span> <span class="number">0.7615942</span> <span class="number">0.8336547</span> <span class="number">0.9640276</span></span><br><span class="line"><span class="number">0.9950547</span> <span class="number">1.</span>], shape=(<span class="number">8</span>,), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>((tf.math.exp(x)-tf.math.exp(-x))/(tf.math.exp(x)+tf.math.exp(-x)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([nan -<span class="number">0.9999091</span> -<span class="number">0.46211714</span> <span class="number">0.7615942</span> <span class="number">0.83365464</span> <span class="number">0.9640275</span></span><br><span class="line"><span class="number">0.9950547</span> nan], shape=(<span class="number">8</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="Relu函数"><a href="#Relu函数" class="headerlink" title="Relu函数"></a>Relu函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.relu(x)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(x) = max(x, 0)  = \left\{ \begin{array}{rcl} 0 & x<0 \\ x & x>=0 \end{array} \right.</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/relu%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="relu函数图像"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/relu%E5%AF%BC%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="relu导数图像"><p>优点：</p><p>（1） 解决了梯度消失问题 (在正区间)</p><p>（2） 只需判断输入是否大于0，计算速度快</p><p>（3） 收敛速度远快于sigmoid和tanh</p><p>缺点：</p><p>（1） 输出非0均值，收敛慢</p><p>（2） Dead RelU问题：某些神经元可能永远不会被激活，导致相应的参数永远不能被更新。送入激活函数的输入特征是负数时，激活函数输出是0，反向传播得到的梯度是0，参数无法更新，神经元死亡。神经元死亡的原因是，经过relu函数的负数特征过多，可以改进随机初始化，避免过多的负数特征送入relu函数。可以通过设置更小的学习率，减少参数分布的巨大变化，避免训练中产生过多负数特征进入relu函数。</p><h4 id="Relu函数API"><a href="#Relu函数API" class="headerlink" title="Relu函数API"></a>Relu函数API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.relu(</span><br><span class="line">features, name = <span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算修正线性值(rectified linear)：max(features, 0).</li><li>参数：<br>  features：张量</li><li>返回：与features shape相同的张量</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tf.nn.relu([-<span class="number">2.</span>, <span class="number">0.</span>, -<span class="number">0.</span>, <span class="number">3.</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.</span> <span class="number">0.</span> -<span class="number">0.</span> <span class="number">3.</span>], shape=(<span class="number">4</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="Leaky-Relu函数"><a href="#Leaky-Relu函数" class="headerlink" title="Leaky Relu函数"></a>Leaky Relu函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.leaky_relu(x)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(x) = max(\alpha x, x) = \left\{ \begin{array}{rcl} \alpha x & x<0 \\ x & x>=0 \end{array} \right.</script><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/leakyrelu%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="leakyrelu函数图像"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/leakyrelu%E5%AF%BC%E6%95%B0%E5%9B%BE%E5%83%8F.png" class="" title="leakyrelu导数图像"><p>Leaky Relu函数是为了解决relu负区间为0，引起神经元死亡问题而设计的，Leaky Relu负区间引入了一个固定的斜率α，使得Leaky Relu负区间不再恒等于0。</p><p>理论上来讲， Leaky Relu有Relu的所有优点，外加不会有Dead Relu问题，但是在实际操作当中，并没有完全证明Leaky Relu总是好于Relu，选择Relu作为激活函数的网络会更多。</p><p>对于初学者的建议：</p><ul><li>首选relu激活函数；</li><li>学习率设置较小值；</li><li>输入特征标准化，即让输入特征满足以0为均值，1为标准差的正态分布；</li><li>初始参数中心化，即让随机生成的参数满足以0为均值， $ \sqrt{\frac{2}{当前层输入特征个数}} $ 为标准差的正态分布。</li></ul><h4 id="Leaky-Relu函数API"><a href="#Leaky-Relu函数API" class="headerlink" title="Leaky Relu函数API"></a>Leaky Relu函数API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.leaky_relu(</span><br><span class="line">features, alpha=<span class="number">0.2</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算 Leaky Relu值</li><li>参数：<br>  features：张量<br>  alpha：x&lt;0时的斜率值</li><li>返回：与features shape相同的张量</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tf.nn.leaky_relu([-<span class="number">2.</span>, <span class="number">0.</span>, -<span class="number">0.</span>, <span class="number">3.</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([-<span class="number">0.4</span> <span class="number">0.</span> -<span class="number">0.</span> <span class="number">3.</span>], shape=(<span class="number">4</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p>损失函数(loss)：向前传播计算出的预测值(y)与已知答案( y_ )的差距</p><p>神经网络的优化目标就是找到某套参数，使得计算出来的结果y和已知标准答案 y_ 无限接近，也就是他们的差距loss值最小。</p><p>主流loss有三种计算方法：均方误差、自定义和交叉熵。</p><h2 id="均方误差MSE"><a href="#均方误差MSE" class="headerlink" title="均方误差MSE"></a>均方误差MSE</h2><script type="math/tex; mode=display">MSE(y_{\_}, y) = \frac{\sum_{i=1}^{n}(y-y_{\_})^{2} }{n}</script><p>Tensorflow是这样实现均方误差损失函数计算的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_mse = tf.reduce_mean(tf.square(y, y_))</span><br></pre></td></tr></table></figure><h3 id="MSE-API"><a href="#MSE-API" class="headerlink" title="MSE-API"></a>MSE-API</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.losses.MSE(</span><br><span class="line">y_true, y_pred</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算<code>y_true</code>和<code>y_pred</code>的均方误差</li><li>例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y_true = tf.constant([<span class="number">0.5</span>, <span class="number">0.8</span>])</span><br><span class="line">y_pred = tf.constant([<span class="number">1.0</span>, <span class="number">1.0</span>])</span><br><span class="line"><span class="built_in">print</span>(tf.keras.losses.MSE(y_true, y_pred))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor(<span class="number">0.145</span>, shape=(), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(tf.reduce_mean(tf.square(y_true - y_pred)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor(<span class="number">0.145</span>, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure></li></ul><h3 id="MSE案例"><a href="#MSE案例" class="headerlink" title="MSE案例"></a>MSE案例</h3><p>预测酸奶日销量y， x1、 x2是影响日销量的因素。<br>建模前，应预先采集的数据有：每日x1、 x2和销量y<em>（即已知答案，最佳情况：产量=销量）<br>拟造数据集 X,Y</em>： y_ = x1 + x2 噪声： -0.05 ~ +0.05 拟合可以预测销量的函数</p><p>缺少数据集自己造，一层神经网络，预测酸奶的日销量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">SEED = <span class="number">23455</span></span><br><span class="line"></span><br><span class="line">rdm = np.random.RandomState(seed=SEED)  <span class="comment"># 生成[0,1)之间的随机数</span></span><br><span class="line">x = rdm.rand(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">y_ = [[x1 + x2 + (rdm.rand() / <span class="number">10.0</span> - <span class="number">0.05</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> x]  <span class="comment"># 生成噪声[0,1)/10=[0,0.1); [0,0.1)-0.05=[-0.05,0.05)</span></span><br><span class="line">x = tf.cast(x, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">w1 = tf.Variable(tf.random.normal([<span class="number">2</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">epoch = <span class="number">15000</span></span><br><span class="line">lr = <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        y = tf.matmul(x, w1)</span><br><span class="line">        loss_mse = tf.reduce_mean(tf.square(y_ - y))</span><br><span class="line"></span><br><span class="line">    grads = tape.gradient(loss_mse, w1)</span><br><span class="line">    w1.assign_sub(lr * grads)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After %d training steps,w1 is &quot;</span> % (epoch))</span><br><span class="line">        <span class="built_in">print</span>(w1.numpy(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Final w1 is: &quot;</span>, w1.numpy())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">After 0 training steps,w1 is </span><br><span class="line">[[-0.8096241]</span><br><span class="line"> [ 1.4855157]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">After 3000 training steps,w1 is </span><br><span class="line">[[0.61725086]</span><br><span class="line"> [1.332841  ]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">After 6000 training steps,w1 is </span><br><span class="line">[[0.88665503]</span><br><span class="line"> [1.098054  ]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">After 10000 training steps,w1 is </span><br><span class="line">[[0.9801975]</span><br><span class="line"> [1.0159837]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">After 12000 training steps,w1 is </span><br><span class="line">[[0.9933934]</span><br><span class="line"> [1.0044063]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Final w1 is:  [[1.0009792]</span><br><span class="line"> [0.9977485]]</span><br></pre></td></tr></table></figure><p>两个参数正向着1趋近，最后得到神经网络的参数是接近1的。</p><p>最终拟合结果：<script type="math/tex">y = 1.00 × x_{1} + 1.00 × x_{2}</script></p><p>结果和制造数据集的公式一致。</p><h2 id="自定义损失函数"><a href="#自定义损失函数" class="headerlink" title="自定义损失函数"></a>自定义损失函数</h2><p>使用均方误差使用损失函数，默认认为销量预测的多了或者少了，损失是一样的。</p><p>而真实情况是，商品销量预测多了，损失的是成本；预测少了，损失的是利润。</p><p>利润和成本往往不相等，则MSE产生的loss不能使得利益最大化。</p><p>使用自定义损失函数，用自定义损失函数计算每一个预测结果y与标准答案 y_ 产生的损失累积和。</p><script type="math/tex; mode=display">loss(y_{\_}, y)  = \sum_{n} f({y_{\_},y})</script><p>y_ ：标准答案数据集<br>y：预测答案计算出的</p><p>可以把损失定义为一个分段函数，如果预测的结果<code>y</code>小于标准答案 <code>y_</code> ，则预测的<code>y</code>少了，损失的是利润。</p><script type="math/tex; mode=display">f({y_{\_},y}) = \left\{\begin{array}{rcl} PROFIT × (y_{\_} - y) & y < y_{\_} & 预测的y少了，损失利润(PROFIT) \\ COST × (y - y_{\_}) & y>= y_{\_} & 预测的y多了，损失成本(COST) \end{array} \right.</script><p>自己写出一个损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_zdy = tf.reduce_sum(tf.where(tf.greater(y, y_), COST * (y-y_), PROFIT * (y_-y)))</span><br></pre></td></tr></table></figure><p>如：预测酸奶销量，酸奶成本（COST） 1元，酸奶利润（PROFIT） 99元。预测少了损失利润99元，大于预测多了损失成本1元。预测少了损失大，希望生成的预测函数往多了预测。</p><h3 id="自定义损失函数案例"><a href="#自定义损失函数案例" class="headerlink" title="自定义损失函数案例"></a>自定义损失函数案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">SEED = <span class="number">23455</span></span><br><span class="line">COST = <span class="number">1</span></span><br><span class="line">PROFIT = <span class="number">99</span></span><br><span class="line"></span><br><span class="line">rdm = np.random.RandomState(SEED)</span><br><span class="line">x = rdm.rand(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">y_ = [[x1 + x2 + (rdm.rand() / <span class="number">10.0</span> - <span class="number">0.05</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> x]  <span class="comment"># 生成噪声[0,1)/10=[0,0.1); [0,0.1)-0.05=[-0.05,0.05)</span></span><br><span class="line">x = tf.cast(x, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">w1 = tf.Variable(tf.random.normal([<span class="number">2</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">epoch = <span class="number">10000</span></span><br><span class="line">lr = <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        y = tf.matmul(x, w1)</span><br><span class="line">        loss = tf.reduce_sum(tf.where(tf.greater(y, y_), (y - y_) * COST, (y_ - y) * PROFIT))</span><br><span class="line"></span><br><span class="line">    grads = tape.gradient(loss, w1)</span><br><span class="line">    w1.assign_sub(lr * grads)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After %d training steps,w1 is &quot;</span> % (epoch))</span><br><span class="line">        <span class="built_in">print</span>(w1.numpy(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Final w1 is: &quot;</span>, w1.numpy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义损失函数</span></span><br><span class="line"><span class="comment"># 酸奶成本1元， 酸奶利润99元</span></span><br><span class="line"><span class="comment"># 成本很低，利润很高，人们希望多预测些，生成模型系数大于1，往多了预测</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">After 0 training steps,w1 is </span><br><span class="line">[[2.0855923]</span><br><span class="line"> [3.8476257]] </span><br><span class="line"></span><br><span class="line">After 500 training steps,w1 is </span><br><span class="line">[[1.1830753]</span><br><span class="line"> [1.1627482]] </span><br><span class="line"></span><br><span class="line">After 1000 training steps,w1 is </span><br><span class="line">[[1.1526372]</span><br><span class="line"> [1.0175619]] </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">After 6000 training steps,w1 is </span><br><span class="line">[[1.1528853]</span><br><span class="line"> [1.1765157]] </span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">After 9500 training steps,w1 is </span><br><span class="line">[[1.1611756]</span><br><span class="line"> [1.0651482]] </span><br><span class="line"></span><br><span class="line">Final w1 is:  [[1.1626335]</span><br><span class="line"> [1.1191947]]</span><br></pre></td></tr></table></figure><p>当cost=1，profit=99时，两个参数都大于1，都大于用均方误差做损失函数时的系数，模型在尽量往多了预测。</p><p>最终拟合结果：<script type="math/tex">y = 1.16 × x_{1} + 1.12 × x_{2}</script></p><p>当cost=99，profit=1时，结果两个参数均小于1，模型在尽量往少了预测。</p><p>最终拟合结果：<script type="math/tex">y = 0.92 × x_{1} + 0.92 × x_{2}</script></p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>交叉熵损失函数CE (Cross Entropy)：表征两个概率分布之间的距离。</p><p>交叉熵越大，两个概率分布越远；交叉熵越小，两个概率分布越近。</p><script type="math/tex; mode=display">H(y_{\_}, y) = - \sum y_{\_} * ln y</script><p><code>y_</code> : 真实结果的概率分布<br><code>y</code>：预测结果的概率分布</p><p>通过交叉熵的值可以判断哪一个预测结果和标准答案更接近。</p><h3 id="交叉熵损失函数案例"><a href="#交叉熵损失函数案例" class="headerlink" title="交叉熵损失函数案例"></a>交叉熵损失函数案例</h3><p>二分类 已知答案 <code>y_ = (1, 0)</code> 预测 <code>y1=(0.6, 0.4)</code> 和 <code>y2=(0.8, 0.2)</code> 哪个更接近标准答案？</p><script type="math/tex; mode=display">H_{1} ((1,0),(0.6,0.4))  =  -(1*ln0.6 + 0*ln0.4) ≈ -(-0.511 + 0) = 0.511</script><script type="math/tex; mode=display">H_{2} ((1,0),(0.8,0.2))  =  -(1*ln0.8 + 0*ln0.2) ≈ -(-0.223 + 0) = 0.223</script><p>因为H1 &gt; H2，所以y2预测更准</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.losses.categorical_crossentropy(y_, y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loss_ce1=tf.losses.categorical_crossentropy([<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0.6</span>, <span class="number">0.4</span>])</span><br><span class="line">loss_ce2=tf.losses.categorical_crossentropy([<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0.8</span>, <span class="number">0.2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;loss_ce1:&quot;</span>, loss_ce1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;loss_ce2:&quot;</span>, loss_ce2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss_ce1: tf.Tensor(0.5108256, shape=(), dtype=float32)</span><br><span class="line">loss_ce2: tf.Tensor(0.22314353, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="交叉熵-API"><a href="#交叉熵-API" class="headerlink" title="交叉熵-API"></a>交叉熵-API</h3><h4 id="softmax-API"><a href="#softmax-API" class="headerlink" title="softmax-API"></a>softmax-API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.softmax(</span><br><span class="line">logits, axis=<span class="literal">None</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算softmax激活值</li><li>等价API：<code>tf.math.softmax</code></li><li>参数：<br>  logits：张量<br>  axis：计算softmax所在的维度，默认为-1，即最后一个维度</li><li>返回：与logits shape相同的张量</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logits = tf.constant([<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">1.</span>])</span><br><span class="line"><span class="built_in">print</span>(tf.nn.softmax(logits))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.26538792</span> <span class="number">0.7213992</span> <span class="number">0.01321289</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(tf.exp(logits) / tf.reduce_sum(tf.exp(logits)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.26538792</span> <span class="number">0.72139925</span> <span class="number">0.01321289</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h4 id="tf-keras-losses-categorical-crossentropy"><a href="#tf-keras-losses-categorical-crossentropy" class="headerlink" title="tf.keras.losses.categorical_crossentropy"></a>tf.keras.losses.categorical_crossentropy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.losses.categorical_crossentropy(</span><br><span class="line">y_true, y_pred, from_logits=<span class="literal">False</span>, label_smoothing=<span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：计算交叉熵</li><li>等价API：<code>tf.losses.categorical_crossentropy</code></li><li>参数：<br>  <code>y_true</code>：真实值<br>  <code>y_pred</code>：预测值<br>  <code>from_logits</code>：y_pred是否为logits张量<br>  <code>label_smoothing</code>：[0, 1]之间的小数</li><li>返回：交叉熵损失值</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">y_true = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">y_pred1 = [<span class="number">0.5</span>, <span class="number">0.4</span>, <span class="number">0.1</span>]</span><br><span class="line">y_pred2 = [<span class="number">0.8</span>, <span class="number">0.1</span>, <span class="number">0.1</span>]</span><br><span class="line"><span class="built_in">print</span>(tf.keras.losses.categorical_crossentropy(y_true, y_pred1))</span><br><span class="line"><span class="built_in">print</span>(tf.keras.losses.categorical_crossentropy(y_true, y_pred2))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor(<span class="number">0.6931472</span>, shape=(), dtype=float32)</span><br><span class="line">tf.Tensor(<span class="number">0.22314353</span>, shape=(), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(-tf.reduce_sum(y_true * tf.math.log(y_pred1)))</span><br><span class="line"><span class="built_in">print</span>(-tf.reduce_sum(y_true * tf.math.log(y_pred2)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor(<span class="number">0.6931472</span>, shape=(), dtype=float32)</span><br><span class="line">tf.Tensor(<span class="number">0.22314353</span>, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><h4 id="tf-nn-softmax-cross-entropy-with-logits"><a href="#tf-nn-softmax-cross-entropy-with-logits" class="headerlink" title="tf.nn.softmax_cross_entropy_with_logits"></a>tf.nn.softmax_cross_entropy_with_logits</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.softmax_cross_entropy_with_logits(</span><br><span class="line">labels, logits, axis=-<span class="number">1</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>在机器学习中，对于多分类问题，把未经softmax归一化的向量值称为logits。logits经过softmax<br>层后，输出服从概率分布的向量。</p></blockquote><ul><li>功能：logits经过softmax后，与labels进行交叉熵计算</li><li>参数：<br>  <code>labels</code>：:在类别这一维度上，每个向量应服从有效的概率分布。例如，在<code>labels</code>的<code>shape</code>为<code>[batch_size, num_classes]</code>的情况下，<code>labels[i]</code>应服从概率分布。<br>  <code>logits</code>：每个类别的激活值，通常是线性层的输出. 激活值需要经过softmax归一化。<br>  <code>axis</code>: 类别所在维度，默认是-1，即最后一个维度。</li><li>返回：softmax交叉熵损失值。</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">labels = [[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>]]</span><br><span class="line">logits = [[<span class="number">4.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>], [<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">1.0</span>]]</span><br><span class="line"><span class="built_in">print</span>(tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.16984604</span> <span class="number">0.02474492</span>], shape=(<span class="number">2</span>,), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(-tf.reduce_sum(labels * tf.math.log(tf.nn.softmax(logits)), axis=<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.16984606</span> <span class="number">0.02474495</span>], shape=(<span class="number">2</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h4 id="tf-nn-sparse-softmax-cross-entropy-with-logits"><a href="#tf-nn-sparse-softmax-cross-entropy-with-logits" class="headerlink" title="tf.nn.sparse_softmax_cross_entropy_with_logits"></a>tf.nn.sparse_softmax_cross_entropy_with_logits</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">labels, logits, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：labels经过one-hot编码，logits经过softmax，两者进行交叉熵计算。通常labels的shape为<code>[batch_size]</code>，logits的shape为<code>[batch_size, num_classes]</code>。sparse可理解为对labels进行稀疏化处理(即进行one-hot编码)</li><li>参数：<br>  <code>labels</code>：标签的索引值<br>  <code>logits</code>：每个类别的激活值，通常是线性层的输出。激活值需要经过softmax归一化。</li><li>返回：softmax交叉熵损失值</li><li>例子：（下例中先对labels进行one-hot编码为[[1,0,0], [0,1,0]]，logits经过softmax变为[[0.844，<br>0.114，0.042], [0.007, 0.976, 0.018]]，两者再进行交叉熵运算）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">labels = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">logits = [[<span class="number">4.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>], [<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">1.0</span>]]</span><br><span class="line"><span class="built_in">print</span>(tf.nn.sparse_softmax_cross_entropy_with_logits(labels1, logits))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.16984604</span> <span class="number">0.02474492</span>], shape=(<span class="number">2</span>,), dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价实现</span></span><br><span class="line"><span class="built_in">print</span>(-tf.reduce_sum(tf.one_hot(labels, tf.shape(logits)[<span class="number">1</span>]) * tf.math.log(tf.nn.softmax(logits)), axis=<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">0.16984606</span> <span class="number">0.02474495</span>], shape=(<span class="number">2</span>,), dtype=float32)</span><br></pre></td></tr></table></figure><h3 id="softmax与交叉熵结合"><a href="#softmax与交叉熵结合" class="headerlink" title="softmax与交叉熵结合"></a>softmax与交叉熵结合</h3><p>输出先过softmax函数，再计算 y 与 y_ 的交叉熵损失函数。</p><p>同时计算概率分布和交叉熵的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.softmax_cross_entropy_with_logits(y_， y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># softmax与交叉熵损失函数的结合</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">y_ = np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line">y = np.array([[<span class="number">12</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">6.5</span>, <span class="number">1.2</span>], [<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>]])</span><br><span class="line">y_pro = tf.nn.softmax(y)</span><br><span class="line">loss_ce1 = tf.losses.categorical_crossentropy(y_,y_pro)</span><br><span class="line">loss_ce2 = tf.nn.softmax_cross_entropy_with_logits(y_, y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;分步计算的结果:\n&#x27;</span>, loss_ce1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结合计算的结果:\n&#x27;</span>, loss_ce2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分步计算的结果:</span><br><span class="line"> tf.Tensor(</span><br><span class="line">[1.68795487e-04 1.03475622e-03 6.58839038e-02 2.58349207e+00</span><br><span class="line"> 5.49852354e-02], shape=(5,), dtype=float64)</span><br><span class="line">结合计算的结果:</span><br><span class="line"> tf.Tensor(</span><br><span class="line">[1.68795487e-04 1.03475622e-03 6.58839038e-02 2.58349207e+00</span><br><span class="line"> 5.49852354e-02], shape=(5,), dtype=float64)</span><br></pre></td></tr></table></figure><h1 id="缓解过拟合"><a href="#缓解过拟合" class="headerlink" title="缓解过拟合"></a>缓解过拟合</h1><ul><li>欠拟合：对现有数据集学习的不够彻底</li><li>过拟合：模型对当前数据拟合得太好了，但对未出现的新数据难以做出正确的判断，模型缺少泛化能力</li></ul><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E8%BF%87%E6%8B%9F%E5%90%88%E5%9B%BE%E7%A4%BA.png" class="" title="过拟合图示"><h2 id="欠拟合的解决方法"><a href="#欠拟合的解决方法" class="headerlink" title="欠拟合的解决方法"></a>欠拟合的解决方法</h2><ul><li>增加输入特征项</li><li>增加网络参数</li><li>减少正则化参数</li></ul><h2 id="过拟合的解决方法"><a href="#过拟合的解决方法" class="headerlink" title="过拟合的解决方法"></a>过拟合的解决方法</h2><ul><li>数据清洗</li><li>增大训练集</li><li>采用正则化</li><li>增大正则化参数</li></ul><h2 id="正则化缓解过拟合"><a href="#正则化缓解过拟合" class="headerlink" title="正则化缓解过拟合"></a>正则化缓解过拟合</h2><p>正则化在损失函数中引入模型复杂度指标，利用给W加权值，弱化了训练数据的噪声（一般不正则化b）</p><p>使用正则化后，损失函数loss变成两部分的和。</p><p>第一部分是以前求得的loss值，描述了预测结果和正确结果之间的差距，比如交叉熵，均方误差等。</p><p>第二部分是参数的权重，REGULARIZER给出参数w在总loss中的比例，正则化的权重。</p><script type="math/tex; mode=display">loss = loss(y 与y_{\_}) + REGULARIZER * loss(w)</script><h3 id="loss-w-的计算可以使用两种方法"><a href="#loss-w-的计算可以使用两种方法" class="headerlink" title="loss(w)的计算可以使用两种方法"></a>loss(w)的计算可以使用两种方法</h3><p>一种是对所有参数的w的绝对值求和，L1正则化。</p><p>L1正则化大概率会使很多参数变为零，因此该方法可通过稀疏参数，即减少参数的数量，降低复杂度。</p><script type="math/tex; mode=display">loss_{L1}(w) = \sum_{i} | w_{i} |</script><p>二种是对所有参数的w平方求和，L2正则化。</p><p>L2正则化会使参数很接近零但不为零，因此该方法可通过减小参数值的大小降低复杂度。可以有效缓解数据集中由于噪声引起的过拟合。</p><script type="math/tex; mode=display">loss_{L2}(w) = \sum_{i} | w_{i}^{2} |</script><h3 id="L2正则化计算W过程"><a href="#L2正则化计算W过程" class="headerlink" title="L2正则化计算W过程"></a>L2正则化计算W过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape: <span class="comment"># 记录梯度信息</span></span><br><span class="line">h1 = tf.matmul(x_train, w1) + bl <span class="comment">#记录神经网络乘加运算</span></span><br><span class="line">h1 = tf.nn.relu(h1)</span><br><span class="line">y = tf.matmul(h1, w2) + b2</span><br><span class="line"></span><br><span class="line"><span class="comment">#采用均方误差损失函数mse=mean(sum(y-out)^2)</span></span><br><span class="line">loss_mse = tf.reduce_mean(tf.square(y_train - y))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#添加12正则化</span></span><br><span class="line">    loss_regularization = []</span><br><span class="line">    loss_reqularization.append(tf.nn<span class="number">.12</span>_loss(w1))</span><br><span class="line">    loss_regularization.append(tf.nn<span class="number">.12</span>_loss(w2))</span><br><span class="line">    loss_regularization = tf.reduce_sum(loss_regularization) </span><br><span class="line">    loss = loss_mse + <span class="number">0.03</span> * loss_reqularization <span class="comment">#REGULARIZER = 0.03</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算loss对各个参数的梯度</span></span><br><span class="line">variables = [w1, b1, w2, b2]</span><br><span class="line">grads = tape.gradient(loss, variables)</span><br></pre></td></tr></table></figure><p>测试数据</p><p>输入数据：</p><p>x1和x2是输入特征，y_c是标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">x1,x2,y_c</span><br><span class="line">-0.416757847,-0.056266827,1</span><br><span class="line">-2.136196096,1.640270808,0</span><br><span class="line">-1.793435585,-0.841747366,0</span><br><span class="line">0.502881417,-1.245288087,1</span><br><span class="line">-1.057952219,-0.909007615,1</span><br><span class="line">0.551454045,2.292208013,0</span><br><span class="line">0.041539393,-1.117925445,1</span><br><span class="line">0.539058321,-0.5961597,1</span><br><span class="line">-0.019130497,1.17500122,1</span><br><span class="line">-0.747870949,0.009025251,1</span><br><span class="line">-0.878107893,-0.15643417,1</span><br><span class="line">0.256570452,-0.988779049,1</span><br><span class="line">-0.338821966,-0.236184031,1</span><br><span class="line">-0.637655012,-1.187612286,1</span><br><span class="line">-1.421217227,-0.153495196,0</span><br><span class="line">-0.26905696,2.231366789,0</span><br><span class="line">-2.434767577,0.112726505,0</span><br><span class="line">0.370444537,1.359633863,1</span><br><span class="line">0.501857207,-0.844213704,1</span><br><span class="line">9.76E-06,0.542352572,1</span><br><span class="line">-0.313508197,0.771011738,1</span><br><span class="line">-1.868090655,1.731184666,0</span><br><span class="line">1.467678011,-0.335677339,0</span><br><span class="line">0.61134078,0.047970592,1</span><br><span class="line">-0.829135289,0.087710218,1</span><br><span class="line">1.000365887,-0.381092518,1</span><br><span class="line">-0.375669423,-0.074470763,1</span><br><span class="line">0.43349633,1.27837923,1</span><br></pre></td></tr></table></figure><p>x1和x2作为横纵坐标可视化，标签为1是红色，标签为0是蓝色</p><p>先用神经网络拟合出输入特征x1、x2与标签的函数关系，生成网格覆盖这些点。</p><p>讲这些网格的交点也就是横纵坐标作为输入送入训练好的神经网络，神经网络会输出一个值，我们要区分输出偏向1还是偏向0。</p><p>可以把神经网络输出的预测值为0.5的线标出颜色。也就是红蓝点的区分线。</p><p><code>p29_regularizationfree.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据/标签 生成x_train y_train</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;dot.csv&#x27;</span>)</span><br><span class="line">x_data = np.array(df[[<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>]])</span><br><span class="line">y_data = np.array(df[<span class="string">&#x27;y_c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">x_train = np.vstack(x_data).reshape(-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">y_train = np.vstack(y_data).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Y_c = [[<span class="string">&#x27;red&#x27;</span> <span class="keyword">if</span> y <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span>] <span class="keyword">for</span> y <span class="keyword">in</span> y_train]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型问题报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">y_train = tf.cast(y_train, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数切分传入的张量的第一个维度，生成相应的数据集，使输入特征和标签值一一对应</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，输入层为2个神经元，隐藏层为11个神经元，1层隐藏层，输出层为1个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()保证参数可训练</span></span><br><span class="line">w1 = tf.Variable(tf.random.normal([<span class="number">2</span>, <span class="number">11</span>]), dtype=tf.float32)</span><br><span class="line">b1 = tf.Variable(tf.constant(<span class="number">0.01</span>, shape=[<span class="number">11</span>]))</span><br><span class="line"></span><br><span class="line">w2 = tf.Variable(tf.random.normal([<span class="number">11</span>, <span class="number">1</span>]), dtype=tf.float32)</span><br><span class="line">b2 = tf.Variable(tf.constant(<span class="number">0.01</span>, shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.01</span>  <span class="comment"># 学习率</span></span><br><span class="line">epoch = <span class="number">400</span>  <span class="comment"># 循环轮数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># 记录梯度信息</span></span><br><span class="line"></span><br><span class="line">            h1 = tf.matmul(x_train, w1) + b1  <span class="comment"># 记录神经网络乘加运算</span></span><br><span class="line">            h1 = tf.nn.relu(h1)</span><br><span class="line">            y = tf.matmul(h1, w2) + b2</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_train - y))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        variables = [w1, b1, w2, b2]</span><br><span class="line">        grads = tape.gradient(loss, variables)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实现梯度更新</span></span><br><span class="line">        <span class="comment"># w1 = w1 - lr * w1_grad tape.gradient是自动求导结果与[w1, b1, w2, b2] 索引为0，1，2，3 </span></span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>])</span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>])</span><br><span class="line">        w2.assign_sub(lr * grads[<span class="number">2</span>])</span><br><span class="line">        b2.assign_sub(lr * grads[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每20个epoch，打印loss信息</span></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch:&#x27;</span>, epoch, <span class="string">&#x27;loss:&#x27;</span>, <span class="built_in">float</span>(loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测部分</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*******predict*******&quot;</span>)</span><br><span class="line"><span class="comment"># xx在-3到3之间以步长为0.01，yy在-3到3之间以步长0.01,生成间隔数值点</span></span><br><span class="line">xx, yy = np.mgrid[-<span class="number">3</span>:<span class="number">3</span>:<span class="number">.1</span>, -<span class="number">3</span>:<span class="number">3</span>:<span class="number">.1</span>]</span><br><span class="line"><span class="comment"># 将xx , yy拉直，并合并配对为二维张量，生成二维坐标点</span></span><br><span class="line">grid = np.c_[xx.ravel(), yy.ravel()]</span><br><span class="line">grid = tf.cast(grid, tf.float32)</span><br><span class="line"><span class="comment"># 将网格坐标点喂入神经网络，进行预测，probs为输出</span></span><br><span class="line">probs = []</span><br><span class="line"><span class="keyword">for</span> x_test <span class="keyword">in</span> grid:</span><br><span class="line">    <span class="comment"># 使用训练好的参数进行预测</span></span><br><span class="line">    h1 = tf.matmul([x_test], w1) + b1</span><br><span class="line">    h1 = tf.nn.relu(h1)</span><br><span class="line">    y = tf.matmul(h1, w2) + b2  <span class="comment"># y为预测结果</span></span><br><span class="line">    probs.append(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取第0列给x1，取第1列给x2</span></span><br><span class="line">x1 = x_data[:, <span class="number">0</span>]</span><br><span class="line">x2 = x_data[:, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># probs的shape调整成xx的样子</span></span><br><span class="line">probs = np.array(probs).reshape(xx.shape)</span><br><span class="line">plt.scatter(x1, x2, color=np.squeeze(Y_c)) <span class="comment">#squeeze去掉纬度是1的纬度,相当于去掉[[&#x27;red&#x27;],[&#x27;&#x27;blue]],内层括号变为[&#x27;red&#x27;,&#x27;blue&#x27;]</span></span><br><span class="line"><span class="comment"># 把坐标xx yy和对应的值probs放入contour&lt;[‘kɑntʊr]&gt;函数，给probs值为0.5的所有点上色  plt点show后 显示的是红蓝点的分界线</span></span><br><span class="line">plt.contour(xx, yy, probs, levels=[<span class="number">.5</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入红蓝点，画出分割线，不包含正则化</span></span><br><span class="line"><span class="comment"># 不清楚的数据，建议print出来查看 </span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">epoch: 0 loss: 0.8860995173454285</span><br><span class="line">epoch: 20 loss: 0.07788623124361038</span><br><span class="line">epoch: 40 loss: 0.05887502059340477</span><br><span class="line">epoch: 60 loss: 0.043619509786367416</span><br><span class="line">epoch: 80 loss: 0.03502746298909187</span><br><span class="line">epoch: 100 loss: 0.03013235330581665</span><br><span class="line">epoch: 120 loss: 0.027722788974642754</span><br><span class="line">epoch: 140 loss: 0.026683270931243896</span><br><span class="line">epoch: 160 loss: 0.026026234030723572</span><br><span class="line">epoch: 180 loss: 0.025885531678795815</span><br><span class="line">epoch: 200 loss: 0.025877559557557106</span><br><span class="line">epoch: 220 loss: 0.02594858966767788</span><br><span class="line">epoch: 240 loss: 0.026042431592941284</span><br><span class="line">epoch: 260 loss: 0.026121510192751884</span><br><span class="line">epoch: 280 loss: 0.026135003194212914</span><br><span class="line">epoch: 300 loss: 0.026035090908408165</span><br><span class="line">epoch: 320 loss: 0.02597750537097454</span><br><span class="line">epoch: 340 loss: 0.025903111323714256</span><br><span class="line">epoch: 360 loss: 0.025866234675049782</span><br><span class="line">epoch: 380 loss: 0.02591524086892605</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/L2%E6%AD%A3%E5%88%99%E5%8C%96%E8%AE%A1%E7%AE%97W%E8%BF%87%E7%A8%8B%E7%BB%93%E6%9E%9C1.png" class="" title="L2正则化计算W过程结果1"><p>轮廓不够平滑，存在过拟合现象。</p><p>加入L2正则化：</p><p><code>p29_regularizationcontain.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据/标签 生成x_train y_train</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;dot.csv&#x27;</span>)</span><br><span class="line">x_data = np.array(df[[<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>]])</span><br><span class="line">y_data = np.array(df[<span class="string">&#x27;y_c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">x_train = x_data</span><br><span class="line">y_train = y_data.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Y_c = [[<span class="string">&#x27;red&#x27;</span> <span class="keyword">if</span> y <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span>] <span class="keyword">for</span> y <span class="keyword">in</span> y_train]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型问题报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">y_train = tf.cast(y_train, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数切分传入的张量的第一个维度，生成相应的数据集，使输入特征和标签值一一对应</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，输入层为4个神经元，隐藏层为32个神经元，2层隐藏层，输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()保证参数可训练</span></span><br><span class="line">w1 = tf.Variable(tf.random.normal([<span class="number">2</span>, <span class="number">11</span>]), dtype=tf.float32)</span><br><span class="line">b1 = tf.Variable(tf.constant(<span class="number">0.01</span>, shape=[<span class="number">11</span>]))</span><br><span class="line"></span><br><span class="line">w2 = tf.Variable(tf.random.normal([<span class="number">11</span>, <span class="number">1</span>]), dtype=tf.float32)</span><br><span class="line">b2 = tf.Variable(tf.constant(<span class="number">0.01</span>, shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.01</span>  <span class="comment"># 学习率为</span></span><br><span class="line">epoch = <span class="number">400</span>  <span class="comment"># 循环轮数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># 记录梯度信息</span></span><br><span class="line"></span><br><span class="line">            h1 = tf.matmul(x_train, w1) + b1  <span class="comment"># 记录神经网络乘加运算</span></span><br><span class="line">            h1 = tf.nn.relu(h1)</span><br><span class="line">            y = tf.matmul(h1, w2) + b2</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_mse = tf.reduce_mean(tf.square(y_train - y))</span><br><span class="line">            <span class="comment"># 添加l2正则化</span></span><br><span class="line">            loss_regularization = []</span><br><span class="line">            <span class="comment"># tf.nn.l2_loss(w)=sum(w ** 2) / 2</span></span><br><span class="line">            loss_regularization.append(tf.nn.l2_loss(w1))</span><br><span class="line">            loss_regularization.append(tf.nn.l2_loss(w2))</span><br><span class="line">            <span class="comment"># 求和</span></span><br><span class="line">            <span class="comment"># 例：x=tf.constant(([1,1,1],[1,1,1]))</span></span><br><span class="line">            <span class="comment"># tf.reduce_sum(x)</span></span><br><span class="line">            <span class="comment"># &gt;&gt;&gt;6</span></span><br><span class="line">            <span class="comment"># loss_regularization = tf.reduce_sum(tf.stack(loss_regularization))</span></span><br><span class="line">            loss_regularization = tf.reduce_sum(loss_regularization)</span><br><span class="line">            loss = loss_mse + <span class="number">0.03</span> * loss_regularization <span class="comment">#REGULARIZER = 0.03</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        variables = [w1, b1, w2, b2]</span><br><span class="line">        grads = tape.gradient(loss, variables)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实现梯度更新</span></span><br><span class="line">        <span class="comment"># w1 = w1 - lr * w1_grad</span></span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>])</span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>])</span><br><span class="line">        w2.assign_sub(lr * grads[<span class="number">2</span>])</span><br><span class="line">        b2.assign_sub(lr * grads[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每200个epoch，打印loss信息</span></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch:&#x27;</span>, epoch, <span class="string">&#x27;loss:&#x27;</span>, <span class="built_in">float</span>(loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测部分</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*******predict*******&quot;</span>)</span><br><span class="line"><span class="comment"># xx在-3到3之间以步长为0.01，yy在-3到3之间以步长0.01,生成间隔数值点</span></span><br><span class="line">xx, yy = np.mgrid[-<span class="number">3</span>:<span class="number">3</span>:<span class="number">.1</span>, -<span class="number">3</span>:<span class="number">3</span>:<span class="number">.1</span>]</span><br><span class="line"><span class="comment"># 将xx, yy拉直，并合并配对为二维张量，生成二维坐标点</span></span><br><span class="line">grid = np.c_[xx.ravel(), yy.ravel()]</span><br><span class="line">grid = tf.cast(grid, tf.float32)</span><br><span class="line"><span class="comment"># 将网格坐标点喂入神经网络，进行预测，probs为输出</span></span><br><span class="line">probs = []</span><br><span class="line"><span class="keyword">for</span> x_predict <span class="keyword">in</span> grid:</span><br><span class="line">    <span class="comment"># 使用训练好的参数进行预测</span></span><br><span class="line">    h1 = tf.matmul([x_predict], w1) + b1</span><br><span class="line">    h1 = tf.nn.relu(h1)</span><br><span class="line">    y = tf.matmul(h1, w2) + b2  <span class="comment"># y为预测结果</span></span><br><span class="line">    probs.append(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取第0列给x1，取第1列给x2</span></span><br><span class="line">x1 = x_data[:, <span class="number">0</span>]</span><br><span class="line">x2 = x_data[:, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># probs的shape调整成xx的样子</span></span><br><span class="line">probs = np.array(probs).reshape(xx.shape)</span><br><span class="line">plt.scatter(x1, x2, color=np.squeeze(Y_c))</span><br><span class="line"><span class="comment"># 把坐标xx yy和对应的值probs放入contour&lt;[‘kɑntʊr]&gt;函数，给probs值为0.5的所有点上色  plt点show后 显示的是红蓝点的分界线</span></span><br><span class="line">plt.contour(xx, yy, probs, levels=[<span class="number">.5</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入红蓝点，画出分割线，包含正则化</span></span><br><span class="line"><span class="comment"># 不清楚的数据，建议print出来查看 </span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">epoch: 0 loss: 1.187268853187561</span><br><span class="line">epoch: 20 loss: 0.4623664319515228</span><br><span class="line">epoch: 40 loss: 0.3910042941570282</span><br><span class="line">epoch: 60 loss: 0.3409908711910248</span><br><span class="line">epoch: 80 loss: 0.2887084484100342</span><br><span class="line">epoch: 100 loss: 0.25472864508628845</span><br><span class="line">epoch: 120 loss: 0.22871072590351105</span><br><span class="line">epoch: 140 loss: 0.20734436810016632</span><br><span class="line">epoch: 160 loss: 0.18896348774433136</span><br><span class="line">epoch: 180 loss: 0.173292875289917</span><br><span class="line">epoch: 200 loss: 0.15965603291988373</span><br><span class="line">epoch: 220 loss: 0.14779284596443176</span><br><span class="line">epoch: 240 loss: 0.137494295835495</span><br><span class="line">epoch: 260 loss: 0.12853200733661652</span><br><span class="line">epoch: 280 loss: 0.12084188312292099</span><br><span class="line">epoch: 300 loss: 0.11422470211982727</span><br><span class="line">epoch: 320 loss: 0.1085757240653038</span><br><span class="line">epoch: 340 loss: 0.10376542061567307</span><br><span class="line">epoch: 360 loss: 0.09959365427494049</span><br><span class="line">epoch: 380 loss: 0.09608905762434006</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/L2%E6%AD%A3%E5%88%99%E5%8C%96%E8%AE%A1%E7%AE%97W%E8%BF%87%E7%A8%8B%E7%BB%93%E6%9E%9C2.png" class="" title="L2正则化计算W过程结果2"><p>加入L2正则化后的曲线更平缓，有效缓解了过拟合。</p><h1 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h1><p>优化算法可以分成一阶优化和二阶优化算法，其中一阶优化就是指的梯度算法及其变种，而二阶优化一般是用二阶导数（Hessian 矩阵）来计算，如牛顿法，由于需要计算Hessian阵和其逆矩阵，计算量较大，因此没有流行开来。这里主要总结一阶优化的各种梯度下降方法。  </p><p>深度学习优化算法经历了SGD -&gt; SGDM -&gt; NAG -&gt;AdaGrad -&gt; AdaDelta -&gt; Adam -&gt; Nadam这样的发展历程。  </p><p>当网络模型固定后，不同参数选取对模型的表达力影响很大。更新模型参数的过程，仿佛是教一个孩子认知世界，达到学龄的孩子，脑神经元的结构、规模是相似的，他们都具备了学习的潜力。但是不同的引导方法，会让孩子具备不同的能力，达到不同的高度。优化器就是引导神经网络更新参数的工具。</p><p>本节介绍五种常用的神经网络参数优化器。</p><p><strong>定义：待优化参数w，损失函数loss，学习率lr，每次迭代一个batch，t表示当前batch迭代的总次数：</strong></p><p>数据集中的数据是以batch为单位，批量喂入网络，每个batch通常包含$2^{n}$个数据，<code>t</code>表示当前batch迭代的总次数。</p><p>更新参数分四步完成：</p><ol><li><p>计算<code>t</code>时刻损失函数关于当前参数的梯度：$ g<em>{t} = \nabla loss = \frac{\partial loss}{\partial (w</em>{t})} $</p></li><li><p>计算<code>t</code>时刻一阶动量 $ m<em>{t} $ 和二阶动量 $ V</em>{t} $</p><blockquote><p>一阶动量：与梯度相关的函数 $ m<em>{t} = \phi(g</em>{1}, g<em>{2},…, g</em>{t}) $</p><p>二阶动量：与梯度平方相关的函数 $ V<em>{t} = \psi(g</em>{1}, g<em>{2},…, g</em>{t}) $</p></blockquote></li><li><p>计算t时刻下降梯度： $ \eta<em>{t} = lr·m</em>{t} / \sqrt{V_{t}} $</p></li><li><p>计算<code>t+1</code>时刻参数：$ w<em>{t+1} = w</em>{t} - \eta<em>{t} = w</em>{t} - lr · m<em>{t}/\sqrt{V</em>{t}} $</p></li></ol><p>对于步骤3、4对于各个算法都一样，主要区别在1、2上</p><h2 id="SGD随机梯度下降-无momentum"><a href="#SGD随机梯度下降-无momentum" class="headerlink" title="SGD随机梯度下降(无momentum)"></a>SGD随机梯度下降(无momentum)</h2><p>没有动量的概念。</p><p>最大的缺点是下降速度慢，可能会在沟壑的两边持续震荡，停留在一个局部最优点。</p><p>$ m<em>{t} = g</em>{t} $</p><p>$ V_{t} = 1 $</p><p>$ \eta<em>{t} =  lr·m</em>{t} / \sqrt{V<em>{t}} = lr · g</em>{t} $</p><script type="math/tex; mode=display">w_{t+1} = w_{t} -  \eta_{t} = w_{t} - lr · m_{t} / \sqrt{V_{t}} = w_{t} -  lr · g_{t}</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - lr × \frac{\partial loss}{\partial (w_{t})}</script><p>对于单层网络的书写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sgd</span></span><br><span class="line">w1.assign_sub(lr * grads[<span class="number">0</span>])<span class="comment">#参数w1自更新</span></span><br><span class="line">b1.assign_sub(lr * grads[<span class="number">1</span>])<span class="comment">#参数b自更新</span></span><br></pre></td></tr></table></figure><p>相较于<code>p45_iris.py</code>相比，只改动了四处</p><p><code>p32_sgd.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment">##1##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据，分别为输入特征和标签</span></span><br><span class="line">x_data = datasets.load_iris().data</span><br><span class="line">y_data = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</span></span><br><span class="line"><span class="comment"># seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样（为方便教学，以保每位同学结果一致）</span></span><br><span class="line">np.random.seed(<span class="number">116</span>)  <span class="comment"># 使用相同的seed，保证输入特征和标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</span></span><br><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">x_test = tf.cast(x_test, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()标记参数可训练</span></span><br><span class="line"><span class="comment"># 使用seed使每次生成的随机数相同（方便教学，使大家结果都一致，在现实使用时不写seed）</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">4</span>, <span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([<span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.1</span>  <span class="comment"># 学习率为0.1</span></span><br><span class="line">train_loss_results = []  <span class="comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span></span><br><span class="line">test_acc = []  <span class="comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span></span><br><span class="line">epoch = <span class="number">500</span>  <span class="comment"># 循环500轮</span></span><br><span class="line">loss_all = <span class="number">0</span>  <span class="comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line">now_time = time.time()  <span class="comment">##2##</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># 数据集级别的循环，每个epoch循环一次数据集</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):  <span class="comment"># batch级别的循环 ，每个step循环一个batch</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构记录梯度信息</span></span><br><span class="line">            y = tf.matmul(x_train, w1) + b1  <span class="comment"># 神经网络乘加运算</span></span><br><span class="line">            y = tf.nn.softmax(y)  <span class="comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span></span><br><span class="line">            y_ = tf.one_hot(y_train, depth=<span class="number">3</span>)  <span class="comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_ - y))  <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_all += loss.numpy()  <span class="comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实现梯度更新 w1 = w1 - lr * w1_grad    b = b - lr * b_grad</span></span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>])  <span class="comment"># 参数w1自更新</span></span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>])  <span class="comment"># 参数b自更新</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个epoch，打印loss信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all / <span class="number">4</span>))</span><br><span class="line">    train_loss_results.append(loss_all / <span class="number">4</span>)  <span class="comment"># 将4个step的loss求平均记录在此变量中</span></span><br><span class="line">    loss_all = <span class="number">0</span>  <span class="comment"># loss_all归零，为记录下一个epoch的loss做准备</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试部分</span></span><br><span class="line">    <span class="comment"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span></span><br><span class="line">    total_correct, total_number = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">        <span class="comment"># 使用更新后的参数进行预测</span></span><br><span class="line">        y = tf.matmul(x_test, w1) + b1</span><br><span class="line">        y = tf.nn.softmax(y)</span><br><span class="line">        pred = tf.argmax(y, axis=<span class="number">1</span>)  <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">        <span class="comment"># 将pred转换为y_test的数据类型</span></span><br><span class="line">        pred = tf.cast(pred, dtype=y_test.dtype)</span><br><span class="line">        <span class="comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span></span><br><span class="line">        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">        <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">        correct = tf.reduce_sum(correct)</span><br><span class="line">        <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">        total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">        <span class="comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span></span><br><span class="line">        total_number += x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 总的准确率等于total_correct/total_number</span></span><br><span class="line">    acc = total_correct / total_number</span><br><span class="line">    test_acc.append(acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Test_acc:&quot;</span>, acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">total_time = time.time() - now_time  <span class="comment">##3##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total_time&quot;</span>, total_time)  <span class="comment">##4##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 loss 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Loss Function Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(train_loss_results, label=<span class="string">&quot;$Loss$&quot;</span>)  <span class="comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span></span><br><span class="line">plt.legend()  <span class="comment"># 画出曲线图标</span></span><br><span class="line">plt.show()  <span class="comment"># 画出图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>)  <span class="comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本文件较 class1\p45_iris.py 仅添加四处时间记录  用 ##n## 标识</span></span><br><span class="line"><span class="comment"># 请将loss曲线、ACC曲线、total_time记录到 class2\优化器对比.docx  对比各优化器收敛情况</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.0308239459991455</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGD-loss.png" class="" title="SGD-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGD-acc.png" class="" title="SGD-acc"><blockquote><p>pycharm导入包出现红线，使用conda命令行使用conda或者pip命令安装即可<br>如果红线消除但是运行提示<code>DLL load failed: 找不到指定的程序。</code><br>在pycharm中设置运行环境增加<code>PATH=C:\ProgramData\Anaconda3\Library\bin;</code></p></blockquote><h2 id="SGDM-含momentum的SGD"><a href="#SGDM-含momentum的SGD" class="headerlink" title="SGDM(含momentum的SGD)"></a>SGDM(含momentum的SGD)</h2><p>动量法是一种使梯度向量向相关方向加速变化，抑制震荡，最终实现加速收敛的方法。<br>(Momentum is a method that helps accelerate SGD in the right direction and dampens oscillations. It adds a fraction of the update vector of the past time step to the current update vector. The momentum term increases for dimensions whose gradients point in the same directions and reduces updates for dimensions whose gradients change directions.)</p><p>为了抑制SGD的震荡，SGDM认为梯度下降过程可以加入惯性。下坡的时候，如果发现是陡坡，那就利用惯性跑的快一些。SGDM全称是SGD with Momentum，在SGD基础上引入了一阶动量：</p><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><p>一阶动量是各个时刻梯度方向的指数移动平均值，约等于最近 $ 1/(1-\beta<em>{1}) $ 个时刻的梯度向量和的平均值。也就是说，<code>t</code>时刻的下降方向，不仅由当前点的梯度方向决定，而且由此前累积的下降方向决定。 $ \beta</em>{1} $ 的经验值为0.9，这就意味着下降方向主要偏向此前累积的下降方向，并略微偏向当前时刻的下降方向。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGD%E4%B8%8ESGDM%E5%8C%BA%E5%88%AB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="SGD与SGDM区别示意图"><p>在SGD基础上增加一阶动量。</p><p>$ m<em>{t} $ 公式表示各时刻梯度方向的指数滑动平均值，和SGD相比，一阶动量的公式多了 $ m</em>{t-1} $ 这一项， $ m_{t-1} $ 表示上一时刻的一阶动量，上一时刻的一阶动量占大头，$ \beta $ 是一个超参数，是个接近1的数值，经验值是0.9。</p><p>二阶动量在SGDM中仍是恒等于1的。</p><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><script type="math/tex; mode=display">\eta_{t}  = lr · m_{t} / \sqrt{V_{t}} = lr · m_{t} = lr · (\beta · m_{t-1} + (1 - \beta) · g_{t})</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t} = w_{t} - lr · (\beta · m_{t-1} + (1 - \beta) · g_{t})</script><p>参数更新公式最重要的是把一阶动量和二阶动量计算出来</p><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m_w, m_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"><span class="comment">#sgd-momentun</span></span><br><span class="line">m_w = beta * m_w + (<span class="number">1</span> - beta) * grads [<span class="number">0</span>]</span><br><span class="line">m_b = beta * m_b + (<span class="number">1</span> - beta) * grads [<span class="number">1</span>]</span><br><span class="line">w1.assign_sub(lr * m_w)</span><br><span class="line">b1.assign_sub(lr * m_b)</span><br></pre></td></tr></table></figure><p><code>p34_sgdm.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment">##1##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据，分别为输入特征和标签</span></span><br><span class="line">x_data = datasets.load_iris().data</span><br><span class="line">y_data = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</span></span><br><span class="line"><span class="comment"># seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样（为方便教学，以保每位同学结果一致）</span></span><br><span class="line">np.random.seed(<span class="number">116</span>)  <span class="comment"># 使用相同的seed，保证输入特征和标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</span></span><br><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">x_test = tf.cast(x_test, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()标记参数可训练</span></span><br><span class="line"><span class="comment"># 使用seed使每次生成的随机数相同（方便教学，使大家结果都一致，在现实使用时不写seed）</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">4</span>, <span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([<span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.1</span>  <span class="comment"># 学习率为0.1</span></span><br><span class="line">train_loss_results = []  <span class="comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span></span><br><span class="line">test_acc = []  <span class="comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span></span><br><span class="line">epoch = <span class="number">500</span>  <span class="comment"># 循环500轮</span></span><br><span class="line">loss_all = <span class="number">0</span>  <span class="comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">m_w, m_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line">now_time = time.time()  <span class="comment">##2##</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># 数据集级别的循环，每个epoch循环一次数据集</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):  <span class="comment"># batch级别的循环 ，每个step循环一个batch</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构记录梯度信息</span></span><br><span class="line">            y = tf.matmul(x_train, w1) + b1  <span class="comment"># 神经网络乘加运算</span></span><br><span class="line">            y = tf.nn.softmax(y)  <span class="comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span></span><br><span class="line">            y_ = tf.one_hot(y_train, depth=<span class="number">3</span>)  <span class="comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_ - y))  <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_all += loss.numpy()  <span class="comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1])</span><br><span class="line"></span><br><span class="line">        <span class="comment">##########################################################################</span></span><br><span class="line">        <span class="comment"># sgd-momentun  </span></span><br><span class="line">        m_w = beta * m_w + (<span class="number">1</span> - beta) * grads[<span class="number">0</span>]</span><br><span class="line">        m_b = beta * m_b + (<span class="number">1</span> - beta) * grads[<span class="number">1</span>]</span><br><span class="line">        w1.assign_sub(lr * m_w)</span><br><span class="line">        b1.assign_sub(lr * m_b)</span><br><span class="line">    <span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个epoch，打印loss信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all / <span class="number">4</span>))</span><br><span class="line">    train_loss_results.append(loss_all / <span class="number">4</span>)  <span class="comment"># 将4个step的loss求平均记录在此变量中</span></span><br><span class="line">    loss_all = <span class="number">0</span>  <span class="comment"># loss_all归零，为记录下一个epoch的loss做准备</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试部分</span></span><br><span class="line">    <span class="comment"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span></span><br><span class="line">    total_correct, total_number = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">        <span class="comment"># 使用更新后的参数进行预测</span></span><br><span class="line">        y = tf.matmul(x_test, w1) + b1</span><br><span class="line">        y = tf.nn.softmax(y)</span><br><span class="line">        pred = tf.argmax(y, axis=<span class="number">1</span>)  <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">        <span class="comment"># 将pred转换为y_test的数据类型</span></span><br><span class="line">        pred = tf.cast(pred, dtype=y_test.dtype)</span><br><span class="line">        <span class="comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span></span><br><span class="line">        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">        <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">        correct = tf.reduce_sum(correct)</span><br><span class="line">        <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">        total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">        <span class="comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span></span><br><span class="line">        total_number += x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 总的准确率等于total_correct/total_number</span></span><br><span class="line">    acc = total_correct / total_number</span><br><span class="line">    test_acc.append(acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Test_acc:&quot;</span>, acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">total_time = time.time() - now_time  <span class="comment">##3##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total_time&quot;</span>, total_time)  <span class="comment">##4##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 loss 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Loss Function Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(train_loss_results, label=<span class="string">&quot;$Loss$&quot;</span>)  <span class="comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span></span><br><span class="line">plt.legend()  <span class="comment"># 画出曲线图标</span></span><br><span class="line">plt.show()  <span class="comment"># 画出图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>)  <span class="comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请将loss曲线、ACC曲线、total_time记录到 class2\优化器对比.docx  对比各优化器收敛情况</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.486814260482788</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-loss.png" class="" title="SGDM-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-acc.png" class="" title="SGDM-acc"><h2 id="SGD-with-Nesterov-Acceleration"><a href="#SGD-with-Nesterov-Acceleration" class="headerlink" title="SGD with Nesterov Acceleration"></a>SGD with Nesterov Acceleration</h2><p>SGD 还有一个问题是会被困在一个局部最优点里。就像被一个小盆地周围的矮山挡住了视野，看不到更远的更深的沟壑。<br>NAG全称Nesterov Accelerated Gradient，是在SGD、SGDM的基础上的进一步改进，改进点在于步骤1。我们知道在时刻t的主要下降方向是由累积动量决定的，自己的梯度方向说了也不算，那与其看当前梯度方向，不如先看看如果跟着累积动量走了一步，那个时候再怎么走。因此，NAG在步骤1不计算当前位置的梯度方向，而是计算如果按照累积动量走了一步，考虑这个新地方的梯度方向。此时的梯度就变成了：</p><script type="math/tex; mode=display">g_{t} = \nabla f(w_{t} - \alpha · m_{t-1})</script><p>我们用这个梯度带入 SGDM 中计算 的式子里去，然后再计算当前时刻应有的梯度并更新这一次的参数。</p><p>其基本思路如下图（转自Hinton的Lecture slides）：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGD-NA.png" class="" title="SGD-NA"><p>首先，按照原来的更新方向更新一步（棕色线），然后计算该新位置的梯度方向（红色线），然后用这个梯度方向修正最终的更新方向（绿色线）。上图中描述了两步的更新示意图，其中蓝色线是标准momentum更新路径。</p><h2 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h2><p>上述SGD算法一直存在一个超参数（Hyper-parameter），即学习率。超参数是训练前需要手动选择的参数，前缀”hyper”就是用于区别训练过程中可自动更新的参数。学习率可以理解为参数<code>w</code>沿着梯度<code>g</code>反方向变化的步长。</p><p>SGD对所有的参数使用统一的、固定的学习率，一个自然的想法是对每个参数设置不同的学习率，然而在大型网络中这是不切实际的。因此，为解决此问题，AdaGrad算法被提出，其做法是给学习率一个缩放比例，从而达到了自适应学习率的效果（Ada = Adaptive）。</p><p>其思想是：对于频繁更新的参数，不希望被单个样本影响太大，我们给它们很小的学习率；对于偶尔出现的参数，希望能多得到一些信息，我们给它较大的学习率。</p><p>那怎么样度量历史更新频率呢？为此引入二阶动量，即该维度上，所有梯度值的平方和：</p><script type="math/tex; mode=display">V_{t} = \sum_{\tau=1}^{t} g_{\tau}^{2}</script><p>回顾步骤 3 中的下降梯度：$ \eta<em>{t} = \alpha · m</em>{t} / \sqrt{V<em>{t}} $ 可视为 $  \eta</em>{t} = \frac{\alpha}{\sqrt{V<em>{t}}} · m</em>{t} $ ，即对学习率进行缩放。（一般为了防止分母为 0 ，会对二阶动量加一个平滑项，即$ \eta<em>{t} = \alpha · m</em>{t} / \sqrt{V_{t} + \varepsilon}  $， $ \varepsilon $是一个非常小的数。）</p><p>AdaGrad 在稀疏数据场景下表现最好。因为对于频繁出现的参数，学习率衰减得快；对于稀疏的参数，学习率衰减得更慢。然而在实际很多情况下，二阶动量呈单调递增，累计从训练开始的梯度，学习率会很快减至0，导致参数不再更新，训练过程提前结束。</p><p>在SGD基础上增加二阶动量，可以对模型中的每个参数分配自适应学习率了。</p><p>Adagrad的一阶动量和SGD的一阶动量一样，是当前的梯度。</p><p>二阶动量是从现在开始，梯度平方的累计和。</p><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \sum</em>{\tau = 1}^{t} = g_{\tau}^{2} $</p><p>$ \eta<em>{t} =  lr·m</em>{t} / \sqrt{V<em>{t}} = lr · g</em>{t} / (\sqrt{ \sum<em>{\tau = 1}^{t} = g</em>{\tau}^{2}}) $</p><script type="math/tex; mode=display">w_{t+1} = w_{t} -  \eta_{t} = w_{t} - lr · g_{t} / (\sqrt{ \sum_{\tau = 1}^{t} = g_{\tau}^{2}})</script><p>一阶动量mt是当前时刻的梯度</p><p>二阶动量是梯度平方的累计和</p><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \sum</em>{\tau = 1}^{t} = g_{\tau}^{2} $</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="comment"># adagrad</span></span><br><span class="line">v_ w += tf.square(grads[<span class="number">0</span>])</span><br><span class="line">v_b += tf.square(grads[<span class="number">1</span>])</span><br><span class="line">W1.assign_sub(lr * grads[<span class="number">0</span>] / tf.sqrt(v_w))</span><br><span class="line">b1.assign_sub(lr * grads[<span class="number">1</span>] / tf.sqrt(v_b))</span><br></pre></td></tr></table></figure><p><code>p36_adagrad.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment">##1##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据，分别为输入特征和标签</span></span><br><span class="line">x_data = datasets.load_iris().data</span><br><span class="line">y_data = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</span></span><br><span class="line"><span class="comment"># seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样（为方便教学，以保每位同学结果一致）</span></span><br><span class="line">np.random.seed(<span class="number">116</span>)  <span class="comment"># 使用相同的seed，保证输入特征和标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</span></span><br><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">x_test = tf.cast(x_test, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()标记参数可训练</span></span><br><span class="line"><span class="comment"># 使用seed使每次生成的随机数相同（方便教学，使大家结果都一致，在现实使用时不写seed）</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">4</span>, <span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([<span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.1</span>  <span class="comment"># 学习率为0.1</span></span><br><span class="line">train_loss_results = []  <span class="comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span></span><br><span class="line">test_acc = []  <span class="comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span></span><br><span class="line">epoch = <span class="number">500</span>  <span class="comment"># 循环500轮</span></span><br><span class="line">loss_all = <span class="number">0</span>  <span class="comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line">now_time = time.time()  <span class="comment">##2##</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># 数据集级别的循环，每个epoch循环一次数据集</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):  <span class="comment"># batch级别的循环 ，每个step循环一个batch</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构记录梯度信息</span></span><br><span class="line">            y = tf.matmul(x_train, w1) + b1  <span class="comment"># 神经网络乘加运算</span></span><br><span class="line">            y = tf.nn.softmax(y)  <span class="comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span></span><br><span class="line">            y_ = tf.one_hot(y_train, depth=<span class="number">3</span>)  <span class="comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_ - y))  <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_all += loss.numpy()  <span class="comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1])</span><br><span class="line"></span><br><span class="line">        <span class="comment">##########################################################################</span></span><br><span class="line">        <span class="comment"># adagrad</span></span><br><span class="line">        v_w += tf.square(grads[<span class="number">0</span>])</span><br><span class="line">        v_b += tf.square(grads[<span class="number">1</span>])</span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>] / tf.sqrt(v_w))</span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>] / tf.sqrt(v_b))</span><br><span class="line">    <span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个epoch，打印loss信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all / <span class="number">4</span>))</span><br><span class="line">    train_loss_results.append(loss_all / <span class="number">4</span>)  <span class="comment"># 将4个step的loss求平均记录在此变量中</span></span><br><span class="line">    loss_all = <span class="number">0</span>  <span class="comment"># loss_all归零，为记录下一个epoch的loss做准备</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试部分</span></span><br><span class="line">    <span class="comment"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span></span><br><span class="line">    total_correct, total_number = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">        <span class="comment"># 使用更新后的参数进行预测</span></span><br><span class="line">        y = tf.matmul(x_test, w1) + b1</span><br><span class="line">        y = tf.nn.softmax(y)</span><br><span class="line">        pred = tf.argmax(y, axis=<span class="number">1</span>)  <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">        <span class="comment"># 将pred转换为y_test的数据类型</span></span><br><span class="line">        pred = tf.cast(pred, dtype=y_test.dtype)</span><br><span class="line">        <span class="comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span></span><br><span class="line">        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">        <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">        correct = tf.reduce_sum(correct)</span><br><span class="line">        <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">        total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">        <span class="comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span></span><br><span class="line">        total_number += x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 总的准确率等于total_correct/total_number</span></span><br><span class="line">    acc = total_correct / total_number</span><br><span class="line">    test_acc.append(acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Test_acc:&quot;</span>, acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">total_time = time.time() - now_time  <span class="comment">##3##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total_time&quot;</span>, total_time)  <span class="comment">##4##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 loss 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Loss Function Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(train_loss_results, label=<span class="string">&quot;$Loss$&quot;</span>)  <span class="comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span></span><br><span class="line">plt.legend()  <span class="comment"># 画出曲线图标</span></span><br><span class="line">plt.show()  <span class="comment"># 画出图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>)  <span class="comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请将loss曲线、ACC曲线、total_time记录到 class2\优化器对比.docx  对比各优化器收敛情况</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.356388568878174</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adagrad-loss.png" class="" title="Adagrad-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adagrad-acc.png" class="" title="Adagrad-acc"><h2 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h2><p>RMSProp算法的全称叫 Root Mean Square Prop，是由Geoffrey E. Hinton提出的一种优化算法（Hinton的课件见下图）。由于 AdaGrad 的学习率衰减太过激进，考虑改变二阶动量的计算策略：不累计全部梯度，只关注过去某一窗口内的梯度。修改的思路很直接，前面我们说过，指数移动平均值大约是过去一段时间的平均值，反映“局部的”参数信息，因此我们用这个方法来计算二阶累积动量：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/RMSProp-Hinton.png" class="" title="RMSProp-Hinton"><p>在SGD基础上增加二阶动量</p><p>二阶动量v使用指数滑动平均值计算，表征的是过去一段时间的平均值</p><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \beta · V</em>{t-1} + (1 - \beta) · g_{t}^{2} $</p><p>$ \eta<em>{t} =  lr·m</em>{t} / \sqrt{V<em>{t}} = lr · g</em>{t} / (\sqrt{\beta · V<em>{t-1} + (1 - \beta) · g</em>{t}^{2}}) $</p><script type="math/tex; mode=display">w_{t+1} = w_{t} -  \eta_{t} = w_{t} - lr · g_{t} / (\sqrt{\beta · V_{t-1} + (1 - \beta) · g_{t}^{2}})</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"><span class="comment"># RMSProp</span></span><br><span class="line">v_w = beta * v_w + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">0</span>])</span><br><span class="line">v_b = beta * v_b + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">1</span>])</span><br><span class="line">w1.assign_sub(lr * grads[<span class="number">0</span>] / tf.sqrt(v_w))</span><br><span class="line">bl.assign_sub(lr * grads[<span class="number">1</span>] / tf.sqrt(v_b))</span><br></pre></td></tr></table></figure><p><code>p38_rmsprop.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment">##1##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据，分别为输入特征和标签</span></span><br><span class="line">x_data = datasets.load_iris().data</span><br><span class="line">y_data = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</span></span><br><span class="line"><span class="comment"># seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样（为方便教学，以保每位同学结果一致）</span></span><br><span class="line">np.random.seed(<span class="number">116</span>)  <span class="comment"># 使用相同的seed，保证输入特征和标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</span></span><br><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">x_test = tf.cast(x_test, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()标记参数可训练</span></span><br><span class="line"><span class="comment"># 使用seed使每次生成的随机数相同（方便教学，使大家结果都一致，在现实使用时不写seed）</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">4</span>, <span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([<span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.1</span>  <span class="comment"># 学习率为0.1</span></span><br><span class="line">train_loss_results = []  <span class="comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span></span><br><span class="line">test_acc = []  <span class="comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span></span><br><span class="line">epoch = <span class="number">500</span>  <span class="comment"># 循环500轮</span></span><br><span class="line">loss_all = <span class="number">0</span>  <span class="comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line">now_time = time.time()  <span class="comment">##2##</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># 数据集级别的循环，每个epoch循环一次数据集</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):  <span class="comment"># batch级别的循环 ，每个step循环一个batch</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构记录梯度信息</span></span><br><span class="line">            y = tf.matmul(x_train, w1) + b1  <span class="comment"># 神经网络乘加运算</span></span><br><span class="line">            y = tf.nn.softmax(y)  <span class="comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span></span><br><span class="line">            y_ = tf.one_hot(y_train, depth=<span class="number">3</span>)  <span class="comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_ - y))  <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_all += loss.numpy()  <span class="comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1])</span><br><span class="line"></span><br><span class="line">        <span class="comment">##########################################################################</span></span><br><span class="line">        <span class="comment"># rmsprop</span></span><br><span class="line">        v_w = beta * v_w + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">0</span>])</span><br><span class="line">        v_b = beta * v_b + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">1</span>])</span><br><span class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>] / tf.sqrt(v_w))</span><br><span class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>] / tf.sqrt(v_b))</span><br><span class="line">    <span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个epoch，打印loss信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all / <span class="number">4</span>))</span><br><span class="line">    train_loss_results.append(loss_all / <span class="number">4</span>)  <span class="comment"># 将4个step的loss求平均记录在此变量中</span></span><br><span class="line">    loss_all = <span class="number">0</span>  <span class="comment"># loss_all归零，为记录下一个epoch的loss做准备</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试部分</span></span><br><span class="line">    <span class="comment"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span></span><br><span class="line">    total_correct, total_number = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">        <span class="comment"># 使用更新后的参数进行预测</span></span><br><span class="line">        y = tf.matmul(x_test, w1) + b1</span><br><span class="line">        y = tf.nn.softmax(y)</span><br><span class="line">        pred = tf.argmax(y, axis=<span class="number">1</span>)  <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">        <span class="comment"># 将pred转换为y_test的数据类型</span></span><br><span class="line">        pred = tf.cast(pred, dtype=y_test.dtype)</span><br><span class="line">        <span class="comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span></span><br><span class="line">        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">        <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">        correct = tf.reduce_sum(correct)</span><br><span class="line">        <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">        total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">        <span class="comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span></span><br><span class="line">        total_number += x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 总的准确率等于total_correct/total_number</span></span><br><span class="line">    acc = total_correct / total_number</span><br><span class="line">    test_acc.append(acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Test_acc:&quot;</span>, acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">total_time = time.time() - now_time  <span class="comment">##3##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total_time&quot;</span>, total_time)  <span class="comment">##4##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 loss 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Loss Function Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(train_loss_results, label=<span class="string">&quot;$Loss$&quot;</span>)  <span class="comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span></span><br><span class="line">plt.legend()  <span class="comment"># 画出曲线图标</span></span><br><span class="line">plt.show()  <span class="comment"># 画出图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>)  <span class="comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请将loss曲线、ACC曲线、total_time记录到 class2\优化器对比.docx  对比各优化器收敛情况</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.9049718379974365</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/RMSProploss.png" class="" title="RMSProp-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/RMSPropacc.png" class="" title="RMSProp-acc"><h2 id="AdaDelta"><a href="#AdaDelta" class="headerlink" title="AdaDelta"></a>AdaDelta</h2><p>为解决AdaGrad的学习率递减太快的问题，RMSProp和AdaDelta几乎同时独立被提出。</p><p>我们先看论文的AdaDelta算法，下图来自原论文：</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/AdaDelta1.png" class="" title="AdaDelta1"><p>对于上图算法的一点解释， $ RMS[g]<em>{t} $ 是梯度$g$的均方根（Root Mean Square），<br>$ RMS[\Delta x]</em>{t-1} $是$ \Delta x $的均方根：</p><script type="math/tex; mode=display">RMS[g]_{t} = \sqrt{E[g^{2}]_{t}}</script><script type="math/tex; mode=display">RMS[\Delta x]_{t-1} = \sqrt{E [\Delta x^{2}]_{t-1}}</script><p>我们可以看到AdaDelta与RMSprop仅仅是分子项不同，为了与前面公式保持一致，在此用$\sqrt{U_{t}}$表示$\eta$的均方根：</p><script type="math/tex; mode=display">m_{t} = g_{t}</script><script type="math/tex; mode=display">V_{t} = \beta_{2} · V_{t-1} + (1 - \beta_{2}) · g_{t}^{2}</script><script type="math/tex; mode=display">\eta_{t} = \frac{\sqrt{U_{t-1}}}{\sqrt{V_{t}}} · m_{t} = \frac{\sqrt{U_{t-1}}}{\sqrt{\beta_{2}·V_{t-1}+(1-\beta_{2})·g_{t}^{2}}} · g_{t}</script><script type="math/tex; mode=display">U_{t} = \beta_{2} · U_{t-1} + (1 - \beta_{2}) · \eta_{t}^{2}</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t}</script><p>我们可以看到AdaDelta与RMSprop仅仅是分子项不同，为了与前面公式保持一致，在此用<br>表示 的均方根：</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AdaDelta</span></span><br><span class="line">beta = <span class="number">0.999</span></span><br><span class="line">v_w = beta * v_w + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">0</span>])</span><br><span class="line">v_b = beta * v_b + (<span class="number">1</span> - beta) * tf.square(grads[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">delta_w = tf.sqrt(u_w) * grads[<span class="number">0</span>] / tf.sqrt(v_w)</span><br><span class="line">delta_b = tf.sqrt(u_b) * grads[<span class="number">1</span>] / tf.sqrt(v_b)</span><br><span class="line"></span><br><span class="line">u_w = beta * u_w + (<span class="number">1</span> - beta) * tf.square(delta_w)</span><br><span class="line">u_b = beta * u_b + (<span class="number">1</span> - beta) * tf.square(delta_b)</span><br><span class="line"></span><br><span class="line">w1.assign_sub(delta_w)</span><br><span class="line">b1.assign_sub(delta_b)</span><br></pre></td></tr></table></figure><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><p>Adam名字来源是adaptive moment estimation。Our method is designed to combine the advantages of two recently popular methods: AdaGrad (Duchi et al., 2011), which works well with sparse gradients, and RMSProp (Tieleman &amp; Hinton, 2012), which works well in on-line and non-stationary settings。也就是说，adam融合了Adagrad和RMSprop的思想。</p><p>谈到这里，Adam的出现就很自然而然了——它们是前述方法的集大成者。我们看到，SGDM在SGD基础上增加了一阶动量，AdaGrad、RMSProp和AdaDelta在SGD基础上增加了二阶动量。把一阶动量和二阶动量结合起来，再修正偏差，就是Adam了。</p><p>同时引入了SGDM一阶动量和RMSProp二阶动量，并在此基础上增加了两个修正项，把修正后的一阶动量和二阶动量带入参数更新公式。</p><p>SGDM一阶动量：</p><script type="math/tex; mode=display">m_{t} = \beta_{1} · m_{t-1} + (1 - \beta_{1}) · g_{t}</script><p>RMSProp二阶动量：</p><script type="math/tex; mode=display">V_{t} = \beta_{2} · V_{t-1} + (1 - \beta_{2}) · g_{t}^{2}</script><p>其中，参数经验值是$ \beta<em>{1} = 0.9 $ 和 $ \beta</em>{2} = 0.999 $</p><p>一阶动量和二阶动量都是按照指数移动平均值进行计算的。初始化 $ m<em>{0} = 0, V</em>{0} = 0 $ ，在初期，迭代得到的 $ m<em>{t} $ 和 $ V</em>{t} $ 会接近于0。我们可以通过对 $ m<em>{t} $ 和 $ V</em>{t} $ 进行偏差修正来解决这一问题：</p><p>修正一阶动量的偏差：$ \widehat{m<em>{t}} = \frac{m</em>{t}}{1 - \beta_{1}^{t}} $</p><p>修正二阶动量的偏差：$  \widehat{V<em>{t}} = \frac{V</em>{t}}{1 -  \beta_{2}^{t}} $</p><script type="math/tex; mode=display">\eta_{t} = lr · \widehat{m_{t}} / \sqrt{\widehat{V_{t}}} = lr · \frac{m_{t}}{1-\beta_{1}^{t}} / \sqrt{\frac{V_{t}}{1-\beta_{2}^{t}}}</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t} = w_{t} - lr · \frac{m_{t}}{1-\beta_{1}^{t}} / \sqrt{\frac{V_{t}}{1-\beta_{2}^{t}}}</script><p>adam一阶动量是和含momentum的SGD一阶动量一样</p><p>二阶动量表达是和RMSProp的二阶动量表达式一样</p><p>$ \widehat{m<em>{t}} = \frac{m</em>{t}}{1 - \beta_{1}^{t}} $</p><p>$  \widehat{V<em>{t}} = \frac{V</em>{t}}{1 -  \beta_{2}^{t}} $</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">m_w, m_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta1, beta2 = <span class="number">0.9</span>, <span class="number">0.999</span></span><br><span class="line">delta_w, delta_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">global_step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#adam</span></span><br><span class="line">m_w = beta1 * m_w + (<span class="number">1</span> - beta1) * grads[<span class="number">0</span>]</span><br><span class="line">m_b = beta1 * m_b + (<span class="number">1</span> - beta1) * grads[<span class="number">1</span>]</span><br><span class="line">v_w = beta2 * v_w + (<span class="number">1</span> - beta2) * tf.square(grads[<span class="number">0</span>])</span><br><span class="line">v_b = beta2 * v_b + (<span class="number">1</span> - beta2) * tf.square(grads[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#global_step是从训练开始到当前时所经历的总batch数</span></span><br><span class="line">m_w_correction = m_w / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta1, <span class="built_in">int</span>(global_step)))</span><br><span class="line">m_b_correction = m_b / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta1, <span class="built_in">int</span>(global_step)))</span><br><span class="line">v_w_correction = v_w / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta2, <span class="built_in">int</span>(global_step)))</span><br><span class="line">v_b_correction = v_b / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta2, <span class="built_in">int</span>(global_step)))</span><br><span class="line"></span><br><span class="line">w1.assign_sub(lr * m_w_correction / tf.sqrt(v_w_correction))</span><br><span class="line">b1.assign_sub(lr * m_b_correction / tf.sqrt(v_b_correction))</span><br></pre></td></tr></table></figure><p><code>p40_adam.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment">##1##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据，分别为输入特征和标签</span></span><br><span class="line">x_data = datasets.load_iris().data</span><br><span class="line">y_data = datasets.load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</span></span><br><span class="line"><span class="comment"># seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样（为方便教学，以保每位同学结果一致）</span></span><br><span class="line">np.random.seed(<span class="number">116</span>)  <span class="comment"># 使用相同的seed，保证输入特征和标签一一对应</span></span><br><span class="line">np.random.shuffle(x_data)</span><br><span class="line">np.random.seed(<span class="number">116</span>)</span><br><span class="line">np.random.shuffle(y_data)</span><br><span class="line">tf.random.set_seed(<span class="number">116</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</span></span><br><span class="line">x_train = x_data[:-<span class="number">30</span>]</span><br><span class="line">y_train = y_data[:-<span class="number">30</span>]</span><br><span class="line">x_test = x_data[-<span class="number">30</span>:]</span><br><span class="line">y_test = y_data[-<span class="number">30</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</span></span><br><span class="line">x_train = tf.cast(x_train, tf.float32)</span><br><span class="line">x_test = tf.cast(x_test, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="number">32</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</span></span><br><span class="line"><span class="comment"># 用tf.Variable()标记参数可训练</span></span><br><span class="line"><span class="comment"># 使用seed使每次生成的随机数相同（方便教学，使大家结果都一致，在现实使用时不写seed）</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">4</span>, <span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line">b1 = tf.Variable(tf.random.truncated_normal([<span class="number">3</span>], stddev=<span class="number">0.1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">0.1</span>  <span class="comment"># 学习率为0.1</span></span><br><span class="line">train_loss_results = []  <span class="comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span></span><br><span class="line">test_acc = []  <span class="comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span></span><br><span class="line">epoch = <span class="number">500</span>  <span class="comment"># 循环500轮</span></span><br><span class="line">loss_all = <span class="number">0</span>  <span class="comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">m_w, m_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v_w, v_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">beta1, beta2 = <span class="number">0.9</span>, <span class="number">0.999</span></span><br><span class="line">delta_w, delta_b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">global_step = <span class="number">0</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练部分</span></span><br><span class="line">now_time = time.time()  <span class="comment">##2##</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch):  <span class="comment"># 数据集级别的循环，每个epoch循环一次数据集</span></span><br><span class="line">    <span class="keyword">for</span> step, (x_train, y_train) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_db):  <span class="comment"># batch级别的循环 ，每个step循环一个batch</span></span><br><span class="line"> <span class="comment">##########################################################################       </span></span><br><span class="line">        global_step += <span class="number">1</span></span><br><span class="line"> <span class="comment">##########################################################################       </span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:  <span class="comment"># with结构记录梯度信息</span></span><br><span class="line">            y = tf.matmul(x_train, w1) + b1  <span class="comment"># 神经网络乘加运算</span></span><br><span class="line">            y = tf.nn.softmax(y)  <span class="comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span></span><br><span class="line">            y_ = tf.one_hot(y_train, depth=<span class="number">3</span>)  <span class="comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span></span><br><span class="line">            loss = tf.reduce_mean(tf.square(y_ - y))  <span class="comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span></span><br><span class="line">            loss_all += loss.numpy()  <span class="comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span></span><br><span class="line">        <span class="comment"># 计算loss对各个参数的梯度</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1])</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"> <span class="comment"># adam</span></span><br><span class="line">        m_w = beta1 * m_w + (<span class="number">1</span> - beta1) * grads[<span class="number">0</span>]</span><br><span class="line">        m_b = beta1 * m_b + (<span class="number">1</span> - beta1) * grads[<span class="number">1</span>]</span><br><span class="line">        v_w = beta2 * v_w + (<span class="number">1</span> - beta2) * tf.square(grads[<span class="number">0</span>])</span><br><span class="line">        v_b = beta2 * v_b + (<span class="number">1</span> - beta2) * tf.square(grads[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        m_w_correction = m_w / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta1, <span class="built_in">int</span>(global_step)))</span><br><span class="line">        m_b_correction = m_b / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta1, <span class="built_in">int</span>(global_step)))</span><br><span class="line">        v_w_correction = v_w / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta2, <span class="built_in">int</span>(global_step)))</span><br><span class="line">        v_b_correction = v_b / (<span class="number">1</span> - tf.<span class="built_in">pow</span>(beta2, <span class="built_in">int</span>(global_step)))</span><br><span class="line"></span><br><span class="line">        w1.assign_sub(lr * m_w_correction / tf.sqrt(v_w_correction))</span><br><span class="line">        b1.assign_sub(lr * m_b_correction / tf.sqrt(v_b_correction))</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个epoch，打印loss信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, loss_all / <span class="number">4</span>))</span><br><span class="line">    train_loss_results.append(loss_all / <span class="number">4</span>)  <span class="comment"># 将4个step的loss求平均记录在此变量中</span></span><br><span class="line">    loss_all = <span class="number">0</span>  <span class="comment"># loss_all归零，为记录下一个epoch的loss做准备</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试部分</span></span><br><span class="line">    <span class="comment"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span></span><br><span class="line">    total_correct, total_number = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_test, y_test <span class="keyword">in</span> test_db:</span><br><span class="line">        <span class="comment"># 使用更新后的参数进行预测</span></span><br><span class="line">        y = tf.matmul(x_test, w1) + b1</span><br><span class="line">        y = tf.nn.softmax(y)</span><br><span class="line">        pred = tf.argmax(y, axis=<span class="number">1</span>)  <span class="comment"># 返回y中最大值的索引，即预测的分类</span></span><br><span class="line">        <span class="comment"># 将pred转换为y_test的数据类型</span></span><br><span class="line">        pred = tf.cast(pred, dtype=y_test.dtype)</span><br><span class="line">        <span class="comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span></span><br><span class="line">        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)</span><br><span class="line">        <span class="comment"># 将每个batch的correct数加起来</span></span><br><span class="line">        correct = tf.reduce_sum(correct)</span><br><span class="line">        <span class="comment"># 将所有batch中的correct数加起来</span></span><br><span class="line">        total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">        <span class="comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span></span><br><span class="line">        total_number += x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 总的准确率等于total_correct/total_number</span></span><br><span class="line">    acc = total_correct / total_number</span><br><span class="line">    test_acc.append(acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Test_acc:&quot;</span>, acc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">total_time = time.time() - now_time  <span class="comment">##3##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total_time&quot;</span>, total_time)  <span class="comment">##4##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 loss 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Loss Function Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(train_loss_results, label=<span class="string">&quot;$Loss$&quot;</span>)  <span class="comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span></span><br><span class="line">plt.legend()  <span class="comment"># 画出曲线图标</span></span><br><span class="line">plt.show()  <span class="comment"># 画出图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 曲线</span></span><br><span class="line">plt.title(<span class="string">&#x27;Acc Curve&#x27;</span>)  <span class="comment"># 图片标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)  <span class="comment"># x轴变量名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Acc&#x27;</span>)  <span class="comment"># y轴变量名称</span></span><br><span class="line">plt.plot(test_acc, label=<span class="string">&quot;$Accuracy$&quot;</span>)  <span class="comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请将loss曲线、ACC曲线、total_time记录到 class2\优化器对比.docx  对比各优化器收敛情况</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 6.299233913421631</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adam-loss.png" class="" title="Adam-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adam-acc.png" class="" title="Adam-acc"><h2 id="五种优化器对比总结"><a href="#五种优化器对比总结" class="headerlink" title="五种优化器对比总结"></a>五种优化器对比总结</h2><h3 id="各种优化器来源"><a href="#各种优化器来源" class="headerlink" title="各种优化器来源"></a>各种优化器来源</h3><ul><li>SGD（1952）：<a href="https://projecteuclid.org/euclid.aoms/1177729392（源自回答）">https://projecteuclid.org/euclid.aoms/1177729392（源自回答）</a></li><li>SGD with Momentum（1999）：<a href="https://www.sciencedirect.com/science/article/abs/pii/S0893608098001166">https://www.sciencedirect.com/science/article/abs/pii/S0893608098001166</a></li><li>SGD with Nesterov Acceleration（1983）：由Yurii Nesterov提出</li><li>AdaGrad（2011）: <a href="http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf">http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf</a></li><li>RMSProp（2012）: <a href="http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf">http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf</a></li><li>AdaDelta（2012）: <a href="https://arxiv.org/abs/1212.5701">https://arxiv.org/abs/1212.5701</a></li><li>Adam:（2014） <a href="https://arxiv.org/abs/1412.6980">https://arxiv.org/abs/1412.6980</a></li><li>对上述算法非常好的可视化：<a href="https://imgur.com/a/Hqolp">https://imgur.com/a/Hqolp</a></li><li>可视化开源项目：<a href="https://github.com/seanwu1105/neural-network-sandbox">https://github.com/seanwu1105/neural-network-sandbox</a></li></ul><h4 id="Visualizing-Optimization-Algos"><a href="#Visualizing-Optimization-Algos" class="headerlink" title="Visualizing Optimization Algos"></a>Visualizing Optimization Algos</h4><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%961.gif" class="" title="优化器可视化1"><p>Algos without scaling based on gradient information really struggle to break symmetry here - SGD gets no where and Nesterov Accelerated Gradient / Momentum exhibits oscillations until they build up velocity in the optimization direction.<br>没有基于梯度信息进行缩放的算法在这里真的很难打破对称性——SGD没有位置，Nesterov加速梯度/动量表现出振荡，直到它们在优化方向上建立速度。</p><p>Algos that scale step size based on the gradient quickly break symmetry and begin descent.<br>基于梯度缩放步长的算法会迅速打破对称性并开始下降。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%962.gif" class="" title="优化器可视化2"><p>Due to the large initial gradient, velocity based techniques shoot off and bounce around - adagrad almost goes unstable for the same reason.<br>由于初始梯度大，基于速度的技术在阿达格勒附近发射和反弹几乎会因为同样的原因而变得不稳定。</p><p>Algos that scale gradients/step sizes like adadelta and RMSProp proceed more like accelerated SGD and handle large gradients with more stability.<br>像adadelta和RMSProp这样缩放梯度/步长的算法更像加速SGD，并且更稳定地处理大梯度。</p><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%963.gif" class="" title="优化器可视化3"><p>Behavior around a saddle point.<br>鞍点周围的行为。</p><p>NAG/Momentum again like to explore around, almost taking a different path.<br>NAG/Momentum再次喜欢四处探索，几乎走上了一条不同的道路。</p><p>Adadelta/Adagrad/RMSProp proceed like accelerated SGD.<br>阿达德尔塔/阿达格拉德/RMSProp像加速SGD一样进行。</p><h3 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h3><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><script type="math/tex; mode=display">\eta_{t}  = lr · m_{t} / \sqrt{V_{t}} = lr · m_{t} = lr · (\beta · m_{t-1} + (1 - \beta) · g_{t})</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t} = w_{t} - lr · （\beta · m_{t-1} + (1 - \beta) · g_{t}）</script><p>参数更新公式最重要的是把一阶动量和二阶动量计算出来</p><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.486814260482788</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-loss.png" class="" title="SGDM-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-acc.png" class="" title="SGDM-acc"><h3 id="SGDM"><a href="#SGDM" class="headerlink" title="SGDM"></a>SGDM</h3><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><script type="math/tex; mode=display">\eta_{t}  = lr · m_{t} / \sqrt{V_{t}} = lr · m_{t} = lr · (\beta · m_{t-1} + (1 - \beta) · g_{t})</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t} = w_{t} - lr · （\beta · m_{t-1} + (1 - \beta) · g_{t}）</script><p>参数更新公式最重要的是把一阶动量和二阶动量计算出来</p><script type="math/tex; mode=display">m_{t} = \beta · m_{t-1} + (1 - \beta) · g_{t}</script><script type="math/tex; mode=display">V_{t} = 1</script><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.486814260482788</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-loss.png" class="" title="SGDM-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/SGDM-acc.png" class="" title="SGDM-acc"><h3 id="Adagrad-1"><a href="#Adagrad-1" class="headerlink" title="Adagrad"></a>Adagrad</h3><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \sum</em>{\tau = 1}^{t} = g_{\tau}^{2} $</p><p>$ \eta<em>{t} =  lr·m</em>{t} / \sqrt{V<em>{t}} = lr · g</em>{t} / (\sqrt{ \sum<em>{\tau = 1}^{t} = g</em>{\tau}^{2}}) $</p><script type="math/tex; mode=display">w_{t+1} = w_{t} -  \eta_{t} = w_{t} - lr · g_{t} / (\sqrt{ \sum_{\tau = 1}^{t} = g_{\tau}^{2}})</script><p>一阶动量mt是当前时刻的梯度</p><p>二阶动量是梯度平方的累计和</p><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \sum</em>{\tau = 1}^{t} = g_{\tau}^{2} $</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.356388568878174</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adagrad-loss.png" class="" title="Adagrad-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adagrad-acc.png" class="" title="Adagrad-acc"><h3 id="RMSProp-1"><a href="#RMSProp-1" class="headerlink" title="RMSProp"></a>RMSProp</h3><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \beta · V</em>{t-1} + (1 - \beta) · g_{t}^{2} $</p><p>$ \eta<em>{t} =  lr·m</em>{t} / \sqrt{V<em>{t}} = lr · g</em>{t} / (\sqrt{\beta · V<em>{t-1} + (1 - \beta) · g</em>{t}^{2}}) $</p><script type="math/tex; mode=display">w_{t+1} = w_{t} -  \eta_{t} = w_{t} - lr · g_{t} / (\sqrt{\beta · V_{t-1} + (1 - \beta) · g_{t}^{2}})</script><p>$ m<em>{t} = g</em>{t} $</p><p>$ V<em>{t} = \beta · V</em>{t-1} + (1 - \beta) · g_{t}^{2} $</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 5.9049718379974365</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/RMSProploss.png" class="" title="RMSProp-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/RMSPropacc.png" class="" title="RMSProp-acc"><h3 id="Adam-1"><a href="#Adam-1" class="headerlink" title="Adam"></a>Adam</h3><script type="math/tex; mode=display">m_{t} = \beta_{1} · m_{t-1} + (1 - \beta_{1}) · g_{t}</script><p>修正一阶动量的偏差：$ \widehat{m<em>{t}} = \frac{m</em>{t}}{1 - \beta_{1}^{t}} $</p><script type="math/tex; mode=display">V_{t} = \beta_{2} · V_{step-1} + (1 - \beta_{2}) · g_{t}^{2}</script><p>修正二阶动量的偏差：$  \widehat{V<em>{t}} = \frac{V</em>{t}}{1 -  \beta_{2}^{t}} $</p><script type="math/tex; mode=display">\eta_{t} = lr · \widehat{m_{t}} / \sqrt{\widehat{V_{t}}} = lr · \frac{m_{t}}{1-\beta_{1}^{t}} / \sqrt{\frac{V_{t}}{1-\beta_{2}^{t}}}</script><script type="math/tex; mode=display">w_{t+1} = w_{t} - \eta_{t} = w_{t} - lr · \frac{m_{t}}{1-\beta_{1}^{t}} / \sqrt{\frac{V_{t}}{1-\beta_{2}^{t}}}</script><p>adam一阶动量是和含momentum的SGD一阶动量一样</p><p>二阶动量表达是和RMSProp的二阶动量表达式一样</p><p>$ \widehat{m<em>{t}} = \frac{m</em>{t}}{1 - \beta_{1}^{t}} $</p><p>$  \widehat{V<em>{t}} = \frac{V</em>{t}}{1 -  \beta_{2}^{t}} $</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_time 6.299233913421631</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adam-loss.png" class="" title="Adam-loss"><img src="/2023/02/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AE%9E%E8%B7%B5-Tensorflow%E7%AC%94%E8%AE%B0-MOOC-%E7%AC%AC%E4%BA%8C%E8%AE%B2%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/Adam-acc.png" class="" title="Adam-acc"><h1 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h1><h2 id="tf-cast"><a href="#tf-cast" class="headerlink" title="tf.cast"></a>tf.cast</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.cast(</span><br><span class="line">x, dtype, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：转换数据（张量）类型。</li><li>参数：<br>  <code>x</code>：待转换的数据（张量）<br>  <code>dtype</code>：目标数据类型<br>  <code>name</code>：定义操作的名称（可选参数）</li><li>返回：数据类型为<code>dtype</code>，shape与x相同的张量</li><li>例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([<span class="number">1.8</span>, <span class="number">2.2</span>], dtype=tf.float32)</span><br><span class="line"><span class="built_in">print</span>(tf.cast(x, tf.int32))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">1</span> <span class="number">2</span>], shape=(<span class="number">2</span>,), dtype=int32)</span><br></pre></td></tr></table></figure></li></ul><h2 id="tf-random-normal"><a href="#tf-random-normal" class="headerlink" title="tf.random.normal"></a>tf.random.normal</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.random.normal(</span><br><span class="line">shape, mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>, dtype=tf.dtypes.float32, seed=<span class="literal">None</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：生成服从正态分布的随机值</li><li>参数：<br>  <code>x</code>：一维张量<br>  <code>mean</code>：正态分布的均值<br>  <code>stddev</code>：正态分布的方差</li><li>返回：满足指定shape并且服从正态分布的张量</li><li>例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tf.random.normal([<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">7</span>, shape=(<span class="number">3</span>, <span class="number">5</span>), dtype=float32, numpy=</span><br><span class="line">array([[-<span class="number">0.3951666</span> , -<span class="number">0.06858674</span>, <span class="number">0.29626969</span>, <span class="number">0.8070933</span> , -<span class="number">0.81376624</span>],</span><br><span class="line">[ <span class="number">0.09532423</span>, -<span class="number">0.20840745</span>, <span class="number">0.37404788</span>, <span class="number">0.5459829</span> , <span class="number">0.17986278</span>],</span><br><span class="line">[-<span class="number">1.0439969</span> , -<span class="number">0.8826001</span> , <span class="number">0.7081867</span> , -<span class="number">0.40955627</span>, -<span class="number">2.6596873</span> ]],</span><br><span class="line">dtype=float32)&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="tf-where"><a href="#tf-where" class="headerlink" title="tf.where"></a>tf.where</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.where(</span><br><span class="line">condition, x=<span class="literal">None</span>, y=<span class="literal">None</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>功能：根据condition，取x或y中的值。如果为True，对应位置取x的值；如果为False，对应位置取y的值。</li><li>参数：<br>  <code>condition</code>：bool型张量<br>  <code>x</code>：与<code>y</code> shape相同的张量<br>  <code>y</code>：与<code>x</code> shape相同的张量</li><li>返回：shape与<code>x</code>相同的张量</li><li>例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tf.where([<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.Tensor([<span class="number">1</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span>], shape=(<span class="number">4</span>,), dtype=int32)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">人工智能实践-Tensorflow笔记-MOOC-第二讲神经网络优化</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Tensorflow" scheme="http://hibiscidai.com/tags/Tensorflow/"/>
    
    <category term="TensorflowMOOC" scheme="http://hibiscidai.com/tags/TensorflowMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</title>
    <link href="http://hibiscidai.com/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-04T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"><p>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"><a href="#实用Python程序设计MOOC-第十四章tkinter图形界面程序设计" class="headerlink" title="实用Python程序设计MOOC-第十四章tkinter图形界面程序设计"></a>实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</h1><h1 id="tkinter-图形界面编程"><a href="#tkinter-图形界面编程" class="headerlink" title="tkinter 图形界面编程"></a>tkinter 图形界面编程</h1><p>图形界面编程要点</p><ul><li>使用Python自带tkinter库，简单，但是简陋</li><li><p>使用PyQt，精美，但是难学</p></li><li><p>控件(widgets)<br>按钮、列表框、单选框、多选框、编辑框……</p></li><li><p>布局<br>如何将控件摆放在窗口上合适的位置</p></li><li><p>事件响应<br>对鼠标点击、键盘敲击、控件被点击等操作进行响应</p></li><li><p>对话框<br>弹出一个和用户交互的窗口接受一些输入</p></li></ul><h1 id="tkinter控件"><a href="#tkinter控件" class="headerlink" title="tkinter控件"></a>tkinter控件</h1><h2 id="tkinter的常用控件"><a href="#tkinter的常用控件" class="headerlink" title="tkinter的常用控件"></a>tkinter的常用控件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">控件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Button</strong></td><td style="text-align:center">按钮</td></tr><tr><td style="text-align:center">Canvas</td><td style="text-align:center">画布，显示图形如线条或文本</td></tr><tr><td style="text-align:center"><strong>Checkbutton</strong></td><td style="text-align:center">多选框(方形)</td></tr><tr><td style="text-align:center"><strong>Entry</strong></td><td style="text-align:center">单行编辑框(输入框)</td></tr><tr><td style="text-align:center"><strong>Frame</strong></td><td style="text-align:center">框架，上面可以摆放多个控件</td></tr><tr><td style="text-align:center"><strong>Label</strong></td><td style="text-align:center">标签 ，可以显示文本和图像</td></tr><tr><td style="text-align:center"><strong>Listbox</strong></td><td style="text-align:center">列表框</td></tr><tr><td style="text-align:center">Menubutton</td><td style="text-align:center">带菜单的按钮</td></tr><tr><td style="text-align:center"><strong>Menu</strong></td><td style="text-align:center">菜单</td></tr><tr><td style="text-align:center">Message</td><td style="text-align:center">消息，显示多行文本</td></tr><tr><td style="text-align:center"><strong>OptionMenu</strong></td><td style="text-align:center">带下拉菜单的按钮</td></tr><tr><td style="text-align:center"><strong>Radiobutton</strong></td><td style="text-align:center">单选框(圆形)</td></tr><tr><td style="text-align:center">Scale</td><td style="text-align:center">滑块标尺，可以做一定范围内的数值选择</td></tr><tr><td style="text-align:center">Scrollbar</td><td style="text-align:center">卷滚条，使内容在显示区域内上下滚动</td></tr><tr><td style="text-align:center"><strong>Text</strong></td><td style="text-align:center">多行编辑框（输入框）</td></tr><tr><td style="text-align:center">Toplevel</td><td style="text-align:center">顶层窗口，可以用于弹出自定义对话框</td></tr><tr><td style="text-align:center"><strong>Spinbox</strong></td><td style="text-align:center">微调输入框。可以输入数值，也可以用上下箭头微调数值</td></tr><tr><td style="text-align:center">PanedWindow</td><td style="text-align:center">滑动分割窗口。可以将一个窗口分成几块，交界处可以拖动，改变各块大小</td></tr><tr><td style="text-align:center"><strong>LabelFrame</strong></td><td style="text-align:center">带文字标签的框架，上面可以摆放多个控件</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">win = tk.Tk() <span class="comment">#生成一个窗口</span></span><br><span class="line">tk.Label(win,.....) <span class="comment">#在窗口win上生成一个Label，该Label的母体是win</span></span><br><span class="line">ckb = tk.Checkbutton(win,.....) <span class="comment">#在窗口上生成一个Checkbutton</span></span><br><span class="line">frm = tk.Frame(win,.....) <span class="comment">#在窗口上生成一个Frame</span></span><br><span class="line">bt = tk.Button(frm,......) <span class="comment">#在frm上生成一个Button</span></span><br></pre></td></tr></table></figure><h2 id="tkinter的扩展控件"><a href="#tkinter的扩展控件" class="headerlink" title="tkinter的扩展控件"></a>tkinter的扩展控件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">控件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>TreeView</strong></td><td style="text-align:center">树形列表</td></tr><tr><td style="text-align:center">ProgressBar</td><td style="text-align:center">进度条</td></tr><tr><td style="text-align:center"><strong>Notebook</strong></td><td style="text-align:center">多页标签</td></tr><tr><td style="text-align:center"><strong>LabeledScale</strong></td><td style="text-align:center">带文字的滑块标尺</td></tr><tr><td style="text-align:center"><strong>Panedwindow</strong></td><td style="text-align:center">分栏窗口</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="comment">#tk中的控件ttk中都有，且更美观，用法基本和tk一样，且ttk多出几个控件</span></span><br><span class="line"></span><br><span class="line">tree = ttk.TreeView(win,......)</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/tkinter%E6%8E%A7%E4%BB%B61.png" class="" title="tkinter控件1"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/tkinter%E6%8E%A7%E4%BB%B62.png" class="" title="tkinter控件2"><h1 id="tkinter布局"><a href="#tkinter布局" class="headerlink" title="tkinter布局"></a>tkinter布局</h1><p>用grid进行布局</p><ul><li><p>pack布局,place布局(略)</p></li><li><p>grid布局在窗口上布置网格(grid)，控件放在网格单元里面</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">win = tk.Tk() <span class="comment">#创建窗口</span></span><br><span class="line">win.title(<span class="string">&quot;Hello&quot;</span>) <span class="comment">#指定窗口标题</span></span><br><span class="line">label1 = tk.Label(win,text=<span class="string">&quot;用户名： &quot;</span>) <span class="comment">#创建属于win上的图文标签控件</span></span><br><span class="line">label2 = tk.Label(win,text=<span class="string">&quot;密码： &quot;</span>)</span><br><span class="line">etUsername = tk.Entry(win) <span class="comment">#创建属于win的单行编辑框控件，用于输入用户名</span></span><br><span class="line">etPassword = tk.Entry(win) <span class="comment">#创建密码编辑框</span></span><br><span class="line"></span><br><span class="line">label1.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)<span class="comment">#label1放在第0行第0列，上下左右都留白5像素</span></span><br><span class="line">label2.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">etUsername.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>) <span class="comment">#用户名输入框放在第0行第1列</span></span><br><span class="line">etPassword.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>) <span class="comment">#密码输入框放在第1行第1列</span></span><br><span class="line"></span><br><span class="line">btLogin = tk.Button(win,text=<span class="string">&quot;登录&quot;</span>) <span class="comment">#创建属于win的按钮控件</span></span><br><span class="line">btLogin.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)<span class="comment">#btLogin放在第2行第0列，跨2列</span></span><br><span class="line"></span><br><span class="line">win.mainloop() <span class="comment">#显示窗口</span></span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%801.png" class="" title="grid布局1"><h2 id="默认情况下的grid规则"><a href="#默认情况下的grid规则" class="headerlink" title="默认情况下的grid规则"></a>默认情况下的grid规则</h2><ul><li><p>一个单元格只能放一个控件，控件在单元格中居中摆放。</p></li><li><p>不同控件高宽可以不同，因此网格不同行可以不一样高，不同列也可以不一样宽。但同一行的单元格是一样高的，同一列的单元格也是一样宽的。</p></li><li><p>一行的高度，以该行中包含最高控件的那个单元格为准。单元格的高度，等于该单元格中摆放的控件的高度（控件如果有上下留白，还要加上留白的高度）。列宽度也是类似的处理方式。</p></li><li><p>若不指定窗口的大小和显示位置，则窗口大小和网格的大小一样，即恰好能包裹所有控件；显示位置则由Python自行决定。</p></li><li><p>如果指定了窗口大小，或者用户拖拽窗口边缘将窗口变大，就会发生网格小于窗口大小的情况。</p></li><li><p><code>win.geometry(&quot;800x500+200+100&quot;)</code> 字母x<br>设定窗口宽800像素，高500，左上角位于（200， 100）</p></li><li><p>可以做到网格随着窗口大小变化自动变化，填满窗口，并且控件依然居中显示</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">win.geometry(<span class="string">&quot;500x200&quot;</span>)</span><br><span class="line">win.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#指定第0列增量分配权重为1</span></span><br><span class="line">win.columnconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.rowconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#指定第0行增量分配权重为1</span></span><br><span class="line">win.rowconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.rowconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%802.png" class="" title="grid布局2"><p>行列默认<code>增量分配权重</code>为0，宽高不会随着窗口大小变化而变化<br>窗口增大的时候会按照<code>增量分配权重值</code>的大小按比例分配</p><h2 id="grid-函数的sticky参数"><a href="#grid-函数的sticky参数" class="headerlink" title="grid()函数的sticky参数"></a>grid()函数的sticky参数</h2><ul><li>sticky指明控件在单元格中的“贴边方式”，即是否要贴着单元格的四条边。该参数可以是个字符串，包含”E”,”W”,”S”,”N”四个字符中的一个或多个。</li></ul><p>不设置默认居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">label2.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;NE&quot;</span>)</span><br><span class="line"><span class="comment">#密码标签靠左上角</span></span><br><span class="line"></span><br><span class="line">etUsername.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;E&quot;</span>)</span><br><span class="line"><span class="comment">#用户名编辑框靠右</span></span><br><span class="line"></span><br><span class="line">etPassword.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;EWSN&quot;</span>)</span><br><span class="line"><span class="comment">#密码编辑框占满单元格</span></span><br><span class="line"></span><br><span class="line">btLogin.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>,sticky=<span class="string">&quot;SW&quot;</span>)</span><br><span class="line"><span class="comment">#登录按钮靠左下</span></span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/grid%E5%B8%83%E5%B1%803.png" class="" title="grid布局3"><h1 id="使用Frame控件进行布局"><a href="#使用Frame控件进行布局" class="headerlink" title="使用Frame控件进行布局"></a>使用Frame控件进行布局</h1><ul><li><p>控件多了，要算每个控件行、列、 rowspan,columnspan很麻烦</p></li><li><p>Frame控件上面还可以摆放控件，可以当作底板使用</p></li><li><p>可以在Frame控件上面设置网格进行Grid布局，摆放多个控件</p></li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Frame%E5%B8%83%E5%B1%801.png" class="" title="Frame布局1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&#x27;人事系统&#x27;</span>)</span><br><span class="line">frm01Red = tk.Frame(win,bg=<span class="string">&quot;red&quot;</span>,highlightthickness=<span class="number">2</span>) <span class="comment">#背景红色，边框宽度2</span></span><br><span class="line">frm01Red.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,columnspan=<span class="number">2</span>,sticky=<span class="string">&quot;WE&quot;</span>)</span><br><span class="line">tk.Label(frm01Red, text=<span class="string">&quot;姓名： &quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Entry(frm01Red).grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Label(frm01Red, text=<span class="string">&quot;手机号： &quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">2</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Entry(frm01Red).grid(row=<span class="number">0</span>,column=<span class="number">3</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Button(frm01Red,text=<span class="string">&quot;更新&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">4</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">frm00Blue = tk.Frame(win, bg=<span class="string">&quot;blue&quot;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm00Blue.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,rowspan=<span class="number">2</span>,sticky=<span class="string">&quot;NS&quot;</span>)</span><br><span class="line">tk.Label(frm00Blue,text=<span class="string">&quot;筛选条件：&quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;男性&quot;</span>).grid(row=<span class="number">1</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;女性&quot;</span>).grid(row=<span class="number">2</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Checkbutton(frm00Blue,text=<span class="string">&quot;博士&quot;</span>).grid(row=<span class="number">3</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line">tk.Label(frm00Blue,text=<span class="string">&quot;符合条件的名单：&quot;</span>).grid(row=<span class="number">4</span>,padx=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">nameList = tk.Listbox(frm00Blue)</span><br><span class="line">nameList.grid(row=<span class="number">5</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;李丽&#x27;</span>,<span class="string">&#x27;刘娟&#x27;</span>]:</span><br><span class="line">nameList.insert(tk.END,x) <span class="comment">#将x插入到列表框尾部。</span></span><br><span class="line"></span><br><span class="line">frm21Green = tk.Frame(win,bg=<span class="string">&#x27;green&#x27;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm21Green.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>,sticky=<span class="string">&quot;WE&quot;</span>)</span><br><span class="line">tk.Label(frm21Green, text=<span class="string">&quot;提示：目前一切正常&quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">frm11Yellow = tk.Frame(win, bg=<span class="string">&#x27;yellow&#x27;</span>,highlightthickness=<span class="number">2</span>)</span><br><span class="line">frm11Yellow.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,sticky=<span class="string">&quot;NSWE&quot;</span>) <span class="comment">#要贴住单元格四条边</span></span><br><span class="line">frm11Yellow.rowconfigure(<span class="number">1</span>,weight=<span class="number">1</span>) <span class="comment">#使得frm11Yellow中第1行高度会自动伸缩</span></span><br><span class="line">frm11Yellow.columnconfigure(<span class="number">0</span>,weight=<span class="number">1</span>)</span><br><span class="line">tk.Label(frm11Yellow,text=<span class="string">&quot;简历： &quot;</span>).grid(row=<span class="number">0</span>,padx=<span class="number">6</span>,pady=<span class="number">6</span>,sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">tk.Text(frm11Yellow).grid(row=<span class="number">1</span>,padx=<span class="number">15</span>,pady=<span class="number">15</span>,sticky=<span class="string">&quot;NSWE&quot;</span>)</span><br><span class="line"><span class="comment"># sticky=&quot;NSWE&quot;使得该多行编辑框会自动保持填满整个单元格</span></span><br><span class="line"></span><br><span class="line">win.rowconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.columnconfigure(<span class="number">1</span>, weight=<span class="number">1</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><h1 id="控件属性和事件响应"><a href="#控件属性和事件响应" class="headerlink" title="控件属性和事件响应"></a>控件属性和事件响应</h1><h2 id="控件属性和事件响应概述"><a href="#控件属性和事件响应概述" class="headerlink" title="控件属性和事件响应概述"></a>控件属性和事件响应概述</h2><ul><li>有的控件有函数可以用来设置和获取其属性，或以字典下标的形式获取和设置其属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lbHint = tk.Label(win, text=<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;登录成功!&quot;</span> <span class="comment">#修改lbHint的文字</span></span><br><span class="line"></span><br><span class="line">txt = tk.Text(win)</span><br><span class="line">txt.get(<span class="number">0.0</span>, tk.END)) <span class="comment">#取全部文字</span></span><br></pre></td></tr></table></figure><ul><li>有的控件必须和一个变量相关联，取变量值或设置变量值，就是取或设置该控件的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = tk.StringVar()</span><br><span class="line">s.<span class="built_in">set</span>(<span class="string">&quot;sin(x)&quot;</span>)</span><br><span class="line"></span><br><span class="line">tk.Entry(win, textvariable=s)</span><br><span class="line"><span class="built_in">print</span>(s.get())</span><br></pre></td></tr></table></figure><ul><li>创建有些控件时，可以用command参数指定控件的事件响应函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tk.Button(win,text=<span class="string">&quot;显示函数图&quot;</span>,command=myfunc) <span class="comment">#myfunc是函数名</span></span><br><span class="line">tk.Checkbox(win,text=<span class="string">&quot;显示函数图&quot;</span>,command=<span class="keyword">lambda</span>:<span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>可以用控件的bind函数指定事件响应函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lb = tk.Label(win,text=<span class="string">&quot;something&quot;</span>)</span><br><span class="line">lb.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>,mouse_down) <span class="comment">#鼠标左键按下事件</span></span><br></pre></td></tr></table></figure><h2 id="基本的控件属性和事件响应示例"><a href="#基本的控件属性和事件响应示例" class="headerlink" title="基本的控件属性和事件响应示例"></a>基本的控件属性和事件响应示例</h2><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%941.png" class="" title="事件响应1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btLogin_click</span>(): <span class="comment">#登录按钮的事件响应函数，点击该按钮时被调用</span></span><br><span class="line">    <span class="keyword">if</span> username.get()==<span class="string">&quot;pku&quot;</span> <span class="keyword">and</span> password.get()==<span class="string">&quot;123&quot;</span>: <span class="comment">#正确的用户名和密码</span></span><br><span class="line">    lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;登录成功!&quot;</span> <span class="comment">#修改lbHint的文字</span></span><br><span class="line">    lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span> <span class="comment">#文字变成黑色， &quot;fg&quot;表示前景色,&quot;bg&quot;表示背景色</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    username.<span class="built_in">set</span>(<span class="string">&quot;&quot;</span>) <span class="comment">#将用户名输入框清空</span></span><br><span class="line">    password.<span class="built_in">set</span>(<span class="string">&quot;&quot;</span>) <span class="comment">#将密码输入框清空</span></span><br><span class="line">    lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span> <span class="comment">#文字变成红色</span></span><br><span class="line">    lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;用户名密码错误，请重新输入!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cbPassword_click</span>(): <span class="comment">#&quot;显示密码&quot;单选框的事件响应函数，点击该单选框时被调用</span></span><br><span class="line">    <span class="keyword">if</span> showPassword.get():<span class="comment">#showPassword是和cbPassword绑定的tkinter布尔变量</span></span><br><span class="line">    etPassword[<span class="string">&quot;show&quot;</span>] = <span class="string">&quot;&quot;</span> <span class="comment">#使得密码输入框能正常显示密码。 Entry有show属性</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    etPassword[<span class="string">&quot;show&quot;</span>] = <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line"></span><br><span class="line">username,password = tk.StringVar(),tk.StringVar()</span><br><span class="line"><span class="comment">#两个字符串类型变量，分别用于关联用户名输入框和密码输入框</span></span><br><span class="line">showPassword = tk.BooleanVar() <span class="comment">#用于关联“显示密码”单选框</span></span><br><span class="line">showPassword.<span class="built_in">set</span>(<span class="literal">True</span>) <span class="comment">#使得cbPassowrd开始就是选中状态</span></span><br><span class="line"></span><br><span class="line">lbHint = tk.Label(win,text=<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">lbHint.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line">lbUsername = tk.Label(win,text=<span class="string">&quot;用户名： &quot;</span>)</span><br><span class="line">lbUsername.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">lbPassword = tk.Label(win,text=<span class="string">&quot;密码： &quot;</span>)</span><br><span class="line">lbPassword.grid(row=<span class="number">2</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">etUsername = tk.Entry(win,textvariable=username)</span><br><span class="line"><span class="comment">#输入框etUsername和变量username关联</span></span><br><span class="line">etUsername.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">etPassword = tk.Entry(win,textvariable=password,show=<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">#Entry的属性show=&quot;*&quot;表示该输入框不论内容是啥，只显示&#x27;*&#x27;字符，为&quot;&quot;则正常显示</span></span><br><span class="line">etPassword.grid(row=<span class="number">2</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">cbPassword = tk.Checkbutton(win,text=<span class="string">&quot;显示密码&quot;</span>,variable=showPassword,command=cbPassword_click)</span><br><span class="line"><span class="comment">#cbPassword关联变量showPassword，其事件响应函数是cbPassword_click，即点击它时</span></span><br><span class="line"><span class="comment">#会调用 cbPassword_click()</span></span><br><span class="line">cbPassword.grid(row=<span class="number">3</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">btLogin = tk.Button(win,text=<span class="string">&quot;登录&quot;</span>,command=btLogin_click)</span><br><span class="line"><span class="comment">#点击btLogin按钮会执行btLogin_click()</span></span><br><span class="line">btLogin.grid(row=<span class="number">4</span>,column=<span class="number">0</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">btQuit = tk.Button(win,text=<span class="string">&quot;退出&quot;</span>,command=win.quit)</span><br><span class="line"><span class="comment">#点击btQuit会执行win.quit(),win.quit()导致窗口关闭,于是整个程序结束</span></span><br><span class="line">btQuit.grid(row=<span class="number">4</span>,column=<span class="number">1</span>,pady=<span class="number">5</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%942.png" class="" title="事件响应2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%943.png" class="" title="事件响应3"><h1 id="Python火锅店实例"><a href="#Python火锅店实例" class="headerlink" title="Python火锅店实例"></a>Python火锅店实例</h1><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B1.png" class="" title="Python火锅店实例1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk  <span class="comment"># ttk中有更多控件</span></span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span>  <span class="comment"># 表示窗口</span></span><br><span class="line">gDishes = ((<span class="string">&quot;清汤(20元)&quot;</span>, <span class="string">&quot;滋补(40元)&quot;</span>, <span class="string">&quot;鸳鸯(60元)&quot;</span>),  <span class="comment"># 锅底</span></span><br><span class="line">           (<span class="string">&quot;香菜(10元)&quot;</span>, <span class="string">&quot;麻酱(20元)&quot;</span>, <span class="string">&quot;韭花(20元)&quot;</span>),  <span class="comment"># 佐料</span></span><br><span class="line">           (<span class="string">&quot;羊肉(30元)&quot;</span>, <span class="string">&quot;肥牛(40元)&quot;</span>, <span class="string">&quot;白菜(10元)&quot;</span>, <span class="string">&quot;茼蒿(20元)&quot;</span>))  <span class="comment"># 菜品</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addToListbox</span>(<span class="params">listbox, lst</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        listbox.insert(tk.END, x)  <span class="comment"># 将x添加到列表框尾部</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doDiscount</span>():</span><br><span class="line">    gWin.discount = [<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">0.8</span>][gWin.custom.get()]</span><br><span class="line">    gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">    gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categoryChanged</span>(<span class="params">event</span>):  <span class="comment"># gWin.cbxCategory选项变化时被调用</span></span><br><span class="line">    gWin.lsbDishes.delete(<span class="number">0</span>, tk.END)  <span class="comment"># 删除全部内容,delete(x,y)删除第x项到第y项</span></span><br><span class="line">    idx = gWin.cbxCategory.current()  <span class="comment"># gWin.cbxCategory当前选中的是第idx项</span></span><br><span class="line">    addToListbox(gWin.lsbDishes, gDishes[idx])  <span class="comment"># 装入相应菜单</span></span><br><span class="line">    gWin.lsbDishes.select_set(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btAdd_click</span>():</span><br><span class="line">    <span class="comment"># btAdd[&quot;state&quot;] = tk.DISABLED  tk.NORMAL</span></span><br><span class="line">    sel = gWin.lsbDishes.curselection()  <span class="comment"># sel形如 (1,2,3)</span></span><br><span class="line">    <span class="keyword">if</span> sel == ():</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;您还没有选中要添加的菜&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dish = gWin.lsbDishes.get(sel)</span><br><span class="line">        price, num = <span class="built_in">int</span>(dish[<span class="number">3</span>:<span class="number">5</span>]), gWin.dishNum.get()</span><br><span class="line">        gWin.lsbTable.insert(tk.END, <span class="string">&quot;[&quot;</span> + gWin.category.get() + <span class="string">&quot;]&quot;</span> + dish + <span class="string">&quot; X&quot;</span> + num)</span><br><span class="line">        gWin.totalCost += price * <span class="built_in">int</span>(num)</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btDelete_click</span>():</span><br><span class="line">    sel = gWin.lsbTable.curselection()</span><br><span class="line">    <span class="keyword">if</span> sel == ():</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;您还没有选中要删除的菜&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">            dish = gWin.lsbTable.get(i)</span><br><span class="line">            price = <span class="built_in">int</span>(dish[<span class="number">7</span>:<span class="number">9</span>])</span><br><span class="line">            price *= <span class="built_in">int</span>(dish[dish.index(<span class="string">&quot;X&quot;</span>) + <span class="number">1</span>:])</span><br><span class="line">            gWin.totalCost -= price</span><br><span class="line">        gWin.lbHint[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;饭菜总价：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(gWin.totalCost * gWin.discount)) + <span class="string">&quot;元&quot;</span></span><br><span class="line">        gWin.lbHint[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;black&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sel[::-<span class="number">1</span>]: <span class="comment"># 从后往前删除</span></span><br><span class="line">            gWin.lsbTable.delete(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin = tk.Tk()</span><br><span class="line">    gWin.title(<span class="string">&quot;Python火锅店&quot;</span>)</span><br><span class="line">    gWin.geometry(<span class="string">&quot;520x300&quot;</span>)</span><br><span class="line">    gWin.totalCost, gWin.discount = <span class="number">0</span>, <span class="number">1</span>  <span class="comment"># 总价和折扣</span></span><br><span class="line">    gWin.resizable(<span class="literal">False</span>, <span class="literal">False</span>)  <span class="comment"># gWin不可改变大小</span></span><br><span class="line"></span><br><span class="line">    lb = tk.Label(gWin, text=<span class="string">&quot;欢迎光临Python火锅店&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    lb.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">4</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.category = tk.StringVar()  <span class="comment"># 对应组合框gWin.cbxCategory收起状态显示的文字</span></span><br><span class="line">    gWin.cbxCategory = ttk.Combobox(gWin, textvariable=gWin.category)</span><br><span class="line">    gWin.cbxCategory[<span class="string">&quot;values&quot;</span>] = (<span class="string">&quot;锅底&quot;</span>, <span class="string">&quot;佐料&quot;</span>, <span class="string">&quot;菜品&quot;</span>)  <span class="comment"># 下拉时显示的表象</span></span><br><span class="line">    gWin.cbxCategory[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;readonly&quot;</span>  <span class="comment"># 将gWin.cbxCategory设置为不可输入，只能选择</span></span><br><span class="line">    gWin.cbxCategory.current(<span class="number">0</span>)  <span class="comment"># 选中第0项</span></span><br><span class="line">    gWin.cbxCategory.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.lsbDishes = tk.Listbox(gWin, selectmode=tk.SINGLE, exportselection=<span class="literal">False</span>) <span class="comment"># exportselection使得列表框失去输入焦点也能保持选中项目</span></span><br><span class="line">    gWin.lsbDishes.bind(<span class="string">&quot;&lt;Double-Button-1&gt;&quot;</span>, <span class="keyword">lambda</span> e:btAdd_click())</span><br><span class="line">    gWin.lsbDishes.bind(<span class="string">&quot;&lt;&lt;ListboxSelect&gt;&gt;&quot;</span>, <span class="keyword">lambda</span> e:gWin.dishNum.<span class="built_in">set</span>(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"></span><br><span class="line">    addToListbox(gWin.lsbDishes, gDishes[<span class="number">0</span>])  <span class="comment"># 装入锅底菜单</span></span><br><span class="line">    gWin.lsbDishes.select_set(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># select_set(x,y)可以选中第x项到第y项(包括y)</span></span><br><span class="line">    gWin.lsbDishes.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EWNS&quot;</span>)</span><br><span class="line">    gWin.cbxCategory.bind(<span class="string">&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;</span>, categoryChanged)</span><br><span class="line">    <span class="comment"># 当组合框下拉后有表现被选中时，会发生ComboboxSelected事件。</span></span><br><span class="line">    <span class="comment"># 此处指定该事件发生时，会调用gWin.categoryChanged函数</span></span><br><span class="line">    <span class="comment"># 指定&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;事件的响应函数是gWin.categoryChanged</span></span><br><span class="line"></span><br><span class="line">    gWin.lsbTable = tk.Listbox(gWin, selectmode=tk.EXTENDED, exportselection=<span class="literal">False</span>)</span><br><span class="line">    gWin.lsbTable.grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=<span class="string">&quot;EWNS&quot;</span>)</span><br><span class="line">    tk.Label(gWin, text=<span class="string">&quot;我的餐桌&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">2</span>)</span><br><span class="line">    gWin.lbHint = tk.Label(gWin, text=<span class="string">&quot;饭菜总价：0元&quot;</span>)</span><br><span class="line">    gWin.lbHint.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scrollbar = tk.Scrollbar(gWin, width=<span class="number">20</span>, orient=<span class="string">&quot;vertical&quot;</span>, command=gWin.lsbTable.yview)</span><br><span class="line">    gWin.lsbTable.configure(yscrollcommand=scrollbar.<span class="built_in">set</span>)  <span class="comment"># 绑定listbox和scrollbar</span></span><br><span class="line">    scrollbar.grid(row=<span class="number">2</span>, column=<span class="number">3</span>, sticky=<span class="string">&quot;NS&quot;</span>)</span><br><span class="line"></span><br><span class="line">    frm = tk.Frame(gWin)</span><br><span class="line">    frm.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line">    tk.Label(frm, text=<span class="string">&quot;数量：&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">    gWin.dishNum = tk.StringVar(value=<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    gWin.spNum = tk.Spinbox(frm, width=<span class="number">5</span>, from_=<span class="number">1</span>, to=<span class="number">1000</span>, textvariable=gWin.dishNum)</span><br><span class="line">    gWin.spNum.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    btAdd = tk.Button(frm, text=<span class="string">&quot;添加&quot;</span>, command=btAdd_click)</span><br><span class="line">    btAdd.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">    btDelete = tk.Button(frm, text=<span class="string">&quot;删除&quot;</span>, command=btDelete_click)</span><br><span class="line">    btDelete.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line"></span><br><span class="line">    lbfDiscount = tk.LabelFrame(frm, text=<span class="string">&quot;价格&quot;</span>)</span><br><span class="line">    lbfDiscount.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">    gWin.custom = tk.IntVar()  <span class="comment"># 如果写 gWin.custom = tk.IntVar(value=0)就不用下一行了</span></span><br><span class="line">    gWin.custom.<span class="built_in">set</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 三个单选框绑定了一个，所以同时只可以选择一个</span></span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;普通价&quot;</span>, value=<span class="number">0</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;会员价(九折)&quot;</span>, value=<span class="number">1</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line">    rb = tk.Radiobutton(lbfDiscount, text=<span class="string">&quot;VIP价(八折)&quot;</span>, value=<span class="number">2</span>, variable=gWin.custom, command=doDiscount)</span><br><span class="line">    rb.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.columnconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.rowconfigure(<span class="number">2</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.mainloop()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B2.png" class="" title="Python火锅店实例2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Python%E7%81%AB%E9%94%85%E5%BA%97%E5%AE%9E%E4%BE%8B3.png" class="" title="Python火锅店实例3"><h1 id="菜单和编辑框"><a href="#菜单和编辑框" class="headerlink" title="菜单和编辑框"></a>菜单和编辑框</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muCut_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&quot;&lt;&lt;Cut&gt;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muCopy_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&quot;&lt;&lt;Copy&gt;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muPaste_click</span>():</span><br><span class="line">    gWin.txtFile.event_generate(<span class="string">&#x27;&lt;&lt;Paste&gt;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveTextFile</span>(<span class="params">fileName</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(fileName, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    f.write(gWin.txtFile.get(<span class="number">0.0</span>, tk.END))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muSaveAs_click</span>():</span><br><span class="line">    fileName = filedialog.asksaveasfilename(title=<span class="string">&#x27;Save File&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp&#x27;</span>, initialfile=<span class="string">&#x27;untitled.txt&#x27;</span>, filetypes=[(<span class="string">&#x27;Text File&#x27;</span>, <span class="string">&#x27;*.txt&#x27;</span>)], defaultextension=<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        saveTextFile(fileName)</span><br><span class="line">        gWin.title(fileName)</span><br><span class="line">        gWin.curFileName = fileName</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muSave_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.curFileName.lower() == <span class="string">&quot;untitled.txt&quot;</span>:</span><br><span class="line">        muSaveAs_click()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        saveTextFile(gWin.curFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muOpen_click</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    fileName = filedialog.askopenfilename(title=<span class="string">&#x27;Open File&#x27;</span>, filetypes=[(<span class="string">&#x27;Text Files&#x27;</span>, <span class="string">&#x27;*.txt&#x27;</span>), (<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        gWin.curFileName = fileName</span><br><span class="line">        gWin.title(fileName)</span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        text = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        gWin.txtFile.delete(<span class="number">0.0</span>, tk.END)</span><br><span class="line">        gWin.txtFile.insert(<span class="string">&quot;insert&quot;</span>, text) <span class="comment">#gWin.txtFile.insert(tk.END, text)加在最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muBigFont_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.isBigFont.get() == <span class="number">1</span>:</span><br><span class="line">        gWin.txtFile.configure(font=(<span class="string">&quot;SimHei&quot;</span>, <span class="number">18</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gWin.txtFile.configure(font=(<span class="string">&quot;&quot;</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muNew_click</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin.txtFile.delete(<span class="number">0.0</span>, tk.END)</span><br><span class="line">    gWin.title(<span class="string">&quot;untitled.txt&quot;</span>)</span><br><span class="line">    gWin.curFileName = <span class="string">&quot;untitled.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">muPrintSelection_click</span>():</span><br><span class="line">    <span class="keyword">if</span> gWin.txtFile.tag_ranges(tk.SEL):</span><br><span class="line">        <span class="built_in">print</span>(gWin.txtFile.selection_get())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> gWin</span><br><span class="line">    gWin = tk.Tk()</span><br><span class="line">    gWin.title(<span class="string">&quot;untitled.txt&quot;</span>)</span><br><span class="line">    gWin.menubar = tk.Menu(gWin)</span><br><span class="line"></span><br><span class="line">    gWin.fileMenu = tk.Menu(gWin.menubar, tearoff=<span class="number">0</span>)  <span class="comment"># 去掉顶端横线</span></span><br><span class="line">    gWin.menubar.add_cascade(label=<span class="string">&#x27;File&#x27;</span>, menu=gWin.fileMenu)  <span class="comment"># 添加一个子菜单 File</span></span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;New&#x27;</span>, command=muNew_click)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Open&#x27;</span>, command=muOpen_click)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Save&#x27;</span>, command=muSave_click, accelerator=<span class="string">&quot;Ctrl+S&quot;</span>)</span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Save As&#x27;</span>, command=muSaveAs_click)</span><br><span class="line">    gWin.fileMenu.add_separator()  <span class="comment"># 加分割线</span></span><br><span class="line">    gWin.fileMenu.add_command(label=<span class="string">&#x27;Exit&#x27;</span>, command=gWin.quit)</span><br><span class="line"></span><br><span class="line">    editMenu = tk.Menu(gWin.menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">    gWin.menubar.add_cascade(label=<span class="string">&#x27;Edit&#x27;</span>, menu=editMenu)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Cut&#x27;</span>, command=muCut_click)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Copy&#x27;</span>, command=muCopy_click)</span><br><span class="line">    editMenu.add_command(label=<span class="string">&#x27;Paste&#x27;</span>, command=muPaste_click)</span><br><span class="line"></span><br><span class="line">    settingsMenu = tk.Menu(editMenu, tearoff=<span class="number">0</span>)</span><br><span class="line">    editMenu.add_cascade(label=<span class="string">&#x27;Settings&#x27;</span>, menu=settingsMenu)</span><br><span class="line">    gWin.isBigFont = tk.IntVar()</span><br><span class="line">    settingsMenu.add_checkbutton(label=<span class="string">&quot;Big Font&quot;</span>, command=muBigFont_click, variable=gWin.isBigFont)</span><br><span class="line">    settingsMenu.add_command(label=<span class="string">&quot;Print Selection&quot;</span>, command=muPrintSelection_click)</span><br><span class="line"></span><br><span class="line">    gWin.config(menu=gWin.menubar)</span><br><span class="line">    gWin.txtFile = tk.Text(gWin)</span><br><span class="line">    gWin.txtFile.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;NWSE&quot;</span>)</span><br><span class="line">    gWin.curFileName = <span class="string">&quot;untitled.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    gWin.rowconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    gWin.bind_all(<span class="string">&quot;&lt;Control-s&gt;&quot;</span>, <span class="keyword">lambda</span> event:muSave_click())</span><br><span class="line">    gWin.mainloop()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%861.png" class="" title="菜单和编辑框1"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%862.png" class="" title="菜单和编辑框2"><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%8F%9C%E5%8D%95%E5%92%8C%E7%BC%96%E8%BE%91%E6%A1%863.png" class="" title="菜单和编辑框3"><h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><ul><li>作用：弹出小窗口和用户进行交互，或者显示信息</li></ul><h2 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h2><h2 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h2><ul><li>用于复杂一点的交互</li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%AF%9D%E6%A1%86.png" class="" title="自定义对话框"><ul><li>自定义对话框要点<br>1) 自定义对话框是一个 Toplevel窗口，控件布局方式、事件响应方式和普通窗口一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dialog = tk.Toplevel(gWin) <span class="comment">#gWin是主窗口，创建对话框窗口</span></span><br><span class="line">dialog.grab_set() <span class="comment">#显示对话框，并独占输入焦点</span></span><br></pre></td></tr></table></figure><p>2) 关闭自定义对话框：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.destroy()</span><br></pre></td></tr></table></figure><h2 id="对话框整合示例"><a href="#对话框整合示例" class="headerlink" title="对话框整合示例"></a>对话框整合示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> simpledialog</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">innerCmd</span>(): <span class="comment">#innerCmd是个闭包</span></span><br><span class="line"><span class="comment"># if n &lt;= 4:</span></span><br><span class="line"><span class="comment"># func = eval(&quot;messagebox.&quot; + gWin.titles[n])</span></span><br><span class="line"><span class="comment"># value = func(&quot;Dialog&quot;, gWin.titles[n])</span></span><br><span class="line"><span class="comment"># elif n &lt;= 7:</span></span><br><span class="line"><span class="comment"># func = eval(&quot;simpledialog.&quot; + gWin.titles[n])</span></span><br><span class="line"><span class="comment"># value = func(&quot;Dialog&quot;, gWin.titles[n])</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>: value = messagebox.askokcancel(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">1</span>: value = messagebox.askyesno(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>: value = messagebox.showerror(<span class="string">&quot;Dialog&quot;</span>,<span class="string">&quot;抱歉，您的账户余额不足!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">3</span>: value = messagebox.showinfo(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">4</span>: value = messagebox.showwarning(<span class="string">&quot;Dialog&quot;</span>,gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">5</span>: value = simpledialog.askfloat(<span class="string">&quot;Dialog&quot;</span>,<span class="string">&quot;请输入支付金额:&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">6</span>: value = simpledialog.askinteger(<span class="string">&quot;Dialog&quot;</span>,gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">7</span>: value = simpledialog.askstring(<span class="string">&quot;Dialog&quot;</span>, gWin.titles[n])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">8</span>: value = filedialog.askopenfilename(title=<span class="string">&#x27;打开文件&#x27;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>), (<span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;*.txt&#x27;</span>),(<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">9</span>: value = filedialog.asksaveasfilename(title=<span class="string">&#x27;保存文件&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp&#x27;</span>, initialfile=<span class="string">&#x27;hello.py&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">10</span>: value = filedialog.askopenfilenames(title=<span class="string">&#x27;打开文件&#x27;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>), (<span class="string">&#x27;All Files&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)])</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">11</span>: value = filedialog.askdirectory(title=<span class="string">&#x27;打开文件&#x27;</span>, initialdir=<span class="string">&#x27;c:/tmp2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(n,value,<span class="built_in">type</span>(value))</span><br><span class="line"><span class="keyword">return</span> innerCmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">global</span> gWin</span><br><span class="line">gWin = tk.Tk()</span><br><span class="line">gWin.titles = [<span class="string">&quot;askokcancel&quot;</span>, <span class="string">&quot;askyesno&quot;</span>, <span class="string">&quot;showerror&quot;</span>,</span><br><span class="line">  <span class="string">&quot;showinfo&quot;</span>, <span class="string">&quot;showwarning&quot;</span>, <span class="string">&quot;askfloat&quot;</span>, <span class="string">&quot;askinteger&quot;</span>,</span><br><span class="line">  <span class="string">&quot;askstring&quot;</span>, <span class="string">&quot;askopenfilename&quot;</span>, <span class="string">&quot;asksaveasfilename&quot;</span>,</span><br><span class="line">  <span class="string">&quot;askopenfilenames&quot;</span>, <span class="string">&quot;askdirectory&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">button = tk.Button(gWin, text = gWin.titles[i], command=cmd(i))</span><br><span class="line">button.grid(row=i//<span class="number">4</span>, column=i%<span class="number">4</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">gWin.columnconfigure(<span class="number">0</span>,weight=<span class="number">1</span>)</span><br><span class="line">gWin.mainloop()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E5%90%88.png" class="" title="对话框整合"><h1 id="显示图像和matplotlib绘图"><a href="#显示图像和matplotlib绘图" class="headerlink" title="显示图像和matplotlib绘图"></a>显示图像和matplotlib绘图</h1><ul><li>tkinter界面上matplotlib绘图要点</li></ul><p>1) 创建一个<code>matplotlib.pyplot.Figure</code>对象fig<br>2) 在fig对象上用<code>add_subplot()</code>创建一个子图ax<br>3) <code>canvas = FigureCanvasTkAgg(fig, master=win)</code>得到一个将fig绑定在win上面的FigureCanvasTkAgg对象canvas。win可以是窗口，也可以是Frame,LabelFrame<br>4) <code>canvas.get_tk_widget().grid(....)</code>将canvas布局到win的合适位置<br>5) 子图ax上画完图后，还要<code>cavans.draw()</code>才能刷新显示</p><ul><li>用Label显示图像要点</li></ul><p>1) <code>aLabel.config(image = tkinter.PhotoImage(file=&#39;xxx.gif&#39;))</code> 可以显示gif图像<br>2) 要显示jpg,png需要用到PIL库里的Image和ImageTk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageTk</span><br><span class="line">img = ImageTk.PhotoImage(Image.<span class="built_in">open</span>(<span class="string">&quot;XXX.jpg&quot;</span>))</span><br><span class="line">aLabel.config(image=img)</span><br></pre></td></tr></table></figure><p>注意，可能是库有bug，此处img必须不是局部变量，否则可能无法显示图像。</p><ul><li>两个组件重叠，只显示一个的要点</li></ul><p>两个组件可以放在同一个单元格里面。</p><p><code>ctrl.grid_forget()</code> 可以让ctrl组件消失<br><code>ctrl.grid(....)</code>又将其恢复</p><ul><li>鼠标移动显示位置</li></ul><p>为Label添加鼠标左键按下、松开和鼠标移动三个事件响应函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lbImg.bind(<span class="string">&quot;&lt;Motion&gt;&quot;</span>, mouse_move)</span><br><span class="line">lbImg.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>, mouse_down)</span><br><span class="line">lbImg.bind(<span class="string">&quot;&lt;ButtonRelease-1&gt;&quot;</span>, mouse_up)</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><img src="/2023/02/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0tkinter%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F%E5%92%8Cmatplotlib%E7%BB%98%E5%9B%BE.png" class="" title="显示图像和matplotlib绘图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageTk</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_tkagg <span class="keyword">import</span> FigureCanvasTkAgg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line">gWin = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_down</span>(<span class="params">event</span>):</span><br><span class="line">gWin.mouseDown = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_up</span>(<span class="params">event</span>):</span><br><span class="line">gWin.mouseDown = <span class="literal">False</span></span><br><span class="line">gWin.lbMsg[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;按住鼠标键移动，会显示鼠标位置&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouse_move</span>(<span class="params">event</span>):</span><br><span class="line"><span class="keyword">if</span> gWin.mouseDown:</span><br><span class="line">gWin.lbMsg[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;鼠标位置：(%d,%d)&quot;</span> % (event.x,event.y)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showImage</span>():</span><br><span class="line">fileName = filedialog.askopenfilename(title=<span class="string">&#x27;打开文件&#x27;</span>, initialdir=<span class="string">&quot;c:/tmp2/&quot;</span>, filetypes=[(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;*.jpg *.png&#x27;</span>)])</span><br><span class="line"><span class="keyword">if</span> fileName != <span class="string">&quot;&quot;</span>:</span><br><span class="line">gWin.geometry(<span class="string">&quot;&quot;</span>)</span><br><span class="line">gWin.frmPlot.grid_forget()</span><br><span class="line">gWin.frmImg.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">gWin.img = ImageTk.PhotoImage(Image.<span class="built_in">open</span>(fileName))  <span class="comment"># 用PIL模块的PhotoImage打开</span></span><br><span class="line"><span class="comment"># and keep a reference。如果 仅img = ImageTk.....然后 lbImage.config(image=img),则显示不出来</span></span><br><span class="line">gWin.lbImg.config(image=gWin.img)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showPlot</span>():</span><br><span class="line">gWin.geometry(<span class="string">&quot;&quot;</span>)</span><br><span class="line">gWin.frmImg.grid_forget()</span><br><span class="line">gWin.frmPlot.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">gWin.ax.clear()  <span class="comment"># gWin.fig.clear()</span></span><br><span class="line">xs = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">y = [<span class="built_in">eval</span>(gWin.fstr.get()) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">gWin.ax.plot(xs,y,color=<span class="string">&#x27;red&#x27;</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">gWin.canvas.draw()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">global</span> gWin</span><br><span class="line">gWin = tk.Tk()</span><br><span class="line">frm = tk.Frame(gWin)</span><br><span class="line">frm.grid(row=<span class="number">0</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">tk.Label(frm,text=<span class="string">&quot;y =&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">gWin.fstr = tk.StringVar()</span><br><span class="line">gWin.fstr.<span class="built_in">set</span>(<span class="string">&quot;sin(x)&quot;</span>)</span><br><span class="line">tk.Entry(frm,textvariable = gWin.fstr).grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(frm,text=<span class="string">&quot;显示函数图&quot;</span>,command=showPlot).grid(row=<span class="number">0</span>,column=<span class="number">2</span>,padx=<span class="number">5</span>,pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(frm, text=<span class="string">&quot;显示图像文件&quot;</span>, command=showImage).grid(row=<span class="number">0</span>, column=<span class="number">3</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">gWin.frmImg = tk.Frame(gWin)</span><br><span class="line">gWin.lbImg = tk.Label(gWin.frmImg)</span><br><span class="line">gWin.lbImg.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;NSWE&quot;</span>)</span><br><span class="line">gWin.lbMsg = tk.Label(gWin.frmImg, fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, text= <span class="string">&quot;按住鼠标键移动，会显示鼠标位置&quot;</span>)</span><br><span class="line">gWin.lbMsg.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;EW&quot;</span>)</span><br><span class="line">gWin.mouseDown = <span class="literal">False</span></span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;Motion&gt;&quot;</span>, mouse_move)</span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>,mouse_down)</span><br><span class="line">gWin.lbImg.bind(<span class="string">&quot;&lt;ButtonRelease-1&gt;&quot;</span>, mouse_up)</span><br><span class="line">gWin.frmPlot = tk.Frame(gWin)</span><br><span class="line">gWin.fig = plt.Figure(figsize=(<span class="number">5</span>, <span class="number">4</span>), dpi=<span class="number">100</span>)</span><br><span class="line">gWin.ax = gWin.fig.add_subplot()</span><br><span class="line">gWin.canvas = FigureCanvasTkAgg(gWin.fig, master=gWin.frmPlot)</span><br><span class="line">gWin.canvas.get_tk_widget().grid(row=<span class="number">0</span>, column=<span class="number">0</span>,sticky=<span class="string">&quot;ESNW&quot;</span>)</span><br><span class="line">gWin.frmPlot.grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=<span class="string">&quot;ESWN&quot;</span>)</span><br><span class="line">showPlot()</span><br><span class="line">gWin.rowconfigure(<span class="number">1</span>,weight = <span class="number">1</span>)</span><br><span class="line">gWin.columnconfigure(<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">gWin.mainloop()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十四章tkinter图形界面程序设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十三章面向对象程序设计</title>
    <link href="http://hibiscidai.com/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-03T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十三章面向对象程序设计"><p>实用Python程序设计MOOC-第十三章面向对象程序设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十三章面向对象程序设计"><a href="#实用Python程序设计MOOC-第十三章面向对象程序设计" class="headerlink" title="实用Python程序设计MOOC-第十三章面向对象程序设计"></a>实用Python程序设计MOOC-第十三章面向对象程序设计</h1><h1 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h1><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="为什么需要”类”"><a href="#为什么需要”类”" class="headerlink" title="为什么需要”类”"></a>为什么需要”类”</h2><ul><li>用列表或元组表示学生信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = [<span class="string">&quot;张三&quot;</span>, <span class="number">20001807</span>, <span class="number">3.4</span>, <span class="string">&quot;1988-01-24&quot;</span>]</span><br></pre></td></tr></table></figure><p>记不住GPA到底下标是多少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student[3] = XXXX 也不知道是对哪项数据赋值</span><br></pre></td></tr></table></figure><h2 id="类和对象的概念"><a href="#类和对象的概念" class="headerlink" title="类和对象的概念"></a>类和对象的概念</h2><ul><li><p>类是用来代表事物的。 对一种事物，可以设计一个类，概括出该种事物的属性，用成员变量表示之； 还要概括该种事物事物能进行的操作，用成员函数表示之。成员变量也称为类的“属性”，成员函数也称为类的“方法” 。</p></li><li><p>类的实例，称为“对象”。类代表一种事物的共同特点，对象就是一个具体的事物个体。</p></li><li><p>生成对象的方法： 类名(参数1，参数2……)</p></li></ul><h2 id="类的写法"><a href="#类的写法" class="headerlink" title="类的写法"></a>类的写法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>): <span class="comment"># 构造函数</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数1</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数2</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ........</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员函数n</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2.</span>.....</span>):</span><br><span class="line">    ........</span><br></pre></td></tr></table></figure><h2 id="矩形类示例"><a href="#矩形类示例" class="headerlink" title="矩形类示例"></a>矩形类示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">rectangle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,w,h</span>): <span class="comment">#构造函数，每个类必有</span></span><br><span class="line">    self.w,self.h = w,h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.w * self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (self.w + self.h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w,h = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()) <span class="comment">#假设输入2 3</span></span><br><span class="line">    rect = rectangle(w,h) <span class="comment">#生成一个rectangle对象</span></span><br><span class="line">    <span class="built_in">print</span>(rect.area(),rect.perimeter()) <span class="comment">#&gt;&gt;6 10</span></span><br><span class="line"></span><br><span class="line">    rect.w,rect.h = <span class="number">10</span>,<span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(rect.area(),rect.perimeter()) <span class="comment">#&gt;&gt;200 60</span></span><br><span class="line"></span><br><span class="line">    rect2 = rectangle(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(rect2.area(), rect2.perimeter()) <span class="comment">#&gt;&gt;6 10</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="类的作用"><a href="#类的作用" class="headerlink" title="类的作用"></a>类的作用</h2><p>将数据和操作数据的函数捆绑在一起，便于当作一个整体使用</p><h2 id="Python中的类"><a href="#Python中的类" class="headerlink" title="Python中的类"></a>Python中的类</h2><ul><li>类型名即是类名：</li></ul><p>float、str、list、dict …..</p><ul><li><p>小数、复数、字符串、元组、列表、集合、字典等组合数据类型的常量，都是对象，函数也是对象，但整数型常量不是对象</p></li><li><p>各种库都是由类组成：</p></li></ul><p>turtle、matplotlib、jieba、sqlite3</p><ul><li>程序员可以自定义类，如rectangle</li></ul><h1 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h1><ul><li><p>Python中所有的类，包括自定义的类，都有<code>__eq__</code>方法。</p></li><li><p><code>x==y</code>的值，就是<code>x.__eq__(y)</code>的值；如果<code>x.__eq__(y)</code>没定义，那么就是<code>y.__eq__(x)</code>的值。如果<code>x.__eq__(y)</code>和<code>y.__eq__(x)</code>都没定义，则<code>x==y</code>也没定义（x,y都是整数常量时不适用)</p></li><li><p><code>print(24.5.__eq__(24.5)) #&gt;&gt;True</code></p></li></ul><p><code>a!=b</code> 等价于 <code>a.__ne__(b)</code> ，或 <code>b.__ne__(a)</code>(若<code>a.__ne__(b)</code>没定义)<br>默认情况下, <code>a.__ne__(b)</code>等价于<code>not a.__eq__(b)</code></p><p><code>a&lt;b</code> 等价于 <code>a.__lt__(b)</code><br><code>a&gt;b</code> 等价于 <code>a.__gt__(b)</code><br><code>a&lt;=b</code> 等价于 <code>a.__le__(b)</code><br><code>a&gt;=b</code> 等价于 <code>a.__ge__(b)</code></p><h2 id="自定义对象的比较"><a href="#自定义对象的比较" class="headerlink" title="自定义对象的比较"></a>自定义对象的比较</h2><ul><li>默认情况下，一个自定义类的<code>__eq__</code>方法，功能是判断两个对象的id是否相同。</li><li>默认情况下，一个自定义类的两个对象a和b， <code>a == b</code> 和<code>a is b</code>的含义一样，都是“a和b是否指向相同的地方”。同理， <code>a != b</code> 和 <code>not a is b</code> 含义相同。</li><li>默认情况下，自定义类的对象不能比较大小，因其<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>方法都被设置成了None</li></ul><h2 id="对象比较大小程序示例"><a href="#对象比较大小程序示例" class="headerlink" title="对象比较大小程序示例"></a>对象比较大小程序示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y = <span class="number">0</span></span>):</span><br><span class="line">    self.x , self.y = x,y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">    <span class="keyword">return</span> self.x == other.x <span class="keyword">and</span> self.y == other.y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>): <span class="comment">#使得两个point对象可以用&lt;进行比较</span></span><br><span class="line">    <span class="keyword">if</span> self.x == other.x:</span><br><span class="line">    <span class="keyword">return</span> self.y &lt; other.y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> self.x &lt; other.x</span><br><span class="line"></span><br><span class="line">a,b = point(<span class="number">1</span>,<span class="number">2</span>),point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#&gt;&gt;True 等价于 a.__eq__(b)</span></span><br><span class="line"><span class="built_in">print</span>(a != b) <span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; point(<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#&gt;&gt;False 等价于 a.__lt__(point(0,1))</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; point(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">lst = [a,point(-<span class="number">2</span>,<span class="number">3</span>),point(<span class="number">7</span>,<span class="number">8</span>),point(<span class="number">5</span>,<span class="number">9</span>),point(<span class="number">5</span>,<span class="number">0</span>)]</span><br><span class="line">lst.sort()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> lst: <span class="comment">#&gt;&gt;-2 3, 1 2, 5 0, 5 9, 7 8,</span></span><br><span class="line"><span class="built_in">print</span>(p.x,p.y ,end = <span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="自定义类重写str方法可以将对象转字符串"><a href="#自定义类重写str方法可以将对象转字符串" class="headerlink" title="自定义类重写str方法可以将对象转字符串"></a>自定义类重写<strong>str</strong>方法可以将对象转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y</span>):</span><br><span class="line">    self.x ,self.y = x ,y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;(%d,%d)&quot;</span> % (self.x, self.y))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(point(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment">#&gt;&gt;(3,5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(point(<span class="number">2</span>,<span class="number">4</span>))) <span class="comment">#&gt;&gt;(2,4)</span></span><br></pre></td></tr></table></figure><h1 id="继承和派生"><a href="#继承和派生" class="headerlink" title="继承和派生"></a>继承和派生</h1><ul><li><p>要写小学生类、中学生类、大学生类….</p></li><li><p>所有学生都有共同点，每种学生又有各自特点，如何避免每个类都从头编写的重复劳动？</p></li><li><p>使用继承（派生）</p></li></ul><p>定义一个新的类B时，如果发现类B拥有某个已写好的类A的全部特点，此外还有类A没有的特点，那么就不必从头重写类B，而是可以把A作为一个“基类”（也称“父类”），把B写为基类A的一个“派生类”（也称“子类”）来写。这样，就可以说从A类“派生”出了B类，也可以说B类“继承”了A类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">基类名</span>):</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,gender,birthYear</span>):</span><br><span class="line">    self.<span class="built_in">id</span>,self.name,self.gender,self.birthYear = <span class="built_in">id</span>,name,gender,birthYear</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printInfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Name:&quot;</span>, self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ID:&quot;</span>, self.<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Birth Year:&quot;</span>, self.birthYear)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Gender:&quot;</span>, self.gender)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Age:&quot;</span>, self.countAge())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAge</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.now().year - self.birthYear</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">undergraduateStudent</span>(<span class="title class_ inherited__">student</span>): <span class="comment">#本科生类，继承了student类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,gender,birthYear,department</span>):</span><br><span class="line">        student.__init__(self,<span class="built_in">id</span>,name,gender,birthYear)</span><br><span class="line">        self.department = department</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">qualifiedForBaoyan</span>(<span class="params">self</span>): <span class="comment">#给予保研资格</span></span><br><span class="line">    <span class="built_in">print</span>(self.name + <span class="string">&quot;is qualified for baoyan&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printInfo</span>(<span class="params">self</span>): <span class="comment">#基类中有同名方法</span></span><br><span class="line">        student.printInfo(self) <span class="comment">#调用基类的PrintInfo</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Department:&quot;</span>, self.department)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s2 = undergraduateStudent(<span class="string">&quot;118829212&quot;</span>, <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="number">2000</span>, <span class="string">&quot;Computer Science&quot;</span>)</span><br><span class="line">    s2.printInfo()<span class="comment"># 子类的方法</span></span><br><span class="line">    s2.qualifiedForBaoyan()</span><br><span class="line">    <span class="keyword">if</span> s2.countAge() &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(s2.name, <span class="string">&quot;is older than 18&quot;</span>)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">Name: Harry Potter</span><br><span class="line">ID: 118829212</span><br><span class="line">Birth Year: 2000</span><br><span class="line">Gender: M</span><br><span class="line">Age: 20</span><br><span class="line">Department: Computer Science</span><br><span class="line">Harry Potter is qualified for baoyan</span><br><span class="line">Harry Potter is older than 18</span><br></pre></td></tr></table></figure><h2 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h2><ul><li>所有类都是object类的派生类，因而具有object类的各种属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(A)) <span class="comment">#输出A的方法,对象名称也可以</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;,&#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;,&#x27;__hash__&#x27;,&#x27;__init__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;,  &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;func&#x27;]</span><br></pre></td></tr></table></figure><ul><li>有的类<code>_lt__</code>，<code>__gt__</code>等方法被设置成None，于是对象不可比较大小</li></ul><h1 id="静态属性和静态方法"><a href="#静态属性和静态方法" class="headerlink" title="静态属性和静态方法"></a>静态属性和静态方法</h1><ul><li>静态属性被所有对象所共享，一共只有一份</li><li>静态方法不是作用在具体的某个对象上的，不能访问非静态属性</li><li>静态属性和静态方法这种机制存在的目的，就是为了少写全局变量和全局函数</li></ul><blockquote><p>静态方法不可以访问非静态属性。<br>静态方法和属性是用来替代全局变量和全局函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">employee</span>:</span><br><span class="line">    totalSalary = <span class="number">0</span> <span class="comment"># 静态属性，记录发给员工的工资总数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,income</span>):</span><br><span class="line">    self.name,self.income = name, income</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,salary</span>):</span><br><span class="line">    self.income += salary</span><br><span class="line">    employee.totalSalary += salary</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printTotalSalary</span>(): <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="built_in">print</span>(employee.totalSalary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = employee(<span class="string">&quot;Jack&quot;</span>,<span class="number">0</span>)</span><br><span class="line">e2 = employee(<span class="string">&quot;Tom&quot;</span>,<span class="number">0</span>)</span><br><span class="line">e1.pay(<span class="number">100</span>)</span><br><span class="line">e2.pay(<span class="number">200</span>)</span><br><span class="line">employee.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line">e1.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line">e2.printTotalSalary() <span class="comment">#&gt;&gt;300</span></span><br><span class="line"><span class="built_in">print</span>(employee.totalSalary) <span class="comment">#&gt;&gt;300</span></span><br></pre></td></tr></table></figure><h1 id="对象作为集合元素或字典的键"><a href="#对象作为集合元素或字典的键" class="headerlink" title="对象作为集合元素或字典的键"></a>对象作为集合元素或字典的键</h1><h2 id="什么是“可哈希”"><a href="#什么是“可哈希”" class="headerlink" title="什么是“可哈希”"></a>什么是“可哈希”</h2><ul><li><p>可哈希的东西，才可以作为字典的键和集合的元素。</p></li><li><p><code>hash(x)</code>有定义，即为 x 可哈希</p></li><li><p><code>hash(x) = x</code> (如果x是整型常量)<br><code>hash(x) = x.__hash___()</code> （如果x不是整型常量)</p></li><li><p>object类有<code>__hash__()</code>方法，返回值是个整数</p></li></ul><p>列表、集合、字典的<code>__hash__</code>成员函数都被设置成None，因此它们都不能成为集合的元素，或者字典的键，因为无法计算哈希值。</p><p>整数类型变量、小数、字符串、元组的哈希值，是根据它们的值算出来的，只要值相同，哈希值就相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">23.1</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),<span class="number">23.1</span>.__hash__())</span><br><span class="line"><span class="comment">#&gt;&gt;230584300921372695 230584300921372695</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),<span class="built_in">hash</span>(<span class="number">23</span>)) <span class="comment">#&gt;&gt;23 23</span></span><br><span class="line"></span><br><span class="line">x = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x.__hash__(),(<span class="number">1</span>,<span class="number">2</span>).__hash__(),<span class="built_in">hash</span>(x))</span><br><span class="line"><span class="comment">#&gt;&gt;3713081631934410656 3713081631934410656 3713081631934410656</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.__hash__(), <span class="string">&quot;ok&quot;</span>.__hash__())</span><br><span class="line"><span class="comment">#&gt;&gt;-423760875654480603 -423760875654480603</span></span><br></pre></td></tr></table></figure><h2 id="哈希值和字典、集合的关系"><a href="#哈希值和字典、集合的关系" class="headerlink" title="哈希值和字典、集合的关系"></a>哈希值和字典、集合的关系</h2><ul><li><p>字典和集合都是”哈希表”数据结构，根据元素的哈希值为元素找存放的”槽”，哈希值可以看作是槽编号。一个槽里面可以放多个哈希值相同的元素。</p></li><li><p>两个对象a，b若<code>hash(a) != hash(b)</code>，则a，b可以处于同一集合（也可以作为同一字典的不同元素的键)。</p></li><li><p>两个对象a，b 若<code>hash(a) == hash(b)</code>，但<code>a == b</code>不成立，则a，b可以处于同一集合（也可以作为同一字典的不同元素的键)，即不算重复，可以放在同一个槽里。</p></li><li><p>若 dt 是个字典，<code>dt[x]</code>计算过程如下：<br>1) 根据hash(x)去找x应该在的槽的编号；<br>2) 如果该槽没有元素，则认为dt中没有键为x的元素；<br>3) 如果该槽中有元素，则试图在槽中找一个元素y，使得<code>y的键 == x</code>。如果找到，则dt[x]即为y的值，如果找不到，则dt[x]没定义，即认为dt中不存在键为x的元素。</p></li><li><p>自定义类的对象，默认情况下哈希值是根据对象id进行计算。所以两个对象，只要<code>a is b</code>不成立， a和b的哈希值就不同，就可以同时存在于一个集合内，或作为同一字典的不同元素的键。</p></li><li><p>可以重写自定义类的<code>__hash__()</code>方法，使得对象的哈希值和对象的值，而不是id相关，这样值相同的对象，就不能处于同一个集合中，也不能作为同一字典不同元素的键。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line"></span><br><span class="line">a,b = A(<span class="number">5</span>), A(<span class="number">5</span>) <span class="comment">#两个A(5)不是同一个,因此a和b的id不同</span></span><br><span class="line">dt = &#123;a:<span class="number">20</span>, A(<span class="number">5</span>):<span class="number">30</span>, b:<span class="number">40</span>&#125; <span class="comment">#三个元素的键id不同,因此在不同槽里</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dt), dt[a], dt[b]) <span class="comment">#&gt;&gt;3 20 40</span></span><br><span class="line"><span class="built_in">print</span>(dt[A(<span class="number">5</span>)]) <span class="comment">#runtime error,传入的A(5)是一个新的对象</span></span><br></pre></td></tr></table></figure><h2 id="自定义类的对象是否可哈希"><a href="#自定义类的对象是否可哈希" class="headerlink" title="自定义类的对象是否可哈希"></a>自定义类的对象是否可哈希</h2><ul><li><p><code>a==b</code>等价于<code>a.__eq__(b)</code>。自定义类的默认<code>__eq__</code>函数是判断两个对象的id是否相同。自定义类的默认<code>__hash__</code>函数是根据对象id算哈希值的。</p></li><li><p>如果为自定义的类重写了<code>__eq__(self,other)</code>成员函数，则其<code>__hash__</code>成员函数会被自动设置为None。这种情况下，该类就变成不可哈希的</p></li><li><p>一个自定义类，只有在重写了<code>__eq__</code>方法却没有重写<code>__hash__</code>方法的情况下，才是不可哈希的。</p></li></ul><h3 id="自定义类重写-hash-但不重写-eq"><a href="#自定义类重写-hash-但不重写-eq" class="headerlink" title="自定义类重写__hash___但不重写__eq__"></a>自定义类重写<code>__hash___</code>但不重写<code>__eq__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(self.x)</span><br><span class="line">c = A(<span class="number">1</span>)</span><br><span class="line">dt = &#123;A(<span class="number">1</span>):<span class="number">2</span>, A(<span class="number">1</span>):<span class="number">3</span>, c:<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">#三个元素的键哈希值相同，但值不同，不算重复，可以在同一个槽里</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dt)) <span class="comment">#&gt;&gt;3</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dt.items():</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>].x,a[<span class="number">1</span>],end = <span class="string">&quot;,&quot;</span>) <span class="comment">#&gt;&gt;1 2,1 3,1 4,</span></span><br><span class="line"><span class="built_in">print</span>(dt[c]) <span class="comment">#&gt;&gt;4</span></span><br><span class="line"><span class="built_in">print</span>(dt[A(<span class="number">1</span>)]) <span class="comment">#runtime error</span></span><br><span class="line"><span class="comment">#找到了和A(1)哈希相同的槽，但不存在元素的键x，满足x==A(1)(特指最后一行的A(1))</span></span><br></pre></td></tr></table></figure><h3 id="自定义类同时重写-hash-和-eq"><a href="#自定义类同时重写-hash-和-eq" class="headerlink" title="自定义类同时重写__hash___和__eq__"></a>自定义类同时重写<code>__hash___</code>和<code>__eq__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other,A): <span class="comment">#判断other是不是类A的对象</span></span><br><span class="line">        <span class="keyword">return</span> self.x == other.x</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other,<span class="built_in">int</span>): <span class="comment">#如果other是整数</span></span><br><span class="line">        <span class="keyword">return</span> self.x == other</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.x</span><br><span class="line">a = A(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> == a) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">b = A(<span class="number">3</span>)</span><br><span class="line">d = &#123;A(<span class="number">5</span>):<span class="number">10</span>,A(<span class="number">3</span>):<span class="number">20</span>,a:<span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d),d[a],d[b],d[<span class="number">3</span>]) <span class="comment">#&gt;&gt;2 30 30 30</span></span><br><span class="line"><span class="comment"># d[a],d[b],d[3]中a b 3的哈希值相同，而且使用==号判断时候也相同。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十三章面向对象程序设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十二章网络爬虫设计</title>
    <link href="http://hibiscidai.com/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/"/>
    <id>http://hibiscidai.com/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-02T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E8%AE%BE%E8%AE%A1.png" class="" title="实用Python程序设计MOOC-第十二章网络爬虫设计"><p>实用Python程序设计MOOC-第十二章网络爬虫设计</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十二章网络爬虫设计"><a href="#实用Python程序设计MOOC-第十二章网络爬虫设计" class="headerlink" title="实用Python程序设计MOOC-第十二章网络爬虫设计"></a>实用Python程序设计MOOC-第十二章网络爬虫设计</h1><h1 id="爬虫基本原理"><a href="#爬虫基本原理" class="headerlink" title="爬虫基本原理"></a>爬虫基本原理</h1><h2 id="爬虫的用途和原理"><a href="#爬虫的用途和原理" class="headerlink" title="爬虫的用途和原理"></a>爬虫的用途和原理</h2><p>1) 在网络上搜集数据（比如搜索引擎）<br>2) 模拟浏览器快速操作（抢票，抢课，抢挂号…..)<br>3) 模拟浏览器操作，替代填表等重复操作</p><h2 id="最基本的爬虫写法"><a href="#最基本的爬虫写法" class="headerlink" title="最基本的爬虫写法"></a>最基本的爬虫写法</h2><p>数据获取型爬虫的本质就是自动获取网页并抽取其中的内容<br>1) 手工找出合适的url（网址） 。<br>2) 用浏览器手工查看url对应的网页，并查看网页源码，找出包含想要的内容（文件名，链接等）的字符串的模式。<br>3) 程序中获取url对应的网页。<br>4) 程序中用正则表达式或BeautifulSoup库抽取网页中想要的内容并保存。</p><h2 id="示例：获取百度图片的搜索结果图片"><a href="#示例：获取百度图片的搜索结果图片" class="headerlink" title="示例：获取百度图片的搜索结果图片"></a>示例：获取百度图片的搜索结果图片</h2><ol><li>/在百度图片敲关键字“desk”进行搜索</li><li><p>搜索后看浏览器地址栏的地址：<br><a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=desk&amp;oq=desk&amp;rsp=-1">搜索后看浏览器地址栏的地址</a></p></li><li><p>猜测只要在浏览器输入下面地址的word=内容，替换其中的单词，就能搜到图片：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=desk</span><br><span class="line"></span><br><span class="line">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=猫</span><br></pre></td></tr></table></figure><p>浏览器输入后出现猫的搜索结果</p><ol><li><p>用浏览器访问刚才的url,并用浏览器查看源码(chrome)</p></li><li><p>在源码中查找</p></li></ol><p>复制出来的图片地址:<code>https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg</code><br>为某张图片的网络地址，此链接是百度保存的缩略图的网址</p><p>查看网页源代码后搜索图片连接，找到源码：<br><code>716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg</code></p><p>发现图片链接在网页里都是这样的：<br><code>&#123;&quot;thumbURL&quot;:&quot;https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.sjpg&quot;, &quot;adType&quot;:&quot;0&quot;,&quot;midd</code></p><p>即thumbURL后跟的是图片连接。</p><p>可以用正则表达式提取图片链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests <span class="comment">#request库用于获取网络资源 pip install requests</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>): <span class="comment">#获取网址为url的网页</span></span><br><span class="line"><span class="comment">#具体实现略，后面再讲述</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getBaiduPictures</span>(<span class="params">word,n</span>):</span><br><span class="line"><span class="comment">#下载n个百度图片搜来的关于word的图片保存到本地</span></span><br><span class="line">url=<span class="string">&quot;https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=&quot;</span></span><br><span class="line">url += word</span><br><span class="line">html = getHtml(url)</span><br><span class="line">pt = <span class="string">&#x27;\&quot;thumbURL\&quot;:.*?\&quot;(.*?)\&quot;&#x27;</span> <span class="comment">#正则表达式，用于寻找图片网址</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment">#&quot;thumbURL&quot;:&quot;https://img1.baidu.com/it/u=716463119,473541077&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;,</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html): <span class="comment">#x就是图片url</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = x.lower()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(x, stream=<span class="literal">True</span>)<span class="comment">#获取x对应的网络资源</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;&#123;0&#125;&#123;1&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(word,i), <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"><span class="comment">#&quot;wb&quot;表示二进制写方式打开文件</span></span><br><span class="line">f.write(r.content) <span class="comment">#图片内容写入文件</span></span><br><span class="line">f.close()</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= n:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">getBaiduPictures(<span class="string">&quot;猫&quot;</span>, <span class="number">5</span>)</span><br><span class="line">getBaiduPictures(<span class="string">&quot;熊猫&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="用requests库获取网页"><a href="#用requests库获取网页" class="headerlink" title="用requests库获取网页"></a>用requests库获取网页</h1><h2 id="用requests-get获取网页"><a href="#用requests-get获取网页" class="headerlink" title="用requests.get获取网页"></a>用requests.get获取网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 获取网址url的网页</span></span><br><span class="line">    <span class="keyword">import</span> requests  <span class="comment"># request库用于获取网络资源,pip install request</span></span><br><span class="line">    fakeHeaders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:  <span class="comment"># 用于伪装浏览器发送请求</span></span><br><span class="line">                       <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">                       AppleWebKit/537.36 (KHTML, like Gecko) \ &#x27;</span></span><br><span class="line">                       <span class="string">&#x27;Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,*/*&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, headers=fakeHeaders)</span><br><span class="line">        </span><br><span class="line">        r.encoding = r.apparent_encoding  <span class="comment"># 确保网页编码正确</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> r.text  <span class="comment"># 返回值是个字符串，内含整个网页内容</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 用法： html = getHtml(&quot;http://openjudge.cn&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="用requests-get获取网页（编码识别加强版"><a href="#用requests-get获取网页（编码识别加强版" class="headerlink" title="用requests.get获取网页（编码识别加强版)"></a>用requests.get获取网页（编码识别加强版)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">import</span> sys, requests</span><br><span class="line">    <span class="keyword">import</span> chardet  <span class="comment"># 编码处理库 pip install chardet</span></span><br><span class="line">    fakeHeaders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">                       <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">                       AppleWebKit/537.36 (KHTML, like Gecko) \ &#x27;</span></span><br><span class="line">                       <span class="string">&#x27;Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,*/*&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, headers=fakeHeaders)</span><br><span class="line">        </span><br><span class="line">        ecd = chardet.detect(r.content)[<span class="string">&#x27;encoding&#x27;</span>]  <span class="comment"># ecd是个字符串</span></span><br><span class="line">        <span class="keyword">if</span> ecd.lower() != sys.getdefaultencoding().lower():</span><br><span class="line">            r.encoding = ecd  <span class="comment"># 修改r中文本的编码</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.textv</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="用requests库获取网页的优势和局限"><a href="#用requests库获取网页的优势和局限" class="headerlink" title="用requests库获取网页的优势和局限"></a>用requests库获取网页的优势和局限</h2><ul><li>优势</li></ul><ul><li>相比其它方法， 速度快几倍</li><li>安装简单，分发容易</li></ul><ul><li>局限</li></ul><ul><li>容易被反爬虫手段屏蔽</li><li>不能获取包含javascript生成的动态网页<br>用上面的getHtml函数，不能得到百度图片搜索结果网页，得到的网页是空网页（被反爬了）</li></ul><h2 id="弥补requests不足的其它获取网页的办法"><a href="#弥补requests不足的其它获取网页的办法" class="headerlink" title="弥补requests不足的其它获取网页的办法"></a>弥补requests不足的其它获取网页的办法</h2><ul><li>使用selenium库 (慢，很容易被反爬，且已经被许多网站反爬，网上各种对付反爬的解决办法基本不管用，不推荐）</li><li>使用pyppeteer库（快，暂未被许多网站反爬，强烈推荐）</li></ul><h1 id="用selenium库获取网页"><a href="#用selenium库获取网页" class="headerlink" title="用selenium库获取网页"></a>用selenium库获取网页</h1><p><code>pip install selunium</code></p><p>需要chrome浏览器或firefox浏览器，此外还需要下载chrome驱动程序(chromedriver.exe)或firefox驱动程序(geckodriver.exe)</p><h2 id="用selenium获取网页"><a href="#用selenium获取网页" class="headerlink" title="用selenium获取网页"></a>用selenium获取网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 暂时适用于百度图片搜索</span></span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 需要pip install selenium</span></span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">    options = Options()  <span class="comment"># 浏览器选项</span></span><br><span class="line">    <span class="comment"># 等价于 options = webdriver.chrome.options.Options()</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 规定chrome浏览器隐身模式运行</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 禁止chrome使用gpu加速，能快点</span></span><br><span class="line">    driver = webdriver.Chrome(</span><br><span class="line">        executable_path=<span class="string">&#x27;c:/tmp/chromedriver.exe&#x27;</span>, options=options)</span><br><span class="line">    <span class="comment"># driver就是个chrome浏览器。需要下载安装chrome驱动器 chromedriver.exe</span></span><br><span class="line">    driver.get(url)  <span class="comment"># 浏览器装入网页</span></span><br><span class="line">    html = driver.page_source  <span class="comment"># 网页源代码</span></span><br><span class="line">    driver.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line">    driver.quit()  <span class="comment"># 退出</span></span><br><span class="line">    <span class="keyword">return</span> html  <span class="comment"># 返回字符串</span></span><br></pre></td></tr></table></figure><h2 id="用pyppeteer库获取网页"><a href="#用pyppeteer库获取网页" class="headerlink" title="用pyppeteer库获取网页"></a>用pyppeteer库获取网页</h2><ul><li><p>puppeteer是谷歌公司推出的可以控制Chrome浏览器的一套编程工具。一个日本工程师以此为基础推出了Python版本，叫pyppeteer。</p></li><li><p><a href="https://pypi.org/project/pyppeteer/">pyppeteer的官网</a></p></li><li><p>启动一个浏览器Chromium，用浏览器装入网页。浏览器可以用无头模式（headless)，即隐藏模式启动，也可以显式启动。</p></li><li><p>从浏览器可以获取网页源代码，若网页有javascript程序，获取到的是javascript被浏览器执行后的网页源代码。</p></li><li><p>可以向浏览器发送命令，模拟用户在浏览器上键盘输入、鼠标点击等操作,让浏览器转到其它网页。</p></li><li><p>selenium原理及功能和pyppeteer一样。</p></li></ul><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p><code>pip install pyppeteer</code></p><ul><li>要求Python版本 &gt;= 3.6</li><li>必须下载并安装特殊版本的谷歌浏览器Chromium</li></ul><p>可以将Chromium压缩包随便解压在哪个文件夹，然后在程序指明其中chrome.exe的位置。<br>也可以将Chromium解压到pyppeteer的安装文件夹下面。这个文件夹通常类似：<br><code>C:\Users\username\AppData\Local\pyppeteer\pyppeteer\local-chromium\588429</code><br>把username要换成自己的windows用户名， 588429这里可能是别的数。<br>将Chromium压缩包里面的chrome-win32文件夹整个放在上面那个文件夹里面就行</p><h3 id="预备知识：协程"><a href="#预备知识：协程" class="headerlink" title="预备知识：协程"></a>预备知识：协程</h3><ul><li>协程就是前面加了’async’的函数(从Python 3.6开始有)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">f</span>()</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>调用协程时，必须在函数名前面加’await’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> f()</span><br></pre></td></tr></table></figure><ul><li><p>协程只能在协程里面调用，即await语句只能出现在协程里面。</p></li><li><p>协程是一种特殊的函数，多个协程可以并行。</p></li><li><p>pyppeteer中的所有函数都是协程，调用时前面都要加 await，且只能在协程中调用<br>初用协程，经常因为调用XXXX时忘了加await导致下面错误：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeWarning: coroutine &#x27;XXXX&#x27; was never awaited</span><br></pre></td></tr></table></figure><h3 id="用pyppeteer获取网页"><a href="#用pyppeteer获取网页" class="headerlink" title="用pyppeteer获取网页"></a>用pyppeteer获取网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):  <span class="comment"># 暂时适用于百度图片搜索</span></span><br><span class="line">    <span class="keyword">import</span> asyncio  <span class="comment"># Python 3.6之后自带的协程库</span></span><br><span class="line">    <span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">asGetHtml</span>(<span class="params">url</span>):  <span class="comment"># 获取url对应网页的源代码</span></span><br><span class="line">        browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 启动Chromium,browser即为Chromium浏览器，非隐藏启动</span></span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()  <span class="comment"># 在浏览器中打开一个新页面（标签）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; \</span></span><br><span class="line"><span class="string">Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)  <span class="comment"># 反反爬措施</span></span><br><span class="line">        <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">            <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator, \</span></span><br><span class="line"><span class="string">            &#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)  <span class="comment"># 反反爬措施</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.goto(url)  <span class="comment"># 装入url对应的网页</span></span><br><span class="line">        text = <span class="keyword">await</span> page.content()  <span class="comment"># page.coutent就是网页源代码字符串</span></span><br><span class="line">        <span class="keyword">await</span> browser.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"><span class="comment"># 速度大约比用requests.get慢5,6倍</span></span><br><span class="line"></span><br><span class="line">m = asyncio.ensure_future(asGetHtml(url))  <span class="comment"># 协程外启动协程</span></span><br><span class="line">asyncio.get_event_loop().run_until_complete(m)  <span class="comment"># 等待协程结束</span></span><br><span class="line"><span class="keyword">return</span> m.result()  <span class="comment"># 返回的就是asGetHtml的返回值 text</span></span><br></pre></td></tr></table></figure><p>可以改进程序，只需要启动一次浏览器，生成一个page对象即可，以后获取不同网页都用相同page对象，所有事情完成后才关闭浏览器。</p><ul><li>launch的其它参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>, executablePath=<span class="string">&quot;c:/tmp/chrome-win32/chrome.exe&quot;</span>, userdataDir=<span class="string">&quot;c:/tmp&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>excutablePath</code>: 如果Chromium没有安装在默认文件夹下面，则需要指定其位置。<br><code>userdataDir</code>: userdataDir指明用来存放浏览器工作期间存放临时文件的文件夹。不是必须，能够防止可能出现的莫名其妙的错误。</p><h2 id="用BeautifulSoup库分析网页"><a href="#用BeautifulSoup库分析网页" class="headerlink" title="用BeautifulSoup库分析网页"></a>用BeautifulSoup库分析网页</h2><h3 id="分析并提取网页内容的三种方式"><a href="#分析并提取网页内容的三种方式" class="headerlink" title="分析并提取网页内容的三种方式"></a>分析并提取网页内容的三种方式</h3><ol><li>正则表达式(速度最快，但适应变化略差)</li><li>BeautifulSoup库 (速度是正则表达式的约几分之一)</li><li>selenium或pyppeteer的中的浏览器对象的查找元素函数(速度是正则表达式的约百分之一，用在需要模拟在网页中进行输入，点击按钮等操作的时候)</li></ol><h3 id="html文档-网页-中的tag"><a href="#html文档-网页-中的tag" class="headerlink" title="html文档(网页)中的tag"></a>html文档(网页)中的tag</h3><p>tag格式通常为(少数没有正文和<code>&lt; /X &gt;</code>):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">X</span> <span class="attr">attr1</span>=<span class="string">&#x27;xxx&#x27;</span> <span class="attr">attr2</span>=<span class="string">&#x27;yyy&#x27;</span> <span class="attr">attr3</span>=<span class="string">&#x27;zzz&#x27;</span> …&gt;</span></span><br><span class="line">nnnnnnnnnnnnnn</span><br><span class="line"><span class="tag">&lt;/<span class="name">X</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>X : tag的名字(name)</li><li>attr1,attr2… : tag的属性（attr） =后面跟着属性的值</li><li>nnnnnnnnnnnnnn : tag的正文（text）</li></ul><p>例如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.sohu.com&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;mylink&#x27;</span>&gt;</span>搜狐网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>a ：tag的名字(name)</li><li>href, id ： tag的属性(attr)， =后面跟着属性的值</li><li>搜狐网 ： tag的正文(text)</li></ul><h3 id="tag可以嵌套"><a href="#tag可以嵌套" class="headerlink" title="tag可以嵌套"></a>tag可以嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;siteHeader&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;topsearch&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;userMenu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://openjudge.cn/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用BeautifulSoup库分析html"><a href="#用BeautifulSoup库分析html" class="headerlink" title="用BeautifulSoup库分析html"></a>用BeautifulSoup库分析html</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><p>1) 将html文档装入一个BeautifulSoup对象X<br>2) 用X对象的<code>find</code>,<code>find_all</code>等函数去找想要的tag对象<br>3) 对找到的tag对象，还可以用其<code>find</code>,<code>find_all</code>函数去，找它内部包含（嵌套）的tag对象<br>4) tag对象的text就是该对象里的正文（text）， tag对象也可以看作是一个字典，里面包含各种属性(attr)及其值。</p><h3 id="把html文档载入BeautifulSoup对象"><a href="#把html文档载入BeautifulSoup对象" class="headerlink" title="把html文档载入BeautifulSoup对象"></a>把html文档载入BeautifulSoup对象</h3><ul><li>方法1，html文档来自字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;siteHeader&quot; class=&quot;wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h1 class=&quot;logo&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;topsearch&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;ul id=&quot;userMenu&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li &gt;&lt;a href=&quot;http://openjudge.cn/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#带href的 &lt;a&gt;都是链接，上面“首页”是链接文字 ,href后面http://openjudge.cn是链</span></span><br><span class="line">接地址</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">str</span>, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>).text) <span class="comment">#&gt;&gt;首页</span></span><br></pre></td></tr></table></figure><ul><li>方法2，html文档来自于文件：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>方法3，html文档来自于给定网址：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):</span><br><span class="line"><span class="comment">#获得html文本</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.raise_for_status()</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">html = getHtml(<span class="string">&quot;https://cn.bing.com/dict/search?q=new&quot;</span>)</span><br><span class="line">soup = bs4.BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="实例：用BeautifulSoup对象寻找想要的tag"><a href="#实例：用BeautifulSoup对象寻找想要的tag" class="headerlink" title="实例：用BeautifulSoup对象寻找想要的tag"></a>实例：用BeautifulSoup对象寻找想要的tag</h3><p><code>c:\tmp\test.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;synoid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;df_div2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;de_title1&quot;</span>&gt;</span>adj.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col_fl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">h</span>=<span class="string">&quot;ID=Dictionary,5237.1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cn.bing.com/dict/search?q=novel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p1-4&quot;</span>&gt;</span>novel<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">h</span>=<span class="string">&quot;ID=Dictionary,5238.1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cn.bing.com/dict/search?q=newfangled&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p1-4&quot;</span>&gt;</span>newfangled<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchlink1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sh1&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchlink1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sh2&quot;</span>&gt;</span>谷歌<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>),<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">diva = soup.find(<span class="string">&quot;div&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;synoid&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#寻找名为&quot;div&quot;,且具有值为&quot;synoid&quot;的属性&quot;id&quot;的tag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> diva != <span class="literal">None</span>: <span class="comment">#如果找到</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> diva.find_all(<span class="string">&quot;span&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;p1-4&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text) <span class="comment">#在diva内部继续找</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> diva.find_all(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line">x = diva.find(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;sh2&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">novel</span><br><span class="line">newfangled</span><br><span class="line">百度</span><br><span class="line">谷歌</span><br><span class="line">谷歌</span><br><span class="line">http://www.google.com</span><br><span class="line">searchlink1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果别处没有和 &lt;div id=&quot;synoid&quot; style=&quot;display:block;&quot;&gt; 内部的模式相似的东西，也可以不用先找这个 &quot;synoid&quot; tag</span></span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line">soup = bs4.BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\test.html&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>),<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;span&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;p1-4&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>&#125;):</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br><span class="line">x = soup.find(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;searchlink1&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;sh2&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="实例：爬取每日股票交易信息"><a href="#实例：爬取每日股票交易信息" class="headerlink" title="实例：爬取每日股票交易信息"></a>实例：爬取每日股票交易信息</h2><p><a href="https://www.banban.cn/gupiao/list_cyb.html">创业板股票交易代码大全</a><br><a href="https://www.banban.cn/gupiao/list_sz.html">深圳股票交易代码大全</a><br><a href="https://www.banban.cn/gupiao/list_sh.html">上证股票交易代码大全</a></p><p>查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600151/&quot;</span>&gt;</span>航天机电(600151)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600156/&quot;</span>&gt;</span>华升股份(600156)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600160/&quot;</span>&gt;</span>巨化股份(600160)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600161/&quot;</span>&gt;</span>天坛生物(600161)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gupiao/600162/&quot;</span>&gt;</span>香江控股(600162)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>东方财富网每日股票交易信息单只股票：</p><p>quote.eastmoney.com/sh600000.html 上证<br>quote.eastmoney.com/sz000017.html 深圳或创业板</p><p>该页面查看源代码，看不到 12.17, 12.51等交易数据。说明源代码里面包含javascript程序，<br>浏览器执行javascript程序以后，才能得到显示的页面。</p><p>因此python程序需要在取到网页后，还要执行里面的javascript程序，才能得到股票数据</p><p>用requests.get无法得到显示的网页。必须用selenium或者pyppeteer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio  <span class="comment"># Python 3.6之后自带的协程库</span></span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):  <span class="comment"># 为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; \</span></span><br><span class="line"><span class="string">Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">        <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator, \</span></span><br><span class="line"><span class="string">        &#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用正则表达式获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line"><span class="comment">#从&quot;https://www.banban.cn/gupiao/list_sh.html&quot;对应的page获取所有股票名称和代码</span></span><br><span class="line">codes = []</span><br><span class="line"><span class="comment"># 最终内容： [&quot;四川路桥(600039)&quot;,&quot;包钢股份(600010)&quot;......]</span></span><br><span class="line">html = <span class="keyword">await</span> page.content()</span><br><span class="line">pt = <span class="string">&#x27;&lt;a href=&quot;/gupiao/[^&quot;]*&quot;&gt;([^&lt;]*\(\d+\))&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="comment"># 对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html):</span><br><span class="line">codes.append(x)</span><br><span class="line"><span class="keyword">return</span> codes</span><br><span class="line"><span class="comment"># 耗时： 0: 00:00.033943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockInfo</span>(<span class="params">url</span>):</span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 启动Chromium,browser即为Chromium浏览器，非隐藏启动</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()  <span class="comment">#在浏览器中打开一个新页面（标签）</span></span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)  <span class="comment">#新页面生成后一律调用此来反反爬</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(url)  <span class="comment">#装入url对应的网页</span></span><br><span class="line">    codes = <span class="keyword">await</span> getStockCodes(page)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> codes[:<span class="number">3</span>]:  <span class="comment">#只取前三个股票信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----&quot;</span>, x)  <span class="comment">#x形如&quot;四川路桥(600039)&quot;</span></span><br><span class="line">        pos1, pos2 = x.index(<span class="string">&quot;(&quot;</span>), x.index(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        code = x[pos1 + <span class="number">1</span>:pos2]  <span class="comment"># 取股票代码,如600039</span></span><br><span class="line">        url = <span class="string">&quot;https://quote.eastmoney.com/sh&quot;</span> + code + <span class="string">&quot;.html&quot;</span></span><br><span class="line">        <span class="keyword">await</span> page.goto(url)</span><br><span class="line">        html = <span class="keyword">await</span> page.content()  <span class="comment"># 往下编程前可以先print(html)看一看</span></span><br><span class="line">        pt = <span class="string">&#x27;&lt;td&gt;([^&lt;]*)&lt;/td&gt;.*?&lt;td[^&gt;]*id=&quot;gt\d*?&quot;[^&gt;]*&gt;([^&lt;]*)&lt;/td&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> re.findall(pt, html, re.DOTALL):</span><br><span class="line">            <span class="built_in">print</span>(x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">await</span> browser.close()  <span class="comment"># 关闭浏览器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.banban.cn/gupiao/list_sh.html&quot;</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(getStockInfo(url))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="keyword">await</span> page.content()</span><br><span class="line"><span class="built_in">print</span>(html) <span class="comment">#打出的内容拷贝到记事本查看，找到以下内容：</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>今开： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;46&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>最高： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;44&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>涨停： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl red&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;51&quot;</span>&gt;</span>1.34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>换手： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>1%<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>成交量： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;47&quot;</span>&gt;</span>316.4万手<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    .....................</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;pe&quot;</span>&gt;</span>245.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>总市值： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt7&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;tmv&quot;</span>&gt;</span>547.0亿<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正则表达式pt对应:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>今开： <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;gt1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txtl&quot;</span> <span class="attr">data-bind</span>=<span class="string">&quot;46&quot;</span>&gt;</span>1.22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----- 包钢股份(600010)</span><br><span class="line">今开： 1.22</span><br><span class="line">最高： 1.22</span><br><span class="line">涨停： 1.34</span><br><span class="line">换手： 1%</span><br><span class="line">成交量： 316.4万手</span><br><span class="line">总市值： 547.0亿</span><br><span class="line">昨收： 1.22</span><br><span class="line">最低： 1.19</span><br><span class="line">跌停： 1.1</span><br><span class="line">量比： 1.04</span><br><span class="line">成交额： 3.81亿</span><br><span class="line">市净： 1.03</span><br><span class="line">流通市值： 380.1亿</span><br><span class="line">----- 四川路桥(600039)</span><br><span class="line">今开： 4.94</span><br><span class="line">最高： 4.95</span><br><span class="line">涨停： 5.43</span><br><span class="line">换手： 0.49%</span><br><span class="line">成交量： 17.64万手</span><br><span class="line">总市值： 232.8亿</span><br><span class="line">昨收： 4.94</span><br><span class="line">最低： 4.86</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用BeautifulSoup获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line">    codes = []</span><br><span class="line">    html = <span class="keyword">await</span> page.content()</span><br><span class="line">    soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">&quot;li&quot;</span>):</span><br><span class="line">    <span class="comment">#对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">    a = x.find(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>( <span class="string">&quot;(&quot;</span> <span class="keyword">in</span> a.text <span class="keyword">and</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> a.text):</span><br><span class="line">    codes.append(a.text)</span><br><span class="line">    <span class="keyword">return</span> codes</span><br><span class="line">    <span class="comment">#耗时： 0: 00:00.193480</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用浏览器自身的查找元素功能获取股票名称和代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getStockCodes</span>(<span class="params">page</span>):</span><br><span class="line">codes = []</span><br><span class="line">elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;li&quot;</span>) <span class="comment">#根据tag name找元素</span></span><br><span class="line"><span class="comment">#对应 &lt;li&gt;&lt;a href=&quot;/gupiao/600151/&quot;&gt;航天机电(600151)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> elements:</span><br><span class="line">a = <span class="keyword">await</span> e.querySelector(<span class="string">&quot;a&quot;</span>) <span class="comment">#根据tag name找元素</span></span><br><span class="line">obj = <span class="keyword">await</span> a.getProperty(<span class="string">&quot;text&quot;</span>) <span class="comment">#还可以 a.getProperty(&quot;href&quot;)</span></span><br><span class="line"><span class="comment">#上面这句不行就改成: obj = await a.getProperty(&quot;innerText&quot;)</span></span><br><span class="line">text = <span class="keyword">await</span> obj.jsonValue() <span class="comment">#固定写法</span></span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;(&quot;</span> <span class="keyword">in</span> text <span class="keyword">and</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> text):</span><br><span class="line">codes.append(text)</span><br><span class="line"><span class="keyword">return</span> codes</span><br><span class="line"><span class="comment">#耗时： 0:00:04.421178</span></span><br></pre></td></tr></table></figure><p>弹出菜单点“检查”，可以看到附近元素对应的源代码(查看源代码看不到)</p><h2 id="需要登录的爬虫"><a href="#需要登录的爬虫" class="headerlink" title="需要登录的爬虫"></a>需要登录的爬虫</h2><ul><li><p>许多网站需要登录后才能访问其内容</p><p>  京东、淘宝需要登录才能访问交易记录<br>  openjudge.cn 需要登录才能看提交过的源代码</p></li><li><p>登录操作，无法用一个url表示出来</p></li><li><p>解决办法之一：用浏览器模拟登录过程，输入用户名密码、点登录按钮。或者程序启动浏览器，等待手工登录后，程序再继续爬虫操作(对有验证码的情况)</p></li></ul><h3 id="爬取Openjudge自己提交通过的所有程序源码"><a href="#爬取Openjudge自己提交通过的所有程序源码" class="headerlink" title="爬取Openjudge自己提交通过的所有程序源码"></a>爬取Openjudge自己提交通过的所有程序源码</h3><ul><li>程序命令浏览器模拟登录过程，即输入用户名密码、点登录按钮</li><li>或：程序启动浏览器，等待手工登录后，程序再继续爬虫操作(对有验证码的情况，或者懒得写代码的情况)</li><li>更高级做法：不用浏览器，经数据包分析后，用requests库进行数据传输进行登录</li></ul><p>鼠标右键点击右上角的“个人首页”，在弹出的菜单上选“检查” :</p><p>点击 “个人首页”， 进入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://cxsjsxmooc.openjudge.cn/2020t1fallall2/solution/25212869/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;result-right&quot;</span>&gt;</span>Accepted<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击某个题的“Accepted”链接，进入:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;sh_python&quot;</span>&gt;</span></span><br><span class="line">n = int(input())</span><br><span class="line">lst = []</span><br><span class="line">for i in range(n):</span><br><span class="line">s = input().split()</span><br><span class="line">lst.append((s[0], int(s[1])))</span><br><span class="line">lst.sort(key= lambda x : (-x[1], x[0]))</span><br><span class="line">for x in lst:</span><br><span class="line">print(x[0], x[1])<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment"># 为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) \ &#x27;</span> <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span> <span class="string">&#x27;Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">        <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getOjSourceCode</span>(<span class="params">loginUrl</span>):</span><br><span class="line">    width, height = <span class="number">1400</span>, <span class="number">800</span>  <span class="comment">#网页宽高</span></span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>,</span><br><span class="line">                               userdataDir=<span class="string">&quot;c:/tmp&quot;</span>,</span><br><span class="line">                               args=[<span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(loginUrl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若手动登录，则以下若干行可以去掉</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#email&quot;</span>)  <span class="comment"># 找到账户输入框</span></span><br><span class="line">    <span class="keyword">await</span> element.<span class="built_in">type</span>(<span class="string">&quot;XXXXX@qq.com&quot;</span>)  <span class="comment"># 输入邮箱</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#password&quot;</span>)  <span class="comment"># 找到密码输入框</span></span><br><span class="line">    <span class="keyword">await</span> element.<span class="built_in">type</span>(<span class="string">&quot;XXXXXXXXX&quot;</span>)  <span class="comment"># 输入密码</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#main &gt; form &gt; div.user-login &gt;    p:nth-child(2) &gt; button&quot;</span>) <span class="comment">#找到登录按钮</span></span><br><span class="line">    <span class="keyword">await</span> element.click()  <span class="comment"># 点击登录按钮</span></span><br><span class="line">    <span class="comment"># 若手动登录，则以上若干行可以去掉。time.sleep(10)或等待某个元素出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#main&gt;h2&quot;</span>, timeout=<span class="number">30000</span>)  <span class="comment"># 等待“正在进行的比赛....&quot;标题出现</span></span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#userMenu&gt;li:nth-child(2)&gt;a&quot;</span>)</span><br><span class="line">    <span class="comment"># 找&quot;个人首页”链接</span></span><br><span class="line">    <span class="keyword">await</span> element.click()  <span class="comment"># 点击个人首页链接</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation()  <span class="comment"># 等新网页装入完毕</span></span><br><span class="line"></span><br><span class="line">    elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;.result-right&quot;</span>)</span><br><span class="line">    <span class="comment"># 找所有&quot;Accepted&quot;链接, 其有属性 class=&quot;result-right&quot;</span></span><br><span class="line">    page2 = <span class="keyword">await</span> browser.newPage()  <span class="comment"># 新开一个页面 (标签)</span></span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page2)<span class="comment">#添加反反爬</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements[:<span class="number">2</span>]:  <span class="comment"># 只打印前两个程序</span></span><br><span class="line">        obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;href&quot;</span>)  <span class="comment"># 获取href属性</span></span><br><span class="line">    url = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">   <span class="keyword">await</span> page2.goto(url)  <span class="comment"># 在新页面(标签)中装入新网页</span></span><br><span class="line">    element = <span class="keyword">await</span> page2.querySelector(<span class="string">&quot;pre&quot;</span>)  <span class="comment"># 查找pre tag</span></span><br><span class="line">    obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;innerText&quot;</span>)  <span class="comment"># 取源代码</span></span><br><span class="line">    text = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://openjudge.cn/auth/login/&quot;</span></span><br><span class="line">    syncio.get_event_loop().run_until_complete(getOjSourceCode(url))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="pyppeteer-requests编写快速爬虫"><a href="#pyppeteer-requests编写快速爬虫" class="headerlink" title="pyppeteer+requests编写快速爬虫"></a>pyppeteer+requests编写快速爬虫</h2><ul><li>requests要对付登录比较麻烦（要用到抓包等技巧）</li><li>pyppeteer没有requests快(因为要浏览器渲染网页)</li><li>对于需要登录，且登录后的网页都不是javascript生成的动态网页的情况，可以使用pyppeteer登录后，再用requests做剩下的事情。</li></ul><p>网址: <a href="http://openjudge.cn/user/2312/">http://openjudge.cn/user/2312/</a></p><p>不登录，访问同样网址，提示没有登录<br>同样的访问请求，服务器怎么知道浏览器是否登录过？</p><h3 id="预备知识：-cookie和session"><a href="#预备知识：-cookie和session" class="headerlink" title="预备知识： cookie和session"></a>预备知识： cookie和session</h3><ul><li><p>登录成功后，服务器向浏览器发送一些身份标识数据，称为cookie，浏览器以后每次向服务器发送请求，都带上cookie，服务器就能知道请求来自前面那个登录的浏览器了。</p></li><li><p>服务器在内存为浏览器维护一个session，每个浏览器对应不同的session，里面存放着该浏览器的状态（比如一系列的填表等步骤已经进行到什么程度），不同的session有不同的session id，浏览器发送请求的时候，如果带上session id,服务器也能知道是哪个浏览器在请求。</p></li><li><p>在客户计算机上由cookie可以生成标识同一个浏览器的session。</p></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>pyppeteer的浏览器的页面有cookies()函数可以获得cookie</li><li>requests.Session()可以生成一个空session</li><li>session的cookies.update(cookies)函数可以根据cookies生成相应session</li><li>session的get(url)函数，可以向服务器发送带session的请求</li><li>获得cookie，生成相应session以后，爬取网页都用session的get函数进行(前提：网页不是javascript生成的。如果是，依然用pyppeteer的浏览器爬取）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> pyppeteer <span class="keyword">as</span> pyp</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sessionGetHtml</span>(<span class="params">session, url</span>):  <span class="comment"># 发送带session的网页请求</span></span><br><span class="line">    fakeHeaders = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \</span></span><br><span class="line"><span class="string">    AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">    Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&#x27;</span></span><br><span class="line">    &#125;  <span class="comment"># 伪装浏览器用的请求头</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = session.get(url, headers=fakeHeaders)</span><br><span class="line">        result.encoding = result.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> result.text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">makeSession</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment"># 返回一个session,将其内部cookies修改成pypeteer浏览器页面对象中的cookies</span></span><br><span class="line">    cookies = <span class="keyword">await</span> page.cookies() <span class="comment">#cookies是一个列表,每个元素都是一个字典</span></span><br><span class="line">    cookies1 = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies: <span class="comment"># requests中的cookies只要&quot;name&quot;属性</span></span><br><span class="line">    cookies1[cookie[<span class="string">&#x27;name&#x27;</span>]] = cookie[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    session.cookies.update(cookies1)</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">antiAntiCrawler</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="comment">#为page添加反反爬虫手段</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) \ &#x27;</span></span><br><span class="line">    <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">    <span class="string">&#x27;Chrome/78.0.3904.70 Safari/537.36&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(</span><br><span class="line">    <span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getOjSourceCode</span>(<span class="params">loginUrl</span>):</span><br><span class="line">    width, height = <span class="number">1400</span>, <span class="number">800</span> <span class="comment">#网页宽高</span></span><br><span class="line">    browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>,</span><br><span class="line">    userdataDir = <span class="string">&quot;c:/tmp&quot;</span>,</span><br><span class="line">    args=[<span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> antiAntiCrawler(page)</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(loginUrl)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#main&gt;h2&quot;</span>,</span><br><span class="line">    timeout=<span class="number">30000</span>) <span class="comment">#等待手动登录后，“正在进行的比赛....&quot;标题出现</span></span><br><span class="line">    element = <span class="keyword">await</span> page.querySelector(<span class="string">&quot;#userMenu&gt;li:nth-child(2)&gt;a&quot;</span>)</span><br><span class="line">    <span class="comment">#找&quot;个人首页”链接</span></span><br><span class="line">    <span class="keyword">await</span> element.click() <span class="comment">#点击个人首页链接</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation() <span class="comment">#等新网页装入完毕</span></span><br><span class="line">    </span><br><span class="line">    elements = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&quot;.result-right&quot;</span>)</span><br><span class="line">    <span class="comment">#找所有&quot;Accepted&quot;链接, 其有属性 class=&quot;result-right&quot;</span></span><br><span class="line">    session = <span class="keyword">await</span> makeSession(page)</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements[:<span class="number">2</span>]:</span><br><span class="line">    obj = <span class="keyword">await</span> element.getProperty(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">        url = <span class="keyword">await</span> obj.jsonValue()</span><br><span class="line">        html = sessionGetHtml(session, url)</span><br><span class="line">        soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        element = soup.find(<span class="string">&quot;pre&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://openjudge.cn/auth/login/&quot;</span></span><br><span class="line">    asyncio.get_event_loop().run_until_complete(getOjSourceCode(url))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="补充tips"><a href="#补充tips" class="headerlink" title="补充tips"></a>补充tips</h1><h2 id="绝对网址和相对网址"><a href="#绝对网址和相对网址" class="headerlink" title="绝对网址和相对网址"></a>绝对网址和相对网址</h2><ul><li><p>绝对网址以http:// 或 https:// 开头 ,相对网址无这两种开头<br>如果当前网页网址是：<br><code>http://www.pku.edu.cn/education/index.htm</code><br>而该网页中有一个链接，其中网址是相对的，形如：<br><code>&lt;a href=&quot;dict/word.htm&quot;&gt;词典单词&lt;/a&gt;</code><br>则该链接的真实网址（绝对网址）是：<br><code>http://www.pku.edu.cn/education/dict/word.htm</code></p></li><li><p>使用requests库时，获得当前网页网址: </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.url) <span class="comment">#&gt;&gt;http://openjudge.cn</span></span><br><span class="line"><span class="comment">#或：</span></span><br><span class="line">session = requests.session()</span><br><span class="line">r = session.get(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br></pre></td></tr></table></figure><ul><li>使用pyppeteer库时，获得当前网页网址:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> pyp.launch(headless=<span class="literal">False</span>)</span><br><span class="line">page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line"><span class="keyword">await</span> page.goto(<span class="string">&quot;http://openjudge.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(page.url) <span class="comment">#&gt;&gt;http://openjudge.cn</span></span><br></pre></td></tr></table></figure><h2 id="反反爬"><a href="#反反爬" class="headerlink" title="反反爬"></a>反反爬</h2><ul><li>连续的两个操作之间，加入适当延时，模拟人的动作，以免因动作太快被识破</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">2</span>) <span class="comment">#暂停2秒，啥也不做</span></span><br></pre></td></tr></table></figure><p>也可以用<code>time.sleep(...)</code>来等待一段时间，确保网页加载完成</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十二章网络爬虫设计</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十一章数据分析和展示</title>
    <link href="http://hibiscidai.com/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/"/>
    <id>http://hibiscidai.com/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/</id>
    <published>2023-02-01T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA.png" class="" title="实用Python程序设计MOOC-第十一章数据分析和展示"><p>实用Python程序设计MOOC-第十一章数据分析和展示</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十一章数据分析和展示"><a href="#实用Python程序设计MOOC-第十一章数据分析和展示" class="headerlink" title="实用Python程序设计MOOC-第十一章数据分析和展示"></a>实用Python程序设计MOOC-第十一章数据分析和展示</h1><h1 id="多维数组库numpy"><a href="#多维数组库numpy" class="headerlink" title="多维数组库numpy"></a>多维数组库numpy</h1><h2 id="numpy简介"><a href="#numpy简介" class="headerlink" title="numpy简介"></a>numpy简介</h2><ul><li>多维数组库，创建多维数组很方便，可以替代多维列表</li><li>速度比多维列表快</li><li>支持向量和矩阵的各种数学运算</li><li>所有元素类型必须相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy 安装</span><br></pre></td></tr></table></figure><h2 id="numpy创建数组的函数"><a href="#numpy创建数组的函数" class="headerlink" title="numpy创建数组的函数"></a>numpy创建数组的函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">array(x)</td><td style="text-align:center">根据列表或元组x创建数组</td></tr><tr><td style="text-align:center">arange(x,y,i)</td><td style="text-align:center">创建一维数组， 元素等价于range(x,y,i)</td></tr><tr><td style="text-align:center">linespace(x,y,n)</td><td style="text-align:center">创建一个由区间[x,y]的n-1等分点构成的一维数组,包含x和y</td></tr><tr><td style="text-align:center">random.randint(…)</td><td style="text-align:center">创建一个元素为随机整数的数组</td></tr><tr><td style="text-align:center">zeros(n)</td><td style="text-align:center">创建一个元素全为0.0的长度为n数组</td></tr><tr><td style="text-align:center">ones(n)</td><td style="text-align:center">创建一个元素全为1.0的长度为n数组</td></tr></tbody></table></div><h2 id="numpy创建数组示例"><a href="#numpy创建数组示例" class="headerlink" title="numpy创建数组示例"></a>numpy创建数组示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#以后numpy简写为np</span></span><br><span class="line"><span class="built_in">print</span>(np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])) <span class="comment">#&gt;&gt;[1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>)) <span class="comment">#&gt;&gt;[1 3 5 7] 等差数列[1,9)</span></span><br><span class="line"><span class="built_in">print</span>(np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>)) <span class="comment">#&gt;&gt;[ 1. 4. 7. 10.]等分数列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">10</span>,<span class="number">20</span>,[<span class="number">2</span>,<span class="number">3</span>]))<span class="comment">#[10,20) 2行3列的数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[12 19 12]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [19 13 10]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">10</span>,<span class="number">20</span>,<span class="number">5</span>)) <span class="comment">#&gt;&gt;[12 19 19 10 13]</span></span><br><span class="line">a = np.zeros(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[ 0. 0. 0.]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a)) <span class="comment">#&gt;&gt;[0.0, 0.0, 0.0]</span></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">3</span>),dtype=<span class="built_in">int</span>) <span class="comment">#创建一个2行3列的元素都是整数0的数组</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组常用属性和函数"><a href="#numpy数组常用属性和函数" class="headerlink" title="numpy数组常用属性和函数"></a>numpy数组常用属性和函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性或函数</th><th style="text-align:center">含义或功能</th></tr></thead><tbody><tr><td style="text-align:center">dtype</td><td style="text-align:center">数组元素的类型</td></tr><tr><td style="text-align:center">ndim</td><td style="text-align:center">数组是几维的</td></tr><tr><td style="text-align:center">shape</td><td style="text-align:center">数组每一维的长度</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">数组元素个数</td></tr><tr><td style="text-align:center">argwhere(…)</td><td style="text-align:center">查找元素</td></tr><tr><td style="text-align:center">tolist()</td><td style="text-align:center">转换为list</td></tr><tr><td style="text-align:center">min()</td><td style="text-align:center">求最小元素</td></tr><tr><td style="text-align:center">max()</td><td style="text-align:center">求最大元素</td></tr><tr><td style="text-align:center">reshape(…)</td><td style="text-align:center">改变数组的形状</td></tr><tr><td style="text-align:center">flatten()</td><td style="text-align:center">转换成一维数组</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line"><span class="comment">#b是[ 0 1 2 3 4 5 6 7 8 9 10 11]</span></span><br><span class="line">a = b.reshape((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#转换成3行4列的数组， b不变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment">#&gt;&gt;3 a有3行</span></span><br><span class="line"><span class="built_in">print</span>(a.size) <span class="comment">#&gt;&gt;12 a的元素个数是12</span></span><br><span class="line"><span class="built_in">print</span>(a.ndim) <span class="comment">#&gt;&gt;2 a是2维的</span></span><br><span class="line"><span class="built_in">print</span>(a.shape) <span class="comment">#&gt;&gt;(3, 4) a是3行4列</span></span><br><span class="line"><span class="built_in">print</span>(a.dtype) <span class="comment">#&gt;&gt;int32 a的元素类型是32位的整数</span></span><br><span class="line">L = a.tolist() <span class="comment">#转换成列表,a不变</span></span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#&gt;&gt;[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]</span></span><br><span class="line">b = a.flatten() <span class="comment">#转换成一维数组</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[ 0 1 2 3 4 5 6 7 8 9 10 11]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组元素增删"><a href="#numpy数组元素增删" class="headerlink" title="numpy数组元素增删"></a>numpy数组元素增删</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">append(x,y)</td><td style="text-align:center">若y是数组、列表或元组,就将y的元素添加进数组x得新数组。否则将y本身添加进数组x得新数组</td></tr><tr><td style="text-align:center">concatenate(…)</td><td style="text-align:center">拼接多个数组或列表,”axis=0”行增加,”axis=1”列增加</td></tr><tr><td style="text-align:center">delete(…)</td><td style="text-align:center">删除数组元素得新数组</td></tr></tbody></table></div><p>numpy数组一旦生成，元素就不能增删。 上面函数返回一个新的数组。</p><h2 id="numpy添加数组元素"><a href="#numpy添加数组元素" class="headerlink" title="numpy添加数组元素"></a>numpy添加数组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">#a是[1 2 3]</span></span><br><span class="line">b = np.append(a, <span class="number">10</span>) <span class="comment">#a不会发生变化</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[ 1 2 3 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.append(a, [<span class="number">10</span>, <span class="number">20</span>])) <span class="comment">#&gt;&gt;[ 1 2 3 10 20]</span></span><br><span class="line"></span><br><span class="line">c = np.zeros((<span class="number">2</span>, <span class="number">3</span>),dtype=<span class="built_in">int</span>) <span class="comment">#c是2行3列的全0数组</span></span><br><span class="line"><span class="built_in">print</span>(np.append(a, c)) <span class="comment">#&gt;&gt;[1 2 3 0 0 0 0 0 0]</span></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((a, [<span class="number">10</span>, <span class="number">20</span>], a)))</span><br><span class="line"><span class="comment">#&gt;&gt;[ 1 2 3 10 20 1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((c, np.array([[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]]))))</span><br><span class="line"><span class="comment">#c拼接一行[10,20,30]得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 0  0  0]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 0  0  0]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [10 20 30]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.concatenate((c,np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">10</span>, <span class="number">20</span>]])), axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment">#c的第0行拼接了1,2两个元素、第1行拼接了10,20两个新元素后得到新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 0  0  0  1  2]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 0  0  0 10 20]]</span></span><br></pre></td></tr></table></figure><h2 id="numpy删除数组元素"><a href="#numpy删除数组元素" class="headerlink" title="numpy删除数组元素"></a>numpy删除数组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">b = np.delete(a,<span class="number">1</span>) <span class="comment">#删除a中下标为1的元素,a不会改变</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1 3 4]</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.delete(b,<span class="number">1</span>,axis=<span class="number">0</span>)) <span class="comment">#删除b的第1行得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1 2 3 4]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,<span class="number">1</span>,axis=<span class="number">1</span>)) <span class="comment">#删除b的第1列得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1  3  4]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 5  7  8]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,[<span class="number">1</span>,<span class="number">2</span>],axis=<span class="number">0</span>)) <span class="comment">#删除b的第1行和第2行得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[1 2 3 4]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(b,[<span class="number">1</span>,<span class="number">3</span>],axis=<span class="number">1</span>)) <span class="comment">#删除b的第1列和第3列得新数组</span></span><br><span class="line"><span class="comment">#&gt;&gt;[[ 1  3]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 5  7]</span></span><br><span class="line"><span class="comment">#&gt;&gt; [ 9 11]]</span></span><br></pre></td></tr></table></figure><h2 id="在numpy数组中查找元素"><a href="#在numpy数组中查找元素" class="headerlink" title="在numpy数组中查找元素"></a>在numpy数组中查找元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">pos = np.argwhere(a==<span class="number">3</span>) <span class="comment">#pos是[[2] [4]]</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> a) <span class="comment">#&gt;&gt;True</span></span><br><span class="line"></span><br><span class="line">pos = np.argwhere(a==<span class="number">2</span>) <span class="comment">#pos是[[0 1] [1 2]]</span></span><br><span class="line">b = a[a&gt;<span class="number">2</span>] <span class="comment">#抽取a中大于2的元素形成一个一维数组</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[3 4 5]</span></span><br><span class="line">a[a &gt; <span class="number">2</span>] = -<span class="number">1</span> <span class="comment">#a变成[[ 1 2 -1] [-1 -1 2]]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组的数学运算"><a href="#numpy数组的数学运算" class="headerlink" title="numpy数组的数学运算"></a>numpy数组的数学运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">b = a + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[2 3 4 5]</span></span><br><span class="line"><span class="built_in">print</span>(a*b) <span class="comment">#&gt;&gt;[ 2 6 12 20] a,b对应元素相乘</span></span><br><span class="line"><span class="built_in">print</span>(a+b) <span class="comment">#&gt;&gt;[3 5 7 9] a,b对应元素相加</span></span><br><span class="line">c = np.sqrt(a*<span class="number">10</span>) <span class="comment">#a*10是[10 20 30 40]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#&gt;&gt;[ 3.16227766 4.47213595 5.47722558 6.32455532]</span></span><br></pre></td></tr></table></figure><h2 id="numpy数组的切片"><a href="#numpy数组的切片" class="headerlink" title="numpy数组的切片"></a>numpy数组的切片</h2><p>numpy数组的切片是“视图”，<br>是原数组的一部分，而非一部分的拷贝<br>对视图的修改会影响原数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>) <span class="comment">#a是[0 1 2 3 4 5 6 7]</span></span><br><span class="line">b = a[<span class="number">3</span>:<span class="number">6</span>] <span class="comment">#注意,b是a的一部分</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[3 4 5]</span></span><br><span class="line">c = np.copy(a[<span class="number">3</span>:<span class="number">6</span>]) <span class="comment">#c是a的一部分的拷贝</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">#会修改a</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[ 0 1 2 100 4 5 6 7]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#&gt;&gt;[3 4 5] c不受b影响</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],[<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>]])</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#b是&gt;&gt;[[ 6 7 8] [10 11 12]]</span></span><br></pre></td></tr></table></figure><h1 id="数据分析库pandas"><a href="#数据分析库pandas" class="headerlink" title="数据分析库pandas"></a>数据分析库pandas</h1><h2 id="pandas-简介"><a href="#pandas-简介" class="headerlink" title="pandas 简介"></a>pandas 简介</h2><ul><li>核心功能是在二维表格上做各种操作，如增删、修改、 求一列数据的和、方差、中<br>位数、平均数等</li><li>需要numpy支持</li><li>如果有openpyxl或xlrd或xlwt支持，还可以读写excel文档。</li><li>最关键的类： DataFrame，表示二维表格</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h2 id="pandas的重要类：-Series"><a href="#pandas的重要类：-Series" class="headerlink" title="pandas的重要类： Series"></a>pandas的重要类： Series</h2><p>Series是一维表格，每个元素带标签且有下标，兼具列表和字典的访问形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series(data=[<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>],index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment">#&gt;&gt;80 90 100</span></span><br><span class="line"><span class="built_in">print</span>(x,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;语文&#x27;</span>],s[<span class="number">1</span>]) <span class="comment">#&gt;&gt;80 90 标签和序号都可以作为下标来访问元素</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">2</span>][<span class="string">&#x27;数学&#x27;</span>]) <span class="comment">#&gt;&gt;90 s[0:2]是切片</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;数学&#x27;</span>:<span class="string">&#x27;英语&#x27;</span>][<span class="number">1</span>]) <span class="comment">#&gt;&gt;100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s.index)): <span class="comment">#&gt;&gt;语文 数学 英语</span></span><br><span class="line"><span class="built_in">print</span>(s.index[i],end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">s[<span class="string">&#x27;体育&#x27;</span>] = <span class="number">110</span> <span class="comment">#在尾部添加元素，标签为&#x27;体育&#x27;，值为110</span></span><br><span class="line">s.pop(<span class="string">&#x27;数学&#x27;</span>) <span class="comment">#删除标签为&#x27;数学’的元素</span></span><br><span class="line">s2 = s.append(pd.Series(<span class="number">120</span>,index = [<span class="string">&#x27;政治&#x27;</span>])) <span class="comment">#不改变s</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&#x27;语文&#x27;</span>],s2[<span class="string">&#x27;政治&#x27;</span>]) <span class="comment">#&gt;&gt;80 120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s2)) <span class="comment">#&gt;&gt;[80, 100, 110, 120]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.<span class="built_in">sum</span>(),s.<span class="built_in">min</span>(),s.mean(),s.median())</span><br><span class="line"><span class="comment">#&gt;&gt;290 80 96.66666666666667 100.0 输出和、最小值、平均值、中位数</span></span><br><span class="line"><span class="built_in">print</span>(s.idxmax(),s.argmax()) <span class="comment">#&gt;&gt;体育 2 输出最大元素的标签和下标</span></span><br></pre></td></tr></table></figure><p>切片是视图，是原来数据的一部分，修改了视图也会影响原来数据的变化。</p><h2 id="DataFrame的构造和访问"><a href="#DataFrame的构造和访问" class="headerlink" title="DataFrame的构造和访问"></a>DataFrame的构造和访问</h2><p>DataFrame是带行列标签的二维表格，的每一列都是一个Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#输出对齐方面的设置</span></span><br><span class="line">scores = [[<span class="string">&#x27;男&#x27;</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">97</span>],[<span class="string">&#x27;女&#x27;</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">105</span>],[<span class="string">&#x27;女&#x27;</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">130</span>],</span><br><span class="line">[<span class="string">&#x27;男&#x27;</span>,<span class="number">112</span>,<span class="number">80</span>,<span class="number">50</span>]]</span><br><span class="line">names = [<span class="string">&#x27;刘一哥&#x27;</span>,<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;张三妹&#x27;</span>,<span class="string">&#x27;李四弟&#x27;</span>]</span><br><span class="line">courses = [<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line">df = pd.DataFrame(data = scores, index = names, columns = courses)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.values[<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">type</span>(df.values))<span class="comment">#&gt;&gt;108 &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(df.index)) <span class="comment">#&gt;&gt;[&#x27;刘一哥&#x27;, &#x27;王二姐&#x27;, &#x27;张三妹&#x27;, &#x27;李四弟&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(df.columns)) <span class="comment">#&gt;&gt;[&#x27;性别&#x27;, &#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index[<span class="number">2</span>],df.columns[<span class="number">2</span>]) <span class="comment">#&gt;&gt;张三妹 数学</span></span><br><span class="line">s1 = df[<span class="string">&#x27;语文&#x27;</span>] <span class="comment">#s1是个Series,代表&#x27;语文&#x27;那一列</span></span><br><span class="line"><span class="built_in">print</span>(s1[<span class="string">&#x27;刘一哥&#x27;</span>],s1[<span class="number">0</span>]) <span class="comment">#&gt;&gt;108 108 刘一哥语文成绩</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>][<span class="string">&#x27;刘一哥&#x27;</span>]) <span class="comment">#&gt;&gt;108 列索引先写</span></span><br><span class="line">s2 = df.loc[<span class="string">&#x27;王二姐&#x27;</span>] <span class="comment">#s2也是个Series，代表“王二姐”那一行</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&#x27;性别&#x27;</span>],s2[<span class="string">&#x27;语文&#x27;</span>],s2[<span class="number">2</span>])</span><br><span class="line"><span class="comment">#&gt;&gt;女 115 87 王二姐的性别、语文和数学分数</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line">108 &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="line">[&#x27;刘一哥&#x27;, &#x27;王二姐&#x27;, &#x27;张三妹&#x27;, &#x27;李四弟&#x27;]</span><br><span class="line">[&#x27;性别&#x27;, &#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]</span><br><span class="line">张三妹 数学</span><br><span class="line">108 108</span><br><span class="line">108</span><br><span class="line">女 115 87</span><br></pre></td></tr></table></figure><h2 id="DataFrame的切片和统计"><a href="#DataFrame的切片和统计" class="headerlink" title="DataFrame的切片和统计"></a>DataFrame的切片和统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DataFrame的切片：</span></span><br><span class="line"><span class="comment">#iloc[行选择器, 列选择器] 用下标做切片</span></span><br><span class="line"><span class="comment">#loc[行选择器, 列选择器] 用标签做切片</span></span><br><span class="line"><span class="comment">#DataFrame的切片是视图</span></span><br><span class="line"></span><br><span class="line">df2 = df.iloc[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#行切片，是视图，选1,2两行</span></span><br><span class="line">df2 = df.loc[<span class="string">&#x27;王二姐&#x27;</span>:<span class="string">&#x27;张三妹&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[:,<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#列切片(是视图)，选0、 1、 2三列</span></span><br><span class="line">df2 = df.loc[:,<span class="string">&#x27;性别&#x27;</span>:<span class="string">&#x27;数学&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学</span><br><span class="line">刘一哥   男   108   115</span><br><span class="line">王二姐   女   115    87</span><br><span class="line">张三妹   女   100    60</span><br><span class="line">李四弟   男   112    80</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[:<span class="number">2</span>,[<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#行列切片,只取第一列和第三列</span></span><br><span class="line">df2 = df.loc[:<span class="string">&#x27;王二姐&#x27;</span>,[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>]] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        语文  英语</span><br><span class="line">刘一哥   108    97</span><br><span class="line">王二姐   115   105</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.iloc[[<span class="number">1</span>,<span class="number">3</span>],<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#取第1、 3行，第2、 3列</span></span><br><span class="line">df2 = df.loc[[<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;李四弟&#x27;</span>],<span class="string">&#x27;数学&#x27;</span>:<span class="string">&#x27;英语&#x27;</span>] <span class="comment">#和上一行等价</span></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        数学  英语</span><br><span class="line">王二姐    87   105</span><br><span class="line">李四弟    80    50</span><br></pre></td></tr></table></figure><h2 id="DataFrame的分析统计"><a href="#DataFrame的分析统计" class="headerlink" title="DataFrame的分析统计"></a>DataFrame的分析统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---下面是DataFrame的分析和统计---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.T) <span class="comment">#df.T是df的转置矩阵,即行列互换的矩阵</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&#x27;语文&#x27;</span>,ascending=<span class="literal">False</span>)) <span class="comment">#按语文成绩降序排列,不会改变原来的表格，会返回一个新的表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(df.sum()[&#x27;语文&#x27;],df.mean()[&#x27;数学&#x27;],df.median()[&#x27;英语&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>].<span class="built_in">sum</span>(),df[<span class="string">&#x27;数学&#x27;</span>].mean(),df[<span class="string">&#x27;英语&#x27;</span>].median())</span><br><span class="line"><span class="comment">#&gt;&gt;435 85.5 101.0 语文分数之和、数学平均分、英语中位数</span></span><br><span class="line"><span class="comment">#df.sum()返回一个Series，每一列的和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">min</span>()[<span class="string">&#x27;语文&#x27;</span>],df.<span class="built_in">max</span>()[<span class="string">&#x27;数学&#x27;</span>])</span><br><span class="line"><span class="comment">#&gt;&gt;100 115 语文最低分，数学最高分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(df.max(axis = 1)[&#x27;王二姐&#x27;]) #&gt;&gt;115 王二姐的最高分科目的分数</span></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">max</span>(axis = <span class="number">1</span>, numeric_only=<span class="literal">True</span>)[<span class="string">&#x27;王二姐&#x27;</span>]) <span class="comment">#&gt;&gt;115 王二姐的最高分科目的分数</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;语文&#x27;</span>].idxmax()) <span class="comment">#&gt;&gt;王二姐 语文最高分所在行的标签</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;数学&#x27;</span>].argmin()) <span class="comment">#&gt;&gt;2 数学最低分所在行的行号</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[(df[<span class="string">&#x27;语文&#x27;</span>] &gt; <span class="number">100</span>) &amp; (df[<span class="string">&#x27;数学&#x27;</span>] &gt;= <span class="number">85</span>)])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort_values(....inplace=<span class="literal">True</span>,axis=<span class="number">1.</span>...)</span><br><span class="line"><span class="comment">#inplace=True,原地排序，将各列排序,即改变原来的表格</span></span><br><span class="line"><span class="comment">#axis=1,列重新排序</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;上方为原始<span class="built_in">df</span></span></span><br><span class="line">     刘一哥 王二姐 张三妹 李四弟</span><br><span class="line">性别     男     女     女     男</span><br><span class="line">语文    108    115    100    112</span><br><span class="line">数学    115     87     60     80</span><br><span class="line">英语     97    105    130     50</span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">435 85.5 101.0</span><br><span class="line">100 115</span><br><span class="line">115</span><br><span class="line">王二姐</span><br><span class="line">2</span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br></pre></td></tr></table></figure><h2 id="DataFrame的修改和增删"><a href="#DataFrame的修改和增删" class="headerlink" title="DataFrame的修改和增删"></a>DataFrame的修改和增删</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---下面是DataFrame的增删和修改---&quot;</span>)</span><br><span class="line">df.loc[<span class="string">&#x27;王二姐&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>] = df.iloc[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">150</span> <span class="comment">#修改王二姐英语和刘一哥语文成绩</span></span><br><span class="line">df[<span class="string">&#x27;物理&#x27;</span>] = [<span class="number">80</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">100</span>] <span class="comment">#为所有人添加物理成绩这一列</span></span><br><span class="line">df.insert(<span class="number">1</span>,<span class="string">&quot;体育&quot;</span>,[<span class="number">89</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">45</span>]) <span class="comment">#为所有人插入体育成绩到第1列</span></span><br><span class="line">df.loc[<span class="string">&#x27;李四弟&#x27;</span>] = [<span class="string">&#x27;男&#x27;</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>] <span class="comment">#修改李四弟全部信息</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;语文&#x27;</span>] = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>] <span class="comment">#修改所有人语文成绩</span></span><br><span class="line">df.loc[<span class="string">&#x27;钱五叔&#x27;</span>] = [<span class="string">&#x27;男&#x27;</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>] <span class="comment">#加一行</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;英语&#x27;</span>] += <span class="number">10</span> <span class="comment">#&gt;&gt;所有人英语加10分</span></span><br><span class="line">df.columns = [<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;体育&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;物理&#x27;</span>] <span class="comment">#改列标签</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;<span class="built_in">df</span>初始</span></span><br><span class="line">       性别  语文  数学  英语</span><br><span class="line">刘一哥   男   108   115    97</span><br><span class="line">王二姐   女   115    87   105</span><br><span class="line">张三妹   女   100    60   130</span><br><span class="line">李四弟   男   112    80    50</span><br><span class="line"></span><br><span class="line">       性别  体育  语文  数学  English  物理</span><br><span class="line">刘一哥   男    89    20   115      107    80</span><br><span class="line">王二姐   女    77    20    87      160    70</span><br><span class="line">张三妹   女    76    20    60      140    90</span><br><span class="line">李四弟   男   100    20   100      110   100</span><br><span class="line">钱五叔   男   100   100   100      110   100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.drop([<span class="string">&#x27;体育&#x27;</span>,<span class="string">&#x27;物理&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>) <span class="comment">#删除体育和物理成绩</span></span><br><span class="line"><span class="comment">#inplace=True,代表原数据中删除</span></span><br><span class="line">df.drop(<span class="string">&#x27;王二姐&#x27;</span>, axis = <span class="number">0</span>, inplace=<span class="literal">True</span>) <span class="comment">#删除 王二姐那一行</span></span><br><span class="line"><span class="comment">#axis = 0,代表作为行标签删除</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       性别  语文  数学  English</span><br><span class="line">刘一哥   男    20   115      107</span><br><span class="line">张三妹   女    20    60      140</span><br><span class="line">李四弟   男    20   100      110</span><br><span class="line">钱五叔   男   100   100      110</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.drop([df.index[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)], axis = <span class="number">0</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#删除第1,2行</span></span><br><span class="line">df.drop([df.columns[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment">#删除第0到2列</span></span><br></pre></td></tr></table></figure><h1 id="数据分析库pandas读写excel和csv文档"><a href="#数据分析库pandas读写excel和csv文档" class="headerlink" title="数据分析库pandas读写excel和csv文档"></a>数据分析库pandas读写excel和csv文档</h1><h2 id="用pandas读excel文档"><a href="#用pandas读excel文档" class="headerlink" title="用pandas读excel文档"></a>用pandas读excel文档</h2><ul><li>需要openpyxl(对.xlsx文件)或xlrd或xlwt支持(老的.xls文件)</li><li>读取的每张工作表都是一个DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">dt = pd.read_excel(<span class="string">&quot;excel_sample.xlsx&quot;</span>, sheet_name=[<span class="string">&#x27;销售情况&#x27;</span>,<span class="number">1</span>], index_col=<span class="number">0</span>)<span class="comment">#读取第0和第1张工作表</span></span><br><span class="line">df = dt[<span class="string">&#x27;销售情况&#x27;</span>] <span class="comment">#dt是字典,df是DataFrame</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>,<span class="number">0</span>], df.loc[<span class="string">&#x27;睡袋&#x27;</span>,<span class="string">&#x27;数量&#x27;</span>]) <span class="comment">#&gt;&gt;4080 4080</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.isnull(df.loc[<span class="string">&#x27;彩盒&#x27;</span>,<span class="string">&#x27;销售额&#x27;</span>])) <span class="comment">#&gt;&gt;True</span></span><br><span class="line">df.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>) <span class="comment">#空的数据值是NaN,将所有NaNa用0替换</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;彩盒&#x27;</span>,<span class="string">&#x27;销售额&#x27;</span>],df.iloc[<span class="number">2</span>,<span class="number">2</span>]) <span class="comment">#&gt;&gt;0.0 0.0</span></span><br></pre></td></tr></table></figure><h2 id="用pandas写excel文档"><a href="#用pandas写excel文档" class="headerlink" title="用pandas写excel文档"></a>用pandas写excel文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(filename,sheet_name=<span class="string">&quot;Sheet1&quot;</span>,na_rep=<span class="string">&#x27;&#x27;</span>,........)</span><br></pre></td></tr></table></figure><ul><li>将DataFrame对象df中的数据写入excel文档filename中的”Sheet1”工作表,NaN用’’代替。</li><li>会覆盖原有的filename文件</li><li>如果要在一个excel文档中写入多个工作表， 需要用<code>ExcelWrite</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(接上面程序）</span></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&quot;new.xlsx&quot;</span>) <span class="comment">#创建ExcelWriter对象</span></span><br><span class="line">df.to_excel(writer,sheet_name=<span class="string">&quot;S1&quot;</span>)</span><br><span class="line">df.T.to_excel(writer,sheet_name=<span class="string">&quot;S2&quot;</span>) <span class="comment">#转置矩阵写入</span></span><br><span class="line">df.sort_values(<span class="string">&#x27;销售额&#x27;</span>,ascending= <span class="literal">False</span>).to_excel(writer, sheet_name=<span class="string">&quot;S3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按销售额排序的新DataFrame写入工作表S3</span></span><br><span class="line">df[<span class="string">&#x27;销售额&#x27;</span>].to_excel(writer,sheet_name=<span class="string">&quot;S4&quot;</span>) <span class="comment">#只写入一列</span></span><br><span class="line">writer.save()</span><br></pre></td></tr></table></figure><blockquote><p>Pandas不可以指定单元格的样式openxl可以</p></blockquote><h2 id="用pandas读写csv文件"><a href="#用pandas读写csv文件" class="headerlink" title="用pandas读写csv文件"></a>用pandas读写csv文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&quot;result.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,na_rep=<span class="string">&#x27;NA&#x27;</span>,</span><br><span class="line">float_format=<span class="string">&quot;%.2f&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;result.csv&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="用matplotlib进行数据展示"><a href="#用matplotlib进行数据展示" class="headerlink" title="用matplotlib进行数据展示"></a>用matplotlib进行数据展示</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h1 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h1><h2 id="绘制基本直方图"><a href="#绘制基本直方图" class="headerlink" title="绘制基本直方图"></a>绘制基本直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#以后 plt 等价于 matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"><span class="comment">#设置中文支持,中文字体为简体黑体</span></span><br><span class="line">ax = plt.figure().add_subplot() <span class="comment">#建图，获取子图对象ax</span></span><br><span class="line">ax.bar(x = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), height = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), width = <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#x表示4个柱子中心横坐标分别是0.2,0.6,0.8,1</span></span><br><span class="line"><span class="comment">#height表示4个柱子高度分别是1,2,3,0.5</span></span><br><span class="line"><span class="comment">#width表示柱子宽度0.1</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;我的直方图&#x27;</span>) <span class="comment">#设置标题</span></span><br><span class="line">plt.show() <span class="comment">#显示绘图结果</span></span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%9F%BA%E6%9C%AC%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制基本直方图"><h2 id="绘制横向直方图"><a href="#绘制横向直方图" class="headerlink" title="绘制横向直方图"></a>绘制横向直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#纵向</span></span><br><span class="line">ax.bar(x = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), height = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), width = <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#横向</span></span><br><span class="line">ax.barh(y = (<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.2</span>), width = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0.5</span>), height = <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E6%A8%AA%E5%90%91%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制横向直方图"><h2 id="绘制堆叠直方图"><a href="#绘制堆叠直方图" class="headerlink" title="绘制堆叠直方图"></a>绘制堆叠直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ax = plt.figure().add_subplot()</span><br><span class="line">labels = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>]</span><br><span class="line">num1 = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">35</span>] <span class="comment">#Dept1的数据</span></span><br><span class="line">num2 = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>] <span class="comment">#Dept2的数据</span></span><br><span class="line">cordx = <span class="built_in">range</span>(<span class="built_in">len</span>(num1)) <span class="comment">#x轴刻度位置</span></span><br><span class="line">rects1 = ax.bar(x = cordx, height=num1, width=<span class="number">0.5</span>, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&quot;Dept1&quot;</span>)</span><br><span class="line">rects2 = ax.bar(x = cordx, height=num2, width=<span class="number">0.5</span>, color=<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">label=<span class="string">&quot;Dept2&quot;</span>, bottom=num1)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">100</span>) <span class="comment">#y轴坐标范围</span></span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Profit&quot;</span>) <span class="comment">#y轴含义(标签)</span></span><br><span class="line">ax.set_xticks(cordx) <span class="comment">#设置x轴刻度位置</span></span><br><span class="line">ax.set_xticklabels(labels) <span class="comment">#设置x轴刻度下方文字</span></span><br><span class="line">ax.set_xlabel(<span class="string">&quot;In year 2020&quot;</span>) <span class="comment">#x轴含义(标签)</span></span><br><span class="line">ax.set_title(<span class="string">&quot;My Company&quot;</span>)</span><br><span class="line">ax.legend() <span class="comment">#在右上角显示图例说明</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%A0%86%E5%8F%A0%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制堆叠直方图"><h2 id="绘制对比直方图-有多组数据）"><a href="#绘制对比直方图-有多组数据）" class="headerlink" title="绘制对比直方图(有多组数据）"></a>绘制对比直方图(有多组数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>)).add_subplot()<span class="comment">#建图，获取子图对象ax</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">400</span>) <span class="comment">#指定y轴坐标范围</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">80</span>) <span class="comment">#指定x轴坐标范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是3组直方图的数据</span></span><br><span class="line">x1 = [<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">57</span>] <span class="comment">#第一组直方图每个柱子中心点的横坐标</span></span><br><span class="line">x2 = [<span class="number">13</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">43</span>, <span class="number">53</span>, <span class="number">63</span>] <span class="comment">#第二组直方图每个柱子中心点的横坐标</span></span><br><span class="line">x3 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>] <span class="comment">#第三组直方图每个柱子中心点的横坐标</span></span><br><span class="line">y1 = [<span class="number">41</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">69</span>, <span class="number">39</span>, <span class="number">14</span>] <span class="comment">#第一组直方图每个柱子的高度</span></span><br><span class="line">y2 = [<span class="number">123</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">105</span>, <span class="number">79</span>, <span class="number">37</span>] <span class="comment">#第二组直方图每个柱子的高度</span></span><br><span class="line">y3 = [<span class="number">124</span>, <span class="number">91</span>, <span class="number">204</span>, <span class="number">264</span>, <span class="number">221</span>, <span class="number">175</span>] <span class="comment">#第三组直方图每个柱子的高度</span></span><br><span class="line"></span><br><span class="line">rects1 = ax.bar(x1, y1, facecolor=<span class="string">&#x27;red&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Iphone&#x27;</span>)</span><br><span class="line">rects2 = ax.bar(x2, y2, facecolor=<span class="string">&#x27;green&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Huawei&#x27;</span>)</span><br><span class="line">rects3 = ax.bar(x3, y3, facecolor=<span class="string">&#x27;blue&#x27;</span>, width=<span class="number">3</span>, label=<span class="string">&#x27;Xiaomi&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xticks(x3) <span class="comment">#x轴在x3中的各坐标点下面加刻度</span></span><br><span class="line">ax.set_xticklabels((<span class="string">&#x27;A1&#x27;</span>,<span class="string">&#x27;A2&#x27;</span>,<span class="string">&#x27;A3&#x27;</span>,<span class="string">&#x27;A4&#x27;</span>,<span class="string">&#x27;A5&#x27;</span>,<span class="string">&#x27;A6&#x27;</span>))</span><br><span class="line"><span class="comment">#指定x轴上每一刻度下方的文字</span></span><br><span class="line">ax.legend() <span class="comment">#显示右上角三组图的说明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">ax,rects</span>): <span class="comment">#在rects的每个柱子顶端标注数值</span></span><br><span class="line"><span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">height = rect.get_height()</span><br><span class="line">ax.text(rect.get_x() + rect.get_width()/<span class="number">2</span>, height+<span class="number">14</span>, <span class="built_in">str</span>(height), rotation=<span class="number">90</span>) <span class="comment">#文字旋转90度</span></span><br><span class="line">label(ax,rects1)</span><br><span class="line">label(ax,rects2)</span><br><span class="line">label(ax,rects3)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%AF%B9%E6%AF%94%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="绘制对比直方图"><h2 id="绘制散点、折线图"><a href="#绘制散点、折线图" class="headerlink" title="绘制散点、折线图"></a>绘制散点、折线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math,random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawPlot</span>(<span class="params">ax</span>):</span><br><span class="line">    xs = [i / <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>)] <span class="comment">#1500个点的横坐标，间隔0.01</span></span><br><span class="line">    ys = [<span class="number">10</span>*math.sin(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">    <span class="comment">#对应曲线y=10*sin(x)上的1500个点的y坐标</span></span><br><span class="line">    ax.plot(xs, ys, <span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;Beijing&quot;</span>) <span class="comment">#画曲线y=10*sin(x)</span></span><br><span class="line">    ys = <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">18</span>, <span class="number">18</span>))</span><br><span class="line">    random.shuffle(ys)</span><br><span class="line">    ax.scatter(<span class="built_in">range</span>(<span class="number">16</span>), ys[:<span class="number">16</span>], c = <span class="string">&quot;blue&quot;</span>) <span class="comment">#画散点</span></span><br><span class="line">    ax.plot(<span class="built_in">range</span>(<span class="number">16</span>), ys[:<span class="number">16</span>], <span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;Shanghai&quot;</span>) <span class="comment">#画折线</span></span><br><span class="line">    ax.legend() <span class="comment">#显示右上角的各条折线说明</span></span><br><span class="line">    ax.set_xticks(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#x轴在坐标0,1...15处加刻度</span></span><br><span class="line">    ax.set_xticklabels(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#指定x轴每个刻度下方显示的文字</span></span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>),dpi=<span class="number">100</span>).add_subplot() <span class="comment">#图像长宽和清晰度</span></span><br><span class="line">drawPlot(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E6%8A%98%E7%BA%BF%E5%9B%BE.png" class="" title="绘制散点折线图"><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawPie</span>(<span class="params">ax</span>):</span><br><span class="line">lbs = (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>) <span class="comment">#四个扇区的标签</span></span><br><span class="line">sectors = [<span class="number">16</span>, <span class="number">29.55</span>, <span class="number">44.45</span>, <span class="number">10</span>] <span class="comment">#四个扇区的份额（百分比）</span></span><br><span class="line">expl = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment">#四个扇区的突出程度</span></span><br><span class="line">ax.pie(x=sectors, labels=lbs, explode=expl, autopct=<span class="string">&#x27;%.2f&#x27;</span>, shadow=<span class="literal">True</span>, labeldistance=<span class="number">1.1</span>, pctdistance=<span class="number">0.6</span>, startangle=<span class="number">90</span>)</span><br><span class="line">    <span class="comment">#autopct自动填充数字的格式，shadow是否有阴影，labeldistance扇区标签的距离，pctdistance饼内标签距离圆心距离是半径的多少倍，startangle画图的起始位置逆时针顺序</span></span><br><span class="line">ax.set_title(<span class="string">&quot;pie sample&quot;</span>) <span class="comment">#饼图标题</span></span><br><span class="line">ax = plt.figure().add_subplot()</span><br><span class="line">drawPie(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E9%A5%BC%E5%9B%BE.png" class="" title="绘制饼图"><h2 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>).reshape(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">#生成一个5行6列,元素[0,100]内的随机矩阵</span></span><br><span class="line">xlabels = [<span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Chengdu&#x27;</span>, <span class="string">&#x27;Guangzhou&#x27;</span>, <span class="string">&#x27;Hangzhou&#x27;</span>, <span class="string">&#x27;Wuhan&#x27;</span>]</span><br><span class="line">ylabels = [<span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ax = plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>)).add_subplot()</span><br><span class="line">ax.set_yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(ylabels))) <span class="comment">#y轴在坐标[0,len(ylabels)) 处加刻度</span></span><br><span class="line">ax.set_yticklabels(ylabels) <span class="comment">#设置y轴刻度文字</span></span><br><span class="line">ax.set_xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(xlabels)))</span><br><span class="line">ax.set_xticklabels(xlabels)</span><br><span class="line"></span><br><span class="line">heatMp = ax.imshow(data, cmap=plt.cm.hot, aspect=<span class="string">&#x27;auto&#x27;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#imshow(data矩阵, cmap=plt.cm.cold冷图, aspect, vmin-vmx指明热力图的最大最小值 不写取数据最大最小)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#热力图写数据标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xlabels)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ylabels)):</span><br><span class="line">ax.text(i, j, data[j][i], ha=<span class="string">&quot;center&quot;</span>, va=<span class="string">&quot;center&quot;</span>, color=<span class="string">&quot;blue&quot;</span>, size=<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar(heatMp) <span class="comment">#绘制右边的颜色-数值对照柱</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>, ha=<span class="string">&quot;right&quot;</span>) <span class="comment">#将x轴刻度文字进行旋转，且水平方向右对齐</span></span><br><span class="line">plt.title(<span class="string">&quot;Sales Volume(ton)&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E7%83%AD%E5%8A%9B%E5%9B%BE.png" class="" title="绘制热力图"><h2 id="绘制雷达图"><a href="#绘制雷达图" class="headerlink" title="绘制雷达图"></a>绘制雷达图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams <span class="comment">#处理汉字用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawRadar</span>(<span class="params">ax</span>):</span><br><span class="line">    pi = <span class="number">3.1415926</span></span><br><span class="line">    labels = [<span class="string">&#x27;EQ&#x27;</span>,<span class="string">&#x27;IQ&#x27;</span>,<span class="string">&#x27;人缘&#x27;</span>,<span class="string">&#x27;魅力&#x27;</span>,<span class="string">&#x27;财富&#x27;</span>,<span class="string">&#x27;体力&#x27;</span>] <span class="comment">#6个属性的名称</span></span><br><span class="line">    attrNum = <span class="built_in">len</span>(labels) <span class="comment">#attrNum是属性种类数，此处等于6</span></span><br><span class="line">    data = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">2</span>] <span class="comment">#六个属性的值</span></span><br><span class="line">    angles = [<span class="number">2</span>*pi*i/attrNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(attrNum)]</span><br><span class="line">    <span class="comment">#angles是以弧度为单位的6个属性对应的6条半径线的角度</span></span><br><span class="line">    angles2 = [x * <span class="number">180</span>/pi <span class="keyword">for</span> x <span class="keyword">in</span> angles]</span><br><span class="line">    <span class="comment">#angles2是以角度为单位的6个属性对应的半径线的角度</span></span><br><span class="line">    ax.set_ylim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">#限定半径线上的坐标范围，限定模长</span></span><br><span class="line">    ax.set_thetagrids(angles2, labels, fontproperties=<span class="string">&quot;SimHei&quot;</span>)</span><br><span class="line">    <span class="comment">#绘制6个属性对应的6条半径(六条半径角度, 属性, 字体样式)</span></span><br><span class="line">    ax.fill(angles, data, facecolor=<span class="string">&#x27;g&#x27;</span>, alpha=<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment">#填充,facecolor=&#x27;g&#x27;绿色填充,alpha:透明度</span></span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"><span class="comment">#处理汉字</span></span><br><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&quot;polar&quot;</span>) <span class="comment">#生成极坐标形式子图</span></span><br><span class="line">drawRadar(ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" class="" title="绘制雷达图"><h2 id="绘制多层雷达图"><a href="#绘制多层雷达图" class="headerlink" title="绘制多层雷达图"></a>绘制多层雷达图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&#x27;font.family&#x27;</span>] = rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line">labels = [<span class="string">&#x27;EQ&#x27;</span>, <span class="string">&#x27;IQ&#x27;</span>, <span class="string">&#x27;人缘&#x27;</span>, <span class="string">&#x27;魅力&#x27;</span>, <span class="string">&#x27;财富&#x27;</span>, <span class="string">&#x27;体力&#x27;</span>]  <span class="comment"># 6个属性的名称</span></span><br><span class="line">attrNum = <span class="built_in">len</span>(labels)</span><br><span class="line">names = (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>)</span><br><span class="line">data = [[<span class="number">0.40</span>, <span class="number">0.32</span>, <span class="number">0.35</span>], [<span class="number">0.85</span>, <span class="number">0.35</span>, <span class="number">0.30</span>],</span><br><span class="line">        [<span class="number">0.40</span>, <span class="number">0.32</span>, <span class="number">0.35</span>], [<span class="number">0.40</span>, <span class="number">0.82</span>, <span class="number">0.75</span>],</span><br><span class="line">        [<span class="number">0.14</span>, <span class="number">0.12</span>, <span class="number">0.35</span>], [<span class="number">0.80</span>, <span class="number">0.92</span>, <span class="number">0.35</span>]]  <span class="comment"># 三个人的数据</span></span><br><span class="line">angles = [<span class="number">2</span> * pi * i / attrNum <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(attrNum)]</span><br><span class="line">angles2 = [x * <span class="number">180</span> / pi <span class="keyword">for</span> x <span class="keyword">in</span> angles]</span><br><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&quot;polar&quot;</span>)</span><br><span class="line">ax.fill(angles, data, alpha=<span class="number">0.25</span>)</span><br><span class="line">ax.set_thetagrids(angles2, labels)</span><br><span class="line">ax.set_title(<span class="string">&#x27;三巨头人格分析&#x27;</span>, y=<span class="number">1.05</span>)  <span class="comment"># y指明标题垂直位置</span></span><br><span class="line">ax.legend(names, loc=(<span class="number">0.95</span>, <span class="number">0.9</span>))  <span class="comment"># 画出右上角不同人的颜色说明</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E7%BB%98%E5%88%B6%E5%A4%9A%E5%B1%82%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" class="" title="绘制多层雷达图"><h2 id="多子图绘制"><a href="#多子图绘制" class="headerlink" title="多子图绘制"></a>多子图绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序中的import、汉字处理及drawRadar、 drawPie、 drawPlot函数略，见前面程序</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 窗口分割成2*2，取位于第1个方格的子图</span></span><br><span class="line">drawPie(ax)</span><br><span class="line"></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, projection=<span class="string">&quot;polar&quot;</span>)</span><br><span class="line">drawRadar(ax)</span><br><span class="line"></span><br><span class="line">ax = plt.subplot2grid((<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 或写成: ax = fig.add_subplot(2,1,2)</span></span><br><span class="line">drawPlot(ax)</span><br><span class="line"></span><br><span class="line">plt.figtext(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="string">&#x27;subplot sample&#x27;</span>)  <span class="comment"># 显示左下角的图像标题</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2023/02/01/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/%E5%A4%9A%E5%AD%90%E5%9B%BE%E7%BB%98%E5%88%B6.png" class="" title="多子图绘制"><h1 id="词云的使用"><a href="#词云的使用" class="headerlink" title="词云的使用"></a>词云的使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Version:python3.6.0</span></span><br><span class="line"><span class="comment"># 添加自定义分词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path  <span class="comment"># 用来获取文档的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 词云</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 词云生成工具</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</span><br><span class="line"><span class="comment"># 需要对中文进行处理</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图</span></span><br><span class="line">bg = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;love.png&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前的项目文件加的路径</span></span><br><span class="line">d = path.dirname(__file__)</span><br><span class="line"><span class="comment"># 读取停用词表</span></span><br><span class="line">stopwords_path = <span class="string">&#x27;stopwords.txt&#x27;</span></span><br><span class="line"><span class="comment"># 添加需要自定以的分词</span></span><br><span class="line"><span class="comment"># jieba.add_word(&quot;叶文洁&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取要分析的文本</span></span><br><span class="line">text_path = <span class="string">&quot;sanguoyanyiutf8.txt&quot;</span></span><br><span class="line"><span class="comment"># 读取要分析的文本，读取格式</span></span><br><span class="line">text = <span class="built_in">open</span>(path.join(d, text_path), encoding=<span class="string">&quot;utf8&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义个函数式用于分词</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiebaclearText</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 定义一个空的列表，将去除的停用词的分词保存</span></span><br><span class="line">    mywordList = []</span><br><span class="line">    <span class="comment"># 进行分词</span></span><br><span class="line">    seg_list = jieba.cut(text, cut_all=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 将一个generator的内容用/连接</span></span><br><span class="line">    listStr = <span class="string">&#x27;/&#x27;</span>.join(seg_list)</span><br><span class="line">    <span class="comment"># 打开停用词表</span></span><br><span class="line">    f_stop = <span class="built_in">open</span>(stopwords_path, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    <span class="comment"># 读取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f_stop_text = f_stop.read()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f_stop.close()  <span class="comment"># 关闭资源</span></span><br><span class="line">    <span class="comment"># 将停用词格式化，用\n分开，返回一个列表</span></span><br><span class="line">    f_stop_seg_list = f_stop_text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># 对默认模式分词的进行遍历，去除停用词</span></span><br><span class="line">    <span class="keyword">for</span> myword <span class="keyword">in</span> listStr.split(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">        <span class="comment"># 去除停用词</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (myword.split()) <span class="keyword">in</span> f_stop_seg_list <span class="keyword">and</span> <span class="built_in">len</span>(myword.strip()) &gt; <span class="number">1</span>:</span><br><span class="line">            mywordList.append(myword)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(mywordList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text1 = jiebaclearText(text)</span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 设置背景为白色，默认为黑色</span></span><br><span class="line">    width=<span class="number">990</span>,  <span class="comment"># 设置图片的宽度</span></span><br><span class="line">    height=<span class="number">440</span>,  <span class="comment"># 设置图片的高度</span></span><br><span class="line">    margin=<span class="number">10</span>,  <span class="comment"># 设置图片的边缘</span></span><br><span class="line"></span><br><span class="line">    max_font_size=<span class="number">50</span>,</span><br><span class="line">    random_state=<span class="number">30</span>,</span><br><span class="line">    font_path=<span class="string">&#x27;C:/Windows/Fonts/simkai.ttf&#x27;</span>  <span class="comment"># 中文处理，用系统自带的字体</span></span><br><span class="line">).generate(text1)</span><br><span class="line"><span class="comment"># 为图片设置字体</span></span><br><span class="line">my_font = fm.FontProperties(fname=<span class="string">&#x27;C:/Windows/Fonts/simkai.ttf&#x27;</span>)</span><br><span class="line"><span class="comment"># 产生背景图片，基于彩色图像的颜色生成器</span></span><br><span class="line">image_colors = ImageColorGenerator(bg)</span><br><span class="line"><span class="comment"># 开始画图</span></span><br><span class="line">plt.imshow(wc)</span><br><span class="line"><span class="comment"># 为云图去掉坐标轴</span></span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line"><span class="comment"># 画云图，显示</span></span><br><span class="line"><span class="comment"># 保存云图</span></span><br><span class="line">wc.to_file(<span class="string">&quot;sgresult3.png&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十一章数据分析和展示</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第十章玩转Python生态</title>
    <link href="http://hibiscidai.com/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/"/>
    <id>http://hibiscidai.com/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/</id>
    <published>2023-01-30T00:00:00.000Z</published>
    <updated>2023-02-08T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81.png" class="" title="实用Python程序设计MOOC-第十章玩转Python生态"><p>实用Python程序设计MOOC-第十章玩转Python生态</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第十章玩转Python生态"><a href="#实用Python程序设计MOOC-第十章玩转Python生态" class="headerlink" title="实用Python程序设计MOOC-第十章玩转Python生态"></a>实用Python程序设计MOOC-第十章玩转Python生态</h1><h1 id="使用Python的库"><a href="#使用Python的库" class="headerlink" title="使用Python的库"></a>使用Python的库</h1><ul><li>Python自带的库</li></ul><p>math，re，datetime，turtle，random</p><ul><li>无数第三方的库</li></ul><p>Pillow，jieba，request，matplotlib</p><h1 id="安装Python第三方库"><a href="#安装Python第三方库" class="headerlink" title="安装Python第三方库"></a>安装Python第三方库</h1><h2 id="cmd窗口安装"><a href="#cmd窗口安装" class="headerlink" title="cmd窗口安装"></a>cmd窗口安装</h2><p>1) 进入cmd命令行窗口<br>2) 进入安装Python的文件夹， 默认通常是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Loca1\Programs\Python\Python37</span><br></pre></td></tr></table></figure><p>不知道的话查找python.exe可以找到<br>3) 再进入scripts文件夹<br>4) pip install库名</p><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/python%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" class="" title="python安装目录"><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/pip%E5%91%BD%E4%BB%A4.png" class="" title="pip命令"><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/pip%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85pillow%E5%BA%93.png" class="" title="pip命令安装pillow库"><h2 id="pychram安装"><a href="#pychram安装" class="headerlink" title="pychram安装"></a>pychram安装</h2><p>file - seting - project:xxx - Projet interpreter/Python解释器 - 点加号 -搜索第三方库 - 安装</p><h1 id="Import的用法"><a href="#Import的用法" class="headerlink" title="Import的用法"></a>Import的用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle<span class="comment">#turtle是一个类</span></span><br><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">turtle.fd()</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tt<span class="comment">#此后tt等价于turtle</span></span><br><span class="line">tt.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">tt.fd(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image<span class="comment">#PIL.Image是类中的类</span></span><br><span class="line">img = PIL.Image.<span class="built_in">open</span>(<span class="string">&quot;C:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image<span class="comment">#从PIL库导入Image类进行图像处理</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image, PIL.ImageDraw, PIL.ImageFont</span><br><span class="line">img = PIL.Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)<span class="comment">#将图像文件载入对象img</span></span><br><span class="line">draw = PIL.ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img, 上画图、写字</span></span><br><span class="line">myFont = PIL.ImageFont.truetype(<span class="string">&quot;C:\\Windows\\Fonts\\simhei.ttf&quot;</span>，<span class="number">164</span>)</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>) <span class="comment">#将图像文件载入对象img</span></span><br><span class="line">draw = ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img,上画图、写字</span></span><br><span class="line">myFont = ImageFont.truetype(<span class="string">&quot;C:\\Windows\\Fonts\\simhei.ttf&quot;</span>, <span class="number">164</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, colors, Alignment</span><br><span class="line">boldRedFont = Font(size = <span class="number">18</span>, name = <span class="string">&#x27;Times New Roman&#x27;</span>, bold = <span class="literal">True</span>, color = colors.RED)</span><br><span class="line">alignment = Alignment(horizontal = <span class="string">&#x27;left&#x27;</span>, vertical = <span class="string">&#x27;center&#x27;</span> )</span><br></pre></td></tr></table></figure><ul><li><p>datetime库处理时间相关</p></li><li><p>random库处理随机数相关</p></li><li><p>jieba库进行分词</p></li><li><p>openpyxl处理excel文档</p></li><li><p>Pillow处理图像</p></li></ul><h1 id="用datetime库处理日期、时间"><a href="#用datetime库处理日期、时间" class="headerlink" title="用datetime库处理日期、时间"></a>用datetime库处理日期、时间</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime<span class="comment">#导入datetime模块</span></span><br><span class="line">dtBirth = datetime.date (<span class="number">2000</span>, <span class="number">9</span>, <span class="number">27</span>)<span class="comment">#创建日期对象，日期为2000年9月27日</span></span><br><span class="line"><span class="built_in">print</span>(dtBirth.weekday()) <span class="comment">#&gt;&gt;2 输出dtBirth代表的日期是星期几,0表示星期一</span></span><br><span class="line"></span><br><span class="line">dtNow = datetime.date.today() <span class="comment">#取今天日期,假设是2020年8月15日</span></span><br><span class="line"><span class="built_in">print</span> (dtBirth &lt; dtNow)<span class="comment">#&gt;&gt;True 日期可以比大小</span></span><br><span class="line"></span><br><span class="line">life = dtNow - dtBirth <span class="comment">#取两个日期的时间差</span></span><br><span class="line"><span class="built_in">print</span> (life.days, life.total_seconds()) <span class="comment">#&gt;&gt; 7262 627436800.0</span></span><br><span class="line"><span class="comment">#两个日期相差7262天，即627436800.0秒</span></span><br><span class="line"></span><br><span class="line">delta = datetime.timedelta(days = -<span class="number">10</span>) <span class="comment">#构造时间差对象，时间差为-10天</span></span><br><span class="line">newDate = dtNow + delta<span class="comment">#newDate代表的日期是dtNow的日期往前数10天</span></span><br><span class="line"><span class="built_in">print</span> (newDate.year, newDate.month, newDate.day, newDate.weekday())<span class="comment">#&gt;&gt;2020 8 5 2 2020年8月5日星期三</span></span><br><span class="line"><span class="built_in">print</span> (newDate.strftime(<span class="string">r&#x27;%m/%d/%Y&#x27;</span>)) <span class="comment">#&gt;&gt;08/05/2020</span></span><br><span class="line"></span><br><span class="line">newDate = datetime.datetime.strptime(<span class="string">&quot;2020.08.05&quot;</span>, <span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(newDate.strftime(<span class="string">&quot;%Y%m%d&quot;</span>))<span class="comment">#&gt;&gt;20200805</span></span><br></pre></td></tr></table></figure><h2 id="处理时刻"><a href="#处理时刻" class="headerlink" title="处理时刻"></a>处理时刻</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">tm = datetime.datetime.now()<span class="comment">#取当前时刻，精确到微秒</span></span><br><span class="line"><span class="built_in">print</span>(tm.year, tm.month, tm.day, tm.hour, tm.minute, tm.second, tm.microsecond)<span class="comment">#&gt;&gt;2020 8 15 20 32 53 899669 假设当前时刻是2020年8月15日20时32分53秒899669微秒</span></span><br><span class="line"></span><br><span class="line">tm = datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">0</span>)<span class="comment">#构造一个时刻,2017年8月10日15时56分10秒0微秒</span></span><br><span class="line"><span class="built_in">print</span>(tm.strftime(<span class="string">&quot;%Y%m%d %H:%M:%S&quot;</span>))<span class="comment">#&gt;&gt;20170810 15:56:10</span></span><br><span class="line"><span class="built_in">print</span>(tm.strftime(<span class="string">&quot;%Y%m%d %I:%M:%S %p&quot;</span>)) <span class="comment">#20170810 03:56:10 PM</span></span><br><span class="line"></span><br><span class="line">tm2 = datetime.datetime.strptime(<span class="string">&quot;2013.08.10 22:31:24&quot;</span>, <span class="string">&quot;%Y.%m.%d %H:%M:%S&quot;</span>)<span class="comment">#由字符串生成一个时间对象 </span></span><br><span class="line">delta = tm - tm2<span class="comment">#求两个时间的时间差</span></span><br><span class="line"><span class="built_in">print</span>(delta.days, delta.seconds, delta.total_seconds())</span><br><span class="line"><span class="comment">#&gt;&gt;1460 62686 126206686.0 #时间差是1460天零62686秒, 总共126206686.0秒</span></span><br><span class="line"></span><br><span class="line">delta = tm2 - tm</span><br><span class="line"><span class="built_in">print</span>(delta.days, delta.seconds, delta.total_seconds())<span class="comment">#&gt;&gt;-1461 23714 -126206686.0</span></span><br><span class="line">delta = datetime.timedelta(days = <span class="number">10</span>, hours = <span class="number">10</span>, minutes = <span class="number">30</span>, seconds = <span class="number">20</span>)<span class="comment">#构造一个时间差，10天10小时30分20秒</span></span><br><span class="line"></span><br><span class="line">tm2 = tm + delta</span><br><span class="line"><span class="built_in">print</span>(tm2.strftime(<span class="string">&quot;%Y%m%d %H:%M:%S&quot;</span>)) <span class="comment">#&gt;&gt;20170821 02:26:30</span></span><br></pre></td></tr></table></figure><blockquote><p>datetime局限<br>能处理的时间是公元1年至9999年</p></blockquote><h1 id="用random库处理随机事务"><a href="#用random库处理随机事务" class="headerlink" title="用random库处理随机事务"></a>用random库处理随机事务</h1><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">random.random()</td><td style="text-align:center">随机生成一个[0, 1]之间的数</td></tr><tr><td style="text-align:center">random.uniform(x, y)</td><td style="text-align:center">随机生成一个[x,y]之间的数(含两端，下同)。x,y可以是小数</td></tr><tr><td style="text-align:center">random.randint(x, y)</td><td style="text-align:center">随机生成个[x,y]之间的整数。x,y都是整数</td></tr><tr><td style="text-align:center">random.randrange(x, y, z)</td><td style="text-align:center">在range(x, y, z)中随机取一个数</td></tr><tr><td style="text-align:center">random.choice(x)</td><td style="text-align:center">从序列x中随机取一个元素。x可以是为列表、元组、字符串</td></tr><tr><td style="text-align:center">random.shuffle(x)</td><td style="text-align:center">将列表x的元素顺序随机打乱</td></tr><tr><td style="text-align:center">random.sample(x, n)</td><td style="text-align:center">从序列x中随机取一个长度为n的子序列。x可以是元组、列表、集合</td></tr><tr><td style="text-align:center">random.seed(x)</td><td style="text-align:center">设置随机种子为x。x可以是个数、元组、字符串</td></tr></tbody></table></div><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())<span class="comment">#&gt;&gt;0.5502568034876353</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.2</span>, <span class="number">7.8</span>))<span class="comment">#&gt;&gt;5.147405813383391</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randint(-<span class="number">20</span>, <span class="number">70</span>))<span class="comment">#&gt;&gt;20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>, <span class="number">20</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt;17 &quot;2 5 8 11 14 17 (20不算)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&quot;hello,world&quot;</span>)) <span class="comment">#&gt;&gt;d</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="number">34.6</span>, <span class="string">&#x27;jack&#x27;</span>]))<span class="comment">#&gt;&gt;ok</span></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[5, 3, 4, 2, 1, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.sample(lst, <span class="number">3</span>))<span class="comment">#&gt;&gt;[6, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="设置随机种子"><a href="#设置随机种子" class="headerlink" title="设置随机种子"></a>设置随机种子</h3><p>生活中真实的随机数是不可预测的，当计算机中初始条件设置后是可以预测的。<br>正常情况（缺省）运行random时候是以当前的时间来作为种子，当种子一样时候，生成的随机数是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">2</span>)<span class="comment">#或random.seed(&quot;ok&quot;)....种子可以是随便什么数、字符串...</span></span><br><span class="line"><span class="comment">#则下面程序每次运行结果都一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.2</span>, <span class="number">7.8</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randint(-<span class="number">20</span>, <span class="number">70</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>, <span class="number">30</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&quot;hello,world&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="number">34.6</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(random.sample(lst, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="实现4人玩牌的发牌模拟"><a href="#实现4人玩牌的发牌模拟" class="headerlink" title="实现4人玩牌的发牌模拟"></a>实现4人玩牌的发牌模拟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">cards = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>)]</span><br><span class="line">cards.extend(<span class="built_in">list</span>(<span class="string">&quot;JQKA&quot;</span>))  <span class="comment"># cards是[&#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;10&#x27;，&#x27;J&#x27;，&#x27;Q&#x27;, &#x27;K&#x27;, &#x27;A&#x27;]</span></span><br><span class="line">allCards = []  <span class="comment"># 一副牌</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">&quot;♣♦♥♠&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cards:</span><br><span class="line">        allCards.append(s + c)  <span class="comment"># allCards元素形式如:&#x27;♠3&#x27;</span></span><br><span class="line"></span><br><span class="line">random.shuffle(allCards)  <span class="comment"># 随机打乱52张牌</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    onePlayer = allCards[i::<span class="number">4</span>]  <span class="comment"># 每个玩家都是隔三张牌取一张</span></span><br><span class="line">    onePlayer.sort()  <span class="comment"># 扑克牌排序规则略复杂，这个排序不太完美</span></span><br><span class="line">    <span class="built_in">print</span>(onePlayer)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;♠4&#x27;, &#x27;♠8&#x27;, &#x27;♠K&#x27;, &#x27;♠Q&#x27;, &#x27;♣2&#x27;, &#x27;♣J&#x27;, &#x27;♥3&#x27;, &#x27;♥8&#x27;, &#x27;♥K&#x27;, &#x27;♦10&#x27;, &#x27;♦6&#x27;, &#x27;♦J&#x27;, &#x27;♦Q&#x27;]</span><br><span class="line">[&#x27;♠2&#x27;, &#x27;♠3&#x27;, &#x27;♠6&#x27;, &#x27;♠J&#x27;, &#x27;♣10&#x27;, &#x27;♣7&#x27;, &#x27;♣Q&#x27;, &#x27;♥10&#x27;, &#x27;♥4&#x27;, &#x27;♥5&#x27;, &#x27;♥A&#x27;, &#x27;♦2&#x27;, &#x27;♦8&#x27;]</span><br><span class="line">[&#x27;♠7&#x27;, &#x27;♠9&#x27;, &#x27;♣3&#x27;, &#x27;♣4&#x27;, &#x27;♣8&#x27;, &#x27;♣K&#x27;, &#x27;♥2&#x27;, &#x27;♥6&#x27;, &#x27;♥Q&#x27;, &#x27;♦3&#x27;, &#x27;♦7&#x27;, &#x27;♦9&#x27;, &#x27;♦A&#x27;]</span><br><span class="line">[&#x27;♠10&#x27;, &#x27;♠5&#x27;, &#x27;♠A&#x27;, &#x27;♣5&#x27;, &#x27;♣6&#x27;, &#x27;♣9&#x27;, &#x27;♣A&#x27;, &#x27;♥7&#x27;, &#x27;♥9&#x27;, &#x27;♥J&#x27;, &#x27;♦4&#x27;, &#x27;♦5&#x27;, &#x27;♦K&#x27;]</span><br></pre></td></tr></table></figure><h1 id="使用Jieba进行分词"><a href="#使用Jieba进行分词" class="headerlink" title="使用Jieba进行分词"></a>使用Jieba进行分词</h1><p>“买马上战场”应该分成”买 马 上 战场”还是”买 马上 战场”?<br>不容易解决，分词库jieba也不是总能解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba<span class="comment">#导入分词库</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;我们热爱中华人民共和国&quot;</span></span><br><span class="line">lst = jieba.lcut(s)<span class="comment">#分词的结果是一个列表</span></span><br><span class="line"><span class="comment">#默认用精确模式分词，分出的结果正好拼成原文</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华人民共和国&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s, cut_all = <span class="literal">True</span>))<span class="comment">#全模式分词,输出所有可能的词</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华&#x27;, &#x27;中华人民&#x27;, &#x27;中华人民共和国&#x27;, &#x27;华人&#x27;, &#x27;人民&#x27;, &#x27;人民共和国&#x27;, &#x27;共和&#x27;, &#x27;共和国&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut_for_search(s))<span class="comment">#搜索引擎模式分词</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;我们&#x27;, &#x27;热爱&#x27;, &#x27;中华&#x27;, &#x27;华人&#x27;, &#x27;人民&#x27;, &#x27;共和&#x27;, &#x27;共和国&#x27;, &#x27;中华人民共和国&#x27;]</span></span><br><span class="line">s = <span class="string">&quot;拼多多是个网站&quot;</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;拼&#x27;, &#x27;多多&#x27;, &#x27;是&#x27;, &#x27;个&#x27;, &#x27;网站&#x27;]</span></span><br><span class="line">jieba.add_word(<span class="string">&quot;拼多多&quot;</span>)<span class="comment">#往词典添加新词</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;拼多多&#x27;, &#x27;是&#x27;, &#x27;个&#x27;, &#x27;网站&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;高克丝马微中&quot;</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s)) <span class="comment">#&gt;&gt;[&#x27;高克丝&#x27;, &#x27;马微&#x27;, &#x27;中&#x27;]</span></span><br><span class="line"></span><br><span class="line">jieba.load_userdict(<span class="string">&quot;C:/tmp/tmpdict.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(s))<span class="comment">#&gt;&gt;[&#x27;高克&#x27;, &#x27;丝马&#x27;, &#x27;微中&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(<span class="string">&quot;显微中，容不得一丝马虎。&quot;</span>))<span class="comment">#&gt;&gt;[&#x27;显微&#x27;, &#x27;中&#x27;, &#x27;容不得&#x27;, &#x27;一丝&#x27;, &#x27;马虎&#x27;, &#x27;。&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>c:/tmp/tmpdict.txt</code> 文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">高克</span><br><span class="line">丝马</span><br><span class="line">微中</span><br></pre></td></tr></table></figure><h2 id="用jieba库找出三国演义中出场次数最多的几个人"><a href="#用jieba库找出三国演义中出场次数最多的几个人" class="headerlink" title="用jieba库找出三国演义中出场次数最多的几个人"></a>用jieba库找出三国演义中出场次数最多的几个人</h2><p>分词后对所有词进行频率统计并输出出现最多的15个词(单个字的词去掉) :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">曹操 929, 孔明 825, 将军 756, 却说 646, 玄德 556, 关公 508, 丞相 484, 二人 459, 不可 432, 荆州 417, 孔明曰 383, 不能 380, 玄德日 380, 如此 375, 张飞 349,</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;&#x27;c:/tmp/三国演义utf8.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">text = f.read()<span class="comment">#字符串text就是全部三国演义文本</span></span><br><span class="line">f.close()</span><br><span class="line">words = jieba.lcut(text)<span class="comment">#word是分出来的所有词</span></span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;诸葛亮&quot;</span>, <span class="string">&quot;孔明曰&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;孔明&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;关公&quot;</span>, <span class="string">&quot;云长&quot;</span>, <span class="string">&quot;关云长&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;关羽&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;玄德&quot;</span>, <span class="string">&quot;玄德日&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;刘备&quot;</span></span><br><span class="line"><span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&quot;孟德&quot;</span>, <span class="string">&quot;操贼&quot;</span>, <span class="string">&quot;曹阿瞒&quot;</span>):</span><br><span class="line">word = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">result[word] = result.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">noneNames = &#123;<span class="string">&#x27;将军&#x27;</span>, <span class="string">&#x27;却说&#x27;</span>, <span class="string">&#x27;荆州&#x27;</span>, <span class="string">&#x27;二人&#x27;</span>, <span class="string">&#x27;不可&#x27;</span>, <span class="string">&#x27;不能&#x27;</span>, <span class="string">&#x27;如此&#x27;</span>, <span class="string">&#x27;丞相&#x27;</span> ,<span class="string">&quot;商议&quot;</span>, <span class="string">&quot;如何&quot;</span>, <span class="string">&quot;主公&quot;</span>, <span class="string">&quot;军士&quot;</span>, <span class="string">&quot;左右&quot;</span>, <span class="string">&quot;军马&quot;</span>, <span class="string">&quot;引兵&quot;</span>, <span class="string">&quot;次日&quot;</span>&#125; <span class="comment">#用集合比列表、元组快</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> noneNames:<span class="comment">#删除noneName中的词</span></span><br><span class="line">result.pop(word)</span><br><span class="line">items = <span class="built_in">list</span>(result.items())</span><br><span class="line">items.sort(key = <span class="keyword">lambda</span> x : -x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line"><span class="built_in">print</span>(items[i][<span class="number">0</span>], items[i][<span class="number">1</span>], end=<span class="string">&quot;, &quot;</span>)<span class="comment">#输出 人名 出现次数，</span></span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">孔明 1366, 刘备 1204, 曹操 973, 关羽 814, 张飞 349, 吕布 299, 孙权 264, 大喜 262, 东吴 252, 天下 252, 赵云 251, 于是 250, 今日 242, 魏兵 234, 不敢 234,</span><br></pre></td></tr></table></figure></p><h1 id="用openpyxl处理excel文档"><a href="#用openpyxl处理excel文档" class="headerlink" title="用openpyxl处理excel文档"></a>用openpyxl处理excel文档</h1><h2 id="excel文档相关库"><a href="#excel文档相关库" class="headerlink" title="excel文档相关库"></a>excel文档相关库</h2><ul><li>office 2010前.xls文件</li></ul><p>用xlrd库读取<br>用xlwt库创建和修改</p><ul><li>office 2010及之后.xlsx文件</li></ul><p>用openpyxl库读写(官网: openpyxl.readthedocs.io)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl (不支持Python 3.5及以前版本)</span><br><span class="line">Python 3.5及以前: pip install openpyxl == 2.6.4</span><br></pre></td></tr></table></figure><h2 id="openpyxl读取excel文件内容"><a href="#openpyxl读取excel文件内容" class="headerlink" title="openpyxl读取excel文件内容"></a>openpyxl读取excel文件内容</h2><ul><li>获取工作表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sheet = book.active<span class="comment">#取活跃的工作表(缺省就是第0张工作表)</span></span><br><span class="line">sheet = book[<span class="string">&quot;price&quot;</span>]<span class="comment">#取名为&quot;price&quot;的工作表</span></span><br></pre></td></tr></table></figure><ul><li>遍历所有工作表， 并打出其名字:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets: <span class="comment">#worksheets是工作表构成的列表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.title)</span><br></pre></td></tr></table></figure><ul><li>单元格属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(ce11.value):<span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">str</span>, datetime.datetime</span><br><span class="line">ce1l.coordinate:<span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;E3&#x27;</span></span><br><span class="line">cell.col_idx:单元格列号</span><br><span class="line">cell.number_format:数的显示格式,<span class="string">&quot;General&quot;</span>, <span class="string">&quot;0.00%&quot;</span>, <span class="string">&quot;0.00E+00&quot;</span>等</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;c:/tmp/test.xlsx&quot;</span>)<span class="comment">#book就是整个excel文件</span></span><br><span class="line">sheet = book.worksheets[<span class="number">0</span>]<span class="comment">#取第0张工作表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.title)<span class="comment">#输出工作表名字(显示于工作表下方标签)</span></span><br><span class="line"><span class="built_in">print</span>(sheet.min_row, sheet.max_row) <span class="comment">#输出最小有效行号、最大有效行号</span></span><br><span class="line"><span class="built_in">print</span>(sheet.min_column, sheet.max_column)<span class="comment">#输出最小有效列号、最大有效列号</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:<span class="comment">#按行遍历整个工作表，从第1行到sheet.max_row行(含)</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:<span class="comment">#遍历一行的每个单元格。cell是一个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)<span class="comment">#cell.value是单元格的值，空单元格值是None</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheetp[<span class="string">&#x27;G&#x27;</span>]:<span class="comment">#遍历名为&#x27;G&#x27;的那一列</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheet[<span class="number">3</span>]:<span class="comment">#遍历第3行</span></span><br><span class="line"><span class="built_in">print</span>(cell.value, <span class="built_in">type</span>(cell.value), cell.coordinate, cell.col_idx, cell.number_format)</span><br><span class="line"><span class="built_in">print</span>(pxl.utils.get_colum_letter(<span class="number">5</span>))<span class="comment">#&gt;&gt;E 根据列号求列名</span></span><br><span class="line"><span class="built_in">print</span>(pxl.utils.column_index_from_string(<span class="string">&#x27;D&#x27;</span>))<span class="comment">#&gt;&gt;4 根据列名求列号</span></span><br><span class="line"><span class="built_in">print</span>(pxl.utils.column_index_from_string(<span class="string">&#x27;AC&#x27;</span>))<span class="comment">#&gt;&gt;29</span></span><br><span class="line">colRange = sheet[<span class="string">&#x27;C:F&#x27;</span>]<span class="comment">#colRange代表从第C列到第F列(含F列)</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> colRange:<span class="comment">#按列遍历第C列到第F列，col代表一列</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> col:<span class="comment">#cell是一个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line">rowRange = sheet[<span class="number">5</span>:<span class="number">10</span>]<span class="comment">#rowRange代表第5行到第10行(含第10行)</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;D2&#x27;</span>]:<span class="comment">#按行遍历左上角是A1右下角是D2的子表</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:<span class="comment">#row[i]也可以表示第i个单元格</span></span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;C9&#x27;</span>].value)<span class="comment">#输出C9单元格的值</span></span><br><span class="line"><span class="built_in">print</span>(sheet.cell(row=<span class="number">8</span>, column=<span class="number">4</span>).value)<span class="comment">#输出第8行第4列单元格的值</span></span><br></pre></td></tr></table></figure><h2 id="读取公式的计算结果"><a href="#读取公式的计算结果" class="headerlink" title="读取公式的计算结果"></a>读取公式的计算结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&quot;C:/tmp/style.xlsx&quot;</span>, data_only = <span class="literal">True</span>)</span><br><span class="line">ws = wb.worksheets[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(ws[<span class="string">&#x27;A3&#x27;</span>].value)</span><br></pre></td></tr></table></figure><h1 id="openpyxl创建excel文件"><a href="#openpyxl创建excel文件" class="headerlink" title="openpyxl创建excel文件"></a>openpyxl创建excel文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">book = openpyxl.Workbook()<span class="comment">#在内存创建一个excel文档，注意W是大写</span></span><br><span class="line">sheet = book.active<span class="comment">#取第0个工作表</span></span><br><span class="line">sheet.title = <span class="string">&quot;sample1&quot;</span><span class="comment">#工作表取名为sample1</span></span><br><span class="line">dataRows = ((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40.5</span>), (<span class="number">100</span>, <span class="number">200</span>, <span class="string">&#x27;=sum(A1:B2)&#x27;</span>), [], [<span class="string">&#x27;1000&#x27;</span>, datetime.datetime.now(), <span class="string">&#x27;ok&#x27;</span>])</span><br><span class="line"><span class="comment">#时间显示是特别长的</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> dataRows:</span><br><span class="line">sheet.append(row)<span class="comment">#在工作表中添加一行</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;B&#x27;</span>].width = <span class="built_in">len</span>(<span class="built_in">str</span>(sheet[<span class="string">&#x27;B4&#x27;</span>].value))<span class="comment">#设置B列宽度,使其能完整显示B4单元格里的时间</span></span><br><span class="line">sheet[<span class="string">&#x27;E1&#x27;</span>].value = <span class="string">&quot;=sum(A1:D1)&quot;</span><span class="comment">#单元格值为公式</span></span><br><span class="line">sheet[<span class="string">&#x27;E2&#x27;</span>].value = <span class="number">12.5</span><span class="comment">#单元格值为小数</span></span><br><span class="line">sheet[<span class="string">&quot;E2&quot;</span>].number_format = <span class="string">&quot;0.00%&quot;</span><span class="comment">#单元格显示格式是百分比形式</span></span><br><span class="line">sheet[<span class="string">&#x27;F1&#x27;</span>].value = <span class="number">3500</span><span class="comment">#单元格值类型为int</span></span><br><span class="line">sheet[<span class="string">&#x27;F2&#x27;</span>].value =<span class="string">&quot;35.00&quot;</span><span class="comment">#单元格值类型为str</span></span><br><span class="line">sheet[<span class="string">&#x27;F3&#x27;</span>].value = datetime.datetime.today().date()</span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;F&#x27;</span>].width = <span class="built_in">len</span>(<span class="built_in">str</span>(sheet[<span class="string">&#x27;F3&#x27;</span>].value))</span><br><span class="line">sheet.row_dimensions[<span class="number">2</span>].height = <span class="number">48</span><span class="comment">#设置第2行高度为48points</span></span><br><span class="line">sheet2 = book.create_sheet(<span class="string">&quot;Sample2&quot;</span>)<span class="comment">#添加名为Sample2的工作表</span></span><br><span class="line">sheet2[<span class="string">&quot;A1&quot;</span>] = <span class="number">50</span></span><br><span class="line">sheet2 = book.create_sheet(<span class="string">&quot;Sample0&quot;</span>, <span class="number">0</span>)<span class="comment">#添加名为sample0的工作表</span></span><br><span class="line">sheet3 = book.copy_worksheet(sheet)<span class="comment">#添加一张新工作表,其为sheet的拷贝</span></span><br><span class="line">book.remove_sheet(book[<span class="string">&quot;Sample2&quot;</span>])<span class="comment">#删除名为Sample2的工作表</span></span><br><span class="line">book.save(<span class="string">&#x27;C:/tmp/sample.xlsx&#x27;</span>)<span class="comment">#保存文件</span></span><br></pre></td></tr></table></figure><h2 id="将所有文本形式的数转换为真正的数"><a href="#将所有文本形式的数转换为真正的数" class="headerlink" title="将所有文本形式的数转换为真正的数"></a>将所有文本形式的数转换为真正的数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;C:/tmp/test2.xlsx&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets:</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">v = cell.value</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">if</span> v.isdigit():<span class="comment">#如果v全部由数字组成</span></span><br><span class="line">cell.value = <span class="built_in">int</span>(v)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cell.value = <span class="built_in">float</span>(v) <span class="comment">#如果不是小数格式，转换会引发异常</span></span><br><span class="line"><span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">book.save(<span class="string">&quot;C:/tmp/test3.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="将真正的数转换为文本形式"><a href="#将真正的数转换为文本形式" class="headerlink" title="将真正的数转换为文本形式"></a>将真正的数转换为文本形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> pxl</span><br><span class="line">book = pxl.load_workbook(<span class="string">&quot;c:/tmp/test2.xlsx&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> book.worksheets:</span><br><span class="line"><span class="keyword">for</span>row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row :</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(cell.value) == <span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(cell.value) == <span class="built_in">float</span>:</span><br><span class="line">cell.value = <span class="built_in">str</span>(cell.value)</span><br><span class="line">book.save(<span class="string">&quot;c:/tmp/test3.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="openpyxl指定单元格的样式"><a href="#openpyxl指定单元格的样式" class="headerlink" title="openpyxl指定单元格的样式"></a>openpyxl指定单元格的样式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, colors, PatternFill, Alignment, Side, Border</span><br><span class="line">book = openpyxl.Workbook() <span class="comment">#在内存创建一个excel文档，注意W是大写</span></span><br><span class="line">sheet = book.active <span class="comment">#取第0个工作表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): <span class="comment">#添加4行5列数据</span></span><br><span class="line">sheet.append([i*<span class="number">5</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line">side = Side(style=<span class="string">&quot;thin&quot;</span>) <span class="comment">#边线类型, 还可以是 &quot;thick&quot;,&quot;medium&quot;,&quot;dotted&quot;等</span></span><br><span class="line">border = Border(left=side, right=side, top=side, bottom=side) <span class="comment">#边框类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">cell.border = border <span class="comment">#为单元格设置边框类型</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>].fill = PatternFill(patternType=<span class="string">&#x27;solid&#x27;</span>, fgColor=<span class="string">&quot;00ff00&quot;</span>)</span><br><span class="line"><span class="comment">#纯色填充，单元格底色设置为绿色,00ff00表示红色分量0，绿色分量255,蓝色分量0</span></span><br><span class="line">a1 = sheet[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line">italicRedFont = Font(size=<span class="number">18</span>, name=<span class="string">&#x27;Times New Roman&#x27;</span>, bold=<span class="literal">True</span>, color=colors.RED)</span><br><span class="line">a1.font = italicRedFont <span class="comment">#设置单元格字体</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;A2&#x27;</span>].font = sheet[<span class="string">&#x27;A1&#x27;</span>].font.copy(italic = <span class="literal">True</span>)<span class="comment">#A2的字体和A1的字体一样，但是是斜体</span></span><br><span class="line"></span><br><span class="line">sheet.merge_cells(<span class="string">&#x27;C2:D3&#x27;</span>) <span class="comment">#从C2到D3合并为一个单元格，此后名为 C2</span></span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;C2&#x27;</span>].alignment = Alignment(horizontal=<span class="string">&#x27;left&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)<span class="comment">#C2文字水平左对齐，垂直居中</span></span><br><span class="line">book.save(<span class="string">&quot;c:/tmp/style.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/openpyxl%E6%8C%87%E5%AE%9A%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E6%A0%B7%E5%BC%8F.png" class="" title="openpyxl指定单元格的样式"><h1 id="xlrd读取excel文件内容"><a href="#xlrd读取excel文件内容" class="headerlink" title="xlrd读取excel文件内容"></a>xlrd读取excel文件内容</h1><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlrd%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" class="" title="xlrd读取excel文件内容"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">book = xlrd.open_workbook(<span class="string">&quot;c:\\tmp\\sample.xlsx&quot;</span> ) <span class="comment">#打开指定文件</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> book.sheets(): <span class="comment">#遍历所有的工作表</span></span><br><span class="line"><span class="built_in">print</span> =(s.name) <span class="comment">#打出工作表名字</span></span><br><span class="line"></span><br><span class="line">sheet1 = book.sheet_by_index(<span class="number">0</span>) <span class="comment">#通过sheet索引获得sheet对象</span></span><br><span class="line">sheet1_name = book.sheet_names()[<span class="number">0</span>] <span class="comment"># 获得指定索引的sheet名称</span></span><br><span class="line"><span class="built_in">print</span>(sheet1_name) <span class="comment">#&gt;&gt;富豪记录</span></span><br><span class="line"></span><br><span class="line">sheet1 = book.sheet_by_name(sheet1_name) <span class="comment">#通过名字获得sheet对象</span></span><br><span class="line">nrows = sheet1.nrows <span class="comment">#总行数</span></span><br><span class="line">ncols = sheet1.ncols <span class="comment">#总列数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows): <span class="comment">#打印表中的内容</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">cell_value = sheet1.cell_value(i, j)</span><br><span class="line"><span class="built_in">print</span>(cell_value, end = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br>富豪记录<br>学生记录<br>富豪记录<br>姓名 资产（亿）<br>马云 2000.0<br>马化腾 2100.0</p><h1 id="xlwt创建excel文件"><a href="#xlwt创建excel文件" class="headerlink" title="xlwt创建excel文件"></a>xlwt创建excel文件</h1><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlwt%E5%88%9B%E5%BB%BAexcel%E6%96%87%E4%BB%B6.png" class="" title="xlwt创建excel文件"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="comment">#创建一个Wordbook对象，即创建一个Excel文件</span></span><br><span class="line">book = xlwt.Workbook(encoding = <span class="string">&quot;utf-8&quot;</span>, style_compression = <span class="number">0</span>)</span><br><span class="line"><span class="comment">#创建一个工作表</span></span><br><span class="line">sheet = book.add_sheet(<span class="string">&quot;成绩单&quot;</span>, cell_overwrite_ok = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#向表sheet中添加数据</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>) <span class="comment">#在第0行0列的单元格写入 &quot;姓名&quot;</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;绩点&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;王二&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;3.4&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;赵二&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;3.9&quot;</span>)</span><br><span class="line">sheet = book.add_sheet(<span class="string">&quot;名单&quot;</span>, cell_overwrite_ok = <span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;6656&quot;</span>)</span><br><span class="line">sheet.write(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;Jone&quot;</span>)</span><br><span class="line">book.save(<span class="string">&quot;c:\\tmp\\sample2.xls&quot;</span>) <span class="comment">#sample2.xls如果本来存在，会被覆盖</span></span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加公式"><a href="#xlwt向单元格添加公式" class="headerlink" title="xlwt向单元格添加公式"></a>xlwt向单元格添加公式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment"># Outputs 5</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># Outputs 2</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">0</span>, xlwt.Formula(<span class="string">&#x27;A1*B1&#x27;</span>))</span><br><span class="line"><span class="comment"># Should output &quot;10&quot; (A1[5] * A2[2])</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">1</span>, xlwt.Formula(<span class="string">&#x27;SUM(A1,B1)&#x27;</span>))</span><br><span class="line"><span class="comment"># Should output &quot;7&quot; (A1[5] + A2[2])</span></span><br><span class="line">workbook.save(<span class="string">&#x27;c:\\tmp\\Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加日期"><a href="#xlwt向单元格添加日期" class="headerlink" title="xlwt向单元格添加日期"></a>xlwt向单元格添加日期</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">style = xlwt.XFStyle()</span><br><span class="line">style.num_format_str = <span class="string">&#x27;M/D/YY&#x27;</span></span><br><span class="line"><span class="comment"># Other options:</span></span><br><span class="line"><span class="comment">#D-MMM-YY, D-MMM, MMM-YY, h:mm, h:mm:ss,</span></span><br><span class="line"><span class="comment">#h:mm, h:mm:ss, M/D/YY h:mm, mm:ss, [h]:mm:ss, mm:ss.0</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, datetime.datetime.now(), style)</span><br><span class="line">workbook.save(<span class="string">&#x27;Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt向单元格添加一个超链接"><a href="#xlwt向单元格添加一个超链接" class="headerlink" title="xlwt向单元格添加一个超链接"></a>xlwt向单元格添加一个超链接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">xlwt.Formula(<span class="string">&#x27;HYPERLINK(&quot;http://www.pku.edu.cn&quot;;&quot;PKU&quot;)&#x27;</span>))</span><br><span class="line"><span class="comment"># Outputs the text &quot;Google&quot; linking to http://www.google.com</span></span><br><span class="line">workbook.save(<span class="string">&#x27;Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="xlwt合并单元格"><a href="#xlwt合并单元格" class="headerlink" title="xlwt合并单元格"></a>xlwt合并单元格</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;My Sheet&#x27;</span>)</span><br><span class="line">worksheet.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;First Merge&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">&quot;ok1&quot;</span>)</span><br><span class="line"><span class="comment"># Merges row 0&#x27;s columns 0 through 3.</span></span><br><span class="line">font = xlwt.Font() <span class="comment"># Create Font</span></span><br><span class="line">font.bold = <span class="literal">True</span> <span class="comment"># Set font to Bold</span></span><br><span class="line">style = xlwt.XFStyle() <span class="comment"># Create Style</span></span><br><span class="line">style.font = font <span class="comment"># Add Bold Font to Style</span></span><br><span class="line">worksheet.write_merge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;Second Merge&#x27;</span>, style)</span><br><span class="line"><span class="comment"># Merges row 1 through 2&#x27;s columns 0 through 3.</span></span><br><span class="line">worksheet.write(<span class="number">2</span>,<span class="number">4</span>,<span class="string">&quot;ok2&quot;</span>)</span><br><span class="line">workbook.save(<span class="string">&#x27;c:\\tmp\\Excel_Workbook.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/xlwt%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.png" class="" title="xlwt合并单元格"> <h1 id="用Pillow处理图像"><a href="#用Pillow处理图像" class="headerlink" title="用Pillow处理图像"></a>用Pillow处理图像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><ul><li>图像缩放和旋转</li><li>图像加滤镜</li><li>图像切割</li><li>图像加水印</li><li>图像素描化</li><li>图像加文字</li></ul><h2 id="图像的常识"><a href="#图像的常识" class="headerlink" title="图像的常识"></a>图像的常识</h2><ul><li><p>图像由像素构成<br>屏幕上每个像素由3个距离非常近的点构成，分别显示红、绿、蓝三种颜色，每个像素可以由一个元组(r,g,b)表示， r,g,b通常是不超过255的整数</p></li><li><p>图像模式<br>RGB：一个像素有红、绿、蓝三个分量<br>RGBA：一个像素有红、绿、蓝三个分量，以及透明度分量<br>CYMK：一个像素有有青色（Cyan）、洋红色（Magenta）、黄色（Yellow）、黑色(K代表黑)四个分量，即每个像素用元组(c,y,m,k)表示，对应于彩色打印机或者印刷机的4种颜色的墨水。<br>L：黑白图像。每个像素就是一个整数，代表灰度。</p></li></ul><h1 id="图像的缩放"><a href="#图像的缩放" class="headerlink" title="图像的缩放"></a>图像的缩放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意，安装时 pip install pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment">#导入Image类进行图像处理</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>) <span class="comment">#将图像文件载入对象img</span></span><br><span class="line">w,h = img.size <span class="comment">#获取图像的宽和高（单位:像素),img.size是个元组</span></span><br><span class="line">newSize = (w//<span class="number">2</span>,h//<span class="number">2</span>) <span class="comment">#生成一个新的图像尺寸</span></span><br><span class="line">newImg = img.resize(newSize) <span class="comment">#得到一张原图像一半大小的新图像</span></span><br><span class="line"></span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass_half.jpg&quot;</span>) <span class="comment">#保存新图像文件</span></span><br><span class="line"></span><br><span class="line">newImg.thumbnail((<span class="number">128</span>,<span class="number">128</span>)) <span class="comment">#变成宽高各128像素的缩略图</span></span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass_thumb.png&quot;</span>, <span class="string">&quot;PNG&quot;</span>)</span><br><span class="line"><span class="comment">#保存新图像文件为png文件</span></span><br><span class="line">newImg.show() <span class="comment">#显示图像文件</span></span><br></pre></td></tr></table></figure><h1 id="图像的旋转、翻转图像、-和滤镜效果"><a href="#图像的旋转、翻转图像、-和滤镜效果" class="headerlink" title="图像的旋转、翻转图像、 和滤镜效果"></a>图像的旋转、翻转图像、 和滤镜效果</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFilter <span class="comment">#实现滤镜效果需要</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass_half.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.<span class="built_in">format</span>, img.mode) <span class="comment">#&gt;&gt;JPEG RGB</span></span><br><span class="line"></span><br><span class="line">newImg = img.rotate(<span class="number">90</span>, expand = <span class="literal">True</span>) <span class="comment">#图像逆时针旋转90度</span></span><br><span class="line">newImg.show()</span><br><span class="line">newImg = img.transpose(Image.FLIP_LEFT_RIGHT) <span class="comment">#左右翻转</span></span><br><span class="line">newImg = img.transpose(Image.FLIP_TOP_BOTTOM) <span class="comment">#上下翻转(颠倒)</span></span><br><span class="line">newImg = img.<span class="built_in">filter</span>(ImageFilter.BLUR) <span class="comment">#模糊效果</span></span><br></pre></td></tr></table></figure><p>滤镜效果：<br>ImageFilter.CONTOUR 轮廓效果<br>ImageFilter.EDGE_ENHANCE 边缘增强<br>ImageFilter.EMBOSS 浮雕<br>ImageFilter.SMOOTH 平滑<br>ImageFilter.SHARPEN 锐化</p><h1 id="图像的裁剪"><a href="#图像的裁剪" class="headerlink" title="图像的裁剪"></a>图像的裁剪</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/grass.jpg&quot;</span>)</span><br><span class="line">w,h = img.size[<span class="number">0</span>]//<span class="number">3</span>,img.size[<span class="number">1</span>]//<span class="number">3</span></span><br><span class="line">gap = <span class="number">10</span> <span class="comment">#九宫图中相邻两幅子图间的空白宽10像素</span></span><br><span class="line">newImg = Image.new(<span class="string">&quot;RGB&quot;</span>,(w * <span class="number">3</span> + gap * <span class="number">2</span>, h * <span class="number">3</span> + gap * <span class="number">2</span>),<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">clipImg = img.crop((j*w,i*h,(j+<span class="number">1</span>)*w,(i+<span class="number">1</span>)*h))</span><br><span class="line"><span class="comment">#crop((左上角横坐标，左上角纵坐标，右下角横坐标，右下角纵坐标))</span></span><br><span class="line">clipImg.save(<span class="string">&quot;c:/tmp/pic/grass%d%d.jpg&quot;</span> % (i,j))</span><br><span class="line">newImg.paste(clipImg,(j*(w + gap), i * ( h + gap)))</span><br><span class="line">newImg.save(<span class="string">&quot;c:/tmp/pic/grass9.jpg&quot;</span>) <span class="comment">#保存九宫图</span></span><br><span class="line">newImg.show()</span><br></pre></td></tr></table></figure><img src="/2023/01/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%8E%A9%E8%BD%ACPython%E7%94%9F%E6%80%81/%E5%9B%BE%E5%83%8F%E7%9A%84%E8%A3%81%E5%89%AA.png" class="" title="图像的裁剪"> <h1 id="图像的素描化"><a href="#图像的素描化" class="headerlink" title="图像的素描化"></a>图像的素描化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSketch</span>(<span class="params">img, threshold</span>):</span><br><span class="line">w, h = img.size</span><br><span class="line">img = img.convert(<span class="string">&#x27;L&#x27;</span>) <span class="comment">#图像转换成灰度模式</span></span><br><span class="line">pix = img.load() <span class="comment">#获取像素矩阵</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(pix[x,y] - pix[x+<span class="number">1</span>,y+<span class="number">1</span>]) &gt;= threshold:</span><br><span class="line">pix[x,y] = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pix[x,y] = <span class="number">255</span></span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/models2.jpg&quot;</span>)</span><br><span class="line">img = makeSketch(img, <span class="number">15</span>) <span class="comment">#阈值threshold为15</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><h1 id="给图像添加水印"><a href="#给图像添加水印" class="headerlink" title="给图像添加水印"></a>给图像添加水印</h1><ul><li>原理： paste时可以用“掩膜”指定img的每个像素粘贴过去的透明度。如果透明度为0，则完全透明，如果透明度为255，则完全遮盖imgSrc原来的像素。</li><li>mask参数即为掩膜，是个模式为”L”的图片(Image对象)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgSrc.paste(img, (x, y), mask = msk)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMask</span>(<span class="params">img,isTransparent,alpha</span>):<span class="comment">#（图像，什么像素是透明，其他像素的透明度）</span></span><br><span class="line"><span class="comment"># 返回由img变出来的掩膜</span></span><br><span class="line"><span class="keyword">if</span> img.mode != <span class="string">&quot;RGBA&quot;</span>:</span><br><span class="line">img = img.convert(<span class="string">&#x27;RGBA&#x27;</span>) <span class="comment">#转换成RGBA模式的图像</span></span><br><span class="line">w, h = img.size</span><br><span class="line">pixels = img.load() <span class="comment">#获取像素矩阵</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">p = pixels[x,y] <span class="comment">#p是一个四元素元组(r,g,b,a)</span></span><br><span class="line"><span class="keyword">if</span> isTransparent(p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>]): <span class="comment">#判断p是否应该变成透明像素</span></span><br><span class="line"><span class="comment">#p[0],p[1],p[2] 分别是红、绿、蓝分量</span></span><br><span class="line">pixels[x,y] = (p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>],<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pixels[x,y] = (p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>],alpha)</span><br><span class="line">r, g, b, a = img.split() <span class="comment"># 分离出img中的四个分量,a就是掩膜</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/pku.png&quot;</span>)</span><br><span class="line">msk = getMask(img, <span class="keyword">lambda</span> r,g,b: r &gt;<span class="number">245</span> <span class="keyword">and</span> g &gt; <span class="number">245</span> <span class="keyword">and</span> b &gt; <span class="number">245</span>, <span class="number">130</span>)</span><br><span class="line">imgSrc = Image.<span class="built_in">open</span>(<span class="string">&quot;c:/tmp/pic/iceland1.png&quot;</span>)</span><br><span class="line">imgSrc.paste(img,(imgSrc.size[<span class="number">0</span>] - img.size[<span class="number">0</span>] - <span class="number">30</span> , imgSrc.size[<span class="number">1</span>] - img.size[<span class="number">1</span>] - <span class="number">30</span>),mask = msk)</span><br><span class="line"><span class="comment">#粘贴透明图像img到imgSrc的右下角，用a做掩膜</span></span><br><span class="line">imgSrc.show()</span><br></pre></td></tr></table></figure><h1 id="在图像上绘图和写字"><a href="#在图像上绘图和写字" class="headerlink" title="在图像上绘图和写字"></a>在图像上绘图和写字</h1><p>照片的exif信息，存有照片的所有信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ExifTags </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">correctOrientation</span>(<span class="params">img</span>):</span><br><span class="line"><span class="comment">#根据exif判断,img里的图像如有颠倒或旋转则生成一幅将其摆正的图返回</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(img, <span class="string">&quot;_getexif&quot;</span>): <span class="comment">#判断img有没有_ getexif函数</span></span><br><span class="line">exif = img._getexif()<span class="comment">#获取图像exi f信息,返回值是个字典</span></span><br><span class="line"><span class="keyword">if</span> exif != <span class="literal">None</span>:</span><br><span class="line">orientation = exif[getExifKeyCode(<span class="string">&#x27;Orientation&#x27;</span>)]</span><br><span class="line"><span class="keyword">if</span> orientation == <span class="number">3</span>:<span class="comment">#手机顶部朝右拍</span></span><br><span class="line">img = img.rotate(<span class="number">180</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> orientation == <span class="number">6</span>:<span class="comment">#手机正常竖着拍(顶部朝上)</span></span><br><span class="line">img = img.rotate(<span class="number">270</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> orientation == <span class="number">8</span>:<span class="comment">#手机顶部朝下拍</span></span><br><span class="line">img = img.rotate(<span class="number">90</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getExifKeyCode</span>(<span class="params">keyStr</span>):<span class="comment">#根据属性名称字符串求属性代号</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ExifTags.TAGS.items():</span><br><span class="line"><span class="keyword">if</span> x[<span class="number">1</span>] == keyStr:</span><br><span class="line"><span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeTextToImage</span>(<span class="params">img, text, myFont</span>):</span><br><span class="line"><span class="comment">#在img中以字体myFont在右下角写入字符串text</span></span><br><span class="line"><span class="comment">#会改变img中的图像</span></span><br><span class="line">W, h = img.size</span><br><span class="line">fw, fh = myFont.getsize(text) <span class="comment">#求text显示出来的高度, 宽度</span></span><br><span class="line">draw = ImageDraw.Draw(img) <span class="comment">#以后就可以通过draw在img, 上画图、写字</span></span><br><span class="line">x,y = w - fw - <span class="number">30</span>, h - fh - <span class="number">30</span><span class="comment">#计算text的左上角的位置</span></span><br><span class="line">draw.rectangle((x - <span class="number">5</span>, y - <span class="number">5</span>, x + fw + <span class="number">5</span>, y + fh + <span class="number">5</span>), outline= <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">draw.text((x ,y), text, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), font=myFont)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第十章玩转Python生态</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-期末考试</title>
    <link href="http://hibiscidai.com/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    <id>http://hibiscidai.com/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</id>
    <published>2023-01-14T00:00:00.000Z</published>
    <updated>2023-01-14T14:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>实用Python程序设计MOOC-期末考试</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-期末考试"><a href="#实用Python程序设计MOOC-期末考试" class="headerlink" title="实用Python程序设计MOOC-期末考试"></a>实用Python程序设计MOOC-期末考试</h1><h1 id="001-好数坏数"><a href="#001-好数坏数" class="headerlink" title="001:好数坏数"></a>001:好数坏数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个正整数，如果是5和7的公倍数，就输出 best，如果不是7的倍数，但是是5的倍数就输出good，其它情况就输出bad。注意这些词都是小写</p></li><li><p>输入</p></li></ul><p>一个正整数n</p><ul><li>输出</li></ul><p>根据要求输出best,good或bad</p><ul><li>样例输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例#1</span><br><span class="line">35</span><br><span class="line">样例#2</span><br><span class="line">14</span><br><span class="line">样例#3</span><br><span class="line">10</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例#1</span><br><span class="line">best</span><br><span class="line">样例#2</span><br><span class="line">bad</span><br><span class="line">样例#3</span><br><span class="line">good</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span> ==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;best&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span> !=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;good&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>c8e2bd0b8c41c837477d97d171d2b0d18c94b1e12e165f267ba4eae0a9820feb</p><h1 id="002-买手办"><a href="#002-买手办" class="headerlink" title="002:买手办"></a>002:买手办</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>小明到了手办店非常开心，要大买特买。但他不是大富豪，所以只能买不超过60元手办。<br>现在知道若干手办的价钱，请计算小明一共要花掉多少钱。</p></li><li><p>输入<br>一行，若干个正整数，每个正整数表示一个手办的价钱</p></li><li><p>输出<br>小明会买下所有不超过60元的手办。输出他将要花掉多少钱</p></li><li><p>样例输入<br>120 60 60 30 50 10 100</p></li><li><p>样例输出<br>210</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inputs = <span class="built_in">input</span>()</span><br><span class="line">strs = inputs.split()</span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">    temp = <span class="built_in">int</span>(strs[i])</span><br><span class="line">    <span class="keyword">if</span> (temp &lt;= <span class="number">60</span>):</span><br><span class="line">        result += temp</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>38909039d002e176bb0d31314f80d7f412c6cfc1470a7b966f4375e61ffb47f0</p><h1 id="003-字符计数"><a href="#003-字符计数" class="headerlink" title="003:字符计数"></a>003:字符计数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个句子中有多个单词，单词之间可能有一个或多个空格。给定一个字符，请计算该字符在每个单词中的出现次数。 本题目不区分大小写字母。例如，字符A与字符a在单词Abandon中的出现次数都认为是2。 本题目有多组输入数据。</p></li><li><p>输入<br>第一行一个整数n，表示数据组数；<br>接下来共2n行，每两行为一组：<br>每组中第一行为给定的字符，保证为小写或大写字母；<br>每组中第二行为输入的句子，保证只由大小写字母或空格组成，且第一个单词前与最后一个单词后都没有空格。</p></li><li><p>输出<br>n行，每行若干个整数，表示句子的每个单词中，给定字符的出现次数。<br>每行的相邻整数之间用一个空格分隔。</p></li></ul><p>行末多输出了空格没有关系</p><ul><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">a</span><br><span class="line">Abandon that</span><br><span class="line">B</span><br><span class="line">Bob  is   the  BIG BOSS</span><br><span class="line">z</span><br><span class="line">Zelda   ZZZ</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">2 0 0 1 1</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zu = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(zu):</span><br><span class="line">    itChar = <span class="built_in">input</span>().lower()</span><br><span class="line"></span><br><span class="line">    comChar = <span class="built_in">input</span>().lower()</span><br><span class="line">    strs = comChar.split()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">        <span class="built_in">print</span>(strs[j].count(itChar), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>46eaa2d6f68b4a55bbeee44daf4e7dcf9959a3d39d9cf751dee5a7de05cd8aaa</p><h1 id="004-括号内的信息"><a href="#004-括号内的信息" class="headerlink" title="004:括号内的信息"></a>004:括号内的信息</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>程序填空</li></ul><p>对于给定的一行字符串，输出其中每一对小括号里的信息。如果找不到配对的小括号，就输出NONE。</p><p>“配对”指的是一个左括号与其右侧最近的右括号的匹配，例如”(a)(b)”里，第一个左括号与第一个右括号配对，第二个左括号与第二个右括号配对。</p><p>本题目保证配对的小括号里一定有内容，也就是不会出现”a()b”这样的字符串。</p><p>本题目保证配对的小括号不嵌套，也就是不会出现”xy(a(bc)def)z”这样的字符串。</p><p>注意，尽管类似”123(ab)cd(ef)gh(ij)k”这样的字符串中也存在”(…(…)…)”的模式，但此时“配对”的小括号没有嵌套，因此是满足题目限制的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">exit = <span class="number">10</span>   <span class="comment">#此句没用</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment">#填空内容应为 pt = &quot;XXXX&quot;，即写一个正则表达式pt</span></span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    k = re.findall(pt,s)</span><br><span class="line">    <span class="keyword">if</span> k:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> k:</span><br><span class="line">            <span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>输入<br>第一行一个整数n，表示输入字符串行数。<br>接下来n行里每行一个不包含空格的字符串s。</p></li><li><p>输出<br>输出共n行，每行若干个字符串，相邻字符串间用一个空格分隔，表示每行输入字符串中各个小括号里的内容。</p></li><li><p>样例输入</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1;!(#234)5@6(78)9(0)*</span><br><span class="line">0(a))(()(bcd)12</span><br><span class="line">)Nothing(</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">234 78 0</span></span><br><span class="line">a ( bcd</span><br><span class="line">NONE</span><br></pre></td></tr></table></figure><ul><li>提示<br>在正则表达式中没有分组时，re.findall返回所有匹配子串构成的列表。</li></ul><p>有且只有一个分组时，re.findall返回的是一个子串的列表，每个元素是一个匹配子串中分组对应的内容。</p><p>在正则表达式中有超过一个分组时，re.findall返回的是一个元组的列表，每个元组对应于一个匹配的子串，元组里的元素，依次是1号分组、2号分组、3号分组……匹配的内容</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt = <span class="string">&quot;[(](.*?)[)]&quot;</span></span><br></pre></td></tr></table></figure><p>432b8d97444ad359ec196959b7d8ea99dcf34e2bbc2643c5b327e6ed29bdbb42</p><h1 id="005-纸币兑换硬币"><a href="#005-纸币兑换硬币" class="headerlink" title="005:纸币兑换硬币"></a>005:纸币兑换硬币</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>用一张面值为x元的纸币换面值为y角、z角的硬币，每种硬币至少一枚，问有几种换法？请注意，纸币的单位是元，硬币的单位是角，一元等于10角。</p></li><li><p>输入<br>输入三个正整数x、y和z</p></li><li><p>输出<br>输出一个正整数，为换法的种数</p></li><li><p>样例输入</p></li></ul><p>样例#1<br>1 2 5<br>样例#2<br>2 2 4<br>样例#3<br>3 4 6</p><ul><li>样例输出</li></ul><p>样例#1<br>0<br>样例#2<br>4<br>样例#3<br>2</p><ul><li>提示<br>枚举y、z可能枚数的全部组合</li></ul><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inputs = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(inputs[<span class="number">0</span>])*<span class="number">10</span></span><br><span class="line">y = <span class="built_in">int</span>(inputs[<span class="number">1</span>])</span><br><span class="line">z = <span class="built_in">int</span>(inputs[<span class="number">2</span>])</span><br><span class="line">counts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x // y +<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x // z + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i * y + j * z == x:</span><br><span class="line">            counts += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(counts)</span><br></pre></td></tr></table></figure><p>ad18cfccb35e13c6240ec08fc75f7e4fdc032834913950a6930516ca93a441e0</p><h1 id="006-商品评分"><a href="#006-商品评分" class="headerlink" title="006:商品评分"></a>006:商品评分</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>购物网站上有许多商品。每个商品都会得到若干用户评分（为1-10的正整数），取这些评分的平均数作为商品总评分。 给出各个商品的名称及它们对应的若干用户评分，请按照商品总评分从高到低的顺序输出商品名称；如果两个商品总评分相同，则用户评分数量多的商品排在前面。</li></ul><p>题目保证商品名称各不相同，且不会出现两个总评分与用户评分数量完全相同的商品。 本题目有多组输入数据。</p><ul><li><p>输入<br>第一行一个整数n，表示数据组数；<br>接下来n组数据，每组数据中：<br>第一行一个整数m，表示该组数据中商品个数；<br>接下来m行，每行由一个字符串s（只含大小写字母）和若干个正整数（至多50个）组成，分别表示商品名称和用户评分。</p></li><li><p>输出<br>对于每组数据，按题目要求的排序结果，每行输出一个商品名称。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">Apple 10 8</span><br><span class="line">Banana 9 9 9</span><br><span class="line">Peach 10 9</span><br><span class="line">3</span><br><span class="line">Apple 10 8</span><br><span class="line">Banana 9 </span><br><span class="line">Peach 9 8</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Peach</span><br><span class="line">Banana</span><br><span class="line">Apple</span><br><span class="line">Apple</span><br><span class="line">Banana</span><br><span class="line">Peach</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">goodList</span>(<span class="params">good_list: <span class="built_in">list</span>, line: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(line)):</span><br><span class="line">        line[i] = <span class="built_in">int</span>(line[i])</span><br><span class="line">    good = &#123;&#125;</span><br><span class="line">    good[<span class="string">&#x27;name&#x27;</span>] = line[<span class="number">0</span>]</span><br><span class="line">    good[<span class="string">&#x27;scores&#x27;</span>] = line[<span class="number">1</span>:]</span><br><span class="line">    ave = <span class="built_in">sum</span>(good[<span class="string">&#x27;scores&#x27;</span>]) / <span class="built_in">len</span>(good[<span class="string">&#x27;scores&#x27;</span>])</span><br><span class="line">    people = <span class="built_in">len</span>(good[<span class="string">&#x27;scores&#x27;</span>])</span><br><span class="line">    good[<span class="string">&#x27;information&#x27;</span>] = [ave, people]</span><br><span class="line">    good_list.append(good)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">group</span>(<span class="params">num</span>):</span><br><span class="line">    good_li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        line = <span class="built_in">input</span>().split()</span><br><span class="line">        goodList(good_li, line)</span><br><span class="line">        good_li.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;information&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> good_li[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">        group(num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>d6233bd7ebd2278f96851a722e0fee4368a35a24b788179f89adedf50531ea9c</p><h1 id="007-物资统计"><a href="#007-物资统计" class="headerlink" title="007:物资统计"></a>007:物资统计</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>新冠肺炎肆虐全球，中国提供物资支援世界各国。现需统计世界各国总共收到的物资件数。</p></li><li><p>输入<br>第一行输入一个数n，代表中国援外航班数。<br>后面是n行，每行代表一个航班。<br>每个航班的信息包含一个整数，表示物资数量，以及一个国名。国名不含空格。</p></li><li><p>输出<br>各国的所接收到的物资总件数，按各国名称的字典序输出。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">10 USA</span><br><span class="line">20 Germany</span><br><span class="line">30 Japan</span><br><span class="line">40 Korea</span><br><span class="line">70 Japan</span><br><span class="line">20 USA</span><br><span class="line">40 Germany</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Germany 60</span><br><span class="line">Japan 100</span><br><span class="line">Korea 40</span><br><span class="line">USA 30</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">goods = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    str1 = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> str1[<span class="number">1</span>] <span class="keyword">in</span> goods:</span><br><span class="line">        goods[str1[<span class="number">1</span>]] += <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        goods[str1[<span class="number">1</span>]] = <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> goods.items():</span><br><span class="line">    results.append(x)</span><br><span class="line">results.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="built_in">print</span>(results[x][<span class="number">0</span>],results[x][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>572d3e00926e5407e2de4b9e15d5902c7ea2613deb938b146141f51fae0192ee</p><h1 id="008-医院负荷"><a href="#008-医院负荷" class="headerlink" title="008:医院负荷"></a>008:医院负荷</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>一家医院中，同时住院的患者人数称为医院的负荷。</li></ul><p>卫生部门获取到了大量的病人住院/出院记录，并希望能据此统计出，在所有时刻单个医院的最大负荷是多少。</p><p>住院记录的格式是一行两个正整数p和h，分别表示患者编号和医院编号。</p><p>出院记录的格式是一行一个正整数p和一个-1，其中p表示患者编号。</p><p>为简便起见，假设每家医院一开始都没有住院患者。</p><p>题目保证，每个患者只会住院一次并至多出院一次，且任何患者在出院之前一定会在某家医院住院。（不保证记录结束时，所有患者都已出院）</p><p>例如，对于下面的8条记录：</p><p>1 1<br>4 3<br>3 1<br>5 1<br>8 3<br>3 -1<br>1 -1<br>2 1</p><p>病人住院/出院过程如下：</p><p>①1号患者在1号医院住院，此时1号医院负荷变为1；</p><p>②4号患者在3号医院住院，此时3号医院负荷变为1；</p><p>③3号患者在1号医院住院，此时1号医院负荷变为2；</p><p>④5号患者在1号医院住院，此时1号医院负荷变为3；</p><p>⑤8号患者在3号医院住院，此时3号医院负荷变为2；</p><p>⑥3号患者出院，由于3号患者之前在1号医院住院，因此1号医院负荷变为2；</p><p>⑦1号患者出院，由于1号患者之前在1号医院住院，因此1号医院负荷变为1；</p><p>⑧2号患者在1号医院住院，此时1号医院负荷变为2。</p><p>在整个过程中，单个医院最大负荷量是3（1号医院在第4条记录时达到该负荷峰值）。</p><p>请编写程序来计算医院的最大负荷。</p><ul><li><p>输入<br>本题目有多组输入数据。<br>第一行一个整数n，表示输入数据的组数；<br>接下来共n组数据，每组数据中：<br>第一行为一个整数m，表示该组数据中住院/出院记录的条数；<br>接下来m行，每行为一条住院/出院记录，格式如上所述。</p></li><li><p>输出<br>对每组输入数据，输出一个整数，表示单个医院曾经达到的最大负荷</p></li><li><p>样例输入<br>2<br>8<br>1 1<br>4 3<br>3 1<br>5 1<br>8 3<br>3 -1<br>1 -1<br>2 1<br>1<br>1 2</p></li><li><p>样例输出<br>3<br>1</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xxx = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(xxx):</span><br><span class="line">    hospitai = &#123;&#125;</span><br><span class="line">    patient = &#123;&#125;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    fuhe = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">sum</span>):</span><br><span class="line">        temp = <span class="built_in">input</span>().split()</span><br><span class="line">        p = temp[<span class="number">0</span>]</span><br><span class="line">        h = temp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> patient:    <span class="comment">#找不到这个病人，需要住院</span></span><br><span class="line">            patient[p] = h</span><br><span class="line">            <span class="keyword">if</span> h <span class="keyword">in</span> hospitai:</span><br><span class="line">                hospitai[h] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hospitai[h] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment">#找到了这个病人，改病人需要出院</span></span><br><span class="line">            hospitai[patient[p]] -= <span class="number">1</span></span><br><span class="line">            patient[p] = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> hospitai.items():</span><br><span class="line">            results.append(x)</span><br><span class="line">        results.sort(key=<span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fuhe &lt; results[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">            fuhe = results[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(fuhe)</span><br></pre></td></tr></table></figure><p>9e2f4e192cca2730bd510c227c05a299a545050fb00f028601dda22cc03af043</p><h1 id="009-矩阵换行求边缘和"><a href="#009-矩阵换行求边缘和" class="headerlink" title="009:矩阵换行求边缘和"></a>009:矩阵换行求边缘和</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个整数矩阵，交换其中的两行，然后计算位于矩阵边缘的元素之和。所谓矩阵边缘的元素，就是第一行和最后一行的元素以及第一列和最后一列的元素。</p></li><li><p>输入<br>第一行分别为矩阵的行数m和列数n（m &lt; 100，n &lt; 100），两者之间以一个空格分开。<br>接下来输入的m行数据中，每行包含n个整数，整数之间以一个空格分开。<br>在接下来是两个整数x,y，表示需要将矩阵的第x行和第y行交换一下。</p></li><li><p>输出<br>输出交换行之后的矩阵的边缘元素和</p></li><li><p>样例输入<br>3 3<br>3 4 1<br>3 7 1<br>2 0 1<br>1 2</p></li><li><p>样例输出<br>18</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">line1 = <span class="built_in">input</span>().split()</span><br><span class="line">m = <span class="built_in">int</span>(line1[<span class="number">0</span>])</span><br><span class="line">n = <span class="built_in">int</span>(line1[<span class="number">1</span>])</span><br><span class="line">juzhen = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    hang = <span class="built_in">input</span>().split()</span><br><span class="line">    juzhen.append(hang)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(juzhen)</span></span><br><span class="line"></span><br><span class="line">line1 = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(line1[<span class="number">0</span>])</span><br><span class="line">y = <span class="built_in">int</span>(line1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">juzhen2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">if</span> i == x-<span class="number">1</span>:</span><br><span class="line">        juzhen2.append(juzhen[y-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> i == y-<span class="number">1</span>:</span><br><span class="line">        juzhen2.append(juzhen[x-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        juzhen2.append(juzhen[i])</span><br><span class="line"><span class="comment"># print(juzhen2)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">or</span> (i == m-<span class="number">1</span>) <span class="keyword">or</span> (j == <span class="number">0</span>) <span class="keyword">or</span> (j == n-<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span> += <span class="built_in">int</span>(juzhen2[i][j])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>80dbeddbb3e06e11cb1c5a9a3b9ceca97fab741baad9196d12391288deefdd00</p><h1 id="010-双重tag里的整数"><a href="#010-双重tag里的整数" class="headerlink" title="010:双重tag里的整数"></a>010:双重tag里的整数</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>tag是形如<br>“<X>A</X>“的字符串，X是一个长度不为0且不超过5的字符串，由大小写字母构成。</li></ul><p>“<X>“ 和 “</X>“里面的X必须相同。<br>例如：</p><p><abc>xyd</abc> 是一个tag<br>但是  <abc>xyd&lt;/bc&gt; 不是一个tag。</p><p>双重tag形式如下：<br>“<X>A<Y>B</Y>C</X>“</p><p>X,Y都是一个长度不为0且不超过5的字符串，由大小写字母构成。<br>“<X>“ 和 “</X>“里面的X必须相同，<br>“<Y>“和”</Y>“里面的Y必须相同。</p><p>“<Y>B</Y>“称为内重tag。”<Y>“只和离他最近的”</Y>“构成内重tag。<br>A,B,C是任意长度不为0的字符串。</p><p>请找出B中的全部不超过4位的整数。00003 算超过4位。</p><ul><li><p>输入<br>若干行。数据保证一个tag内部最多只有一个tag</p></li><li><p>输出<br>对每行，依次输出双重tag中的所有不超过4位且没有前导0的整数。单个的0算没有前导0。如果找不到，就输出NONE</p></li><li><p>样例输入<br>bac<x><a>bb123<c>aaa 292 bbb 384 j 67477 0 dd 04 05hd</c>c12c</a>&lt;/y&gt;def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</x>&lt;/y&gt;k&lt;/x&gt;def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</y>k</x>def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<x>d<y>3 4</y></x>def<br>k<a>1<c>12 35</c>78&lt;/c&gt;</a>&lt;/a&gt;<abcdefg>d<y>3 4</y></abcdefg>def<br>k<a>1<c>12 35</a>78&lt;/a&gt;&lt;/c&gt;&lt;/B&gt;<x>d<y>3 4</y></x>def</p></li><li><p>样例输出<br>292 384 0<br>12 35 3 4<br>12 35 3 4<br>12 35<br>12 35<br>NONE</p></li><li><p>提示<br>读入若干行，需要用 try…except 来判断结束</p></li></ul><h1 id="011-跳水比赛计分"><a href="#011-跳水比赛计分" class="headerlink" title="011:跳水比赛计分"></a>011:跳水比赛计分</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>有若干个同学参加跳水比赛，每个同学都有若干位老师给他打分。 一共有m条打分记录，每一条记录的格式都是这样的：”id score”，表示编号为id的同学获得了score分。（id和score都是正整数） 现在这m条记录依次送到了你的手上，你想在每一条记录到达的时候，都快速地计算出这个编号为id的同学目前得到的平均分是多少。平均只取整数部分即可，小数部分直接去掉，不要四舍五入。</p></li><li><p>输入<br>第一行，一个整数m。(m &lt;= 100000)<br>接下来m行，每行两个正整数代表id和score.</p></li><li><p>输出<br>对每行的 id score, 输出id同学到目前为止的平均分</p></li><li><p>样例输入<br>4<br>1 100<br>2 90<br>2 95<br>1 70</p></li><li><p>样例输出<br>100<br>90<br>92<br>85</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">id_socre_group = &#123;&#125;</span><br><span class="line">id_count_group = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    temp1 = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">int</span>(temp1[<span class="number">0</span>])</span><br><span class="line">    score = <span class="built_in">int</span>(temp1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">in</span> id_socre_group:</span><br><span class="line">        id_socre_group[<span class="built_in">id</span>] += score</span><br><span class="line">        id_count_group[<span class="built_in">id</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        id_socre_group[<span class="built_in">id</span>] = score</span><br><span class="line">        id_count_group[<span class="built_in">id</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(id_socre_group[<span class="built_in">id</span>]/id_count_group[<span class="built_in">id</span>]))</span><br></pre></td></tr></table></figure><p>f785e4b4080eba8da831dbebd86c2cc76744af18d5fd0ed35ab82e4447e02860</p><h1 id="012-藏头诗"><a href="#012-藏头诗" class="headerlink" title="012:藏头诗"></a>012:藏头诗</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>雍正皇帝不能忍受任何人说清朝或者他坏话，以至于他大兴文字狱。因此老百姓书写任何东西都得很小心。诗人写诗也得担心。一些诗人发明了一种奇怪写诗方法，只有TA们朋友圈的人才能看懂。这样的诗统称为藏头诗。</li></ul><p>一首藏头诗，是一个N×N的字符矩阵，看起来杂乱无章没啥意思。但是，如果你用特定的顺序读这些字符，你就能看懂。正确的阅读顺序如下面左图所示：</p><img src="/2023/01/14/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/012%E8%97%8F%E5%A4%B4%E8%AF%97.png" class="" title="012藏头诗"><p>顺着箭头读，你会看到“THISISAVERYGOODPOEMITHINK”,这就有点意思了。</p><p>过了一段时间后，诗人们发现，雍正的杀手，血滴子，也学会了读这样的诗。这很危险。所以诗人们发明了新的写诗顺序，如上面右图所示。</p><p>诗人想把所有的老写法的诗，都转成新写法的诗歌。请你帮助TA们。</p><ul><li><p>输入<br>一共不超过10组数据。<br>在每组数据里：<br>第一行是一个整数N ( 1 &lt;= N &lt;= 100), 表明诗是一个N×N 的字符矩阵，仅包含大写字母。<br>接下来是N行。每行是一个N个字符的字符串。这N行表示一首老写法的诗</p></li><li><p>输出<br>对每组数据，输出新写法的诗。</p></li><li><p>样例输入<br>5<br>THSAD<br>IIVOP<br>SEOOH<br>RGETI<br>YMINK<br>2<br>AB<br>CD<br>4<br>ABCD<br>EFGH<br>IJKL<br>MNOP</p></li><li><p>样例输出<br>THISI<br>POEMS<br>DNKIA<br>OIHTV<br>OGYRE<br>AB<br>DC<br>ABEI<br>KHLF<br>NPOC<br>MJGD</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="013-打印任意年份任意月份的日历"><a href="#013-打印任意年份任意月份的日历" class="headerlink" title="013:打印任意年份任意月份的日历"></a>013:打印任意年份任意月份的日历</h1><blockquote><p>时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定公元year年month月，打印该月月历</p></li><li><p>输入<br>第一行一个输入整数n，表示有n组数据。<br>后面n行，每行一组数据，是两个整数，分别代表year( 0 &lt; year &lt;= 100000）和month（数据合法，1&lt;=month&lt;=12），用空格隔开</p></li><li><p>输出<br>对于每组数据：<br>第一行输出月份（英文表示，首字母大写）和年份，用逗号隔开；<br>第二行输出星期几， Sun Mon Tue Wed Thu Fri Sat，用\t隔开；<br>接下来输出当月日期，日期用\t隔开，第一周缺天直接输出\t。<br>（行与行之间无空行，每组数据之间无空行）<br>行末多出来\t没有关系<br>12个月份的单词是：<br>“January”,”February”, “March”, “April”, “May”, “June”, “July”, “August”, “September”, “October”,”November”, “December”</p></li><li><p>样例输入<br>3<br>2019 12<br>403 5<br>23456 7</p></li><li><p>样例输出<br>December,2019<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat<br>1     2     3     4     5     6     7<br>8     9     10     11     12     13     14<br>15     16     17     18     19     20     21<br>22     23     24     25     26     27     28<br>29     30     31<br>May,403<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat</p><pre><code>          1     2     3     </code></pre><p>4     5     6     7     8     9     10<br>11     12     13     14     15     16     17<br>18     19     20     21     22     23     24<br>25     26     27     28     29     30     31<br>July,23456<br>Sun    Mon    Tue    Wed    Thu    Fri    Sat</p><pre><code>  1     2     3     4     5     </code></pre><p>6     7     8     9     10     11     12<br>13     14     15     16     17     18     19<br>20     21     22     23     24     25     26<br>27     28     29     30     31</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="comment"># 判断是否为闰年</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_num_of_days_in_month</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 给定年月返回月份的天数</span></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">elif</span> is_leap_year(year):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_total_num_of_day</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 自1800年1月1日以来过了多少天</span></span><br><span class="line">    days = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1800</span>, year):</span><br><span class="line">        <span class="keyword">if</span> is_leap_year(y):</span><br><span class="line">            days += <span class="number">366</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            days += <span class="number">365</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, month):</span><br><span class="line">        days += get_num_of_days_in_month(year, m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> days</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_start_day</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 返回当月1日是星期几，由1800.01.01是星期三推算</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + get_total_num_of_day(year, month) % <span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 月份与名称对应的字典</span></span><br><span class="line">month_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;January&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;February&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;March&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;April&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;May&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;June&#x27;</span>,</span><br><span class="line">              <span class="number">7</span>: <span class="string">&#x27;July&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;August&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;September&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;October&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;November&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;December&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_name</span>(<span class="params">month</span>):</span><br><span class="line">    <span class="comment"># 返回当月的名称</span></span><br><span class="line">    <span class="keyword">return</span> month_dict[month]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_month_title</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="comment"># 打印日历的首部</span></span><br><span class="line">    <span class="built_in">print</span>(get_month_name(month),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(year)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Sun\tMon\tTue\tWed\tThu\tFri\tSat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_month_body</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印日历正文</span></span><br><span class="line"><span class="string">    格式说明：空两个空格，每天的长度为5</span></span><br><span class="line"><span class="string">    需要注意的是print加逗号会多一个空格</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    i = get_start_day(year, month)</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">7</span>:</span><br><span class="line">        <span class="comment"># print(&#x27;    &#x27; * i,end=&quot;&quot;)   # 从星期几开始则空5*几个空格</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 从星期几开始则空5*几个空格</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, get_num_of_days_in_month(year, month)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;%4d&#x27; %j,end=&quot;&quot;) # 宽度控制，4+1=5</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d&#x27;</span> % j,end=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 宽度控制，4+1=5</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:  <span class="comment"># i用于计数和换行</span></span><br><span class="line">            <span class="built_in">print</span>()   <span class="comment"># 每换行一次行首继续空格</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#   主函数部分</span></span><br><span class="line">int1 = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int1):</span><br><span class="line">    str1 = <span class="built_in">input</span>().split()</span><br><span class="line">    year = <span class="built_in">int</span>(str1[<span class="number">0</span>])</span><br><span class="line">    month = <span class="built_in">int</span>(str1[<span class="number">1</span>])</span><br><span class="line">    print_month_title(year, month)</span><br><span class="line">    print_month_body(year, month)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-期末考试</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</title>
    <link href="http://hibiscidai.com/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://hibiscidai.com/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-10-11T00:00:00.000Z</published>
    <updated>2022-10-21T02:25:45.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/11/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93.png" class="" title="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"><p>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"><a href="#实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库" class="headerlink" title="实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库"></a>实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</h1><h1 id="文本文件读写"><a href="#文本文件读写" class="headerlink" title="文本文件读写"></a>文本文件读写</h1><h2 id="文本文件读写概述"><a href="#文本文件读写概述" class="headerlink" title="文本文件读写概述"></a>文本文件读写概述</h2><ul><li>open函数打开文件，将返回值放入一个变量，例如f</li><li>用<code>f.write</code>函数写入文件</li><li>用<code>f.readlines</code>函数读取全部文件内容</li><li>用<code>f.readline</code>函数读取文件- 行</li><li>用<code>f.close()</code>函数关闭文件</li><li>用<code>f.read()</code>读取全部文件内容。返回一个字符串，包含文件全部内容</li></ul><h2 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)<span class="comment">#文件夹c:\tmp必须事先存在</span></span><br><span class="line"><span class="comment">#&quot;w&quot;表示写入,用此种方式打开文件,若文件本来存在,就会被覆盖</span></span><br><span class="line">a.write(<span class="string">&quot;good\n&quot;</span>)</span><br><span class="line">a.write(<span class="string">&quot;好啊\n&quot;</span>)</span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure><p>运行后文件<code>c:\tmp\t.txt</code>内容：<br>good<br>好啊</p><h2 id="文本文件读写-1"><a href="#文本文件读写-1" class="headerlink" title="文本文件读写"></a>文本文件读写</h2><h3 id="读取现有文件"><a href="#读取现有文件" class="headerlink" title="读取现有文件"></a>读取现有文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)<span class="comment">#&quot;r&quot;表示读取</span></span><br><span class="line">lines = f.readlines() <span class="comment">#每一行都带结尾的换行符&quot;\n&quot;</span></span><br><span class="line">f.close()<span class="comment">#lines是个字符串列表，每个元素是一行</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br>good<br>好啊</p><h3 id="读取现有文件-1"><a href="#读取现有文件-1" class="headerlink" title="读取现有文件"></a>读取现有文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不用readlines也行</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> f:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="用readline读文件中的一行"><a href="#用readline读文件中的一行" class="headerlink" title="用readline读文件中的一行"></a>用readline读文件中的一行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data1 = infile.readline() <span class="comment">#data1带结尾的换行符&quot;\n&quot;。空行也有一个字符，就是&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">if</span> data1 == <span class="string">&quot;&quot;</span>:<span class="comment">#此条件满足就代表文件结束</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">data1 = data1.strip() <span class="comment">#去掉两头空格，包括结尾的&quot;\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line"></span><br><span class="line">infile.close()</span><br></pre></td></tr></table></figure><ul><li>如果要读取的文件不存在会引发异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\ts.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)<span class="comment">#若文件不存在，会产生异常，跳到except后面执行</span></span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)<span class="comment">#&gt;&gt; [Errno 2] No such file or directory: &#x27;c:\\tmp\\ts. txt &#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加文件内容"><a href="#添加文件内容" class="headerlink" title="添加文件内容"></a>添加文件内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)<span class="comment">#&quot;a&quot;要打开文件添加内容。若文件本来不存在，就创建文件</span></span><br><span class="line">f.write(<span class="string">&quot;新增行\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;ok\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>good<br>好啊<br>新增行<br>ok</p><h1 id="文本文件的编码"><a href="#文本文件的编码" class="headerlink" title="文本文件的编码"></a>文本文件的编码</h1><ul><li>常见编码有gbk和utf-8两种。打开文件时如果编码不对，则不能正确读取文件</li><li>ANSI对应gbk</li><li>写入文件时， 如果不指定编码，则用操作系统的缺省编码</li></ul><p>Windows：gbk，可能从win10开始是utf-8.<br>Linux，MacOs：utf-8</p><h2 id="python程序的编码"><a href="#python程序的编码" class="headerlink" title="python程序的编码"></a>python程序的编码</h2><p>py文件必须存成utf-8格式，才能运行如果存成ansi格式，则应该在文件开头写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建文件和读取文件时都可以指定编码"><a href="#创建文件和读取文件时都可以指定编码" class="headerlink" title="创建文件和读取文件时都可以指定编码"></a>创建文件和读取文件时都可以指定编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outfile = <span class="built_in">open</span>(<span class="string">&quot;C:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#若打开文件用于写入时不指定编码，则使用系统缺省编码，win10下也可能是Ansi(gbk)</span></span><br><span class="line">outfile.write(<span class="string">&quot;这很好ok\n&quot;</span>)</span><br><span class="line">outfile.write(<span class="string">&quot;这ok&quot;</span>)</span><br><span class="line">outfile.close()</span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&quot;c:\\tmp\\t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">lines = infile.readlines()</span><br><span class="line">infile.close()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(x.strip())</span><br></pre></td></tr></table></figure><h1 id="文件的路径"><a href="#文件的路径" class="headerlink" title="文件的路径"></a>文件的路径</h1><h2 id="open文件名参数的相对路径形式和绝对路径形式"><a href="#open文件名参数的相对路径形式和绝对路径形式" class="headerlink" title="open文件名参数的相对路径形式和绝对路径形式"></a>open文件名参数的相对路径形式和绝对路径形式</h2><h3 id="相对路径形式-文件名没有包含盘符"><a href="#相对路径形式-文件名没有包含盘符" class="headerlink" title="相对路径形式:文件名没有包含盘符"></a>相对路径形式:文件名没有包含盘符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹(当前路径)下</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;tmp/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#&quot;/&quot;写成&quot;\\&quot;效果也一样</span></span><br><span class="line"><span class="comment">#文件在当前文件夹下的tmp文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;tmp/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹下的tmp文件夹里面的test文件夹下面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上一层文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../../readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上两层文件夹里面</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../tmp2/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前文件夹的上一层的tmp2文件夹的test文件夹里面</span></span><br><span class="line"><span class="comment">#tmp2和当前文件夹是平级的</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;/tmp3/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#文件在当前盘符的根文件夹下的tmp3/test/里面</span></span><br></pre></td></tr></table></figure><h3 id="绝对路径形式-文件名包含盘符"><a href="#绝对路径形式-文件名包含盘符" class="headerlink" title="绝对路径形式:文件名包含盘符"></a>绝对路径形式:文件名包含盘符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;d:/tmp/test/readme.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">路径也叫文件夹，或者目录(path, folder, directory)</span><br></pre></td></tr></table></figure><h3 id="Python程序的“当前文件夹-当前路径，当前目录"><a href="#Python程序的“当前文件夹-当前路径，当前目录" class="headerlink" title="Python程序的“当前文件夹(当前路径，当前目录)"></a>Python程序的“当前文件夹(当前路径，当前目录)</h3><ul><li>程序运行时，会有一个”当前文件夹”，open打开文件时，如果文件名不是绝对路径形式，则都是相对于当前文件夹的。</li><li>一般情况下，<code>.py</code>文件所在的文件夹，就是程序运行时的当前文件夹。在Pycharm里面运行程序，就是如此。</li><li>程序可以获取当前文件夹:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())<span class="comment">#os.getcdw()获取当前文件夹</span></span><br><span class="line"><span class="comment">#&gt;&gt;c:\tmp5\test</span></span><br></pre></td></tr></table></figure><ul><li>在命令行方式运行程序时，cmd窗口的当前文件夹，就是程序的当前文件夹，不论程序存在哪里。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:\tmp5\test\t1.py如下:</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：C:\WINDOWS\system32\cmd.exe</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;python c:\tmp5\test\tl.py</span><br><span class="line">C:\music\violin</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;</span><br></pre></td></tr></table></figure><ul><li>程序运行期间可以改变当前文件夹</li></ul><p>c:\tmp5\test\t1.py如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line">os.chdir(<span class="string">&quot;c:/tmp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure></p><p>则:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：C:WINDOWS\system32\cmd.exe</span><br><span class="line">C:\music\violin&gt;python c:\tmp5\test\t1.py</span><br><span class="line">C:\music\violin</span><br><span class="line">C:\tmp</span><br><span class="line"></span><br><span class="line">C:\music\violin&gt;</span><br></pre></td></tr></table></figure><h1 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h1><h2 id="Python的文件夹操作函数"><a href="#Python的文件夹操作函数" class="headerlink" title="Python的文件夹操作函数"></a>Python的文件夹操作函数</h2><h3 id="os库和shutil库"><a href="#os库和shutil库" class="headerlink" title="os库和shutil库"></a>os库和shutil库</h3><p>os库和shutil库中有一些函数可以用来操作文件和文件夹(文件夹也称为“目录”)</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">函数作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>os.chdir(x)</code></td><td style="text-align:center">将程序的当前文件夹设置为x</td></tr><tr><td style="text-align:center"><code>os.getcwd()</code></td><td style="text-align:center">求程序的当前文件夹</td></tr><tr><td style="text-align:center"><code>os.listdir(x)</code></td><td style="text-align:center">返回一个列表，里面是文件夹x中的所有文件和子文件夹的名字</td></tr><tr><td style="text-align:center"><code>os.mkdir(x)</code></td><td style="text-align:center">创建文件夹x</td></tr><tr><td style="text-align:center"><code>os.path.getsize(x)</code></td><td style="text-align:center">获取文件x的大小(单位:字节)</td></tr><tr><td style="text-align:center"><code>os.path.isfile(x)</code></td><td style="text-align:center">判断x是不是文件</td></tr><tr><td style="text-align:center"><code>os.remove(x)</code></td><td style="text-align:center">删除文件x</td></tr><tr><td style="text-align:center"><code>os.rmdir(x)</code></td><td style="text-align:center">删除文件夹x。x必须是空文件夹才能删除成功</td></tr><tr><td style="text-align:center"><code>os.rename(x,y)</code></td><td style="text-align:center">将文件或文件夹x改名为y。不但可以改名,还可以起到移动文件或文件夹的作用。例如os.rename(“c:/tmp/a”, “c:/tmp2/b”)可以将文件夹或文件” c:/tmp/a”移动到”c:/tmp2/“文件夹下面,并改名为b。前提是tmp2必须存在。</td></tr><tr><td style="text-align:center"><code>shutil.copyfile(x,y)</code></td><td style="text-align:center">拷贝文件x到文件y。若y本来就存在，会被覆盖</td></tr></tbody></table></div><h3 id="删除文件夹的递归函数"><a href="#删除文件夹的递归函数" class="headerlink" title="删除文件夹的递归函数"></a>删除文件夹的递归函数</h3><p>（删除文件夹没有办法恢复）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">powerRmDir</span>(<span class="params">path</span>): <span class="comment"># 连根删除文件夹path</span></span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">actualFileName = path + <span class="string">&quot;/&quot;</span> + x<span class="comment">#x不包括路径,例如a. txt</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(actualFileName): <span class="comment">#actualFileName是文件</span></span><br><span class="line">os.remove(actualFileName)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">powerRmDir(actualFileName) <span class="comment">#actualFileName是文件夹</span></span><br><span class="line">os.rmdir(path)</span><br><span class="line"></span><br><span class="line">powerRmDir(<span class="string">&quot;c:/tmp/ttt&quot;</span>)</span><br><span class="line">powerRmDir(<span class="string">&quot;tmp/ttt&quot;</span>)<span class="comment">#删除当前文件夹下的tmp文件夹下的ttt文件夹</span></span><br></pre></td></tr></table></figure><h3 id="获取文件夹总大小的递归函数"><a href="#获取文件夹总大小的递归函数" class="headerlink" title="获取文件夹总大小的递归函数"></a>获取文件夹总大小的递归函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTotalSize</span>(<span class="params">path</span>):</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">actualFileName = path + <span class="string">&quot;/&quot;</span> + x<span class="comment">#x不包括路径</span></span><br><span class="line"><span class="keyword">if</span> OS.path.isfile(actualFileName):</span><br><span class="line">total += OS.path.getsize(actualEileName)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">total += getTotalSize(actualFileName)</span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h1 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h1><h2 id="以命令行方式运行python程序"><a href="#以命令行方式运行python程序" class="headerlink" title="以命令行方式运行python程序"></a>以命令行方式运行python程序</h2><p>每次运行Python程序，都要从Pycharm里运行，显然不方便。</p><p>因此有时需要以命令行方式(命令脚本方式)运行python程序</p><p>具体做法：</p><p>在命令行窗口(mac叫“终端”)敲:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python xxx.py</span><br><span class="line">就能运行xxx.py</span><br></pre></td></tr></table></figure></p><p>Windows下，Win+R键，可以弹出左边”运行”窗口，敲”cmd”确定，就能弹出右边cmd窗口(命令行窗口)</p><p>Mac上相应操作，是从launchPad里面启动”终端”</p><h2 id="命令行参数-1"><a href="#命令行参数-1" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>如果编写了一-个程序hello.py，功能是合并两个文件<br>希望在命令行敲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py a1.txt a2.txt</span><br></pre></td></tr></table></figure><p>就能完成把a2.txt合并到a1.txt上面。<br>hello.py运行时，如何知道要处理的文件是a1.txt和a2.txt呢?<br>a1.txt，a2.txt都是”命令行参数”。因此程序内应该有获得命令行参数的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sys.argv:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>在命令行窗口以如下方式运行该程序，假设程序存为hello.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py this is &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello.py</span><br><span class="line">this</span><br><span class="line">is</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>则在程序中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys.argv[0]就是 &#x27;hello.py&#x27;</span><br><span class="line">sys.argv[1]就是 &#x27;this&#x27;</span><br><span class="line">sys.argv[2]就是 &#x27;is&#x27;</span><br><span class="line">sys.argv[3]就是 &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><h2 id="程序以命令行运行时的当前文件夹"><a href="#程序以命令行运行时的当前文件夹" class="headerlink" title="程序以命令行运行时的当前文件夹"></a>程序以命令行运行时的当前文件夹</h2><p>程序以命令行方式启动时，当前文件夹就是命令提示符表示的文件夹，而不是python程序文件所在的文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:/tmp5/test/t.py</span><br><span class="line">import os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题：选择C:\WINDOWS\system32\cmd.exe</span><br><span class="line"></span><br><span class="line">C:\diskd&gt;python c:\tmp5\test\t.py</span><br><span class="line">C:\diskd</span><br><span class="line"></span><br><span class="line">C:\diskd&gt;</span><br></pre></td></tr></table></figure><h1 id="文件处理实例"><a href="#文件处理实例" class="headerlink" title="文件处理实例"></a>文件处理实例</h1><h2 id="程序1-统计文章中的单词词频"><a href="#程序1-统计文章中的单词词频" class="headerlink" title="程序1:统计文章中的单词词频"></a>程序1:统计文章中的单词词频</h2><ul><li>程序名: countfile.py</li></ul><p>用命令行方式启动该程序：<br><code>python countfile.py</code> 源文件 结果文件</p><p>例如:<br><code>python countfile.py a1.txt r1.txt</code><br><code>python countfile.py c:\tmp\a4.txt d:\tmp\r4.txt</code></p><p>对”源文件”进行单词词频(出现次数)分析，分析结果写入”结果文件”，单词按照字典序排列</p><p>文章文件<code>a1.txt</code>的格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When many couples decide to expand their family，they often take into consideration the different genetic traits that they may pass on to their children. For example, if someone has a history of heart problems, they might be concerned about passing that on to their chi Idren as well.</span><br><span class="line">Treacher Collins syndrome, or TCS, ?is a rare facial disfigurement that</span><br><span class="line">greatly: slows: the deve lopment of bones and other t issues that make up the human face. As a result, most people living?with TCS have?under developed cheek bones, a small jaw, and an undersized chin.</span><br></pre></td></tr></table></figure><ul><li>统计的结果结果文件<code>r1.txt</code>格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a8</span><br><span class="line">about2</span><br><span class="line">an1</span><br><span class="line">and4</span><br><span class="line">are1</span><br><span class="line">around1</span><br><span class="line">as2</span><br><span class="line">backlash1</span><br><span class="line">be4</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>1)命令行参数<code>sys.argv[1]</code>就是源文件，<code>sys.argv[2]</code>就是结果文件。<br>2)要从<code>a1.txt</code>中分割出单词，然后用字典记录单词的出现频率。<br>3)分割单词时的分隔字符多种多样，因此要统计<code>a1.txt</code>中出现了哪些非字母的字符，非字母的字符都是分隔串。<br>4)要用<code>re.split()</code>来分割。</p><ul><li>回顾:通过正则表达式用多个分隔串进行分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.split(x,s)</span><br></pre></td></tr></table></figure><p>用正则表达式x里面的分隔串分割s<br>x里面不同分隔串用”|”隔开，形如:<br><code>&#39;;||, | \* |\n| \? |ok|8&#39;</code><br>一些特殊字符，比如:<code>? ! &quot;&#39;()|*$\[]^&#123;&#125;. ,</code><br>在正则表达式里出现时，前面需要加<code>\</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&#x27;Beautiful, is; beoktter*than\nugly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;;| |,|\*|\n|ok&#x27;</span>,a)) <span class="comment">#分隔串用 | 隔开]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;;&#x27; &#x27; &#x27; &#x27;,&#x27; &#x27;*&#x27; &#x27;\n&#x27; &#x27;ok&#x27;都被看作分隔串</span></span><br><span class="line"><span class="comment">#&gt;&gt;[&#x27;Beautiful&#x27;, &#x27; &#x27;, &#x27;is&#x27;, &#x27;&#x27;, &#x27;be&#x27;, &#x27;tter&#x27;, &#x27;than&#x27;, &#x27;ugly&#x27;]</span></span><br><span class="line"><span class="comment">#两个相邻的分隔串之间，会隔出一个空串</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, words</span>):  <span class="comment"># 对filename文件进行词频分析，分析结果记在词典words里</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)<span class="comment">#文件为缺省编码。根据实际情况可以加参数 encoding=&quot;utf-8&quot; 或 encoding = &quot;gbk&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    txt = f.read()<span class="comment">#全部文件内容存入字符串txt</span></span><br><span class="line">    f.close()</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])  <span class="comment">#分割串的集合</span></span><br><span class="line">    <span class="comment"># 下面找出既有文性中非宝母的字符，作为分服串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span>  <span class="comment"># 用无 re.split的正则表达式</span></span><br><span class="line">    <span class="comment"># 该正则表达式形式类似于:&quot;，|：| |-&quot;之类两个紧线之间的字符串就是分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\l&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 上面这些字符比较特殊，加到splitChars 里面的时候要在前面加“&quot;\,”</span></span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span>  <span class="comment"># python字符中里面。\\其实就是\ )</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        splitStr += <span class="string">&quot;&quot;</span>  <span class="comment"># &#x27;|&#x27;后面必须要有东西，空格多写一遍没关系</span></span><br><span class="line">        lst = re.split(splitStr, txt)  <span class="comment"># lst是分隔后的单词列表</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="keyword">if</span> x == <span class="string">&quot;&quot;</span>:  <span class="comment"># 两个相部分领患之间会分割出来一个空患。 不理它</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx <span class="keyword">in</span> words:</span><br><span class="line">            words[lx] += <span class="number">1</span><span class="comment">#如果在词典里，则该词出现次数+1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            words[lx] = <span class="number">1</span><span class="comment">#如果不在词典里，则该词加入词典，出现次数为1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">result = &#123;&#125;  <span class="comment"># 结果宝典。 格式为&#123;&#x27;a&#x27;:2, &#x27;about&#x27;:3, ...&#125;</span></span><br><span class="line"><span class="keyword">if</span> countFile(sys.argv[<span class="number">1</span>], result) == <span class="number">0</span>:  <span class="comment"># argv[1]是源文件,..分析績果记在result.黑面</span></span><br><span class="line">    exit()</span><br><span class="line">lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">lst.sort()  <span class="comment"># 单词按字典序排庄</span></span><br><span class="line">f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>)  <span class="comment">#argv[2] 是结果文件，文件为缺省编码， &quot;w&quot;表示写入</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">    f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="程序2-统计多个文件累计单词频率"><a href="#程序2-统计多个文件累计单词频率" class="headerlink" title="程序2:统计多个文件累计单词频率"></a>程序2:统计多个文件累计单词频率</h2><ul><li><p>程序名<code>countfiles.py</code></p></li><li><p>用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python countfiles.py结果文件</span><br></pre></td></tr></table></figure></li><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python countfiles.py result.txt</span><br></pre></td></tr></table></figure></li></ul><p>对当前文件夹(<code>countfiles.py</code>文件所在文件夹)下全部文件名是字母a打头的<code>.txt</code>文件进行词频统计，统计的总的结果写入”结果文件”<code>result.txt</code>。</p><ul><li>思路</li></ul><p>要获得.py程序所在文件夹下的所有a打头，. txt结尾的文件。对每个文件，调用上面<br>程序1的处理单个文件的函数进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os<span class="comment">#ython自带os库</span></span><br><span class="line">os.listdir()<span class="comment">#可以获得当前文件夹下所有文件和文件夹的列表。列表中元素是文件或文件夹名字，不带路径(目录)</span></span><br><span class="line">os.path.isfile(x)<span class="comment">#可以判断x是不是一个文件(文件夹不是文件)</span></span><br></pre></td></tr></table></figure><ul><li><code>os.listdir</code>示例</li></ul><p>假设<code>c:\tmp</code>文件夹下有文件<code>t.py</code>，<code>a.txt</code>，<code>b.txt</code>和文件夹<code>hello</code></p><p>程序<code>t.py</code>如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.listdir())</span><br></pre></td></tr></table></figure><p>则运行<code>t.py</code>输出结果为:<br><code>[&#39;a.txt&#39;, &#39;b.txt&#39;, &#39;hello&#39;, &#39;t.py&#39;]</code></p><ul><li>实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = &#123;&#125;</span><br><span class="line">lst = os.listdir()<span class="comment">#列出当前文件夹下所有文件和文件夹的名字</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(x) : <span class="comment">#如果x是文件</span></span><br><span class="line"><span class="keyword">if</span> x.lower().endswith(<span class="string">&quot;.txt&quot;</span>) <span class="keyword">and</span> x.lower().startswith(<span class="string">&quot;a&quot;</span>):<span class="comment">#x是&#x27;a&#x27;开头, .txt结尾</span></span><br><span class="line">countFile(x, result) <span class="comment">#countFile是程序1中统计一个文件的函数</span></span><br></pre></td></tr></table></figure><h2 id="程序3-准确统计文章中的单词词频"><a href="#程序3-准确统计文章中的单词词频" class="headerlink" title="程序3:准确统计文章中的单词词频"></a>程序3:准确统计文章中的单词词频</h2><ul><li>程序名：<code>countfile_novary.py</code></li><li>用法：</li></ul><p><code>python countfile_novary.py 源文件 结果文件</code></p><p>对”源文件”进行单词词频分析，分析结果写入”结果文件”如果碰到单词的变化形式，则转换成原型再统计</p><ul><li>单词原型-变化 词汇表在文件<code>word_varys.txt</code>里面，格式：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">act</span><br><span class="line">acted|acting|acts</span><br><span class="line">action</span><br><span class="line">actions</span><br><span class="line">active</span><br><span class="line">actively|activeness</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>1)同样需要一个字典来统计单词及其出现次数。</p><p>2)读取<code>word_varys.txt</code>文件，构造一个字典<code>dt</code>。 元素形式为:<code>&#123;acted:act, acting:act, acts:act, actions:action, ...&#125;</code>键是单词的变化形式，值是单词的原型。</p><p>3)对每个”源文件”里的单词w，查找dt中键为w的元素x。如果x不存在，则w就是原型，统计其词频。如果x存在，则值x[1]是原型，将x[1]的出现次数加1。</p><ul><li>实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeVaryWordsDict</span>():</span><br><span class="line">    vary_words = &#123;&#125;  <span class="comment"># 元素形式： 变化形式：原型 例如&#123;acts:act,acting:act,boys:boy....&#125;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;word_varys.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    L = <span class="built_in">len</span>(lines)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, L, <span class="number">2</span>):  <span class="comment"># 每两行是一个单词的原型及变化形式</span></span><br><span class="line">        word = lines[i].strip()  <span class="comment"># 单词原型</span></span><br><span class="line">        varys = lines[i + <span class="number">1</span>].strip().split(<span class="string">&quot;|&quot;</span>)  <span class="comment"># 变形</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> varys:</span><br><span class="line">            vary_words[w] = word  <span class="comment"># 加入变化形式：原型 , w的原型是 word</span></span><br><span class="line">    <span class="keyword">return</span> vary_words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSplitStr</span>(<span class="params">txt</span>):</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])</span><br><span class="line">    <span class="comment"># 下面找出所有文件中非字母的字符，作为分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成用于 re.split的分隔符字符串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">    splitStr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> splitStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, vary_word_dict</span>):</span><br><span class="line">    <span class="comment"># 分析 filename 文件，返回一个词典作为结果。到 vary_word_dict里查单词原型</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    txt = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    splitStr = makeSplitStr(txt)</span><br><span class="line">    words = &#123;&#125;</span><br><span class="line">    lst = re.split(splitStr, txt)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> lx <span class="keyword">in</span> vary_word_dict:  <span class="comment"># 如果在原型词典里能查到原型，就变成原型再统计</span></span><br><span class="line">            lx = vary_word_dict[lx]</span><br><span class="line">        <span class="comment"># 直接写这句可以替换上面 if 语句  lx = vary_word_dict.get(lx,lx)</span></span><br><span class="line">        words[lx] = words.get(lx, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = countFile(sys.argv[<span class="number">1</span>], makeVaryWordsDict())</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">None</span> <span class="keyword">and</span> result != &#123;&#125;:</span><br><span class="line">    lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">    lst.sort()</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="程序4-countfile-nocet4-py"><a href="#程序4-countfile-nocet4-py" class="headerlink" title="程序4:countfile_nocet4.py"></a>程序4:<code>countfile_nocet4.py</code></h2><ul><li>用法</li></ul><p><code>python countfile_nocet4.py 源文件 结果文件</code></p><p>对”源文件”进行单词词频分析，只抽取不在四级单词列表中的单词，将分析结果写入”结果文件”</p><ul><li>四级单词列表在文件<code>cet4words.txt</code>中，单词都是单独一行，以$打头</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">abandon</span></span><br><span class="line">[?&#x27;b?nd?n]</span><br><span class="line">vt.遗弃；放弃；放纵(自己)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ability</span></span><br><span class="line">[?&#x27;b?l?t?]</span><br><span class="line">n.能力，才能</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">able</span></span><br><span class="line">[&#x27;e?bl]</span><br><span class="line">a.有的能力；有本事的，能干的</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">aboard</span></span><br><span class="line">[?&#x27;b?:d]</span><br><span class="line">ad.&amp;prep.在船(飞机、车)上；ad.上船(飞机)</span><br></pre></td></tr></table></figure><ul><li>思路</li></ul><p>读取<code>cet4words.txt</code>中的单词，存放到一个集合里面。碰到源文件里的单词，先查查在不在集合里面，如果在，则抛弃。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeFilterSet</span>():</span><br><span class="line">    cet4words = <span class="built_in">set</span>([])</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;cet4words.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">&quot;$&quot;</span>:</span><br><span class="line">            cet4words.add(line[<span class="number">1</span>:])  <span class="comment"># 将四级单词加入集合</span></span><br><span class="line">    <span class="keyword">return</span> cet4words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSplitStr</span>(<span class="params">txt</span>):</span><br><span class="line">    splitChars = <span class="built_in">set</span>([])</span><br><span class="line">    <span class="comment"># 下面找出所有文件中非字母的字符，作为分隔符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> c &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            splitChars.add(c)</span><br><span class="line">    splitStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成用于 re.split的分隔符字符串</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> splitChars:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">            splitStr += <span class="string">&quot;\\&quot;</span> + c + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            splitStr += c + <span class="string">&quot;|&quot;</span></span><br><span class="line">    splitStr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> splitStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countFile</span>(<span class="params">filename, filterdict</span>):  <span class="comment"># 词频统计，要去掉在 filterdict集合里的单词</span></span><br><span class="line">    words = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    txt = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    splitStr = makeSplitStr(txt)</span><br><span class="line">    lst = re.split(splitStr, txt)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        lx = x.lower()</span><br><span class="line">        <span class="keyword">if</span> lx == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> lx <span class="keyword">in</span> filterdict:  <span class="comment"># 去掉在 filterdict里的单词</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        words[lx] = words.get(lx, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = countFile(sys.argv[<span class="number">1</span>], makeFilterSet())</span><br><span class="line"><span class="keyword">if</span> result != &#123;&#125;:</span><br><span class="line">    lst = <span class="built_in">list</span>(result.items())</span><br><span class="line">    lst.sort()</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%d\n&quot;</span> % (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h1 id="数据库和SQL语言"><a href="#数据库和SQL语言" class="headerlink" title="数据库和SQL语言"></a>数据库和SQL语言</h1><h2 id="数据库的概念"><a href="#数据库的概念" class="headerlink" title="数据库的概念"></a>数据库的概念</h2><ul><li>数据库可以用来存放大量数据，并且提供了方便的快速检索手段</li><li>便于快速找出符合某种条件的数据。比如：工作年限超过三年，工资超过10000元的北京籍员工</li><li>一个数据库可以是一个文件，比如<code>c:/tmp/students.db</code></li></ul><h2 id="数据库中的表"><a href="#数据库中的表" class="headerlink" title="数据库中的表"></a>数据库中的表</h2><ul><li>一个数据库文件里可以有多张表。比如students.db里包含”学生信息表”和”课程信息表”</li><li>表由记录构成，比如”学生信息表”里的每个记录，代表一个学生的信息。</li><li>记录由字段构成，描述一个事物的多个属性。比如学生记录，可以由name, id, age, gender, gpaa 等字段构成</li></ul><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>字段是有”类型”的。比如</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数据类型</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">text</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">gpa</td><td style="text-align:center">real</td><td style="text-align:center">小数</td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">integer</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">profile</td><td style="text-align:center">text</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">photo</td><td style="text-align:center">blob</td><td style="text-align:center">二进制数据(如图片)</td></tr><tr><td style="text-align:center">birthday</td><td style="text-align:center">date</td><td style="text-align:center">日期(本质上就是text)</td></tr><tr><td style="text-align:center">registertime</td><td style="text-align:center">datetime</td><td style="text-align:center">日期+时间(本质上就是text)</td></tr></tbody></table></div><h2 id="SQL数据库查询语句"><a href="#SQL数据库查询语句" class="headerlink" title="SQL数据库查询语句"></a>SQL数据库查询语句</h2><p>参考: <a href="http://www.w3school.com.cn/sql/sql_syntax.asp">http://www.w3school.com.cn/sql/sql_syntax.asp</a></p><p>SQL命令:用于进行数据库操作的标准语句</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">CREATE TABLE</td><td style="text-align:center">创建表</td></tr><tr><td style="text-align:center">INSERT INTO</td><td style="text-align:center">在表中插入记录</td></tr><tr><td style="text-align:center">UPDATE</td><td style="text-align:center">在表中更新记录</td></tr><tr><td style="text-align:center">SELECT</td><td style="text-align:center">在表中进行查询</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">从表中删除记录</td></tr></tbody></table></div><blockquote><p>不区分大小写</p></blockquote><h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> if <span class="keyword">not</span> <span class="keyword">exists</span> students (id <span class="type">integer</span> <span class="keyword">primary</span> key, name text, gpa <span class="type">real</span>, birthday <span class="type">date</span>, age <span class="type">integer</span>, picture <span class="type">blob</span>)</span><br></pre></td></tr></table></figure><p>创建了一张名为students的表，有以下字段:</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数据类型</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">integer</td><td style="text-align:center">primary key表示不可重复</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">text</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">gpa</td><td style="text-align:center">real</td><td style="text-align:center">小数</td></tr><tr><td style="text-align:center">birthday</td><td style="text-align:center">date</td><td style="text-align:center">日期(本质上就是text)</td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">integer</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">picture</td><td style="text-align:center">blob</td><td style="text-align:center">二进制数据(如图片)</td></tr></tbody></table></div><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span>(<span class="number">1000</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">3.81</span>, <span class="string">&#x27;2000-09-12&#x27;</span>, <span class="number">18</span>, <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><p>在表students中插入一个记录，该记录暂无照片(nulI)</p><p>VALUES(每个字段的值)</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><h2 id="创建数据库并写入数据"><a href="#创建数据库并写入数据" class="headerlink" title="创建数据库并写入数据"></a>创建数据库并写入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c: /tmp/test2.db&quot;</span>)  <span class="comment"># 连接数据库， 若不存在则自动创建</span></span><br><span class="line"><span class="comment"># 文件夹c:/tmp 必须事先存在, connect不会创建文件夹</span></span><br><span class="line">cur = db.cursor()  <span class="comment"># 获取光标，要操作数据库一般要通过光标进行</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE if not exists students (id integer primary key ,</span></span><br><span class="line"><span class="string">name text, gpa real, birthday date, age integer, picture blob) &#x27;&#x27;&#x27;</span>  <span class="comment"># 如果表students不存在就创建它</span></span><br><span class="line">cur.execute(sql)  <span class="comment"># 执行sQL命令</span></span><br><span class="line">cur.execute(<span class="string">&quot;insert into students values (1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, null)&quot;</span>)  <span class="comment"># 插入一个记录</span></span><br><span class="line"></span><br><span class="line">mylist = [(<span class="number">1700</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&quot;3.25&quot;</span>, <span class="string">&#x27;2001-12-01&#x27;</span>, <span class="number">17</span>, <span class="literal">None</span>), (<span class="number">1800</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&quot;3.35&quot;</span>, <span class="string">&#x27;1999-01-01&#x27;</span>, <span class="number">19</span>, <span class="literal">None</span>)]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> mylist:  <span class="comment"># 依次插入mylist中的每个记录</span></span><br><span class="line">    cur.execute(<span class="string">&#x27;INSERT INTO students VALUES(?,?,?,?,?,?) &#x27;</span>, (s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>], s[<span class="number">4</span>], s[<span class="number">5</span>]))  <span class="comment"># ?对应于后面某项</span></span><br><span class="line">db.commit()  <span class="comment"># 真正写入，写入操作都需要这个</span></span><br><span class="line">cur.close()  <span class="comment"># 关闭光标</span></span><br><span class="line">db.close()  <span class="comment"># 关闭数据库</span></span><br></pre></td></tr></table></figure><h1 id="数据库查询和修改"><a href="#数据库查询和修改" class="headerlink" title="数据库查询和修改"></a>数据库查询和修改</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">#检索students表中全部记录</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age</span><br><span class="line">#检索students表中全部记录，并按年龄排序</span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> students</span><br><span class="line">#检索students表中全部记录，但每个记录只取name和age字段</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">#检索students表中全部name字段为张三的记录,<span class="keyword">WHERE</span>表示检索条件</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name<span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">AND</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span></span><br><span class="line">#检索students表中全部名为张三且年龄大于<span class="number">20</span>的人，结果按年龄降序排列</span><br></pre></td></tr></table></figure><h2 id="检索数据库"><a href="#检索数据库" class="headerlink" title="检索数据库"></a>检索数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;C:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from students&#x27;</span> <span class="comment">#检索全部记录</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchone() <span class="comment">#fetchone取满足条件的第一条记录</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#=&gt;(1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, None)</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>])<span class="comment">#=&gt;张三</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> cur.fetchall(): <span class="comment">#fetchall取得所有满足条件的记录</span></span><br><span class="line"><span class="built_in">print</span>(x[:-<span class="number">2</span>]) <span class="comment">#age和picture字段不打出</span></span><br><span class="line">cur.execute(<span class="string">&quot;SELECT * FROM students WHERE name= &#x27;Jack&#x27;&quot;</span>)</span><br><span class="line">x = cur.fetchone()</span><br><span class="line"><span class="keyword">if</span> x == <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can&#x27;t find Jack&quot;</span>)</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1600, &#x27;张三&#x27;, 3.81, &#x27;2000-09-12&#x27;, 18, None)</span><br><span class="line">张三</span><br><span class="line">(1700, &#x27;李四&#x27;, 3.25, &#x27;2001-12-01&#x27;)</span><br><span class="line">(1800, &#x27;王五&#x27;, 3.35, &#x27;1999-01-01&#x27;)</span><br><span class="line">can&#x27;t find Jack</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">检索数据库</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select name, gpa, age from students where gpa &gt; 3.3 order by age desc&#x27;</span><span class="comment">#查找gpa &gt; 3.3的记录,题取其中三个字段,按年龄降序排列</span></span><br><span class="line"></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">if</span> x != []:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total: &quot;</span>, <span class="built_in">len</span>(x)) <span class="comment">#=&gt;2</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total:2</span><br><span class="line">(&#x27;王五&#x27;, 3.35, 19)</span><br><span class="line">(&#x27;张三&#x27;, 3.81, 18)</span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> gpa <span class="operator">=</span> <span class="number">3.9</span></span><br><span class="line">#将所有记录的gpa设置成<span class="number">3.9</span></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> gpa <span class="operator">=</span> <span class="number">3.9</span>, age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">#修改 李四 的gpa和年龄</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;UPDATE students SET gpa =?, age = ? WHERE name = ?&#x27;</span></span><br><span class="line">cur.execute(sql, (<span class="number">4.0</span>, <span class="number">20</span>, <span class="string">&#x27;李四&#x27;</span>)) <span class="comment">#元组三个元素分别对应三个?</span></span><br><span class="line"><span class="comment">#修改李四的gpa和年龄。若李四不存在，则无效果</span></span><br><span class="line">db.commit() <span class="comment">#写入操作必须</span></span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">18</span></span><br><span class="line">#删除年龄小于<span class="number">18</span>的记录</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students</span><br><span class="line">#删除全部记录</span><br><span class="line">#别忘了最后<span class="keyword">commit</span></span><br></pre></td></tr></table></figure><h2 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> students</span><br><span class="line">#删除students表</span><br></pre></td></tr></table></figure><p>别忘了最后commit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;DROP TABLE IF EXISTS students&quot;</span>)</span><br><span class="line">db.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cur.execute(<span class="string">&quot;select * from students&quot;</span>)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line"><span class="built_in">print</span>(r[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;no table&quot;</span>)<span class="comment">#=&gt; no table</span></span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="列出数据库中所有的表和表的结构"><a href="#列出数据库中所有的表和表的结构" class="headerlink" title="列出数据库中所有的表和表的结构"></a>列出数据库中所有的表和表的结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test3.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;CREATE TABLE if not exists table2(id integer, name text)&#x27;</span></span><br><span class="line">cur.execute(sql) <span class="comment">#执行SQL命令</span></span><br><span class="line">sq| = <span class="string">&#x27;CREATE TABLE if not exists table1(id integer, schook text)&#x27;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;select name from SQLITE_MASTER where type=&quot;table&quot; order by NAME&#x27;</span>)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"><span class="keyword">if</span> x != []:</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"></span><br><span class="line">cur.execute (<span class="string">&quot;PRAGMA TABLE_INFO (table1)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchall())</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;table1&#x27;, ), (&#x27;table2&#x27;, )]</span><br><span class="line">[(0, &#x27;id&#x27;, &#x27;integer&#x27;, 0, None, 0), (1, &#x27;schook&#x27;, &#x27;text&#x27;, 0, None, 0)]</span><br></pre></td></tr></table></figure><blockquote><p>对于修改表的操作，如插入，删除，更新，关闭数据库前不要忘了commit， 否则可能无效<br>必要时用try… except语句来避免数据库不存在，表不存在时的导致的runtime error</p></blockquote><h1 id="数据库二进制字段"><a href="#数据库二进制字段" class="headerlink" title="数据库二进制字段"></a>数据库二进制字段</h1><h2 id="设置blob字段（二进制字段）的值："><a href="#设置blob字段（二进制字段）的值：" class="headerlink" title="设置blob字段（二进制字段）的值："></a>设置blob字段（二进制字段）的值：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#访问网络资源</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;c:/tmp/tmp.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)<span class="comment">#二进制方式打开图片</span></span><br><span class="line">img = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sql = <span class="string">&quot;UPDATE students SET picture=? WHERE name = &#x27;李四&#x27;&quot;</span></span><br><span class="line">cur.execute(sq|, (img,)) <span class="comment">#设置李四的照片。img对应于?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imgUrl = <span class="string">&quot;https://img5.duitang.com/uploads/item/201605/19/20160519224441_VfMWRjpeg&quot;</span> <span class="comment">#从网络获取图片</span></span><br><span class="line">imgStream = requests.get(imgUrl, stream=<span class="literal">True</span>)</span><br><span class="line">sql = <span class="string">&quot;UPDATE students SET picture=? WHERE name = &#x27;张三&#x27; &quot;</span></span><br><span class="line">cur.execute(sql, (imgStream.content, )) <span class="comment">#设置张三的照片。img对应于?</span></span><br><span class="line">db.commit()</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="读取blob字段-二进制字段-的值"><a href="#读取blob字段-二进制字段-的值" class="headerlink" title="读取blob字段(二进制字段)的值"></a>读取blob字段(二进制字段)的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sq|ite3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;c:/tmp/test2.db&quot;</span>)</span><br><span class="line">cur = db.cursor()</span><br><span class="line">sq| = <span class="string">&quot;select name, picture from students WHERE name = &#x27;张三&#x27; or name = &#x27; 李四&#x27;&quot;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">x = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> x: <span class="comment"># r[0]是姓名,r[1]是图片文件数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;c:/tmp/&quot;</span> + r[<span class="number">0</span>] + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="comment">#照片写入张三.jpg和李四.jpg</span></span><br><span class="line">f.write(r[<span class="number">1</span>])</span><br><span class="line">f.close()</span><br><span class="line">cur.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第八章文件读写和文件夹操作和数据库</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第七章字典和集合</title>
    <link href="http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</id>
    <published>2022-10-06T00:00:00.000Z</published>
    <updated>2022-10-11T12:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88.png" class="" title="实用Python程序设计MOOC-第七章字典和集合"><p>实用Python程序设计MOOC-第七章字典和集合</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第七章字典和集合"><a href="#实用Python程序设计MOOC-第七章字典和集合" class="headerlink" title="实用Python程序设计MOOC-第七章字典和集合"></a>实用Python程序设计MOOC-第七章字典和集合</h1><h1 id="字典的基本概念"><a href="#字典的基本概念" class="headerlink" title="字典的基本概念"></a>字典的基本概念</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典的每个元素是由”键:值”两部分组成，可以根据”键”进行快速查找</li><li>格式:<code>d = &#123;key1 : value1, key2 : value2&#125;</code></li><li>字典元素的值是可赋值的，因此也是指针</li><li>所有元素的键都不相同</li><li>键必须是不可变的数据类型，比如字符串、整数、小数、元组。列表、集合、字典等可变的数据类型，不可作为字典元素的键。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;Jack&#x27;</span>:<span class="number">18</span>, <span class="string">&#x27;Mike&#x27;</span>:<span class="number">19</span>, <span class="number">128</span>:<span class="number">37</span>, (<span class="number">1</span>, <span class="number">2</span>):[<span class="number">4</span>, <span class="number">5</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;Jack&#x27;</span>])<span class="comment">#&gt;&gt;18键为&#x27;Jack&#x27;的元素值是18</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="number">128</span>])<span class="comment">#&gt;&gt;37键为128的元素值是37</span></span><br><span class="line"><span class="built_in">print</span>(dt[(<span class="number">1</span>, <span class="number">2</span>)])<span class="comment">#&gt;&gt;[4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;c&#x27;</span>])<span class="comment">#不存在键为&#x27;c&#x27;的元素，产生异常，导致运行时错误</span></span><br><span class="line">dt[<span class="string">&#x27;Mike&#x27;</span>] = <span class="string">&#x27;ok&#x27;</span><span class="comment">#将键为&#x27;Mike&#x27;的元素的值改为&#x27;ok&#x27;</span></span><br><span class="line">dt[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;Pku&quot;</span><span class="comment">#添加键为&#x27;school&#x27;的元素，其值为&#x27;Pku&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4, 5], &#x27;Jack&#x27;:18, &#x27;Mike&#x27;:&#x27;ok&#x27;, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> dt[<span class="string">&#x27;Mike&#x27;</span>]<span class="comment">#删除键为&#x27;Mike&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4 , 5], &#x27;Jack&#x27;:18, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">scope = &#123; &#125;<span class="comment">#空字典</span></span><br><span class="line">scope[<span class="string">&#x27;a&#x27;</span>] = <span class="number">3</span><span class="comment">#添加元素&#x27;a&#x27; :3</span></span><br><span class="line">scope[<span class="string">&#x27;b&#x27;</span>] = <span class="number">4</span><span class="comment">#添加元素&#x27;b&#x27; :4</span></span><br><span class="line"><span class="built_in">print</span>(scope)<span class="comment">#&gt;&gt;&#123;&#x27;a&#x27;:3, &#x27;b&#x27;:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> scope)<span class="comment">#&gt;&gt;True判断是否有元素键为&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#get(key, v):如果键key存在，则返回键为key的元素的值，否则返回v</span></span><br><span class="line"><span class="built_in">print</span> (scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;1</span></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;2</span></span><br></pre></td></tr></table></figure><p>键值对的数据查找时间和数据长度无关，列表查找和数据长度有关</p><h1 id="字典的键不可重复"><a href="#字典的键不可重复" class="headerlink" title="字典的键不可重复"></a>字典的键不可重复</h1><ul><li>字典的键不可重复，指的是字典的键的内容不能一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">d = &#123;a:<span class="number">60</span>, b:<span class="number">70</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):<span class="number">80</span>， (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">50</span> &#125;<span class="comment">#d中实际上只有一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d[a])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[b])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="comment">#此循环只输出一个(1, 2, 3):50</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;jack&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>], <span class="number">100</span>:(<span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">18</span>] = <span class="number">31</span></span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">100</span>] = <span class="number">31</span></span><br><span class="line">dt = &#123;[<span class="number">1</span>, <span class="number">2</span>]: <span class="number">3</span>, <span class="string">&#x27;jack&#x27;</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典的构造"><a href="#字典的构造" class="headerlink" title="字典的构造"></a>字典的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">items = [(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Gumby&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">42</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>(items)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Gumby&#x27;</span>, age=<span class="number">42</span>, height=<span class="number">1.76</span>)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;height&#x27;:1.76, &#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"><span class="comment">#python3.5之前构造遍历字典顺序和加入顺序不同</span></span><br><span class="line"><span class="comment">#python3.6及之后版本，哪个元素先加入，就在前</span></span><br></pre></td></tr></table></figure><h2 id="字典相关函数"><a href="#字典相关函数" class="headerlink" title="字典相关函数"></a>字典相关函数</h2><p><code>clear()</code> 清空字典<br><code>keys()</code> 取字典的键的序列<br><code>items()</code> 取字典的元素的序列，可用于遍历字典<br><code>values()</code> 取字典的值序列<br><code>pop(x)</code> 删除键为x的元素，如果不存在，产生异常<br>上述”序列”，不是list, tuple或set<br><code>copy()</code> 浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">d  = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Gumby&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;GPA&#x27;</span>:<span class="number">3.5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;age&#x27;</span>])<span class="comment">#&gt;&gt;42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;(&#x27;name&#x27;, &#x27;Gumby&#x27;),(&#x27;age&#x27;, 42),(&#x27;GPA&#x27;, 3.5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(k, v, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name Gumby,age 42,GPA 3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="number">1978</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">y = x.copy()</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh &#x27;</span></span><br><span class="line">y[<span class="number">1978</span>].remove(<span class="number">2</span>)<span class="comment">#删除元素2</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">x.pop(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#删除键为&#x27;username&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字典的深拷贝"><a href="#字典的深拷贝" class="headerlink" title="字典的深拷贝"></a>字典的深拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>]&#125;</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh&#x27;</span></span><br><span class="line">y[<span class="string">&#x27;machines&#x27;</span>].remove(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;baz&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;bar&#x27;,&#x27;baz&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><ul><li>items<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x.items():</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><p><strong>遍历字典时，在python3. 5及以前，顺序不确定。在python 3. 6及以后，顺序同元素加入字典的顺序</strong></p><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><ul><li><p>输入<br>若干行，每行一个单词。</p></li><li><p>输出<br>按单词出现次数从高到低打出所有单词。次数相同的，按照字典序从小到大排</p></li><li><p>输入样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">about</span><br><span class="line">send</span><br><span class="line">about</span><br><span class="line">me</span><br></pre></td></tr></table></figure></li><li><p>输出样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 about</span><br><span class="line">1 me</span><br><span class="line">1 send</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> wd <span class="keyword">in</span> dt:  <span class="comment"># 如果有元素键为wd</span></span><br><span class="line">            dt[wd] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dt[wd] = <span class="number">1</span>  <span class="comment"># 加入键为wd的元素，其值是1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key = <span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">dt[wd] = dt.get(wd, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#若在dt里有键位wd的元素，则get返回其值，否则返回0</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key=<span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合-set-的概念和特点"><a href="#集合-set-的概念和特点" class="headerlink" title="集合(set)的概念和特点"></a>集合(set)的概念和特点</h2><p>集合(set)的概念同数学上的集合</p><ul><li>元素类型可以不同。</li><li>不会有重复元素。</li><li>可以增删元素。</li><li>整数、小数、复数、字符串、元组都可以作为集合的元素。但是列表、字典和集合等可变的数据类型不可作为集合的元素。</li><li>集合的作用是快速判断某个东西是否在一堆东西里面(用in)。</li></ul><h2 id="集合的构造"><a href="#集合的构造" class="headerlink" title="集合的构造"></a>集合的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([])) <span class="comment">#&gt;&gt;set() 集合可由列表转换得到,set([])是空字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, (<span class="number">1</span>,<span class="number">3</span>) &#125;<span class="comment">#自动去重</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;2, 1, &#x27;ok&#x27;, (1, 3) &#125;</span></span><br><span class="line"></span><br><span class="line">b = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">c = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, <span class="number">2</span>, b, c))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)<span class="comment">#&gt;&gt;ok 1 2 (3, 4)</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">#&gt;&gt;字符串转集合</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(&#123;<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>:<span class="number">3</span>, (<span class="number">3</span>,<span class="number">4</span>):<span class="number">4</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, &#x27;ok&#x27;, (3，4)&#125; 只取键</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>])<span class="comment">#错误，集合元素没有顺序，不能用下标访问</span></span><br></pre></td></tr></table></figure><p>集合的元素是无序的</p><h2 id="集合常用函数"><a href="#集合常用函数" class="headerlink" title="集合常用函数"></a>集合常用函数</h2><p><code>add(x)</code> 添加元素x。如果x已经存在，则不添加<br><code>clear()</code> 清空集合<br><code>copy()</code> 返回自身的浅拷贝<br><code>remove(x)</code> 删除元素x。如果不存在元素x，则引发异常<br><code>update(x)</code> 将序列x中的元素加入到集合</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>a, b是集合</p><p><code>x in a</code> x是否在集合a中<br><code>a | b</code> 求a和b的并<br><code>a &amp; b</code> 求a和b的交<br><code>a - b</code> 求a和b的差，即在a中而不在b中的元素<br><code>a ^ b</code> 求a和b的对称差，等价于<code>(a|b) - (a&amp;b)</code></p><p><code>a == b</code> a是否元素和b一样<br><code>a != b</code> a是否元素和b不一样</p><p><code>a &lt;= b</code> a是否是b的子集(a有的元素，b都有)<br><code>a &lt; b</code>a是否是b的真子集(a有的元素，b都有，且b还包含a中没有的元素)<br><code>a &gt;= b</code>b是否是a的子集<br><code>a &gt; b</code> b是否是a的真子集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>([])<span class="comment">#a是空集合</span></span><br><span class="line">b = <span class="built_in">set</span>([])</span><br><span class="line">a.add(<span class="number">1</span>)<span class="comment">#添加元素1</span></span><br><span class="line">a.update([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])<span class="comment">#将列表元素添加进a</span></span><br><span class="line">b.update([<span class="string">&#x27;ok&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;&#123;2, 3, 100, &#x27;ok&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4, 100, &#x27;ok&#x27;&#125; 求并</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)<span class="comment">#&gt;&gt;&#123;2, 3&#125;求交</span></span><br><span class="line"><span class="built_in">print</span>(a - b)<span class="comment">#&gt;&gt;&#123;1，4&#125;求差</span></span><br><span class="line">a -= b<span class="comment">#在a中删除b中有的元素</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line">a ^= &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">544</span>&#125; <span class="comment">#对称差</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544，1，3&#125;</span></span><br><span class="line"></span><br><span class="line">a.update(<span class="string">&quot;take&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544, 1, 3, &#x27;e&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">544</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a.remove(<span class="number">544</span>)<span class="comment">#删除元素，若元素不存在，会出错</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 3, &#x27;a&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;e&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a &gt; b)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)<span class="comment">#&gt;&gt;True b是a的子集</span></span><br><span class="line"><span class="built_in">print</span>(b &lt; a)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br></pre></td></tr></table></figure><h2 id="集合例题"><a href="#集合例题" class="headerlink" title="集合例题"></a>集合例题</h2><p>输入一些单词，统计不重复的单词一共有多少个。</p><ul><li><p>输入样例<br>about<br>take<br>about<br>zoo<br>take</p></li><li><p>输出样例<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="built_in">set</span>([])</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">wd = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> wd <span class="keyword">in</span> words:<span class="comment">#不用判断</span></span><br><span class="line">words.add(wd)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(words))</span><br></pre></td></tr></table></figure><p>用列表做，比用集合慢很多很多!单词达到10万，就会非常明显。</p><h1 id="程序或算法的时间复杂度"><a href="#程序或算法的时间复杂度" class="headerlink" title="程序或算法的时间复杂度"></a>程序或算法的时间复杂度</h1><ul><li><p>一个程序或算法的时间效率，也称”时间复杂度”，有时简称”复杂度”</p></li><li><p>复杂度常用大的字母O和小写字母n来表示，比如$O(n)$, $O(n^2)$等。n代表问题的规模，$O(X)$就表示解决问题的时间和X成正比关系。</p></li><li><p>时间复杂度是用算法运行过程中，某种时间固定的操作需要被执行的次数和n的关系来度量的。在无序数列中查找某个数，复杂度是$O(n)$。</p></li><li><p>计算复杂度的时候，只统计执行次数最多的(n足够大时)那种固定操作的次数比如某个算法需要执行加法$n^2$次，除法10000n次， 那么就记其复杂度是$O(n^2)$的。</p></li><li><p>如果复杂度是多个n的函数之和，则只关心随n的增长增长得最快的那个函数</p></li></ul><script type="math/tex; mode=display">O(n^3 + n^2) => O(n^3)</script><script type="math/tex; mode=display">O(2^n + n^3) => O(2^n)</script><script type="math/tex; mode=display">O(n! + 3^n) => O(n!)</script><ul><li>常数复杂度: $O(1)$ 时间(操作次数)和问题的规模无关</li><li>对数复杂度: $O(log(n))$</li><li>线性复杂度: $O(n)$</li><li>多项式复杂度: $O(n^k)$</li><li>指数复杂度: $O(a^n)$</li><li><p>阶乘复杂度: $O(n!)$</p></li><li><p>在无序数列中查找某个数(顺序查找) $O(n)$</p></li><li>插入排序、选择排序等笨排序方法 $O(n^2)$</li><li>快速排序 $O(n * log(n))$</li><li>二分查找 $O(log(n))$</li></ul><h2 id="in用于列表和用于字典、集合的区别"><a href="#in用于列表和用于字典、集合的区别" class="headerlink" title="in用于列表和用于字典、集合的区别"></a>in用于列表和用于字典、集合的区别</h2><p><code>a in b</code></p><p>若b是列表，字符串或元组，则该操作时间复杂度$O(n)$，即时间和b的元素个数成正比</p><p>若b是字典或集合，则该操作时间复杂度$O(1)$，即时间基本就是常数，和b里元素个数无关</p><p>因此集合用于需要经常判断某个东西是不是在一堆东西里的情况此种场合用列表替代集合，容易导致超时!!!!</p><h2 id="一些操作的时间复杂度总结"><a href="#一些操作的时间复杂度总结" class="headerlink" title="一些操作的时间复杂度总结"></a>一些操作的时间复杂度总结</h2><p>$O(1)$：集合、字典增删元素，查找元素，以关键字作为下标访问字典元素的值，列表添加元素到末尾(append) ，列表、字符串、元组根据下标访问元素<br>$O(n)$：列表、元组查找元素(in, index)， 列表插入元素(insert)、删除元素(remove)计算出现次数(count)<br>$O(n log(n))$：python 自带排序sort, sorted<br>$O(log(n))$：在排好序的列表或元组上进行二分查找(初始的查找区间是整个元组或列表，每次和查找区间中点比较大小，并缩小查找区间到原来的一半。类似于查英语词典)有序就会找得快!</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第七章字典和集合</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-OpenJudge</title>
    <link href="http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/"/>
    <id>http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/</id>
    <published>2022-10-04T00:00:00.000Z</published>
    <updated>2023-01-14T13:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge.png" class="" title="实用Python程序设计MOOC-OpenJudge"><p>实用Python程序设计MOOC-OpenJudge</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-OpenJudge"><a href="#实用Python程序设计MOOC-OpenJudge" class="headerlink" title="实用Python程序设计MOOC-OpenJudge"></a>实用Python程序设计MOOC-OpenJudge</h1><h1 id="Python程序设计基础及实践-慕课版-教材题集-94题"><a href="#Python程序设计基础及实践-慕课版-教材题集-94题" class="headerlink" title="Python程序设计基础及实践(慕课版)教材题集(94题)"></a>Python程序设计基础及实践(慕课版)教材题集(94题)</h1><h2 id="001-A-B问题"><a href="#001-A-B问题" class="headerlink" title="001:A+B问题"></a>001:A+B问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>在一行输入两个整数，请输出它们的和。</p></li><li><p>输入<br>一行，两个整数</p></li><li><p>输出<br>两个整数的和</p></li><li><p>样例输入<br>3 14</p></li><li><p>样例输出<br>17</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">0</span>])+<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="002-字符三角形"><a href="#002-字符三角形" class="headerlink" title="002:字符三角形"></a>002:字符三角形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个底边长5个字符，高3个字符的等腰字符三角形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的等腰三角形，底边长5个字符，高3个字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  &quot;</span> + a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + a*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="003-计算-a-b-c的值"><a href="#003-计算-a-b-c的值" class="headerlink" title="003:计算(a+b)*c的值"></a>003:计算(a+b)*c的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>给定3个整数a、b、c，计算表达式(a+b)*c的值。</p><ul><li><p>输入<br>输入仅一行，包括三个整数a、b、c, 数与数之间以一个空格分开。(-10,000&lt; a,b,c &lt;10,000)</p></li><li><p>输出<br>输出一行，即表达式的值</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>((a+b)*c)</span><br></pre></td></tr></table></figure><h2 id="004-反向输出一个三位数"><a href="#004-反向输出一个三位数" class="headerlink" title="004:反向输出一个三位数"></a>004:反向输出一个三位数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>将一个三位数反向输出。</p></li><li><p>输入<br>一个三位数n。</p></li><li><p>输出<br>反向输出n。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">001</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">int</span>(n/<span class="number">100</span>)</span><br><span class="line">b = <span class="built_in">int</span>((n-a*<span class="number">100</span>)/<span class="number">10</span>)</span><br><span class="line">c = (n-a*<span class="number">100</span>-b*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(a))</span><br></pre></td></tr></table></figure><h2 id="005-判断子串"><a href="#005-判断子串" class="headerlink" title="005:判断子串"></a>005:判断子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="005-字符菱形"><a href="#005-字符菱形" class="headerlink" title="005:字符菱形"></a>005:字符菱形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两行字符串，要求判断第一行 字符串是不是第二行的子串</p></li><li><p>输入<br>两行字符串。字符串长度不超过100。</p></li><li><p>输出<br>如果第一行是第二行的子串，就输出 “YES”，否则输出”NO”。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">this is hello world, it is ok.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure></li><li><p>提示<br>python中每使用调用一次 input()，就输入一行的内容。输入内容有几行，就要用几次 input()。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="006-输出第二个整数"><a href="#006-输出第二个整数" class="headerlink" title="006:输出第二个整数"></a>006:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="007-求三个数的和"><a href="#007-求三个数的和" class="headerlink" title="007:求三个数的和"></a>007:求三个数的和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入三个整数或小数，输出它们的和</li></ul><p>如果结果是整数，就保留小数点后面一位的0(用python写则不用特别处理，程序自然会如此) </p><ul><li><p>输入<br>输入三个整数或小数</p></li><li><p>输出<br>和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2.3 4.7</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.0</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b+c)</span><br></pre></td></tr></table></figure></li></ul><h2 id="008-字符串交换"><a href="#008-字符串交换" class="headerlink" title="008:字符串交换"></a>008:字符串交换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为4的字符串，交换这两个字符串的前两个字符后输出</p></li><li><p>输入<br>两个长度为4的字符串</p></li><li><p>输出<br>交换这两个字符串的前两个字符后输出</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCD </span><br><span class="line">1234</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12CD</span><br><span class="line">AB34 </span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1,str2 = <span class="built_in">input</span>(),<span class="built_in">input</span>()</span><br><span class="line">a,b,c,d = str1[<span class="number">0</span>],str1[<span class="number">1</span>],str1[<span class="number">2</span>],str1[<span class="number">3</span>]</span><br><span class="line">e,f,g,h = str2[<span class="number">0</span>],str2[<span class="number">1</span>],str2[<span class="number">2</span>],str2[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(e+f+c+d)</span><br><span class="line"><span class="built_in">print</span>(a+b+g+h)</span><br></pre></td></tr></table></figure><h2 id="009-字符串中的整数求和"><a href="#009-字符串中的整数求和" class="headerlink" title="009:字符串中的整数求和"></a>009:字符串中的整数求和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为3的字符串，每个串前两个字符是数字,后一个字符是字母。 求这两个串中的整数的和</p></li><li><p>输入<br>一行，两个字符串</p></li><li><p>输出<br>两个字符串中整数的和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12B 34D</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><h2 id="010-计算2的幂"><a href="#010-计算2的幂" class="headerlink" title="010:计算2的幂"></a>010:计算2的幂</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定非负整数n，求2^n。</p></li><li><p>输入<br>一个整数n。0 &lt;= n &lt; 31。</p></li><li><p>输出<br>一个整数，即2的n次方。</p></li><li><p>样例输入<br>3</p></li><li><p>样例输出<br>8</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**inp)</span><br></pre></td></tr></table></figure><h2 id="011-计算多项式的值"><a href="#011-计算多项式的值" class="headerlink" title="011:计算多项式的值"></a>011:计算多项式的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>对于多项式f(x) = ax^3 + bx^2 + cx + d 和给定的a, b, c, d, x，计算f(x)的值。</p></li><li><p>输入<br>输入仅一行，包含5个实数，分别是x，及参数a、b、c、d的值，每个数都是绝对值不超过100的双精度浮点数。数与数之间以一个空格分开。</p></li><li><p>输出<br>输出一个实数，即f(x)的值，保留到小数点后7位。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.31 1.2 2 2 3</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">33.0838692</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x,a,b,c,d = <span class="built_in">float</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">2</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">3</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % <span class="built_in">float</span>(a*x**<span class="number">3</span>+b*x**<span class="number">2</span>+c*x+d))</span><br></pre></td></tr></table></figure><h2 id="012-奇偶数判断"><a href="#012-奇偶数判断" class="headerlink" title="012:奇偶数判断"></a>012:奇偶数判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数，判断该数是奇数还是偶数。</p></li><li><p>输入<br>输入仅一行，一个大于零的正整数n。</p></li><li><p>输出<br>输出仅一行，如果n是奇数，输出odd；如果n是偶数，输出even。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出<br>odd</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;even&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="013-点和正方形的关系"><a href="#013-点和正方形的关系" class="headerlink" title="013:点和正方形的关系"></a>013:点和正方形的关系</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>有一个正方形，四个角的坐标（x,y)分别是（1，-1），（1，1），（-1，-1），（-1，1），x是横轴，y是纵轴。写一个程序，判断一个给定的点是否在这个正方形内（包括正方形边界）。</p></li><li><p>输入<br>输入一行，包括两个整数x、y，以一个空格分开，表示坐标(x,y)。</p></li><li><p>输出<br>输出一行，如果点在正方形内，则输出yes，否则输出no。</p></li><li><p>样例输入<br>1 1</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> x&gt;=-<span class="number">1</span> <span class="keyword">and</span> x&lt;=<span class="number">1</span> <span class="keyword">and</span> y&gt;=-<span class="number">1</span> <span class="keyword">and</span> y&lt;=<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="014-三角形判断"><a href="#014-三角形判断" class="headerlink" title="014:三角形判断"></a>014:三角形判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数，分别表示三条线段的长度，判断这三条线段能否构成一个三角形。</p></li><li><p>输入<br>输入共一行，包含三个正整数，分别表示三条线段的长度，数与数之间以一个空格分开。</p></li><li><p>输出<br>如果能构成三角形，则输出“yes” ，否则输出“no”。</p></li><li><p>样例输入<br>3 4 5</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> c+b&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="015-计算邮资"><a href="#015-计算邮资" class="headerlink" title="015:计算邮资"></a>015:计算邮资</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>根据邮件的重量和用户是否选择加急计算邮费。计算规则：重量在1000克以内(包括1000克), 基本费8元。超过1000克的部分，每500克加收超重费4元，不足500克部分按500克计算；如果用户选择加急，多收5元。</p></li><li><p>输入<br>输入一行，包含整数和一个字符，以一个空格分开，分别表示重量（单位为克）和是否加急。如果字符是y，说明选择加急；如果字符是n，说明不加急。</p></li><li><p>输出<br>输出一行，包含一个整数，表示邮费。</p></li><li><p>样例输入<br>1200 y</p></li><li><p>样例输出<br>17</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), str1.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a&lt;=<span class="number">1000</span>:</span><br><span class="line">    out+=<span class="number">8</span></span><br><span class="line"><span class="keyword">elif</span> a&lt;=<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line"><span class="keyword">elif</span> a&gt;<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line">    out+=(<span class="built_in">int</span>((a-<span class="number">1500</span>)//<span class="number">500</span>)+<span class="number">1</span>)*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;y&quot;</span> == b:</span><br><span class="line">    out+=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure></li></ul><h2 id="016-分段函数"><a href="#016-分段函数" class="headerlink" title="016:分段函数"></a>016:分段函数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>编写程序，计算下列分段函数y=f(x)的值。</li></ul><p>y=-x+2.5；0 &lt;=x&lt; 5<br>y=2-1.5(x-3)(x-3)；5&lt;= x&lt;10<br>y=x/2-1.5；10&lt;=x&lt; 20</p><ul><li><p>输入<br>一个浮点数N，0&lt;=N&lt; 20</p></li><li><p>输出<br>输出N对应的分段函数值：f(N)。结果保留到小数点后三位。</p></li><li><p>样例输入<br>1.0</p></li><li><p>样例输出<br>1.500</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>().split()[<span class="number">0</span>])</span><br><span class="line">y = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;<span class="number">5</span>:</span><br><span class="line">    y=-x+<span class="number">2.5</span></span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">5</span> <span class="keyword">and</span> x&lt;<span class="number">10</span>:</span><br><span class="line">    y=<span class="number">2</span>-<span class="number">1.5</span>*(x-<span class="number">3</span>)*(x-<span class="number">3</span>)</span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">10</span> <span class="keyword">and</span> x&lt;<span class="number">20</span>:</span><br><span class="line">    y=x/<span class="number">2</span>-<span class="number">1.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.3f&quot;</span> % y)</span><br></pre></td></tr></table></figure></li></ul><h2 id="017-简单计算器"><a href="#017-简单计算器" class="headerlink" title="017:简单计算器"></a>017:简单计算器</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个最简单的计算器，支持<code>+, -, *, /</code> 四种运算。仅需考虑输入输出为整数的情况(除法结果就是商，忽略余数）</p></li><li><p>输入<br>输入只有一行，共有三个参数，其中第1、2个参数为整数，第3个参数为操作符<code>（+,-,*,/）</code>。</p></li><li><p>输出</p></li></ul><p>输出只有一行，一个整数，为运算结果。然而：</p><ol><li>如果出现除数为0的情况，则输出：Divided by zero!</li><li>如果出现无效的操作符(即不为<code>+, -, *, /</code> 之一），则输出：Invalid operator!</li></ol><ul><li><p>样例输入<br>1 2 +</p></li><li><p>样例输出<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), str1.split()[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;+&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;-&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;*&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;/&quot;</span> == c:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Divided by zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(a/b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid operator!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="018-大象喝水"><a href="#018-大象喝水" class="headerlink" title="018:大象喝水"></a>018:大象喝水</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。</p></li><li><p>输入<br>输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深h和底面半径r，单位都是厘米。</p></li><li><p>输出<br>输出一行，包含一个整数，表示大象至少要喝水的桶数。</p></li><li><p>样例输入<br>23 11</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>如果一个圆桶的深为h厘米，底面半径为r厘米，那么它最多能装Pi <em> r </em> r * h立方厘米的水。(设Pi=3.14159)1升 = 1000毫升，1毫升 = 1 立方厘米</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">20</span>//(<span class="number">3.14159</span>*b*b*a/<span class="number">1000</span>))+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="019-苹果和虫子2"><a href="#019-苹果和虫子2" class="headerlink" title="019:苹果和虫子2"></a>019:苹果和虫子2</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>你买了一箱n个苹果，很不幸的是买完时箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时你还有多少个完整的苹果？</p></li><li><p>输入<br>输入仅一行，包括n，x和y（均为整数）。</p></li><li><p>输出<br>输出也仅一行，剩下的苹果个数</p></li><li><p>样例输入<br>10 4 9</p></li><li><p>样例输出<br>7</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>==y%x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y/x))</span><br><span class="line"><span class="keyword">elif</span> y//x&gt;=<span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y//x-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="020-求整数的和与均值"><a href="#020-求整数的和与均值" class="headerlink" title="020:求整数的和与均值"></a>020:求整数的和与均值</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>读入n (1 &lt;= n &lt;= 10000)个整数，求它们的和与均值。</p></li><li><p>输入</p></li></ul><p>输入第一行是一个整数n，表示有n个整数。<br>第2~n+1行每行包含1个整数。每个整数的绝对值均不超过10000。</p><ul><li><p>输出<br>输出一行，先输出和，再输出平均值(保留到小数点后5位)，两个数间用单个空格分隔。</p></li><li><p>样例输入<br>4<br>344<br>222<br>343<br>222</p></li><li><p>样例输出<br>1131 282. 75000</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">a += <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;%.5f&quot;</span> % a/n)</span><br></pre></td></tr></table></figure><h2 id="021-整数序列的元素最大跨度值"><a href="#021-整数序列的元素最大跨度值" class="headerlink" title="021:整数序列的元素最大跨度值"></a>021:整数序列的元素最大跨度值</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个长度为n的非负整数序列，请计算序列的最大跨度值(最大跨度值=最大值减去最小值)。</p></li><li><p>输入<br>一共2行，第一行为序列的个数n (1 &lt;= n &lt;= 1000),第二行为序列的n个不超过1000的非负整数，整数之间以一个空格分隔。</p></li><li><p>输出<br>输出一行，表示序列的最大跨度值。</p></li><li><p>样例输入<br>6<br>3 0 8 7 5 9</p></li><li><p>样例输出<br>9</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">int</span>(s[i])</span><br><span class="line"><span class="keyword">if</span> a &gt;= temp:</span><br><span class="line">a = temp</span><br><span class="line"><span class="keyword">if</span> b &lt;= temp:</span><br><span class="line">b = temp</span><br><span class="line"><span class="built_in">print</span>(b - a)</span><br></pre></td></tr></table></figure><h2 id="022-奥运奖牌计数"><a href="#022-奥运奖牌计数" class="headerlink" title="022:奥运奖牌计数"></a>022:奥运奖牌计数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>2008年北京奥运会，A国的运动员参与了n天的决赛项目(1 ≤ n ≤ 17)。现在要统计一下A国所获得的金、银、铜牌数目及总奖牌数。</p></li><li><p>输入<br>输入n+1行，第1行是A国参与决赛项目的天数n，其后n行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。</p></li><li><p>输出<br>输出1行，包括4个整数，为A国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。</p></li><li><p>样例输入<br>3<br>1 0 3<br>3 1 0<br>0 3 0</p></li><li><p>样例输出<br>4 4 3 11</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a += <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">b += <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">c += <span class="built_in">int</span>(temp[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a, b, c, a+b+c)</span><br></pre></td></tr></table></figure><h2 id="023-鸡尾酒疗法"><a href="#023-鸡尾酒疗法" class="headerlink" title="023:鸡尾酒疗法"></a>023:鸡尾酒疗法</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>鸡尾酒疗法，原指“高效抗逆转录病毒治疗”(HAART) ，由美籍华裔科学家何大一于1996年提出，是通过三种或三种以上的抗病毒药物联合使用来治疗艾滋病。该疗法的应用可以减少单一用药产生的抗药性， 最大限度地抑制病毒的复制，使被破坏的机体免疫功能部分甚至全部恢复，从而延缓病程进展，延长患者生命，提高生活质量。人们在鸡尾酒疗法的基础上又提出了很多种改进的疗法。为了验证这些治疗方法是否在疗效上比鸡尾酒疗法更好，可用通过临床对照实验的方式进行。假设鸡尾酒疗法的有效率为x，新疗法的有效率为y，如果y-x大于5%，则效果更好，如果x-y大于5%，则效果更差，否则称为效果差不多。下面给出n组临床对照实验，其中第一组采用鸡尾酒疗法， 其他n-1组为各种不同的改进疗法。请写程序判定各种改进疗法效果如何。</p></li><li><p>输入<br>第一行为整数n(1 &lt; n &lt;= 20)；<br>其余n行每行两个整数，第一个整数是临床实验的总病例数(小于等于10000)，第二个疗效有效的病例数。<br>这n行数据中，第一行为鸡尾酒疗法的数据，其余各行为各种改进疗法的数据。</p></li><li><p>输出<br>有n-1行输出，分别表示对应改进疗法的效果:<br>如果效果更好，输出better；如果效果更差，输出worse；否则输出same</p></li><li><p>样例输入<br>5<br>125 99<br>112 89<br>145 99<br>9997<br>23 98</p></li><li><p>样例输出<br>same<br>worse<br>better<br>same</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(a[<span class="number">1</span>]) / <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">y = <span class="built_in">int</span>(temp[<span class="number">1</span>]) / <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">res = x - y</span><br><span class="line"><span class="keyword">if</span> res &gt; <span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;worse&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> res &lt; -<span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;better&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;same&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="024-角谷猜想"><a href="#024-角谷猜想" class="headerlink" title="024:角谷猜想"></a>024:角谷猜想</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>所谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘3加1，如果是偶数，则除以2，得到的结果再按照上述规则重复处理，最终总能够得到1。<br>如，假定初始整数为5，计算过程分别为16、8、4、2、1。<br>程序要求输入一个整数，将经过处理得到1的过程输出来。</p></li><li><p>输入<br>一个正整数N(N &lt;= 2,000,000)</p></li><li><p>输出<br>从输入整数到1的步骤，每一步为一行，每部中描述计算过程。最后一行输出”End”。如果输入为1，直接输出”End”。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5*3+1=16</span><br><span class="line">16/2=8</span><br><span class="line">8/2=4</span><br><span class="line">4/2=2</span><br><span class="line">2/2=1</span><br><span class="line">End</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span>(N == <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d/2=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d*3+1=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="025-正常血压"><a href="#025-正常血压" class="headerlink" title="025:正常血压"></a>025:正常血压</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>监护室每小时测量一次病人的血压， 若收缩压在90-140之间并且舒张压在60-90之间(包含端点值)则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。</p></li><li><p>输入<br>第一行为一个正整数n, n &lt; 100<br>后有n行，每行2个正整数，分别为一次测量的收缩压和舒张压，中间以一个空格分隔。</p></li><li><p>输出<br>输出仅一行，血压连续正常的最长小时数。</p></li><li><p>样例输入<br>4<br>100 80<br>90 50<br>120 60<br>140 90</p></li><li><p>样例输出<br>2</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">90</span> <span class="keyword">and</span> a &lt;= <span class="number">140</span>) <span class="keyword">and</span> (b &gt;= <span class="number">60</span> <span class="keyword">and</span> b &lt;= <span class="number">90</span>):</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= y:</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="026-数字反转"><a href="#026-数字反转" class="headerlink" title="026:数字反转"></a>026:数字反转</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数， 请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零(参见样例2)。</p></li><li><p>输入<br>输入共1行，一个整数N。<br>-1,000,000,000≤N≤1,0000000。</p></li><li><p>输出<br>输出共1行，一个整数，示反转后的新数。</p></li><li><p>样例输入<br>样例#1:<br>123<br>样例#2<br>-380</p></li><li><p>样例输出<br>样例#1:<br>321<br>样例#2:<br>-83</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">input</span>()<span class="comment">#输入字符串</span></span><br><span class="line">length1 = <span class="built_in">int</span>(<span class="built_in">len</span>(N))<span class="comment">#转为数组的长度</span></span><br><span class="line">n = <span class="built_in">int</span>(N)</span><br><span class="line">res = <span class="number">0</span><span class="comment">#最终结果</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;&gt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1-i-<span class="number">1</span>]) * <span class="number">10</span>**(length1-i-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;=0&quot;)</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#print(&quot;&lt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1-<span class="number">1</span>):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1 - i - <span class="number">1</span>]) * <span class="number">10</span> ** (length1 - i - <span class="number">2</span>)</span><br><span class="line">res *= -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="027-求特殊自然数"><a href="#027-求特殊自然数" class="headerlink" title="027:求特殊自然数"></a>027:求特殊自然数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个十进制自然数，它的七进制与九进制表示都是三位数，且七进制与九进制的三位数码表示顺序正好相反。编程求此自然数,并输出显示。</p></li><li><p>输入<br>无</p></li><li><p>输出<br>三行:<br>第一行是此自然数的十进制表示;<br>第二行是此自然数的七进制表示;<br>第三行是此自然数的九进制表示。</p></li><li><p>样例输入<br>(无)</p></li><li><p>样例输出<br>(不提供)</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最小的三位数是九进制的100，对应十进制是1*9**2</span></span><br><span class="line"><span class="comment">#最大的三位数是七进制的666，对应十进制是6*7**2+6*7**1+6*7**0</span></span><br><span class="line">a = <span class="number">9</span>**<span class="number">2</span>  <span class="comment">#循环左边界</span></span><br><span class="line">b = <span class="number">6</span> * <span class="number">7</span>**<span class="number">2</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">1</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">0</span>    <span class="comment">#循环右边界</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">    <span class="comment">#求取七进制</span></span><br><span class="line">    lst = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    lst[<span class="number">0</span>] = i // (<span class="number">7</span>**<span class="number">2</span>)</span><br><span class="line">    lst[<span class="number">2</span>] = i - lst[<span class="number">0</span>] * <span class="number">7</span>**<span class="number">2</span></span><br><span class="line">    lst[<span class="number">1</span>] = lst[<span class="number">2</span>] // <span class="number">7</span></span><br><span class="line">    lst[<span class="number">2</span>] -= lst[<span class="number">1</span>] * <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#反推九进制和十进制对比</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span>**<span class="number">2</span> * lst[<span class="number">2</span>] + <span class="number">9</span> * lst[<span class="number">1</span>] + lst[<span class="number">0</span>]) == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">0</span>], lst[<span class="number">1</span>], lst[<span class="number">2</span>], sep=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">2</span>], lst[<span class="number">1</span>], lst[<span class="number">0</span>], sep=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="028-数字统计"><a href="#028-数字统计" class="headerlink" title="028:数字统计"></a>028:数字统计</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>请统计某个给定范围[L, R]的所有整数中，数字2出现的次数。<br>比如给定范围[2, 22]，数字2在数2中出现了1次，在数12中出现1次，在数20中出现1次，在数21中出现1次，在数22中出现2次，所以数字2在该范围内一共出现了6次。</p></li><li><p>输入<br>输入共1行，为两个正整数L和R，之间用一个空格隔开。</p></li><li><p>输出<br>输出共1行，示数字2出现的次数。</p></li><li><p>样例输入<br>样例 #1:<br>2 22<br>样例 #2:<br>2 100</p></li><li><p>样例输出<br>样例 #1:<br>6<br>样例 #2:<br>20</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">temp2 = <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp2)):</span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> == <span class="built_in">int</span>(temp2[j]):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="029-求最大公约数问题"><a href="#029-求最大公约数问题" class="headerlink" title="029:求最大公约数问题"></a>029:求最大公约数问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定两个正整数，求它们的最大公约数。</p></li><li><p>输入<br>输入一行，包含两个正整数(&lt;1,000,000,000)。</p></li><li><p>输出<br>输出一个正整数，即这两个正整数的最大公约数。</p></li><li><p>样例输入<br>6 9</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>求最大公约数可以使用辗转相除法：<br>假设a &gt; b &gt; 0，那么a和b的最大公约数等于b和a%b的最大公约数，然后把b和a%b作为新一轮的输入。<br>由于这个过程会一直递减，直到a%b等于0的时候，b的值就是所要求的最大公约数。<br>比如：<br>9和6的最大公约数等于6和9%6=3的最大公约数。<br>由于6%3==0，所以最大公约数为3。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1, int2 = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fuc</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == a % b):</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = b</span><br><span class="line">        b = a % b</span><br><span class="line">        a = temp</span><br><span class="line">        fuc(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(int1 &gt;= int2):</span><br><span class="line">    fuc(int1, int2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fuc(int2, int1)</span><br></pre></td></tr></table></figure><h2 id="030-多少种取法"><a href="#030-多少种取法" class="headerlink" title="030:多少种取法"></a>030:多少种取法</h2><blockquote><p>总时间限制: 2000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数m，n，s<br>问从1到m这m个数里面取n个不同的数，使它们和是s，有多少种取法</p></li><li><p>输入<br>多组数据<br>输入的第一行是整数t，表示有t组数据<br>此后有t行，每行是一组数据<br>每组数据就是三个正整数，m，n，s ( n &lt;= 10,s &lt;= 20)</p></li><li><p>输出<br>对每组数据，输出答案</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">13 4 20</span><br><span class="line">12 5 18</span><br><span class="line">1 1 1</span><br><span class="line">1 2 1</span><br><span class="line">119 3 20</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">24</span><br></pre></td></tr></table></figure></li><li><p>提示<br>用函数ways(m, n, s)表示 从1到m这m个数里面取n个不同的数，使它们和是s的取法总数<br>显然，必须取m个数，不能不取(除非m == 0)</p></li></ul><p>1) 考虑如果 m &gt; s, 问题可以等价于什么？<br>2) 对于m&lt;= s的情况，把所有的取法分成两类:<br>第一类： 取m。则取m后，剩下的问题变成什么？<br>第二类： 不取m，那么剩下的问题变成什么？<br>3) 注意边界条件（即递归终止条件，即不需要递归的条件）<br>边界条件一般是 n,m,s = 0, = 1 之类的情况。</p><p>例如：从1-m这m个数里面，取0个数，使得它们的和是0，有几种取法? 答案是1。<br>从1到m这m个数里面，取0个数，使得它们的和是s(s&gt;0)，有几种取法? 答案是0。无解对应的答案就是0.<br>当 m &lt; n时，答案是0，因为没法取n个数<br>当 m = 0时，只要m和s有一个不是0，ways(m,n,s)就应该返回0。</p><p>递归的时候，函数的参数会减少，如果会出现某个参数一直没完没了减少下去，那就不对了。因此,边界条件一定要考虑周全，确保递归可以终止。</p><p>边界条件可以有多种写法。</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ways</span>(<span class="params">m, n, s</span>):</span><br><span class="line">    <span class="comment"># 第一类，各种特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">0</span> <span class="keyword">or</span> n &lt; <span class="number">0</span> <span class="keyword">or</span> m &lt;= <span class="number">0</span>:  <span class="comment"># 当输入数据小于0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当n==0且s==0时，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s &gt; <span class="number">0</span>:  <span class="comment"># 当取0个，但是s&gt;0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:  <span class="comment"># 判断n=1的情况</span></span><br><span class="line">        <span class="keyword">if</span> m &gt;= s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 若m&gt;=s,只有1种取法</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 若m&lt;s,则取法为0</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt;= n <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当m&gt;=n 并且 s=0时 ，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> s == <span class="number">1</span>:  <span class="comment"># 当n&gt;1且s=0时 ，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二类，讨论大类</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt; s:  <span class="comment"># 当m&gt;s时</span></span><br><span class="line">        <span class="keyword">if</span> n == s <span class="keyword">or</span> n &gt; s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">1</span> &lt; n &lt; s:</span><br><span class="line">            <span class="keyword">return</span> ways(s - <span class="number">1</span>, n, s)</span><br><span class="line">    <span class="keyword">elif</span> m &lt; s:  <span class="comment"># 当m&lt;s时</span></span><br><span class="line">        <span class="keyword">return</span> ways(m - <span class="number">1</span>, n - <span class="number">1</span>, s - m) + ways(m - <span class="number">1</span>, n, s)  <span class="comment"># 当取m时与不取m时的和</span></span><br><span class="line">    <span class="keyword">elif</span> m == s:  <span class="comment"># 当m=s时</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; m:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ways(m - <span class="number">1</span>, n, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">    m, n, s = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(ways(m, n, s))</span><br></pre></td></tr></table></figure><h2 id="031-石头剪刀布"><a href="#031-石头剪刀布" class="headerlink" title="031:石头剪刀布"></a>031:石头剪刀布</h2><blockquote><p>总时间限制：1000ms 内存限制：65536kB</p></blockquote><ul><li>描述<br>石头剪刀布是常见的猜拳游戏。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出拳一样，则不分胜负。</li></ul><p>一天，小A和小B正好在玩石头剪刀布。已知他们的出拳都是有周期性规律的，比如：“石头-布-石头-剪刀-石头-布-石头-剪刀……”，就是以“石头-布-石头-剪刀”为周期不断循环的。请问，小A和小B比了N轮之后，谁赢的轮数多？</p><ul><li><p>输入<br>输入包含三行。<br>第一行包含三个整数：N，NA，NB，分别表示比了N轮，小A出拳的周期长度，小B出拳的周期长度。0 &lt; N， NA， NB &lt; 100。<br>第二行包含NA个整数，表示小A出拳的规律。<br>第三行包含NB个整数，表示小B出拳的规律。<br>其中，0表示”石头”，2表示”剪刀”，5表示”布”。相邻两个整数之间用单个空格隔开。</p></li><li><p>输出<br>输出一行，如果小A赢的轮数多，输出A；如果小B赢的轮数多，输出B；如果两人打平，输出draw。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 3 4</span><br><span class="line">0 2 5</span><br><span class="line">0 5 0 2</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提示<br>对于测试数据，猜拳过程为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A：0 2 5 0 2 5 0 2 5 0</span><br><span class="line">B：0 5 0 2 0 5 0 2 0 5</span><br></pre></td></tr></table></figure><p>A赢了4轮，B赢了2轮，双方打平4轮，所以A赢的轮数多。</p></li><li><p>提交代码</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0</th><th style="text-align:center">2</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">平(0)</td><td style="text-align:center">B(2)</td><td style="text-align:center">A(5)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">A(2)</td><td style="text-align:center">平(4)</td><td style="text-align:center">B(7)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">B(5)</td><td style="text-align:center">A(7)</td><td style="text-align:center">平(10)</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">str1, strA, strB = <span class="built_in">input</span>(), <span class="built_in">input</span>(), <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">N, NA, NB = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line">A, B = strA.split(), strB.split()</span><br><span class="line"></span><br><span class="line">countA, countB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    temp = <span class="built_in">int</span>(A[i % NA]) + <span class="built_in">int</span>(B[i % NB])</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == temp <span class="keyword">or</span> <span class="number">4</span> == temp <span class="keyword">or</span> <span class="number">10</span> == temp):</span><br><span class="line">        countA += <span class="number">1</span></span><br><span class="line">        countB += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">2</span> == temp <span class="keyword">or</span> <span class="number">7</span> == temp):</span><br><span class="line">        <span class="keyword">if</span>(A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">5</span> == temp):</span><br><span class="line">        <span class="keyword">if</span> (A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(countA &gt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA &lt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA == countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draw&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="032-统计数字字符个数"><a href="#032-统计数字字符个数" class="headerlink" title="032:统计数字字符个数"></a>032:统计数字字符个数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一行字符，统计出其中数字字符的个数。</p></li><li><p>输入<br>一行字符串，总长度不超过255。</p></li><li><p>输出<br>输出为1行，输出字符串里面数字字符的个数。</p></li><li><p>样例输入<br>Peking University is set up at 1898.</p></li><li><p>样例输出<br>4</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].isdigit():</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="033-大小写字母互换"><a href="#033-大小写字母互换" class="headerlink" title="033:大小写字母互换"></a>033:大小写字母互换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>把一个字符串中所有出现的大写字母都替换成小写字母，同时把小写字母替换成大写字母。</p></li><li><p>输入<br>输入一行：待互换的字符串。</p></li><li><p>输出<br>输出一行：完成互换的字符串（字符串长度小于80）。</p></li><li><p>样例输入<br>If so, you already have a Google Account. You can sign in on the right. </p></li><li><p>样例输出<br>iF SO, YOU ALREADY HAVE A gOOGLE aCCOUNT. yOU CAN SIGN IN ON THE RIGHT. </p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].islower():</span><br><span class="line">        str2 += str1[i].upper()</span><br><span class="line">    <span class="keyword">elif</span> str1[i].isupper():</span><br><span class="line">        str2 += str1[i].lower()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="034-过滤多余的空格"><a href="#034-过滤多余的空格" class="headerlink" title="034:过滤多余的空格"></a>034:过滤多余的空格</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个句子中也许有多个连续空格，过滤掉多余的空格，只留下一个空格。</p></li><li><p>输入<br>一行，一个字符串（长度不超过200），句子的头和尾都没有空格。</p></li><li><p>输出<br>过滤之后的句子。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello      world.This is    c language.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world.This is c language.</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split()</span><br><span class="line">str2 = str1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    str2 += <span class="string">&quot; &quot;</span></span><br><span class="line">    str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="035-找第一个只出现一次的字符"><a href="#035-找第一个只出现一次的字符" class="headerlink" title="035:找第一个只出现一次的字符"></a>035:找第一个只出现一次的字符</h2><blockquote><p>总时间限制: 1000ms 内存限制：65536kB</p></blockquote><ul><li><p>描述<br>给定一个只包含小写字母的字符串，请你找到第一个仅出现一次的字符。如果没有，输出no。</p></li><li><p>输入<br>一个字符串，长度小于100000。</p></li><li><p>输出<br>输出第一个仅出现一次的字符，若没有则输出no。</p></li><li><p>样例输入<br>abcabd</p></li><li><p>样例输出<br>c</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1 = <span class="number">0</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    char1 = str1[i]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str1[j] == str1[i] <span class="keyword">and</span> i != j:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        int1 = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int1 == <span class="number">0</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(str1[int1])</span><br></pre></td></tr></table></figure><h2 id="036-判断字符串是否为回文"><a href="#036-判断字符串是否为回文" class="headerlink" title="036:判断字符串是否为回文"></a>036:判断字符串是否为回文</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个字符串，输出该字符串是否回文。回文是指顺读和倒读都一样的字符串。</p></li><li><p>输入<br>输入为一行字符串（字符串中没有空白字符，字符串长度不超过100）。</p></li><li><p>输出<br>如果字符串是回文，输出yes；否则，输出no。</p></li><li><p>样例输入<br>abcdedcba</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(str1)/<span class="number">2</span>)):</span><br><span class="line">    str2 += str1[i]</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">if</span> (str2[i] != str1[<span class="built_in">len</span>(str1)-i-<span class="number">1</span>]):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="037-字符串最大跨距"><a href="#037-字符串最大跨距" class="headerlink" title="037:字符串最大跨距"></a>037:字符串最大跨距</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>有三个字符串S,S1,S2，其中，S长度不超过300，S1和S2的长度不超过10。想检测S1和S2是否同时在S中出现，且S1位于S2的左边，并在S中互不交叉（即，S1的右边界点在S2的左边界点的左侧）。计算满足上述条件的最大跨距（即，最大间隔距离：最右边的S2的起始点与最左边的S1的终止点之间的字符数目）。如果没有满足条件的S1，S2存在，则输出-1。</p><p>例如，S = “abcd123ab888efghij45ef67kl”, S1=”ab”, S2=”ef”，其中，S1在S中出现了2次，S2也在S中出现了2次，最大跨距为：18。</p><ul><li><p>输入<br>三个串：S, S1, S2，其间以逗号间隔（注意，S, S1, S2中均不含逗号和空格）；</p></li><li><p>输出<br>S1和S2在S最大跨距；若在S中没有满足条件的S1和S2，则输出-1。</p></li><li><p>样例输入<br>abcd123ab888efghij45ef67kl,ab,ef</p></li><li><p>样例输出<br>18</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">S, S1, S2 = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">StartS1, StartS2 = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">StartS1 = S.find(S1)</span><br><span class="line">StartS2 = <span class="built_in">len</span>(S) - S[::-<span class="number">1</span>].find(S2[::-<span class="number">1</span>]) - <span class="built_in">len</span>(S2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> StartS1 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS2 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS1 + <span class="built_in">len</span>(S1) &gt; StartS2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(StartS2 - (StartS1 + <span class="built_in">len</span>(S1)))</span><br></pre></td></tr></table></figure><h2 id="038-找出全部子串位置"><a href="#038-找出全部子串位置" class="headerlink" title="038:找出全部子串位置"></a>038:找出全部子串位置</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入两个串s1，s2，找出s2在s1中所有出现的位置</li></ul><p>两个子串的出现不能重叠。例如’aa’在 aaaa 里出现的位置只有0,2</p><ul><li><p>输入<br>第一行是整数n<br>接下来有n行，每行两个不带空格的字符串s1，s2</p></li><li><p>输出<br>对每行，从小到大输出s2在s1中所有的出现位置。位置从0开始算<br>如果s2没出现过，输出 “no”<br>行末多输出空格没关系</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">ababcdefgabdefab ab</span><br><span class="line">aaaaaaaaa a</span><br><span class="line">aaaaaaaaa aaa </span><br><span class="line">112123323 a</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 2 9 14 </span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br><span class="line">0 3 6 </span><br><span class="line">no</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s[<span class="number">0</span>]:</span><br><span class="line">        a = s[<span class="number">0</span>].find(s[<span class="number">1</span>],m)</span><br><span class="line">        <span class="keyword">if</span> a == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> total == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            m = a + <span class="built_in">len</span>(s[<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(a,<span class="string">&quot;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="039-万年历"><a href="#039-万年历" class="headerlink" title="039:万年历"></a>039:万年历</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定年月日，求星期几。已知2020年11月18日是星期三。另外，本题有公元0年，这个和真实的纪年不一样</p></li><li><p>输入<br>第一行是n(n&lt;=30)，表示有n组数据<br>接下来n行，每行是一组数据。<br>每行三个整数y，m，d，分别代表年，月，日。(-1000000&lt;=y&lt;=1000000)</p></li></ul><p>若今年是2017年，则往前就是2016年，2015年….一直数到2年，1年，再往前就是0年，-1年，-2年…..</p><ul><li>输出<br>对每组数据，输出星期几，星期几分别用</li></ul><p>“Sunday”,”Monday”,”Tuesday”,”Wednesday”,”Thursday”, “Friday”,”Saturday” 表示</p><p>如果月份和日期不合法，输出”Illegal”</p><ul><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2017 2 29</span><br><span class="line">2017 13 2</span><br><span class="line">0 1 1</span><br><span class="line">-2 3 4</span><br><span class="line">2017 10 18</span><br><span class="line">2015 12 31</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Illegal</span><br><span class="line">Illegal</span><br><span class="line">Saturday</span><br><span class="line">Wednesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">judge_week</span>(<span class="params">year, month, day</span>):</span><br><span class="line">    lst1 = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    lst2 = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    date = days = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    lst_days = [<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">29</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">28</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> year &gt;= <span class="number">1</span>:  <span class="comment">#1年1月1日为星期一</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, year):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>    <span class="comment">#累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month-<span class="number">1</span>):</span><br><span class="line">                date += lst2[i]    <span class="comment">#累加整月数</span></span><br><span class="line">        total=date+day+days</span><br><span class="line">        x=total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[x])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(year + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>  <span class="comment"># 累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst2[i]  <span class="comment"># 累加整月数</span></span><br><span class="line">        total = date - day + <span class="number">1</span> + days</span><br><span class="line">        x = total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[(<span class="number">8</span> - x)%<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    year, month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    judge_week(year, month, day)</span><br></pre></td></tr></table></figure><h2 id="040-成绩排序"><a href="#040-成绩排序" class="headerlink" title="040:成绩排序"></a>040:成绩排序</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。</p></li><li><p>输入<br>第一行为n (0 &lt; n &lt; 20)，表示班里的学生数目；<br>接下来的n行，每行为每个学生的名字和他的成绩, 中间用单个空格隔开。名字只包含字母且长度不超过20，成绩为一个不大于100的非负整数。</p></li><li><p>输出<br>把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Kitty 80</span><br><span class="line">Hanmeimei 90</span><br><span class="line">Joey 92</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Joey 92</span><br><span class="line">Hanmeimei 90 </span><br><span class="line">Kitty 80</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">student = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    temp1 = [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])]</span><br><span class="line">    student.append(temp1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -x[<span class="number">1</span>], x[<span class="number">0</span>]</span><br><span class="line">student.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(student[i][<span class="number">0</span>], student[i][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="041-图像模糊处理"><a href="#041-图像模糊处理" class="headerlink" title="041:图像模糊处理"></a>041:图像模糊处理</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定n行m列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：<br>1.四周最外侧的像素点灰度值不变；<br>2.中间各像素点新灰度值为该像素点及其上下左右相邻四个像素点原灰度值的平均（舍入到最接近的整数）。</p></li><li><p>输入<br>第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 &lt;= n &lt;= 100，1 &lt;= m &lt;= 100。<br>接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。</p></li><li><p>输出<br>n行，每行m个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">100 0 100 0 50</span><br><span class="line">50 100 200 0 0</span><br><span class="line">50 50 100 100 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100 0 100 0 50</span><br><span class="line">50 80 100 60 0</span><br><span class="line">50 80 100 90 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#print(n,m)</span></span><br><span class="line"></span><br><span class="line">picture = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    str1 = <span class="built_in">input</span>()</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        temp += [<span class="built_in">int</span>(str1.split()[j])]</span><br><span class="line">    picture.append(temp)</span><br><span class="line"><span class="comment">#print(picture)</span></span><br><span class="line"><span class="comment">#print(picture[0][1])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">outpicture = copy.deepcopy(picture)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m-<span class="number">1</span>):</span><br><span class="line">            temp = (picture[i-<span class="number">1</span>][j] + picture[i+<span class="number">1</span>][j] + picture[i][j] + picture[i][j-<span class="number">1</span>] + picture[i][j+<span class="number">1</span>]) / <span class="number">5</span></span><br><span class="line">            outpicture[i][j] = <span class="built_in">round</span>(temp)</span><br><span class="line"><span class="comment">#print(outpicture)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">print</span>(outpicture[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="042-向量点积计算"><a href="#042-向量点积计算" class="headerlink" title="042:向量点积计算"></a>042:向量点积计算</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>在线性代数、计算几何中，向量点积是一种十分重要的运算。</li></ul><p>给定两个n维向量 $a=(a_1, a_2, …, a_n)$ 和 $ b=(b_1, b_2, …, b_n) $，求点积$ a·b=a_1 b_1+a_2 b_2+…+a_n b_n $。</p><ul><li><p>输入<br>第一行是一个整数n。1 &lt;= n &lt;= 1000。<br>第二行包含n个整数$ a_1, a_2, …, a_n $。<br>第三行包含n个整数$ b_1, b_2, …, b_n $。<br>相邻整数之间用单个空格隔开。每个整数的绝对值都不超过1000。</p></li><li><p>输出<br>一个整数，即两个向量的点积结果。</p></li><li><p>样例输入<br>3<br>1 4 6<br>2 1 5</p></li><li><p>样例输出<br>36</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">stra = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">strb = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    result += <span class="built_in">int</span>(stra[i]) * <span class="built_in">int</span>(strb[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="043-病人排队"><a href="#043-病人排队" class="headerlink" title="043:病人排队"></a>043:病人排队</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：</li></ul><ol><li>老年人（年龄 &gt;= 60岁）比非老年人优先看病。</li><li>老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</li><li>非老年人按登记的先后顺序看病。</li></ol><ul><li><p>输入<br>第1行，输入一个小于100的正整数，表示病人的个数；<br>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。</p></li><li><p>输出<br>按排好的看病顺序输出病人的ID，每行一个。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">021075 40</span><br><span class="line">004003 15</span><br><span class="line">010158 67</span><br><span class="line">021033 75</span><br><span class="line">102012 30</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">021033</span><br><span class="line">010158</span><br><span class="line">021075</span><br><span class="line">004003</span><br><span class="line">102012</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">patient = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    patient.append(temp)</span><br><span class="line"></span><br><span class="line">patientA, patientB = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(patient[i][<span class="number">1</span>]) &gt;= <span class="number">60</span>:</span><br><span class="line">        patientA.append(patient[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        patientB.append(patient[i])</span><br><span class="line"><span class="comment">#print(patientA)</span></span><br><span class="line"><span class="comment">#print(patientB)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -<span class="built_in">int</span>(x[<span class="number">1</span>])</span><br><span class="line">patientA.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientA)):</span><br><span class="line">    <span class="built_in">print</span>(patientA[i][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientB)):</span><br><span class="line">    <span class="built_in">print</span>(patientB[i][<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="044-矩阵乘法"><a href="#044-矩阵乘法" class="headerlink" title="044:矩阵乘法"></a>044:矩阵乘法</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>计算两个矩阵的乘法。<code>n * m</code> 阶的矩阵A乘以 <code>m * k</code> 阶的矩阵B得到的矩阵C是 <code>n * k</code> 阶的，且<code>C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + …… +A[i][m-1] * B[m-1][j]</code> (<code>C[i][j]</code> 表示C矩阵中第i行第j列元素)。</p></li><li><p>输入<br>第一行为n, m, k，表示A矩阵是n行m列，B矩阵是m行k列，n, m, k均小于100<br>然后先后输入A和B两个矩阵，A矩阵n行m列，B矩阵m行k列，矩阵中每个元素的绝对值不会大于1000。</p></li><li><p>输出<br>输出矩阵C，一共n行，每行k个整数，整数之间以一个空格分开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tempstr = <span class="built_in">input</span>()</span><br><span class="line">n, m, k = <span class="built_in">int</span>(tempstr.split()[<span class="number">0</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">1</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">A, B, C, CC = [], [], [], <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    D = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">           d += <span class="built_in">int</span>(A[i][l]) * <span class="built_in">int</span>(B[l][j])</span><br><span class="line">        D.append(d)</span><br><span class="line">    C = C + D</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n*k):</span><br><span class="line">    CC = CC + <span class="built_in">str</span>(C[i])</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % k==<span class="number">0</span>:</span><br><span class="line">        CC += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        CC += <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(CC)</span><br></pre></td></tr></table></figure></li></ul><h2 id="045-回文子串"><a href="#045-回文子串" class="headerlink" title="045:回文子串"></a>045:回文子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>给定一个字符串，输出所有长度至少为2的回文子串。</li></ul><p>回文子串即从左往右输出和从右往左输出结果是一样的字符串，比如：abba，cccdeedccc都是回文字符串。</p><ul><li><p>输入<br>一个字符串，由字母或数字组成。长度500以内。</p></li><li><p>输出<br>输出所有的回文子串，每个子串一行。<br>子串长度小的优先输出，若长度相等，则出现位置靠左的优先输出。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123321125775165561</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">33</span><br><span class="line">11</span><br><span class="line">77</span><br><span class="line">55</span><br><span class="line">2332</span><br><span class="line">2112</span><br><span class="line">5775</span><br><span class="line">6556</span><br><span class="line">123321</span><br><span class="line">165561</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span> - i):</span><br><span class="line">        temp = str1[j:j + i]</span><br><span class="line">        <span class="keyword">if</span> temp == temp[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure></li></ul><h2 id="046-校园食宿预订系统"><a href="#046-校园食宿预订系统" class="headerlink" title="046:校园食宿预订系统"></a>046:校园食宿预订系统</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>某校园为方便学生订餐，推出食堂预定系统。食宿平台会在前一天提供菜单，学生在开饭时间前可订餐。 食堂每天会推出m个菜，每个菜有固定的菜价和总份数，售卖份数不能超过总份数。 假设共有n个学生点餐，每个学生固定点3个菜，当点的菜售罄时, 学生就买不到这个菜了。 请根据学生预定记录，给出食堂总的预定收入 数据满足1 &lt;= n &lt;= 6000，3 &lt;= m &lt;= 6000，单品菜价不大于1000元，每个菜的配额不超过3000</p></li><li><p>输入<br>第一行两个整数n和m，代表有n个学生订餐，共有m个可选的菜<br>下面m行，每行三个元素，分别是菜名、售价和可提供量，保证菜名不重合，菜价为整数<br>下面n行，每行三个元素，表示这个学生点的三个菜的菜名</p></li><li><p>输出<br>一个整数，表示食堂的收入</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">yangroupaomo 13 10</span><br><span class="line">jituifan 7 5</span><br><span class="line">luosifen 16 3</span><br><span class="line">xinlamian 12 20</span><br><span class="line">juruo_milktea 999 1</span><br><span class="line">yangroupaomo luosifen juruo_milktea</span><br><span class="line">luosifen xinlamian jituifan</span><br><span class="line">yangroupaomo jituifan juruo_milktea</span><br><span class="line">jituifan xinlamian luosifen</span><br><span class="line">yangroupaomo yangroupaomo yangroupaomo</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p></li></ul><p>1157</p><ul><li><p>提示<br>如果用python做，要用字典，<br>如果用其它语言做，也要用类似的数据结构<br>否则会超时<br>名字长度范围没有给出，长度不会太离谱。请自己选用合适的办法确保这不是个问题</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])</span><br><span class="line">A, B, C = <span class="built_in">dict</span>(), <span class="built_in">dict</span>(), <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment"># 菜谱A：&#123;菜名:[售价,现在数量]&#125;</span></span><br><span class="line"><span class="comment"># 学生B：&#123;学生编号:[菜名0,菜名1,菜名2]&#125;</span></span><br><span class="line"><span class="comment"># 菜谱C：&#123;菜名:[售价,原始数量]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜谱读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    A.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line">    C.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生选菜读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    B.update(&#123;i: [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历学生点菜</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> B.values():</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">0</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">0</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">1</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">1</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">1</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">2</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">2</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">2</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"><span class="comment">#print(C)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="comment"># 遍历菜谱计算价格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A.keys():</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> C:</span><br><span class="line">        <span class="built_in">sum</span> += (C[i][<span class="number">1</span>] - A[i][<span class="number">1</span>]) * C[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="047-找出所有整数"><a href="#047-找出所有整数" class="headerlink" title="047:找出所有整数"></a>047:找出所有整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>给一段文字，可能有中文，把里面的所有非负整数都找出来，不需要去掉前导0。如果碰到 “012.34”这样的就应该找出两个整数012和34，碰到0.050，就找出0和050</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m, s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>一段文字</p><ul><li>输出</li></ul><p>按顺序输出所有整数，每个整数一行</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给一段文字,可能有中文,把里面的所有整数都找出来,不需要去掉前导0去。如果碰到 &quot;012.34&quot;这样的就应该找出两个整数012和34,碰到0.050,就找出0和050</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">012</span><br><span class="line"><span class="number">34</span></span><br><span class="line">012</span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">050</span><br><span class="line"><span class="number">0</span></span><br><span class="line">050</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">&#x27;\d+&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="048-找出所有整数和小数"><a href="#048-找出所有整数和小数" class="headerlink" title="048:找出所有整数和小数"></a>048:找出所有整数和小数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>给一段文字，可能有中文，把里面的所有非负整数和小数找出来，不需要去掉前导0或小数点后面多余的0， 然后依次输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m,s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li><p>输入<br>一段文字</p></li><li><p>输出<br>按顺序输出所有整数和小数，每个整数一行</p></li><li><p>样例输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给一段文字，可能有中文，把里面的0所有78..76数都.12找出来。0334.0000</span><br><span class="line">如果碰到 &quot;0012.3400&quot;这样0的就24.23应该找出两个0.34400整数 00.00和00.4455340000,碰到 00.050</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">78</span><br><span class="line">76</span><br><span class="line">12</span><br><span class="line">0334.0000</span><br><span class="line">0012.3400</span><br><span class="line">0</span><br><span class="line">24.23</span><br><span class="line">0.34400</span><br><span class="line">00.00</span><br><span class="line">00.4455340000</span><br><span class="line">00.050</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">r&#x27;\d+\.\d+|\d+&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="049-找出小于100的整数"><a href="#049-找出小于100的整数" class="headerlink" title="049:找出小于100的整数"></a>049:找出小于100的整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>有给定的两行输入，在每一行的输入中提取在[0,100)内的整数(不包括100)并依次输出。注意要排除负数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = <span class="string">r&quot;(^|[^0-9-])(\d&#123;1,2&#125;)([^0-9]|$)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        lst = re.findall(m,s)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">// 在此处补充你的代码</span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>12高兴-23大小256的数1234好啊24对的好0这个1这个2这个12这个134这个0123这个12<br>123高兴-23大小256的数1234好啊24对的23这</p><ul><li><p>输出<br>12<br>24<br>0<br>1<br>2<br>12<br>12<br>23</p></li><li><p>样例输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12高兴-23大小256的数1234好啊24对的好0这个1这个2这个12这个134这个0123这个12</span><br><span class="line">123高兴-23大小256的数1234好啊24对的23这</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">24</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">12</span><br><span class="line">12</span><br><span class="line">24</span><br><span class="line">23</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="050-密码判断"><a href="#050-密码判断" class="headerlink" title="050:密码判断"></a>050:密码判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>用户密码的格式是： 1） 以大写或小写字母开头 2) 至少要有8个字符，最长不限 3) 由字母、数字、下划线或 ‘-‘ 组成 输入若干字符串，判断是不是符合密码的条件。如果是，输出 yes 如果不是，输出 no</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> re.match(m,s) != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>若干行</p><ul><li>输出</li></ul><p>对每行输入，判断其是否符合密码格式，相应地输出 yes 或no</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abdc</span><br><span class="line">a223_b-cdef</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">&#x27;^[a-zA-Z][\w-]&#123;7,&#125;$&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="051-寻找h3"><a href="#051-寻找h3" class="headerlink" title="051:寻找h3"></a>051:寻找h3</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>程序填空，输出指定结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = \</span><br><span class="line">// 在此处补充你的代码</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span>  re.findall(m,<span class="string">&quot;cdef&lt;h3&gt;abd&lt;/h3&gt;&lt;h3&gt;bcK&lt;/h3&gt;&lt;h3&gt;123&lt;/h3&gt;KJM&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><ul><li><p>输入<br>无</p></li><li><p>输出<br>abd<br>bcK<br>123</p></li><li><p>样例输入<br>无</p></li><li><p>样例输出</p></li></ul><p>abd<br>bcK<br>123</p><ul><li>提示</li></ul><p>请注意，同一行的代码要在中间换行，在python 里的写法是加 “\”<br>如<br>x = \<br>3<br>即为<br>x = 3</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&quot;(?&lt;=&lt;h3&gt;)\w+(?=&lt;/h3&gt;)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="052-找-lt-gt-中的数"><a href="#052-找-lt-gt-中的数" class="headerlink" title="052:找 &lt; &gt; 中的数"></a>052:找 &lt; &gt; 中的数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><p>输入一串字符，将输入中的，在 &lt; &gt; 里面的，没有前导0的少于4位的整数依次输出。单独的0也要输出。</p><ul><li>输入</li></ul><p>第一行是整数n，表示后面一共有n个字符串<br>接下来有n行字符串</p><ul><li>输出</li></ul><p>对每个字符串，输出题目要求的结果</p><ul><li>样例输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">abc&lt;<span class="number">123</span>&gt;cd&lt;0456&gt;,<span class="number">78</span>,<span class="number">123</span>&lt;<span class="number">3554</span>&gt;1a&lt;<span class="number">38</span>&gt;ab&lt;08&gt;,<span class="number">1</span>&lt;<span class="number">0</span>&gt;111cd&lt;<span class="number">3</span>&gt;</span><br><span class="line">&lt;<span class="number">12</span>&gt;cd&lt;<span class="number">77347</span>&gt;</span><br><span class="line">&lt;&gt;</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123 38 0 3</span><br><span class="line">12</span><br><span class="line">NONE</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;\&lt;(0|[1-9]\d&#123;0,2&#125;)\&gt;&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    lst = re.findall(m, s)</span><br><span class="line">    <span class="keyword">if</span> lst == []:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NONE&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(*lst)</span><br></pre></td></tr></table></figure><h2 id="053-电话号码"><a href="#053-电话号码" class="headerlink" title="053:电话号码"></a>053:电话号码</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在一串文字中抽取tag及其里面包含的电话号码的区号。</span><br><span class="line">tag的定义:</span><br><span class="line">&quot;&lt;X&gt;&quot;和它右边离他最近的那个&quot;&lt;/X&gt;&quot;构成一个tag。 &quot;&lt;X&gt;&quot;和&quot;&lt;/X&gt;&quot;之间可以有</span><br><span class="line">任何文字。</span><br><span class="line">X是一个任意长度不为0的字符串，由小写宇母组成。&quot;&lt;X&gt;&quot;和&quot;&lt;/X&gt;&quot; 里面的X必须相</span><br><span class="line">同。比如:</span><br><span class="line">&lt;abc&gt;this is .ds &lt;/abc&gt;</span><br><span class="line">就是一个tag,但:</span><br><span class="line">&lt;abc&gt;this is .,ds &lt;/bc&gt;</span><br><span class="line">不是一个tag。.</span><br><span class="line">电话号码由括号里的1到2个数字(表示区号)加&#x27;-&#x27;再加3个数字构成。</span><br><span class="line">(01)-737</span><br><span class="line">(1)-849</span><br><span class="line">(20)-784</span><br><span class="line">上面这些都是电话号码</span><br><span class="line">注意,电话号码中最后一个数字的右边，不能是数字。如:</span><br><span class="line">(10)-1234</span><br><span class="line">不是电话号码，也不能认为其中的(10)-123 是一个电话号码</span><br><span class="line">给定-行文本，请抽取出其中的tag及其包含的电话号码中的区号。一个tag里面可能有多</span><br><span class="line">个电话号码，则输出时，tag 里面的区号用逗号隔开。</span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><p>有多组数据，每组一行</p><ul><li>输出</li></ul><p>对每组数据， 抽取出其中的tag及其包含的电话号码中的区号输出。每个tag输出为一行。tag外的电话号码不用理会。<br>如果找不到tag及其包含的电话号码， 则输出NONE<br>数据保证不会出现两个tag重叠的情况。</p><ul><li>样例输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">&lt;bb&gt;(01)-123&lt;a&gt;bbb(02)-2784KK&lt;/a&gt;&lt;xy&gt;stk(1)-123(03)-345b&lt;/xy&gt;(04)-123&lt;/xy&gt;&lt;z&gt;(05)-123&lt;/zz&gt;zz&lt;yy&gt;(06)-123&lt;/yy&gt;</span><br><span class="line">&lt;bb&gt;(01)-123&lt;a&gt;&lt;k&gt;1223&lt;/k&gt;&lt;a&gt;(01)-12&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>样例输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;xy&gt;1,03&lt;/xy&gt;</span><br><span class="line">&lt;yy&gt;06&lt;/yy&gt;</span><br><span class="line">NONE </span><br></pre></td></tr></table></figure><ul><li>提示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1） tag中间可以有任何文字，比如  &lt; ab &gt;xddd&lt; /cd&gt;&lt; /ab&gt;也是一个合法tag</span><br><span class="line">2） 在分组的右边可以通过分组的编号引用该分组所匹配的子串</span><br><span class="line">m = r&#x27;(((ab*)c)d)e\3&#x27; #要求 ab*cde后面跟着第三分组的内容</span><br><span class="line">r = re.match(m,&quot;abbbcdeabbbkfg&quot;) # 后面的bbb少一个b则不能匹配，因为第三分组是abbb</span><br><span class="line">print(r.group(3)) # abbb</span><br><span class="line">print(r.group()) # abbbcdeabbb</span><br><span class="line">3) 如果一个正则表达式搞不定，可以先用一个正则表达式抽取某个中间结果，再在中间结果里面手工或者用另外的正则表达式进一步分析</span><br></pre></td></tr></table></figure><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = <span class="string">r&#x27;(&lt;([a-z]+)&gt;.+?&lt;/)\2&gt;&#x27;</span></span><br><span class="line">n = <span class="string">r&#x27;\((\d&#123;1,2&#125;)\)-\d&#123;3&#125;(?=[^\d])&#x27;</span></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    falg1 = <span class="number">0</span></span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    l1 = re.findall(m, s)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> l2 <span class="keyword">in</span> l1:</span><br><span class="line">            l3 = <span class="built_in">list</span>(re.findall(n, l2[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(l3) != <span class="number">0</span>:</span><br><span class="line">                time = <span class="built_in">len</span>(l3)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&lt;&#x27;</span> + l2[<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(l3[<span class="number">0</span>], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, time):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span> + l3[x], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&lt;/&#x27;</span> + l2[<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">                falg1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> falg1 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="054-时间处理"><a href="#054-时间处理" class="headerlink" title="054:时间处理"></a>054:时间处理</h1><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>求从给定时刻开始过了给定时间后的时刻。</p></li><li><p>输入<br>有若干组数据。<br>每组数据有2行，第一行是给定时刻，可能有两种格式<br>格式1) 年 月 日 时 分(时是24小时制)<br>格式2) 月-日-年 时:分 上下午 （时是12小时制,注意没有秒)<br>第二行是时间增量，也可能有两种格式<br>格式1) 一个整数，代表多少秒<br>格式2) 日 时 分</p></li><li><p>输出<br>对每组数据，输出给定时刻加上时间增量后的新时刻,24小时制<br>格式如： 1982-12-10 12:12:28</p></li><li><p>样例输入<br>1982 12 1 23 0<br>737848<br>1982 12 1 23 15<br>180 2 18<br>12-01-1982 1:23 AM<br>737848</p></li><li><p>样例输出<br>1982-12-10 11:57:28<br>1983-05-31 01:33:00<br>1982-12-09 14:20:28</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getapm</span>(<span class="params">s,ss</span>): <span class="comment">#这个函数作用主要是转换pm数据</span></span><br><span class="line">    lt=s.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ss==<span class="string">&#x27;PM&#x27;</span>:</span><br><span class="line">        s4=<span class="built_in">int</span>(lt[<span class="number">0</span>])+<span class="number">12</span></span><br><span class="line">        s5=<span class="built_in">int</span>(lt[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s4 = <span class="built_in">int</span>( lt[<span class="number">0</span>] )</span><br><span class="line">        s5 = <span class="built_in">int</span>( lt[<span class="number">1</span>] )</span><br><span class="line">    <span class="keyword">return</span> s4,s5</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">a</span>): <span class="comment">#这个函数作用是得到‘10-11-2000’这种日期（月-日-年）</span></span><br><span class="line">    lt=a.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    lt.reverse()</span><br><span class="line">    s1,s2,s3=<span class="built_in">int</span>(lt[<span class="number">0</span>]),<span class="built_in">int</span>(lt[<span class="number">2</span>]),<span class="built_in">int</span>(lt[<span class="number">1</span>]) <span class="comment">#注意这里的位置</span></span><br><span class="line">    <span class="keyword">return</span> s1,s2,s3</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deter</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">3</span>: <span class="comment">#计算含有AMPM的数列</span></span><br><span class="line">        s1,s2,s3=getd(a[<span class="number">0</span>])</span><br><span class="line">        s4, s5=getapm(a[<span class="number">1</span>],a[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#计算非AMPM数列</span></span><br><span class="line">        s1,s2,s3,s4,s5=<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>]),<span class="built_in">int</span>(a[<span class="number">2</span>]),<span class="built_in">int</span>(a[<span class="number">3</span>]),<span class="built_in">int</span>(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> s1,s2,s3,s4,s5</span><br><span class="line"> </span><br><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> t&lt;<span class="number">5</span>: <span class="comment">#循环五次。</span></span><br><span class="line">    a=<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>).split() <span class="comment">#给定时刻</span></span><br><span class="line">    s1,s2,s3,s4,s5=deter(a) <span class="comment">#调用函数判断格式，得到五个数据年、月、日、小时、分钟</span></span><br><span class="line">    t1=datetime.datetime(s1,s2,s3,s4,s5) <span class="comment">#转换为秒，得到t1</span></span><br><span class="line"> </span><br><span class="line">    n2=<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>).split() <span class="comment">#输入时间增量</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(n2)==<span class="number">1</span>: <span class="comment">#判断格式</span></span><br><span class="line">        shu=<span class="built_in">int</span>(n2[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(n2)==<span class="number">3</span>: <span class="comment">#如果是三个数值需要算出相应的秒</span></span><br><span class="line">        shu=<span class="built_in">int</span>(n2[<span class="number">0</span>])*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>+<span class="built_in">int</span>(n2[<span class="number">1</span>])*<span class="number">60</span>*<span class="number">60</span>+<span class="built_in">int</span>(n2[<span class="number">2</span>])*<span class="number">60</span></span><br><span class="line">    newt=t1+datetime.timedelta(seconds=shu) <span class="comment">#新的时间=t1+新的秒shu</span></span><br><span class="line">    <span class="built_in">print</span>(newt)</span><br><span class="line">    t+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="程序设计与算法（一）测验汇总-2022夏季-63题"><a href="#程序设计与算法（一）测验汇总-2022夏季-63题" class="headerlink" title="程序设计与算法（一）测验汇总(2022夏季)(63题)"></a>程序设计与算法（一）测验汇总(2022夏季)(63题)</h1><h2 id="001-输出第二个整数"><a href="#001-输出第二个整数" class="headerlink" title="001:输出第二个整数"></a>001:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStr = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(inputStr.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="002-字符菱形"><a href="#002-字符菱形" class="headerlink" title="002:字符菱形"></a>002:字符菱形</h2><p>总时间限制: 1000ms 内存限制: 65536kB</p><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="003-打印ASCII码"><a href="#003-打印ASCII码" class="headerlink" title="003:打印ASCII码"></a>003:打印ASCII码</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个除空格以外的可见字符（保证在函数scanf中可使用格式说明符%c读入），输出其ASCII码。</p></li><li><p>输入<br>一个除空格以外的可见字符。</p></li><li><p>输出<br>一个十进制整数，即该字符的ASCII码。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(a))</span><br></pre></td></tr></table></figure></li></ul><h2 id="004-打印字符"><a href="#004-打印字符" class="headerlink" title="004:打印字符"></a>004:打印字符</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个ASCII码，输出对应的字符。</p></li><li><p>输入<br>一个整数，即字符的ASCII码，保证存在对应的可见字符。</p></li><li><p>输出<br>一行，包含相应的字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(a)))</span><br></pre></td></tr></table></figure></li></ul><h2 id="005-整型数据类型存储空间大小"><a href="#005-整型数据类型存储空间大小" class="headerlink" title="005:整型数据类型存储空间大小"></a>005:整型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义int，short类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提示<br>使用sizeof函数可以得到一个特定变量的存储空间大小。例如：对于int型变量x，sizeof(x)的值为4，即x的存储空间为4字节。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="built_in">int</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(a))</span><br></pre></td></tr></table></figure><h2 id="006-浮点型数据类型存储空间大小"><a href="#006-浮点型数据类型存储空间大小" class="headerlink" title="006:浮点型数据类型存储空间大小"></a>006:浮点型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义float，double类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提交代码</p></li></ul><p>同上</p><h1 id="程序设计与算法（二）测验汇总-2022夏季-26题"><a href="#程序设计与算法（二）测验汇总-2022夏季-26题" class="headerlink" title="程序设计与算法（二）测验汇总(2022夏季)(26题)"></a>程序设计与算法（二）测验汇总(2022夏季)(26题)</h1><h1 id="程序设计与算法（三）测验和作业题汇总-2022夏季-45题"><a href="#程序设计与算法（三）测验和作业题汇总-2022夏季-45题" class="headerlink" title="程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)"></a>程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)</h1><h1 id="练习-47题"><a href="#练习-47题" class="headerlink" title="练习(47题)"></a>练习(47题)</h1>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-OpenJudge</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第六章列表</title>
    <link href="http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/"/>
    <id>http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/</id>
    <published>2022-10-03T00:00:00.000Z</published>
    <updated>2022-10-04T08:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8.png" class="" title="实用Python程序设计MOOC-第六章列表"><p>实用Python程序设计MOOC-第六章列表</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第六章列表"><a href="#实用Python程序设计MOOC-第六章列表" class="headerlink" title="实用Python程序设计MOOC-第六章列表"></a>实用Python程序设计MOOC-第六章列表</h1><h1 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h1><h2 id="列表的增删和修改"><a href="#列表的增删和修改" class="headerlink" title="列表的增删和修改"></a>列表的增删和修改</h2><ul><li>列表可以增删元素，列表的元素可以修改，列表元素可以是任何类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">empty = []<span class="comment">#[]表示空表</span></span><br><span class="line">list1 = [<span class="string">&#x27;Pku&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>];</span><br><span class="line">list1[<span class="number">1</span>] = <span class="number">100</span> <span class="comment">#列表元素可以赋值</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 1997, 2000]</span></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]<span class="comment">#删除元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000]</span></span><br><span class="line">list1 += [<span class="number">100</span>, <span class="number">110</span>]<span class="comment">#添加另一列表的元素100和110，在list1原地添加，没有新建一个列表</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110]</span></span><br><span class="line">list1.append(<span class="number">200</span>) <span class="comment">#添加元素200,append用于添加单个元素，括号的内容被认为是一个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200]</span></span><br><span class="line">list1.append([<span class="string">&#x27;ok&#x27;</span>, <span class="number">123</span>])<span class="comment">#添加单个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200, [&#x27;ok&#x27;, 123]]</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = [a, n]<span class="comment">#a若变，x也变</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;[[1, &#x27;b&#x27;, &#x27;c&#x27;], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>])<span class="comment">#&gt;&gt;[1, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">1</span>])<span class="comment">#&gt;&gt;b</span></span><br></pre></td></tr></table></figure><h2 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h2><ul><li>列表相加可以得到新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span><span class="comment">#此时c已经是新建的列表，并没有和a建立联系，所以和a没有关系</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="列表和"><a href="#列表和" class="headerlink" title="列表和+="></a>列表和+=</h2><ul><li>对列表来说，<code>a += b</code> 和<code>a = a + b</code>不同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a += [<span class="number">3</span>]<span class="comment">#b和a指向相同地方,在a末尾添加元素,b也受影响</span></span><br><span class="line"><span class="built_in">print</span>(a, b)<span class="comment">#&gt;&gt;[1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a = a + [<span class="number">4</span>, <span class="number">5</span>] <span class="comment">#对a重新赋值,不会影响到b</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="列表乘法"><a href="#列表乘法" class="headerlink" title="列表乘法"></a>列表乘法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="literal">True</span>] * <span class="number">3</span>)<span class="comment">#&gt;&gt;[True, True, True]</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([a * <span class="number">3</span>])<span class="comment">#&gt;&gt;[[1, 2, 1, 2, 1, 2]]</span></span><br><span class="line"></span><br><span class="line">c = [a] *<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2], [1, 2], [1, 2]]</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2, 3], [1, 2, 3], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br></pre></td></tr></table></figure><p><strong>重点题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">0</span>]] * <span class="number">2</span> + [[<span class="number">0</span>]] * <span class="number">2</span><span class="comment">#&gt;&gt;[[0], [0], [0], [0]]</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[[5], [5], [0], [0]]</span></span><br></pre></td></tr></table></figure><img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8%E4%B9%98%E6%B3%95.png" class="" title="列表乘法"><h2 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h2><ul><li>列表的切片返回新的列表，用法和字符串切片相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[2, 3]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[100，3]</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>]) <span class="comment">#&gt;&gt;[4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])<span class="comment">#[2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">x = <span class="number">100</span><span class="comment">#不会修改列表的元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">lst[i] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#[100, 100, 100, 100]</span></span><br></pre></td></tr></table></figure><h2 id="列表比大小"><a href="#列表比大小" class="headerlink" title="列表比大小"></a>列表比大小</h2><ul><li>两个列表比大小，就是逐个元素比大小，直到分出胜负。</li><li>如果有两个对应元素不可比大小，则出runtime error。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">12</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &gt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="string">&#x27;ab&#x27;</span> , <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#runtime error</span></span><br></pre></td></tr></table></figure><h1 id="列表应用例题-校门外的树"><a href="#列表应用例题-校门外的树" class="headerlink" title="列表应用例题:校门外的树"></a>列表应用例题:校门外的树</h1><p>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，…. L，都种有一棵树。<br>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树(包括区域端点处的两棵树)移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><ul><li><p>输入<br>第一行有两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)，L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。</p></li><li><p>输出<br>包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">500 3</span><br><span class="line">150 300</span><br><span class="line">100 200</span><br><span class="line">470 471</span><br></pre></td></tr></table></figure></li><li><p>样例输出<br>298</p></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">L, M = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">good = [<span class="literal">True</span>] * (L + <span class="number">1</span>) <span class="comment">#good[i] 为True表示坐标i的树还在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    start, end = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            good[k] = <span class="literal">False</span> <span class="comment">#坐标k处的树被移走了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(good))    <span class="comment">#sum是python函数，可以求列表元素和，True是1，False是0</span></span><br></pre></td></tr></table></figure><h1 id="列表的朴素排序"><a href="#列表的朴素排序" class="headerlink" title="列表的朴素排序"></a>列表的朴素排序</h1><p>如果有N个元素需要排序，那么首先从N个元素中找到最小的那个(称为第0小的)放在第0个位子上(和原来的第0个位子上的元素交换位置)，然后再从剩下的N-1个元素中找到最小的放在第1个位子上，然后再从剩下的N-2个元素中找到最小的放在第2个位子…..直到所有的元素都就位。</p><p>选择排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SelectionSort</span>(<span class="params">a</span>): <span class="comment">#选择排序</span></span><br><span class="line"><span class="comment">#将列表a从小到大排序</span></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):<span class="comment">#每次从a[i]及其右边的元素里选出最小的，放在a[i]这个位置</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):<span class="comment">#依次考察a[i]及其右边元素</span></span><br><span class="line"><span class="keyword">if</span> a[i] &gt; a[j]:</span><br><span class="line">a[i], a[j] = a[j], a[i]</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">SelectionSort(lst)<span class="comment">#&gt;&gt;[1，2，4，6，12，56]</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><p>选择排序：时间复杂度 $ O(n^2) $，即对有n个元素的列表(数组)，需要做 $ n^2 $ 次比较<br>冒泡排序、插入排序时间复杂度都是$ O(n^2) $</p><p>好的排序算法，比如归并排序，快速排序，复杂度是$ O(n<em>log(n)) $<br>python自带的排序功能，复杂度是$ O(n</em>log(n)) $<br>可以认为排序这件事，复杂度就是$ O(n*log(n)) $</p><h1 id="用排序函数对简单列表排序"><a href="#用排序函数对简单列表排序" class="headerlink" title="用排序函数对简单列表排序"></a>用排序函数对简单列表排序</h1><h2 id="简单顺序排序"><a href="#简单顺序排序" class="headerlink" title="简单顺序排序"></a>简单顺序排序</h2><ul><li><code>a.sort()</code>可以对列表a从小到大排序，改变a的内存结构</li><li><code>sorted(a)</code>返回a经过从小到大排序后的新列表，a不变，创建新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort()<span class="comment">#[1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(a)<span class="comment">#b:[1, 2, 3, 4, 5, 6, 7], a不变</span></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br><span class="line">b = <span class="built_in">sorted</span>(a, reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="默认多组对比顺序排列"><a href="#默认多组对比顺序排列" class="headerlink" title="默认多组对比顺序排列"></a>默认多组对比顺序排列</h2><p>元组比大小是按照元组需要比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>),<span class="comment">#姓名, 成绩, 年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort()<span class="comment">#先按姓名, 再按成绩, 再按年龄排序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;Mike&#x27;, &#x27;C&#x27;, 19)]</span></span><br></pre></td></tr></table></figure><h2 id="自定义比较排序"><a href="#自定义比较排序" class="headerlink" title="自定义比较排序"></a>自定义比较排序</h2><p>自定义比较函数key<br>比较的不是元素本身，而是元素调用key的函数得到的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myKey</span>(<span class="params">x</span>): <span class="comment">#自定义比较函数</span></span><br><span class="line"><span class="keyword">return</span> x % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(key = myKey)</span><br><span class="line"><span class="comment"># key是函数, sort按对每个元素调用该函数的返回值从小到大排序</span></span><br><span class="line"><span class="comment"># [1, 2, 33, 4, 25, 16, 7]按个位数排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(<span class="string">&quot;This is a test string from Andrew&quot;</span>.split(), key = <span class="built_in">str</span>.lower)</span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;Andrew&#x27;, &#x27;from&#x27;, &#x27;is&#x27;, &#x27;string&#x27;, &#x27;test&#x27;, &#x27;This&#x27;]不区分大小写排序</span></span><br></pre></td></tr></table></figure><h1 id="复杂列表的自定义排序"><a href="#复杂列表的自定义排序" class="headerlink" title="复杂列表的自定义排序"></a>复杂列表的自定义排序</h1><ul><li>用不同关键字排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), <span class="comment">#姓名，成绩，年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">2</span>]) <span class="comment">#按年龄排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">0</span>]) <span class="comment">#按姓名排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br></pre></td></tr></table></figure><h2 id="Iambda表达式"><a href="#Iambda表达式" class="headerlink" title="Iambda表达式"></a>Iambda表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x : x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>表示一个函数，参数是x，返回值是x[2]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="keyword">lambda</span> x, y : x + y <span class="comment">#k是一个函数，参数是x, y, 返回值是x+y.</span></span><br><span class="line"><span class="built_in">print</span>(k(<span class="number">4</span>, <span class="number">5</span>))<span class="comment">#&gt;&gt;9</span></span><br></pre></td></tr></table></figure><p>当关键字相同，排序前哪个在前面，排完之后就在前</p><h2 id="多级排序"><a href="#多级排序" class="headerlink" title="多级排序"></a>多级排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>，<span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort(key = f)<span class="comment">#先按年龄从高到低，再按成绩从高到低，再按姓名字典序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12)，( &#x27;Mike&#x27;, &#x27;C&#x27;, 12)，(&#x27;Bom&#x27;，&#x27;D&#x27;， 10) ]</span></span><br></pre></td></tr></table></figure><h2 id="Python元组的排序"><a href="#Python元组的排序" class="headerlink" title="Python元组的排序"></a>Python元组的排序</h2><ul><li>元组不能修改，因此无sort函数，可以用<code>sorted</code>得到新的排序后的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = ((<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>))<span class="comment">#students是元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(students, key = f))<span class="comment">#sorted的结果是列表</span></span><br><span class="line"><span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 19), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 12), (&#x27;Bom&#x27;, &#x27;D&#x27;, 10)]</span></span><br></pre></td></tr></table></figure><h1 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h1><p><code>append(x)</code>添加元素x到尾部<br><code>extend(x)</code>添加列表x中的元素到尾部<br><code>insert(i,x)</code>将元素x插入到下标i处<br><code>remove(x)</code>删除元素x<br><code>del(i)</code>删除下标为i的元素<br><code>reverse()</code>颠倒整个列表<br><code>index(x)</code>查找元素x，找到则返回第一次出现的下标，找不到则引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a, b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.append(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 6]]</span></span><br><span class="line"></span><br><span class="line">b.insert(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6]]</span></span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">1</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">3</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="string">&#x27;K&#x27;</span>)<span class="comment">#只会删掉第一个K</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[6, 100, 5, [5, 100, 6], 3, &#x27;K&#x27;, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;K&#x27;</span>))<span class="comment">#&gt;&gt;5</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;m&#x27;</span>)) <span class="comment">#找不到&#x27;m&#x27;,会引发异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)<span class="comment">#&gt;&gt;&#x27;m&#x27; is not in list</span></span><br></pre></td></tr></table></figure><h2 id="列表映射"><a href="#列表映射" class="headerlink" title="列表映射"></a>列表映射</h2><ul><li><code>map(function, sequence)</code>， 可用于将一个序列（列表、元组、集合…）映射到另一个序列</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))<span class="comment">#&gt;&gt;123[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a延时操作已经没有结果了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(a))<span class="comment">#&gt;&gt;()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般是执行中进行</span></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="number">2</span> * x, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[4, 6, 8]</span></span><br></pre></td></tr></table></figure><ul><li>map用于输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br><span class="line">输入:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br><span class="line">输出:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><ul><li><code>filter(function, sequence)</code>，抽取序列中令<code>function(x)</code>为True的元素x</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lst = tup1e(<span class="built_in">filter</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))<span class="comment">#抽取出偶数</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;(2, 4)</span></span><br></pre></td></tr></table></figure><h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment">#=&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line"></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment">#=&gt;[4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br><span class="line"></span><br><span class="line">[[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>] <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[[&#x27;AX&#x27;, &#x27;BX&#x27;, &#x27;CX&#x27;], [&#x27;AY&#x27;, &#x27;BY&#x27;, &#x27;CY&#x27;], [&#x27;AZ&#x27;, &#x27;BZ&#x27;, &#x27;CZ&#x27;]]</span></span><br><span class="line"></span><br><span class="line">L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>)]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line">[s <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">int</span>)]</span><br><span class="line"><span class="comment">#=&gt;[18]</span></span><br></pre></td></tr></table></figure><h1 id="元组生成式"><a href="#元组生成式" class="headerlink" title="元组生成式"></a>元组生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line"><span class="comment">#&gt;&gt;(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)</span></span><br></pre></td></tr></table></figure><h1 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h1><ul><li><p>二维列表a可以看作是矩阵，<code>a[i][j]</code>就是第i行第j列的元素</p></li><li><p>错误生成二维列表的方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = [a] * <span class="number">3</span><span class="comment">#b有三个元素，都是指针，都和a指向同一地方</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 1, 100], [0, 1, 100], [0, 1, 100]]</span></span><br></pre></td></tr></table></figure><ul><li>正确生成二维列表的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">2</span>], matrix[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">#&gt;&gt;6 9</span></span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 100, 6], [7, 8, 9]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>) ]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 1, 2], [3, 4, 5]]</span></span><br></pre></td></tr></table></figure><ul><li>生成一个3行4列的矩阵，所有元素都是0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">lst.append([<span class="number">0</span>] * <span class="number">4</span>)</span><br><span class="line">lst[<span class="number">0</span>][<span class="number">0</span>] = lst[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="built_in">print</span>(lst[i][j], end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((1, 2, 3), (4, 5, 6), (7, 8, 9))</span></span><br><span class="line"></span><br><span class="line">matrix = <span class="built_in">tuple</span>(<span class="built_in">tuple</span>(<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((0, 0, 0), (0, 0, 0), (0, 0, 0))</span></span><br></pre></td></tr></table></figure><h1 id="列表拷贝"><a href="#列表拷贝" class="headerlink" title="列表拷贝"></a>列表拷贝</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]<span class="comment">#是a的拷贝,b和a不是同一个对象,指向不同东西</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">b += [<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4, 10]</span></span><br></pre></td></tr></table></figure><h2 id="列表深拷贝"><a href="#列表深拷贝" class="headerlink" title="列表深拷贝"></a>列表深拷贝</h2><ul><li>列表浅拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = a[:]</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[1, [2, 3]] </span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2, 3], 4]</span></span><br></pre></td></tr></table></figure><p>未能进行深拷贝!</p><p><code>浅拷贝</code>：只拷贝指针，并没有拷贝指针指向的内容<br><code>深拷贝</code>：不仅拷贝指针，还拷贝指针指向的内容</p><ul><li>列表深拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a= [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br></pre></td></tr></table></figure><h1 id="元组和列表互转"><a href="#元组和列表互转" class="headerlink" title="元组和列表互转"></a>元组和列表互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">tuple</span>(a)<span class="comment">#b:(1,2,3)</span></span><br><span class="line">c = <span class="built_in">list</span>(b)<span class="comment">#c:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">(a, b, c) = t<span class="comment">#a=1, b=3, c=2</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[a, b, c] = s<span class="comment">#a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><h1 id="元组、列表和字符串互转"><a href="#元组、列表和字符串互转" class="headerlink" title="元组、列表和字符串互转"></a>元组、列表和字符串互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;he1lo&quot;</span>))<span class="comment">#&gt;&gt;[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;] </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]))<span class="comment">#&gt;&gt;a44c</span></span><br><span class="line"><span class="built_in">print</span> (tup1e (<span class="string">&quot;hello&quot;</span>) )<span class="comment">#&gt;&gt;(&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>))) <span class="comment">#&gt;&gt;a44c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第六章列表</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
</feed>
