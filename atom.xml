<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HibisciDai</title>
  
  <subtitle>Waiting/Patience/Trusting/Times All Takes</subtitle>
  <link href="http://hibiscidai.com/atom.xml" rel="self"/>
  
  <link href="http://hibiscidai.com/"/>
  <updated>2022-10-11T12:09:19.000Z</updated>
  <id>http://hibiscidai.com/</id>
  
  <author>
    <name>HibisciDai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实用Python程序设计MOOC-第七章字典和集合</title>
    <link href="http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://hibiscidai.com/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</id>
    <published>2022-10-06T00:00:00.000Z</published>
    <updated>2022-10-11T12:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/06/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88.png" class="" title="实用Python程序设计MOOC-第七章字典和集合"><p>实用Python程序设计MOOC-第七章字典和集合</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第七章字典和集合"><a href="#实用Python程序设计MOOC-第七章字典和集合" class="headerlink" title="实用Python程序设计MOOC-第七章字典和集合"></a>实用Python程序设计MOOC-第七章字典和集合</h1><h1 id="字典的基本概念"><a href="#字典的基本概念" class="headerlink" title="字典的基本概念"></a>字典的基本概念</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典的每个元素是由”键:值”两部分组成，可以根据”键”进行快速查找</li><li>格式:<code>d = &#123;key1 : value1, key2 : value2&#125;</code></li><li>字典元素的值是可赋值的，因此也是指针</li><li>所有元素的键都不相同</li><li>键必须是不可变的数据类型，比如字符串、整数、小数、元组。列表、集合、字典等可变的数据类型，不可作为字典元素的键。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;Jack&#x27;</span>:<span class="number">18</span>, <span class="string">&#x27;Mike&#x27;</span>:<span class="number">19</span>, <span class="number">128</span>:<span class="number">37</span>, (<span class="number">1</span>, <span class="number">2</span>):[<span class="number">4</span>, <span class="number">5</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;Jack&#x27;</span>])<span class="comment">#&gt;&gt;18键为&#x27;Jack&#x27;的元素值是18</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="number">128</span>])<span class="comment">#&gt;&gt;37键为128的元素值是37</span></span><br><span class="line"><span class="built_in">print</span>(dt[(<span class="number">1</span>, <span class="number">2</span>)])<span class="comment">#&gt;&gt;[4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(dt[<span class="string">&#x27;c&#x27;</span>])<span class="comment">#不存在键为&#x27;c&#x27;的元素，产生异常，导致运行时错误</span></span><br><span class="line">dt[<span class="string">&#x27;Mike&#x27;</span>] = <span class="string">&#x27;ok&#x27;</span><span class="comment">#将键为&#x27;Mike&#x27;的元素的值改为&#x27;ok&#x27;</span></span><br><span class="line">dt[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;Pku&quot;</span><span class="comment">#添加键为&#x27;school&#x27;的元素，其值为&#x27;Pku&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4, 5], &#x27;Jack&#x27;:18, &#x27;Mike&#x27;:&#x27;ok&#x27;, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> dt[<span class="string">&#x27;Mike&#x27;</span>]<span class="comment">#删除键为&#x27;Mike&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(dt)<span class="comment">#&gt;&gt;&#123;128:37, (1, 2):[4 , 5], &#x27;Jack&#x27;:18, &#x27;School&#x27;:&#x27;Pku&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">scope = &#123; &#125;<span class="comment">#空字典</span></span><br><span class="line">scope[<span class="string">&#x27;a&#x27;</span>] = <span class="number">3</span><span class="comment">#添加元素&#x27;a&#x27; :3</span></span><br><span class="line">scope[<span class="string">&#x27;b&#x27;</span>] = <span class="number">4</span><span class="comment">#添加元素&#x27;b&#x27; :4</span></span><br><span class="line"><span class="built_in">print</span>(scope)<span class="comment">#&gt;&gt;&#123;&#x27;a&#x27;:3, &#x27;b&#x27;:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> scope)<span class="comment">#&gt;&gt;True判断是否有元素键为&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#get(key, v):如果键key存在，则返回键为key的元素的值，否则返回v</span></span><br><span class="line"><span class="built_in">print</span> (scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;1</span></span><br><span class="line">scope[<span class="string">&#x27;k&#x27;</span>] = scope.get(<span class="string">&#x27;k&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(scope[<span class="string">&#x27;k&#x27;</span>])<span class="comment">#&gt;&gt;2</span></span><br></pre></td></tr></table></figure><p>键值对的数据查找时间和数据长度无关，列表查找和数据长度有关</p><h1 id="字典的键不可重复"><a href="#字典的键不可重复" class="headerlink" title="字典的键不可重复"></a>字典的键不可重复</h1><ul><li>字典的键不可重复，指的是字典的键的内容不能一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">d = &#123;a:<span class="number">60</span>, b:<span class="number">70</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):<span class="number">80</span>， (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">50</span> &#125;<span class="comment">#d中实际上只有一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d[a])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[b])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"><span class="built_in">print</span>(d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])<span class="comment">#&gt;&gt;50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="comment">#此循环只输出一个(1, 2, 3):50</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;jack&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>], <span class="number">100</span>:(<span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">18</span>] = <span class="number">31</span></span><br><span class="line">&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">20</span>, <span class="number">18</span>:<span class="number">30</span>&#125;[<span class="number">100</span>] = <span class="number">31</span></span><br><span class="line">dt = &#123;[<span class="number">1</span>, <span class="number">2</span>]: <span class="number">3</span>, <span class="string">&#x27;jack&#x27;</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典的构造"><a href="#字典的构造" class="headerlink" title="字典的构造"></a>字典的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">items = [(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Gumby&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">42</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>(items)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Gumby&#x27;</span>, age=<span class="number">42</span>, height=<span class="number">1.76</span>)</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#x27;height&#x27;:1.76, &#x27;name&#x27;:&#x27;Gumby&#x27;, &#x27;age&#x27;:42&#125;</span></span><br><span class="line"><span class="comment">#python3.5之前构造遍历字典顺序和加入顺序不同</span></span><br><span class="line"><span class="comment">#python3.6及之后版本，哪个元素先加入，就在前</span></span><br></pre></td></tr></table></figure><h2 id="字典相关函数"><a href="#字典相关函数" class="headerlink" title="字典相关函数"></a>字典相关函数</h2><p><code>clear()</code> 清空字典<br><code>keys()</code> 取字典的键的序列<br><code>items()</code> 取字典的元素的序列，可用于遍历字典<br><code>values()</code> 取字典的值序列<br><code>pop(x)</code> 删除键为x的元素，如果不存在，产生异常<br>上述”序列”，不是list, tuple或set<br><code>copy()</code> 浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">d  = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Gumby&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;GPA&#x27;</span>:<span class="number">3.5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;age&#x27;</span>])<span class="comment">#&gt;&gt;42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;(&#x27;name&#x27;, &#x27;Gumby&#x27;),(&#x27;age&#x27;, 42),(&#x27;GPA&#x27;, 3.5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>], end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="built_in">print</span>(k, v, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name Gumby,age 42,GPA 3.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;name,age,GPA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;,&quot;</span>)<span class="comment">#&gt;&gt;Gumby,42,3.5</span></span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="number">1978</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">y = x.copy()</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh &#x27;</span></span><br><span class="line">y[<span class="number">1978</span>].remove(<span class="number">2</span>)<span class="comment">#删除元素2</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">x.pop(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#删除键为&#x27;username&#x27;的元素</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;1978:[1,3]&#125;</span></span><br><span class="line"></span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#&gt;&gt;&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字典的深拷贝"><a href="#字典的深拷贝" class="headerlink" title="字典的深拷贝"></a>字典的深拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>]&#125;</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">y[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mlh&#x27;</span></span><br><span class="line">y[<span class="string">&#x27;machines&#x27;</span>].remove(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;mlh&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;baz&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&#123;&#x27;username&#x27;:&#x27;admin&#x27;,&#x27;machines&#x27;:[&#x27;foo&#x27;,&#x27;bar&#x27;,&#x27;baz&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><ul><li>items<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;machines&#x27;</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x.items():</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><p><strong>遍历字典时，在python3. 5及以前，顺序不确定。在python 3. 6及以后，顺序同元素加入字典的顺序</strong></p><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><ul><li><p>输入<br>若干行，每行一个单词。</p></li><li><p>输出<br>按单词出现次数从高到低打出所有单词。次数相同的，按照字典序从小到大排</p></li><li><p>输入样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">about</span><br><span class="line">send</span><br><span class="line">about</span><br><span class="line">me</span><br></pre></td></tr></table></figure></li><li><p>输出样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 about</span><br><span class="line">1 me</span><br><span class="line">1 send</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> wd <span class="keyword">in</span> dt:  <span class="comment"># 如果有元素键为wd</span></span><br><span class="line">            dt[wd] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dt[wd] = <span class="number">1</span>  <span class="comment"># 加入键为wd的元素，其值是1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key = <span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd = <span class="built_in">input</span>()</span><br><span class="line">dt[wd] = dt.get(wd, <span class="number">0</span>) + <span class="number">1</span><span class="comment">#若在dt里有键位wd的元素，则get返回其值，否则返回0</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 输入结束后的input() 引发异常，跳到这里，再跳出循环</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dt.items():</span><br><span class="line">    result.append(x)  <span class="comment"># x是个元组， x[0] 是单词，x[1]是出现次数</span></span><br><span class="line">result.sort(key=<span class="keyword">lambda</span> x: (-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合-set-的概念和特点"><a href="#集合-set-的概念和特点" class="headerlink" title="集合(set)的概念和特点"></a>集合(set)的概念和特点</h2><p>集合(set)的概念同数学上的集合</p><ul><li>元素类型可以不同。</li><li>不会有重复元素。</li><li>可以增删元素。</li><li>整数、小数、复数、字符串、元组都可以作为集合的元素。但是列表、字典和集合等可变的数据类型不可作为集合的元素。</li><li>集合的作用是快速判断某个东西是否在一堆东西里面(用in)。</li></ul><h2 id="集合的构造"><a href="#集合的构造" class="headerlink" title="集合的构造"></a>集合的构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([])) <span class="comment">#&gt;&gt;set() 集合可由列表转换得到,set([])是空字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, (<span class="number">1</span>,<span class="number">3</span>) &#125;<span class="comment">#自动去重</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;2, 1, &#x27;ok&#x27;, (1, 3) &#125;</span></span><br><span class="line"></span><br><span class="line">b = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">c = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;ok&quot;</span>, <span class="number">2</span>, b, c))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)<span class="comment">#&gt;&gt;ok 1 2 (3, 4)</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">#&gt;&gt;字符串转集合</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(&#123;<span class="number">1</span>:<span class="number">2</span>, <span class="string">&#x27;ok&#x27;</span>:<span class="number">3</span>, (<span class="number">3</span>,<span class="number">4</span>):<span class="number">4</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, &#x27;ok&#x27;, (3，4)&#125; 只取键</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>])<span class="comment">#错误，集合元素没有顺序，不能用下标访问</span></span><br></pre></td></tr></table></figure><p>集合的元素是无序的</p><h2 id="集合常用函数"><a href="#集合常用函数" class="headerlink" title="集合常用函数"></a>集合常用函数</h2><p><code>add(x)</code> 添加元素x。如果x已经存在，则不添加<br><code>clear()</code> 清空集合<br><code>copy()</code> 返回自身的浅拷贝<br><code>remove(x)</code> 删除元素x。如果不存在元素x，则引发异常<br><code>update(x)</code> 将序列x中的元素加入到集合</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>a, b是集合</p><p><code>x in a</code> x是否在集合a中<br><code>a | b</code> 求a和b的并<br><code>a &amp; b</code> 求a和b的交<br><code>a - b</code> 求a和b的差，即在a中而不在b中的元素<br><code>a ^ b</code> 求a和b的对称差，等价于<code>(a|b) - (a&amp;b)</code></p><p><code>a == b</code> a是否元素和b一样<br><code>a != b</code> a是否元素和b不一样</p><p><code>a &lt;= b</code> a是否是b的子集(a有的元素，b都有)<br><code>a &lt; b</code>a是否是b的真子集(a有的元素，b都有，且b还包含a中没有的元素)<br><code>a &gt;= b</code>b是否是a的子集<br><code>a &gt; b</code> b是否是a的真子集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>([])<span class="comment">#a是空集合</span></span><br><span class="line">b = <span class="built_in">set</span>([])</span><br><span class="line">a.add(<span class="number">1</span>)<span class="comment">#添加元素1</span></span><br><span class="line">a.update([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])<span class="comment">#将列表元素添加进a</span></span><br><span class="line">b.update([<span class="string">&#x27;ok&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;&#123;2, 3, 100, &#x27;ok&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)<span class="comment">#&gt;&gt;&#123;1, 2, 3, 4, 100, &#x27;ok&#x27;&#125; 求并</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)<span class="comment">#&gt;&gt;&#123;2, 3&#125;求交</span></span><br><span class="line"><span class="built_in">print</span>(a - b)<span class="comment">#&gt;&gt;&#123;1，4&#125;求差</span></span><br><span class="line">a -= b<span class="comment">#在a中删除b中有的元素</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line">a ^= &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">544</span>&#125; <span class="comment">#对称差</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544，1，3&#125;</span></span><br><span class="line"></span><br><span class="line">a.update(<span class="string">&quot;take&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;544, 1, 3, &#x27;e&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">544</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a.remove(<span class="number">544</span>)<span class="comment">#删除元素，若元素不存在，会出错</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;&#123;1, 3, &#x27;a&#x27;, &#x27;k&#x27;, &#x27;t&#x27;, &#x27;e&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a &gt; b)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)<span class="comment">#&gt;&gt;True b是a的子集</span></span><br><span class="line"><span class="built_in">print</span>(b &lt; a)<span class="comment">#&gt;&gt;True b是a的真子集</span></span><br></pre></td></tr></table></figure><h2 id="集合例题"><a href="#集合例题" class="headerlink" title="集合例题"></a>集合例题</h2><p>输入一些单词，统计不重复的单词一共有多少个。</p><ul><li><p>输入样例<br>about<br>take<br>about<br>zoo<br>take</p></li><li><p>输出样例<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="built_in">set</span>([])</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">wd = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> wd <span class="keyword">in</span> words:<span class="comment">#不用判断</span></span><br><span class="line">words.add(wd)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(words))</span><br></pre></td></tr></table></figure><p>用列表做，比用集合慢很多很多!单词达到10万，就会非常明显。</p><h1 id="程序或算法的时间复杂度"><a href="#程序或算法的时间复杂度" class="headerlink" title="程序或算法的时间复杂度"></a>程序或算法的时间复杂度</h1><ul><li><p>一个程序或算法的时间效率，也称”时间复杂度”，有时简称”复杂度”</p></li><li><p>复杂度常用大的字母O和小写字母n来表示，比如$O(n)$, $O(n^2)$等。n代表问题的规模，$O(X)$就表示解决问题的时间和X成正比关系。</p></li><li><p>时间复杂度是用算法运行过程中，某种时间固定的操作需要被执行的次数和n的关系来度量的。在无序数列中查找某个数，复杂度是$O(n)$。</p></li><li><p>计算复杂度的时候，只统计执行次数最多的(n足够大时)那种固定操作的次数比如某个算法需要执行加法$n^2$次，除法10000n次， 那么就记其复杂度是$O(n^2)$的。</p></li><li><p>如果复杂度是多个n的函数之和，则只关心随n的增长增长得最快的那个函数</p></li></ul><script type="math/tex; mode=display">O(n^3 + n^2) => O(n^3)</script><script type="math/tex; mode=display">O(2^n + n^3) => O(2^n)</script><script type="math/tex; mode=display">O(n! + 3^n) => O(n!)</script><ul><li>常数复杂度: $O(1)$ 时间(操作次数)和问题的规模无关</li><li>对数复杂度: $O(log(n))$</li><li>线性复杂度: $O(n)$</li><li>多项式复杂度: $O(n^k)$</li><li>指数复杂度: $O(a^n)$</li><li><p>阶乘复杂度: $O(n!)$</p></li><li><p>在无序数列中查找某个数(顺序查找) $O(n)$</p></li><li>插入排序、选择排序等笨排序方法 $O(n^2)$</li><li>快速排序 $O(n * log(n))$</li><li>二分查找 $O(log(n))$</li></ul><h2 id="in用于列表和用于字典、集合的区别"><a href="#in用于列表和用于字典、集合的区别" class="headerlink" title="in用于列表和用于字典、集合的区别"></a>in用于列表和用于字典、集合的区别</h2><p><code>a in b</code></p><p>若b是列表，字符串或元组，则该操作时间复杂度$O(n)$，即时间和b的元素个数成正比</p><p>若b是字典或集合，则该操作时间复杂度$O(1)$，即时间基本就是常数，和b里元素个数无关</p><p>因此集合用于需要经常判断某个东西是不是在一堆东西里的情况此种场合用列表替代集合，容易导致超时!!!!</p><h2 id="一些操作的时间复杂度总结"><a href="#一些操作的时间复杂度总结" class="headerlink" title="一些操作的时间复杂度总结"></a>一些操作的时间复杂度总结</h2><p>$O(1)$：集合、字典增删元素，查找元素，以关键字作为下标访问字典元素的值，列表添加元素到末尾(append) ，列表、字符串、元组根据下标访问元素<br>$O(n)$：列表、元组查找元素(in, index)， 列表插入元素(insert)、删除元素(remove)计算出现次数(count)<br>$O(n log(n))$：python 自带排序sort, sorted<br>$O(log(n))$：在排好序的列表或元组上进行二分查找(初始的查找区间是整个元组或列表，每次和查找区间中点比较大小，并缩小查找区间到原来的一半。类似于查英语词典)有序就会找得快!</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第七章字典和集合</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-OpenJudge</title>
    <link href="http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/"/>
    <id>http://hibiscidai.com/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/</id>
    <published>2022-10-04T00:00:00.000Z</published>
    <updated>2022-10-06T08:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/04/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-OpenJudge.png" class="" title="实用Python程序设计MOOC-OpenJudge"><p>实用Python程序设计MOOC-OpenJudge</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-OpenJudge"><a href="#实用Python程序设计MOOC-OpenJudge" class="headerlink" title="实用Python程序设计MOOC-OpenJudge"></a>实用Python程序设计MOOC-OpenJudge</h1><h1 id="Python程序设计基础及实践-慕课版-教材题集-94题"><a href="#Python程序设计基础及实践-慕课版-教材题集-94题" class="headerlink" title="Python程序设计基础及实践(慕课版)教材题集(94题)"></a>Python程序设计基础及实践(慕课版)教材题集(94题)</h1><h2 id="001-A-B问题"><a href="#001-A-B问题" class="headerlink" title="001:A+B问题"></a>001:A+B问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>在一行输入两个整数，请输出它们的和。</p></li><li><p>输入<br>一行，两个整数</p></li><li><p>输出<br>两个整数的和</p></li><li><p>样例输入<br>3 14</p></li><li><p>样例输出<br>17</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">0</span>])+<span class="built_in">int</span>(<span class="built_in">input</span>.split()[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="002-字符三角形"><a href="#002-字符三角形" class="headerlink" title="002:字符三角形"></a>002:字符三角形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个底边长5个字符，高3个字符的等腰字符三角形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的等腰三角形，底边长5个字符，高3个字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  &quot;</span> + a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + a*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="003-计算-a-b-c的值"><a href="#003-计算-a-b-c的值" class="headerlink" title="003:计算(a+b)*c的值"></a>003:计算(a+b)*c的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>给定3个整数a、b、c，计算表达式(a+b)*c的值。</p><ul><li><p>输入<br>输入仅一行，包括三个整数a、b、c, 数与数之间以一个空格分开。(-10,000&lt; a,b,c &lt;10,000)</p></li><li><p>输出<br>输出一行，即表达式的值</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>((a+b)*c)</span><br></pre></td></tr></table></figure><h2 id="004-反向输出一个三位数"><a href="#004-反向输出一个三位数" class="headerlink" title="004:反向输出一个三位数"></a>004:反向输出一个三位数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>将一个三位数反向输出。</p></li><li><p>输入<br>一个三位数n。</p></li><li><p>输出<br>反向输出n。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">001</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">int</span>(n/<span class="number">100</span>)</span><br><span class="line">b = <span class="built_in">int</span>((n-a*<span class="number">100</span>)/<span class="number">10</span>)</span><br><span class="line">c = (n-a*<span class="number">100</span>-b*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(a))</span><br></pre></td></tr></table></figure><h2 id="005-判断子串"><a href="#005-判断子串" class="headerlink" title="005:判断子串"></a>005:判断子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="005-字符菱形"><a href="#005-字符菱形" class="headerlink" title="005:字符菱形"></a>005:字符菱形</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两行字符串，要求判断第一行 字符串是不是第二行的子串</p></li><li><p>输入<br>两行字符串。字符串长度不超过100。</p></li><li><p>输出<br>如果第一行是第二行的子串，就输出 “YES”，否则输出”NO”。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">this is hello world, it is ok.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure></li><li><p>提示<br>python中每使用调用一次 input()，就输入一行的内容。输入内容有几行，就要用几次 input()。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="006-输出第二个整数"><a href="#006-输出第二个整数" class="headerlink" title="006:输出第二个整数"></a>006:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="007-求三个数的和"><a href="#007-求三个数的和" class="headerlink" title="007:求三个数的和"></a>007:求三个数的和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入三个整数或小数，输出它们的和</li></ul><p>如果结果是整数，就保留小数点后面一位的0(用python写则不用特别处理，程序自然会如此) </p><ul><li><p>输入<br>输入三个整数或小数</p></li><li><p>输出<br>和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2.3 4.7</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.0</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a,b,c = <span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]),<span class="built_in">float</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b+c)</span><br></pre></td></tr></table></figure></li></ul><h2 id="008-字符串交换"><a href="#008-字符串交换" class="headerlink" title="008:字符串交换"></a>008:字符串交换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为4的字符串，交换这两个字符串的前两个字符后输出</p></li><li><p>输入<br>两个长度为4的字符串</p></li><li><p>输出<br>交换这两个字符串的前两个字符后输出</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCD </span><br><span class="line">1234</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12CD</span><br><span class="line">AB34 </span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1,str2 = <span class="built_in">input</span>(),<span class="built_in">input</span>()</span><br><span class="line">a,b,c,d = str1[<span class="number">0</span>],str1[<span class="number">1</span>],str1[<span class="number">2</span>],str1[<span class="number">3</span>]</span><br><span class="line">e,f,g,h = str2[<span class="number">0</span>],str2[<span class="number">1</span>],str2[<span class="number">2</span>],str2[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(e+f+c+d)</span><br><span class="line"><span class="built_in">print</span>(a+b+g+h)</span><br></pre></td></tr></table></figure><h2 id="009-字符串中的整数求和"><a href="#009-字符串中的整数求和" class="headerlink" title="009:字符串中的整数求和"></a>009:字符串中的整数求和</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入两个长度为3的字符串，每个串前两个字符是数字,后一个字符是字母。 求这两个串中的整数的和</p></li><li><p>输入<br>一行，两个字符串</p></li><li><p>输出<br>两个字符串中整数的和</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12B 34D</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">0</span>]+<span class="built_in">str</span>.split()[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><h2 id="010-计算2的幂"><a href="#010-计算2的幂" class="headerlink" title="010:计算2的幂"></a>010:计算2的幂</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定非负整数n，求2^n。</p></li><li><p>输入<br>一个整数n。0 &lt;= n &lt; 31。</p></li><li><p>输出<br>一个整数，即2的n次方。</p></li><li><p>样例输入<br>3</p></li><li><p>样例输出<br>8</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**inp)</span><br></pre></td></tr></table></figure><h2 id="011-计算多项式的值"><a href="#011-计算多项式的值" class="headerlink" title="011:计算多项式的值"></a>011:计算多项式的值</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>对于多项式f(x) = ax^3 + bx^2 + cx + d 和给定的a, b, c, d, x，计算f(x)的值。</p></li><li><p>输入<br>输入仅一行，包含5个实数，分别是x，及参数a、b、c、d的值，每个数都是绝对值不超过100的双精度浮点数。数与数之间以一个空格分开。</p></li><li><p>输出<br>输出一个实数，即f(x)的值，保留到小数点后7位。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.31 1.2 2 2 3</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">33.0838692</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x,a,b,c,d = <span class="built_in">float</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">2</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">3</span>]), <span class="built_in">float</span>(str1.split()[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % <span class="built_in">float</span>(a*x**<span class="number">3</span>+b*x**<span class="number">2</span>+c*x+d))</span><br></pre></td></tr></table></figure><h2 id="012-奇偶数判断"><a href="#012-奇偶数判断" class="headerlink" title="012:奇偶数判断"></a>012:奇偶数判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数，判断该数是奇数还是偶数。</p></li><li><p>输入<br>输入仅一行，一个大于零的正整数n。</p></li><li><p>输出<br>输出仅一行，如果n是奇数，输出odd；如果n是偶数，输出even。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出<br>odd</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;even&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="013-点和正方形的关系"><a href="#013-点和正方形的关系" class="headerlink" title="013:点和正方形的关系"></a>013:点和正方形的关系</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>有一个正方形，四个角的坐标（x,y)分别是（1，-1），（1，1），（-1，-1），（-1，1），x是横轴，y是纵轴。写一个程序，判断一个给定的点是否在这个正方形内（包括正方形边界）。</p></li><li><p>输入<br>输入一行，包括两个整数x、y，以一个空格分开，表示坐标(x,y)。</p></li><li><p>输出<br>输出一行，如果点在正方形内，则输出yes，否则输出no。</p></li><li><p>样例输入<br>1 1</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> x&gt;=-<span class="number">1</span> <span class="keyword">and</span> x&lt;=<span class="number">1</span> <span class="keyword">and</span> y&gt;=-<span class="number">1</span> <span class="keyword">and</span> y&lt;=<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="014-三角形判断"><a href="#014-三角形判断" class="headerlink" title="014:三角形判断"></a>014:三角形判断</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数，分别表示三条线段的长度，判断这三条线段能否构成一个三角形。</p></li><li><p>输入<br>输入共一行，包含三个正整数，分别表示三条线段的长度，数与数之间以一个空格分开。</p></li><li><p>输出<br>如果能构成三角形，则输出“yes” ，否则输出“no”。</p></li><li><p>样例输入<br>3 4 5</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> c+b&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="015-计算邮资"><a href="#015-计算邮资" class="headerlink" title="015:计算邮资"></a>015:计算邮资</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>根据邮件的重量和用户是否选择加急计算邮费。计算规则：重量在1000克以内(包括1000克), 基本费8元。超过1000克的部分，每500克加收超重费4元，不足500克部分按500克计算；如果用户选择加急，多收5元。</p></li><li><p>输入<br>输入一行，包含整数和一个字符，以一个空格分开，分别表示重量（单位为克）和是否加急。如果字符是y，说明选择加急；如果字符是n，说明不加急。</p></li><li><p>输出<br>输出一行，包含一个整数，表示邮费。</p></li><li><p>样例输入<br>1200 y</p></li><li><p>样例输出<br>17</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), str1.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a&lt;=<span class="number">1000</span>:</span><br><span class="line">    out+=<span class="number">8</span></span><br><span class="line"><span class="keyword">elif</span> a&lt;=<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line"><span class="keyword">elif</span> a&gt;<span class="number">1500</span>:</span><br><span class="line">    out+=<span class="number">12</span></span><br><span class="line">    out+=(<span class="built_in">int</span>((a-<span class="number">1500</span>)//<span class="number">500</span>)+<span class="number">1</span>)*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;y&quot;</span> == b:</span><br><span class="line">    out+=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure></li></ul><h2 id="016-分段函数"><a href="#016-分段函数" class="headerlink" title="016:分段函数"></a>016:分段函数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>编写程序，计算下列分段函数y=f(x)的值。</li></ul><p>y=-x+2.5；0 &lt;=x&lt; 5<br>y=2-1.5(x-3)(x-3)；5&lt;= x&lt;10<br>y=x/2-1.5；10&lt;=x&lt; 20</p><ul><li><p>输入<br>一个浮点数N，0&lt;=N&lt; 20</p></li><li><p>输出<br>输出N对应的分段函数值：f(N)。结果保留到小数点后三位。</p></li><li><p>样例输入<br>1.0</p></li><li><p>样例输出<br>1.500</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>().split()[<span class="number">0</span>])</span><br><span class="line">y = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;<span class="number">5</span>:</span><br><span class="line">    y=-x+<span class="number">2.5</span></span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">5</span> <span class="keyword">and</span> x&lt;<span class="number">10</span>:</span><br><span class="line">    y=<span class="number">2</span>-<span class="number">1.5</span>*(x-<span class="number">3</span>)*(x-<span class="number">3</span>)</span><br><span class="line"><span class="keyword">elif</span> x&gt;=<span class="number">10</span> <span class="keyword">and</span> x&lt;<span class="number">20</span>:</span><br><span class="line">    y=x/<span class="number">2</span>-<span class="number">1.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.3f&quot;</span> % y)</span><br></pre></td></tr></table></figure></li></ul><h2 id="017-简单计算器"><a href="#017-简单计算器" class="headerlink" title="017:简单计算器"></a>017:简单计算器</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个最简单的计算器，支持<code>+, -, *, /</code> 四种运算。仅需考虑输入输出为整数的情况(除法结果就是商，忽略余数）</p></li><li><p>输入<br>输入只有一行，共有三个参数，其中第1、2个参数为整数，第3个参数为操作符<code>（+,-,*,/）</code>。</p></li><li><p>输出</p></li></ul><p>输出只有一行，一个整数，为运算结果。然而：</p><ol><li>如果出现除数为0的情况，则输出：Divided by zero!</li><li>如果出现无效的操作符(即不为<code>+, -, *, /</code> 之一），则输出：Invalid operator!</li></ol><ul><li><p>样例输入<br>1 2 +</p></li><li><p>样例输出<br>3</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b, c = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), str1.split()[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;+&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;-&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;*&quot;</span> == c:</span><br><span class="line">    <span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;/&quot;</span> == c:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Divided by zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(a/b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid operator!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="018-大象喝水"><a href="#018-大象喝水" class="headerlink" title="018:大象喝水"></a>018:大象喝水</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。</p></li><li><p>输入<br>输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深h和底面半径r，单位都是厘米。</p></li><li><p>输出<br>输出一行，包含一个整数，表示大象至少要喝水的桶数。</p></li><li><p>样例输入<br>23 11</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>如果一个圆桶的深为h厘米，底面半径为r厘米，那么它最多能装Pi <em> r </em> r * h立方厘米的水。(设Pi=3.14159)1升 = 1000毫升，1毫升 = 1 立方厘米</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">20</span>//(<span class="number">3.14159</span>*b*b*a/<span class="number">1000</span>))+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="019-苹果和虫子2"><a href="#019-苹果和虫子2" class="headerlink" title="019:苹果和虫子2"></a>019:苹果和虫子2</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>你买了一箱n个苹果，很不幸的是买完时箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时你还有多少个完整的苹果？</p></li><li><p>输入<br>输入仅一行，包括n，x和y（均为整数）。</p></li><li><p>输出<br>输出也仅一行，剩下的苹果个数</p></li><li><p>样例输入<br>10 4 9</p></li><li><p>样例输出<br>7</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, x, y = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>==y%x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y/x))</span><br><span class="line"><span class="keyword">elif</span> y//x&gt;=<span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(n-y//x-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="020-求整数的和与均值"><a href="#020-求整数的和与均值" class="headerlink" title="020:求整数的和与均值"></a>020:求整数的和与均值</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>读入n (1 &lt;= n &lt;= 10000)个整数，求它们的和与均值。</p></li><li><p>输入</p></li></ul><p>输入第一行是一个整数n，表示有n个整数。<br>第2~n+1行每行包含1个整数。每个整数的绝对值均不超过10000。</p><ul><li><p>输出<br>输出一行，先输出和，再输出平均值(保留到小数点后5位)，两个数间用单个空格分隔。</p></li><li><p>样例输入<br>4<br>344<br>222<br>343<br>222</p></li><li><p>样例输出<br>1131 282. 75000</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">a += <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;%.5f&quot;</span> % a/n)</span><br></pre></td></tr></table></figure><h2 id="021-整数序列的元素最大跨度值"><a href="#021-整数序列的元素最大跨度值" class="headerlink" title="021:整数序列的元素最大跨度值"></a>021:整数序列的元素最大跨度值</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个长度为n的非负整数序列，请计算序列的最大跨度值(最大跨度值=最大值减去最小值)。</p></li><li><p>输入<br>一共2行，第一行为序列的个数n (1 &lt;= n &lt;= 1000),第二行为序列的n个不超过1000的非负整数，整数之间以一个空格分隔。</p></li><li><p>输出<br>输出一行，表示序列的最大跨度值。</p></li><li><p>样例输入<br>6<br>3 0 8 7 5 9</p></li><li><p>样例输出<br>9</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">int</span>(s[i])</span><br><span class="line"><span class="keyword">if</span> a &gt;= temp:</span><br><span class="line">a = temp</span><br><span class="line"><span class="keyword">if</span> b &lt;= temp:</span><br><span class="line">b = temp</span><br><span class="line"><span class="built_in">print</span>(b - a)</span><br></pre></td></tr></table></figure><h2 id="022-奥运奖牌计数"><a href="#022-奥运奖牌计数" class="headerlink" title="022:奥运奖牌计数"></a>022:奥运奖牌计数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>2008年北京奥运会，A国的运动员参与了n天的决赛项目(1 ≤ n ≤ 17)。现在要统计一下A国所获得的金、银、铜牌数目及总奖牌数。</p></li><li><p>输入<br>输入n+1行，第1行是A国参与决赛项目的天数n，其后n行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。</p></li><li><p>输出<br>输出1行，包括4个整数，为A国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。</p></li><li><p>样例输入<br>3<br>1 0 3<br>3 1 0<br>0 3 0</p></li><li><p>样例输出<br>4 4 3 11</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a += <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">b += <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">c += <span class="built_in">int</span>(temp[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a, b, c, a+b+c)</span><br></pre></td></tr></table></figure><h2 id="023-鸡尾酒疗法"><a href="#023-鸡尾酒疗法" class="headerlink" title="023:鸡尾酒疗法"></a>023:鸡尾酒疗法</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>鸡尾酒疗法，原指“高效抗逆转录病毒治疗”(HAART) ，由美籍华裔科学家何大一于1996年提出，是通过三种或三种以上的抗病毒药物联合使用来治疗艾滋病。该疗法的应用可以减少单一用药产生的抗药性， 最大限度地抑制病毒的复制，使被破坏的机体免疫功能部分甚至全部恢复，从而延缓病程进展，延长患者生命，提高生活质量。人们在鸡尾酒疗法的基础上又提出了很多种改进的疗法。为了验证这些治疗方法是否在疗效上比鸡尾酒疗法更好，可用通过临床对照实验的方式进行。假设鸡尾酒疗法的有效率为x，新疗法的有效率为y，如果y-x大于5%，则效果更好，如果x-y大于5%，则效果更差，否则称为效果差不多。下面给出n组临床对照实验，其中第一组采用鸡尾酒疗法， 其他n-1组为各种不同的改进疗法。请写程序判定各种改进疗法效果如何。</p></li><li><p>输入<br>第一行为整数n(1 &lt; n &lt;= 20)；<br>其余n行每行两个整数，第一个整数是临床实验的总病例数(小于等于10000)，第二个疗效有效的病例数。<br>这n行数据中，第一行为鸡尾酒疗法的数据，其余各行为各种改进疗法的数据。</p></li><li><p>输出<br>有n-1行输出，分别表示对应改进疗法的效果:<br>如果效果更好，输出better；如果效果更差，输出worse；否则输出same</p></li><li><p>样例输入<br>5<br>125 99<br>112 89<br>145 99<br>9997<br>23 98</p></li><li><p>样例输出<br>same<br>worse<br>better<br>same</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">input</span>().split()</span><br><span class="line">x = <span class="built_in">int</span>(a[<span class="number">1</span>]) / <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">y = <span class="built_in">int</span>(temp[<span class="number">1</span>]) / <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">res = x - y</span><br><span class="line"><span class="keyword">if</span> res &gt; <span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;worse&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> res &lt; -<span class="number">0.05</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;better&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;same&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="024-角谷猜想"><a href="#024-角谷猜想" class="headerlink" title="024:角谷猜想"></a>024:角谷猜想</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>所谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘3加1，如果是偶数，则除以2，得到的结果再按照上述规则重复处理，最终总能够得到1。<br>如，假定初始整数为5，计算过程分别为16、8、4、2、1。<br>程序要求输入一个整数，将经过处理得到1的过程输出来。</p></li><li><p>输入<br>一个正整数N(N &lt;= 2,000,000)</p></li><li><p>输出<br>从输入整数到1的步骤，每一步为一行，每部中描述计算过程。最后一行输出”End”。如果输入为1，直接输出”End”。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5*3+1=16</span><br><span class="line">16/2=8</span><br><span class="line">8/2=4</span><br><span class="line">4/2=2</span><br><span class="line">2/2=1</span><br><span class="line">End</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span>(N == <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d/2=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d*3+1=&quot;</span> % N, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">N = N * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % N)</span><br><span class="line"><span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="025-正常血压"><a href="#025-正常血压" class="headerlink" title="025:正常血压"></a>025:正常血压</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>监护室每小时测量一次病人的血压， 若收缩压在90-140之间并且舒张压在60-90之间(包含端点值)则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。</p></li><li><p>输入<br>第一行为一个正整数n, n &lt; 100<br>后有n行，每行2个正整数，分别为一次测量的收缩压和舒张压，中间以一个空格分隔。</p></li><li><p>输出<br>输出仅一行，血压连续正常的最长小时数。</p></li><li><p>样例输入<br>4<br>100 80<br>90 50<br>120 60<br>140 90</p></li><li><p>样例输出<br>2</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">90</span> <span class="keyword">and</span> a &lt;= <span class="number">140</span>) <span class="keyword">and</span> (b &gt;= <span class="number">60</span> <span class="keyword">and</span> b &lt;= <span class="number">90</span>):</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= y:</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="026-数字反转"><a href="#026-数字反转" class="headerlink" title="026:数字反转"></a>026:数字反转</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定一个整数， 请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零(参见样例2)。</p></li><li><p>输入<br>输入共1行，一个整数N。<br>-1,000,000,000≤N≤1,0000000。</p></li><li><p>输出<br>输出共1行，一个整数，示反转后的新数。</p></li><li><p>样例输入<br>样例#1:<br>123<br>样例#2<br>-380</p></li><li><p>样例输出<br>样例#1:<br>321<br>样例#2:<br>-83</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">input</span>()<span class="comment">#输入字符串</span></span><br><span class="line">length1 = <span class="built_in">int</span>(<span class="built_in">len</span>(N))<span class="comment">#转为数组的长度</span></span><br><span class="line">n = <span class="built_in">int</span>(N)</span><br><span class="line">res = <span class="number">0</span><span class="comment">#最终结果</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;&gt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1-i-<span class="number">1</span>]) * <span class="number">10</span>**(length1-i-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="comment">#print(&quot;=0&quot;)</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#print(&quot;&lt;0&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length1-<span class="number">1</span>):</span><br><span class="line">res += <span class="built_in">int</span>(N[length1 - i - <span class="number">1</span>]) * <span class="number">10</span> ** (length1 - i - <span class="number">2</span>)</span><br><span class="line">res *= -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="027-求特殊自然数"><a href="#027-求特殊自然数" class="headerlink" title="027:求特殊自然数"></a>027:求特殊自然数</h2><blockquote><p>总时间限制: 1000ms，内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个十进制自然数，它的七进制与九进制表示都是三位数，且七进制与九进制的三位数码表示顺序正好相反。编程求此自然数,并输出显示。</p></li><li><p>输入<br>无</p></li><li><p>输出<br>三行:<br>第一行是此自然数的十进制表示;<br>第二行是此自然数的七进制表示;<br>第三行是此自然数的九进制表示。</p></li><li><p>样例输入<br>(无)</p></li><li><p>样例输出<br>(不提供)</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最小的三位数是九进制的100，对应十进制是1*9**2</span></span><br><span class="line"><span class="comment">#最大的三位数是七进制的666，对应十进制是6*7**2+6*7**1+6*7**0</span></span><br><span class="line">a = <span class="number">9</span>**<span class="number">2</span>  <span class="comment">#循环左边界</span></span><br><span class="line">b = <span class="number">6</span> * <span class="number">7</span>**<span class="number">2</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">1</span> + <span class="number">6</span> * <span class="number">7</span>**<span class="number">0</span>    <span class="comment">#循环右边界</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">    <span class="comment">#求取七进制</span></span><br><span class="line">    lst = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    lst[<span class="number">0</span>] = i // (<span class="number">7</span>**<span class="number">2</span>)</span><br><span class="line">    lst[<span class="number">2</span>] = i - lst[<span class="number">0</span>] * <span class="number">7</span>**<span class="number">2</span></span><br><span class="line">    lst[<span class="number">1</span>] = lst[<span class="number">2</span>] // <span class="number">7</span></span><br><span class="line">    lst[<span class="number">2</span>] -= lst[<span class="number">1</span>] * <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#反推九进制和十进制对比</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span>**<span class="number">2</span> * lst[<span class="number">2</span>] + <span class="number">9</span> * lst[<span class="number">1</span>] + lst[<span class="number">0</span>]) == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">0</span>], lst[<span class="number">1</span>], lst[<span class="number">2</span>], sep=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(lst[<span class="number">2</span>], lst[<span class="number">1</span>], lst[<span class="number">0</span>], sep=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="028-数字统计"><a href="#028-数字统计" class="headerlink" title="028:数字统计"></a>028:数字统计</h2><blockquote><p>总时间限制: 1000ms内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>请统计某个给定范围[L, R]的所有整数中，数字2出现的次数。<br>比如给定范围[2, 22]，数字2在数2中出现了1次，在数12中出现1次，在数20中出现1次，在数21中出现1次，在数22中出现2次，所以数字2在该范围内一共出现了6次。</p></li><li><p>输入<br>输入共1行，为两个正整数L和R，之间用一个空格隔开。</p></li><li><p>输出<br>输出共1行，示数字2出现的次数。</p></li><li><p>样例输入<br>样例 #1:<br>2 22<br>样例 #2:<br>2 100</p></li><li><p>样例输出<br>样例 #1:<br>6<br>样例 #2:<br>20</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">temp2 = <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp2)):</span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> == <span class="built_in">int</span>(temp2[j]):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="029-求最大公约数问题"><a href="#029-求最大公约数问题" class="headerlink" title="029:求最大公约数问题"></a>029:求最大公约数问题</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定两个正整数，求它们的最大公约数。</p></li><li><p>输入<br>输入一行，包含两个正整数(&lt;1,000,000,000)。</p></li><li><p>输出<br>输出一个正整数，即这两个正整数的最大公约数。</p></li><li><p>样例输入<br>6 9</p></li><li><p>样例输出<br>3</p></li><li><p>提示<br>求最大公约数可以使用辗转相除法：<br>假设a &gt; b &gt; 0，那么a和b的最大公约数等于b和a%b的最大公约数，然后把b和a%b作为新一轮的输入。<br>由于这个过程会一直递减，直到a%b等于0的时候，b的值就是所要求的最大公约数。<br>比如：<br>9和6的最大公约数等于6和9%6=3的最大公约数。<br>由于6%3==0，所以最大公约数为3。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1, int2 = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fuc</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == a % b):</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = b</span><br><span class="line">        b = a % b</span><br><span class="line">        a = temp</span><br><span class="line">        fuc(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(int1 &gt;= int2):</span><br><span class="line">    fuc(int1, int2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fuc(int2, int1)</span><br></pre></td></tr></table></figure><h2 id="030-多少种取法"><a href="#030-多少种取法" class="headerlink" title="030:多少种取法"></a>030:多少种取法</h2><blockquote><p>总时间限制: 2000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定三个正整数m，n，s<br>问从1到m这m个数里面取n个不同的数，使它们和是s，有多少种取法</p></li><li><p>输入<br>多组数据<br>输入的第一行是整数t，表示有t组数据<br>此后有t行，每行是一组数据<br>每组数据就是三个正整数，m，n，s ( n &lt;= 10,s &lt;= 20)</p></li><li><p>输出<br>对每组数据，输出答案</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">13 4 20</span><br><span class="line">12 5 18</span><br><span class="line">1 1 1</span><br><span class="line">1 2 1</span><br><span class="line">119 3 20</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">24</span><br></pre></td></tr></table></figure></li><li><p>提示<br>用函数ways(m, n, s)表示 从1到m这m个数里面取n个不同的数，使它们和是s的取法总数<br>显然，必须取m个数，不能不取(除非m == 0)</p></li></ul><p>1) 考虑如果 m &gt; s, 问题可以等价于什么？<br>2) 对于m&lt;= s的情况，把所有的取法分成两类:<br>第一类： 取m。则取m后，剩下的问题变成什么？<br>第二类： 不取m，那么剩下的问题变成什么？<br>3) 注意边界条件（即递归终止条件，即不需要递归的条件）<br>边界条件一般是 n,m,s = 0, = 1 之类的情况。</p><p>例如：从1-m这m个数里面，取0个数，使得它们的和是0，有几种取法? 答案是1。<br>从1到m这m个数里面，取0个数，使得它们的和是s(s&gt;0)，有几种取法? 答案是0。无解对应的答案就是0.<br>当 m &lt; n时，答案是0，因为没法取n个数<br>当 m = 0时，只要m和s有一个不是0，ways(m,n,s)就应该返回0。</p><p>递归的时候，函数的参数会减少，如果会出现某个参数一直没完没了减少下去，那就不对了。因此,边界条件一定要考虑周全，确保递归可以终止。</p><p>边界条件可以有多种写法。</p><ul><li>提交代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ways</span>(<span class="params">m, n, s</span>):</span><br><span class="line">    <span class="comment"># 第一类，各种特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">0</span> <span class="keyword">or</span> n &lt; <span class="number">0</span> <span class="keyword">or</span> m &lt;= <span class="number">0</span>:  <span class="comment"># 当输入数据小于0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当n==0且s==0时，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span> <span class="keyword">and</span> s &gt; <span class="number">0</span>:  <span class="comment"># 当取0个，但是s&gt;0时，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:  <span class="comment"># 判断n=1的情况</span></span><br><span class="line">        <span class="keyword">if</span> m &gt;= s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 若m&gt;=s,只有1种取法</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 若m&lt;s,则取法为0</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt;= n <span class="keyword">and</span> s == <span class="number">0</span>:  <span class="comment"># 当m&gt;=n 并且 s=0时 ，只有1种取法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> s == <span class="number">1</span>:  <span class="comment"># 当n&gt;1且s=0时 ，取法为0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二类，讨论大类</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt; s:  <span class="comment"># 当m&gt;s时</span></span><br><span class="line">        <span class="keyword">if</span> n == s <span class="keyword">or</span> n &gt; s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">1</span> &lt; n &lt; s:</span><br><span class="line">            <span class="keyword">return</span> ways(s - <span class="number">1</span>, n, s)</span><br><span class="line">    <span class="keyword">elif</span> m &lt; s:  <span class="comment"># 当m&lt;s时</span></span><br><span class="line">        <span class="keyword">return</span> ways(m - <span class="number">1</span>, n - <span class="number">1</span>, s - m) + ways(m - <span class="number">1</span>, n, s)  <span class="comment"># 当取m时与不取m时的和</span></span><br><span class="line">    <span class="keyword">elif</span> m == s:  <span class="comment"># 当m=s时</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; m:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ways(m - <span class="number">1</span>, n, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">    m, n, s = <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">0</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">1</span>]), <span class="built_in">int</span>(<span class="built_in">str</span>.split()[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(ways(m, n, s))</span><br></pre></td></tr></table></figure><h2 id="031-石头剪刀布"><a href="#031-石头剪刀布" class="headerlink" title="031:石头剪刀布"></a>031:石头剪刀布</h2><blockquote><p>总时间限制：1000ms 内存限制：65536kB</p></blockquote><ul><li>描述<br>石头剪刀布是常见的猜拳游戏。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出拳一样，则不分胜负。</li></ul><p>一天，小A和小B正好在玩石头剪刀布。已知他们的出拳都是有周期性规律的，比如：“石头-布-石头-剪刀-石头-布-石头-剪刀……”，就是以“石头-布-石头-剪刀”为周期不断循环的。请问，小A和小B比了N轮之后，谁赢的轮数多？</p><ul><li><p>输入<br>输入包含三行。<br>第一行包含三个整数：N，NA，NB，分别表示比了N轮，小A出拳的周期长度，小B出拳的周期长度。0 &lt; N， NA， NB &lt; 100。<br>第二行包含NA个整数，表示小A出拳的规律。<br>第三行包含NB个整数，表示小B出拳的规律。<br>其中，0表示”石头”，2表示”剪刀”，5表示”布”。相邻两个整数之间用单个空格隔开。</p></li><li><p>输出<br>输出一行，如果小A赢的轮数多，输出A；如果小B赢的轮数多，输出B；如果两人打平，输出draw。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 3 4</span><br><span class="line">0 2 5</span><br><span class="line">0 5 0 2</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提示<br>对于测试数据，猜拳过程为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A：0 2 5 0 2 5 0 2 5 0</span><br><span class="line">B：0 5 0 2 0 5 0 2 0 5</span><br></pre></td></tr></table></figure><p>A赢了4轮，B赢了2轮，双方打平4轮，所以A赢的轮数多。</p></li><li><p>提交代码</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0</th><th style="text-align:center">2</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">平(0)</td><td style="text-align:center">B(2)</td><td style="text-align:center">A(5)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">A(2)</td><td style="text-align:center">平(4)</td><td style="text-align:center">B(7)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">B(5)</td><td style="text-align:center">A(7)</td><td style="text-align:center">平(10)</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">str1, strA, strB = <span class="built_in">input</span>(), <span class="built_in">input</span>(), <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">N, NA, NB = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">2</span>])</span><br><span class="line">A, B = strA.split(), strB.split()</span><br><span class="line"></span><br><span class="line">countA, countB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    temp = <span class="built_in">int</span>(A[i % NA]) + <span class="built_in">int</span>(B[i % NB])</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == temp <span class="keyword">or</span> <span class="number">4</span> == temp <span class="keyword">or</span> <span class="number">10</span> == temp):</span><br><span class="line">        countA += <span class="number">1</span></span><br><span class="line">        countB += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">2</span> == temp <span class="keyword">or</span> <span class="number">7</span> == temp):</span><br><span class="line">        <span class="keyword">if</span>(A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(<span class="number">5</span> == temp):</span><br><span class="line">        <span class="keyword">if</span> (A[i % NA] &gt; B[i % NB]):</span><br><span class="line">            countA += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            countB += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(countA &gt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA &lt; countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(countA == countB):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draw&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="032-统计数字字符个数"><a href="#032-统计数字字符个数" class="headerlink" title="032:统计数字字符个数"></a>032:统计数字字符个数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一行字符，统计出其中数字字符的个数。</p></li><li><p>输入<br>一行字符串，总长度不超过255。</p></li><li><p>输出<br>输出为1行，输出字符串里面数字字符的个数。</p></li><li><p>样例输入<br>Peking University is set up at 1898.</p></li><li><p>样例输出<br>4</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].isdigit():</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="033-大小写字母互换"><a href="#033-大小写字母互换" class="headerlink" title="033:大小写字母互换"></a>033:大小写字母互换</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>把一个字符串中所有出现的大写字母都替换成小写字母，同时把小写字母替换成大写字母。</p></li><li><p>输入<br>输入一行：待互换的字符串。</p></li><li><p>输出<br>输出一行：完成互换的字符串（字符串长度小于80）。</p></li><li><p>样例输入<br>If so, you already have a Google Account. You can sign in on the right. </p></li><li><p>样例输出<br>iF SO, YOU ALREADY HAVE A gOOGLE aCCOUNT. yOU CAN SIGN IN ON THE RIGHT. </p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i].islower():</span><br><span class="line">        str2 += str1[i].upper()</span><br><span class="line">    <span class="keyword">elif</span> str1[i].isupper():</span><br><span class="line">        str2 += str1[i].lower()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="034-过滤多余的空格"><a href="#034-过滤多余的空格" class="headerlink" title="034:过滤多余的空格"></a>034:过滤多余的空格</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>一个句子中也许有多个连续空格，过滤掉多余的空格，只留下一个空格。</p></li><li><p>输入<br>一行，一个字符串（长度不超过200），句子的头和尾都没有空格。</p></li><li><p>输出<br>过滤之后的句子。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello      world.This is    c language.</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world.This is c language.</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split()</span><br><span class="line">str2 = str1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    str2 += <span class="string">&quot; &quot;</span></span><br><span class="line">    str2 += str1[i]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h2 id="035-找第一个只出现一次的字符"><a href="#035-找第一个只出现一次的字符" class="headerlink" title="035:找第一个只出现一次的字符"></a>035:找第一个只出现一次的字符</h2><blockquote><p>总时间限制: 1000ms 内存限制：65536kB</p></blockquote><ul><li><p>描述<br>给定一个只包含小写字母的字符串，请你找到第一个仅出现一次的字符。如果没有，输出no。</p></li><li><p>输入<br>一个字符串，长度小于100000。</p></li><li><p>输出<br>输出第一个仅出现一次的字符，若没有则输出no。</p></li><li><p>样例输入<br>abcabd</p></li><li><p>样例输出<br>c</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">int1 = <span class="number">0</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    char1 = str1[i]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str1[j] == str1[i] <span class="keyword">and</span> i != j:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        int1 = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int1 == <span class="number">0</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(str1[int1])</span><br></pre></td></tr></table></figure><h2 id="036-判断字符串是否为回文"><a href="#036-判断字符串是否为回文" class="headerlink" title="036:判断字符串是否为回文"></a>036:判断字符串是否为回文</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个字符串，输出该字符串是否回文。回文是指顺读和倒读都一样的字符串。</p></li><li><p>输入<br>输入为一行字符串（字符串中没有空白字符，字符串长度不超过100）。</p></li><li><p>输出<br>如果字符串是回文，输出yes；否则，输出no。</p></li><li><p>样例输入<br>abcdedcba</p></li><li><p>样例输出<br>yes</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(str1)/<span class="number">2</span>)):</span><br><span class="line">    str2 += str1[i]</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">if</span> (str2[i] != str1[<span class="built_in">len</span>(str1)-i-<span class="number">1</span>]):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="037-字符串最大跨距"><a href="#037-字符串最大跨距" class="headerlink" title="037:字符串最大跨距"></a>037:字符串最大跨距</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><p>-描述<br>有三个字符串S,S1,S2，其中，S长度不超过300，S1和S2的长度不超过10。想检测S1和S2是否同时在S中出现，且S1位于S2的左边，并在S中互不交叉（即，S1的右边界点在S2的左边界点的左侧）。计算满足上述条件的最大跨距（即，最大间隔距离：最右边的S2的起始点与最左边的S1的终止点之间的字符数目）。如果没有满足条件的S1，S2存在，则输出-1。</p><p>例如，S = “abcd123ab888efghij45ef67kl”, S1=”ab”, S2=”ef”，其中，S1在S中出现了2次，S2也在S中出现了2次，最大跨距为：18。</p><ul><li><p>输入<br>三个串：S, S1, S2，其间以逗号间隔（注意，S, S1, S2中均不含逗号和空格）；</p></li><li><p>输出<br>S1和S2在S最大跨距；若在S中没有满足条件的S1和S2，则输出-1。</p></li><li><p>样例输入<br>abcd123ab888efghij45ef67kl,ab,ef</p></li><li><p>样例输出<br>18</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">S, S1, S2 = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">StartS1, StartS2 = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">StartS1 = S.find(S1)</span><br><span class="line">StartS2 = <span class="built_in">len</span>(S) - S[::-<span class="number">1</span>].find(S2[::-<span class="number">1</span>]) - <span class="built_in">len</span>(S2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> StartS1 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS2 &lt; <span class="number">0</span> <span class="keyword">or</span> StartS1 + <span class="built_in">len</span>(S1) &gt; StartS2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(StartS2 - (StartS1 + <span class="built_in">len</span>(S1)))</span><br></pre></td></tr></table></figure><h2 id="038-找出全部子串位置"><a href="#038-找出全部子串位置" class="headerlink" title="038:找出全部子串位置"></a>038:找出全部子串位置</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>输入两个串s1，s2，找出s2在s1中所有出现的位置</li></ul><p>两个子串的出现不能重叠。例如’aa’在 aaaa 里出现的位置只有0,2</p><ul><li><p>输入<br>第一行是整数n<br>接下来有n行，每行两个不带空格的字符串s1，s2</p></li><li><p>输出<br>对每行，从小到大输出s2在s1中所有的出现位置。位置从0开始算<br>如果s2没出现过，输出 “no”<br>行末多输出空格没关系</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">ababcdefgabdefab ab</span><br><span class="line">aaaaaaaaa a</span><br><span class="line">aaaaaaaaa aaa </span><br><span class="line">112123323 a</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 2 9 14 </span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br><span class="line">0 3 6 </span><br><span class="line">no</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s[<span class="number">0</span>]:</span><br><span class="line">        a = s[<span class="number">0</span>].find(s[<span class="number">1</span>],m)</span><br><span class="line">        <span class="keyword">if</span> a == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> total == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            m = a + <span class="built_in">len</span>(s[<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(a,<span class="string">&quot;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="039-万年历"><a href="#039-万年历" class="headerlink" title="039:万年历"></a>039:万年历</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定年月日，求星期几。已知2020年11月18日是星期三。另外，本题有公元0年，这个和真实的纪年不一样</p></li><li><p>输入<br>第一行是n(n&lt;=30)，表示有n组数据<br>接下来n行，每行是一组数据。<br>每行三个整数y，m，d，分别代表年，月，日。(-1000000&lt;=y&lt;=1000000)</p></li></ul><p>若今年是2017年，则往前就是2016年，2015年….一直数到2年，1年，再往前就是0年，-1年，-2年…..</p><ul><li>输出<br>对每组数据，输出星期几，星期几分别用</li></ul><p>“Sunday”,”Monday”,”Tuesday”,”Wednesday”,”Thursday”, “Friday”,”Saturday” 表示</p><p>如果月份和日期不合法，输出”Illegal”</p><ul><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2017 2 29</span><br><span class="line">2017 13 2</span><br><span class="line">0 1 1</span><br><span class="line">-2 3 4</span><br><span class="line">2017 10 18</span><br><span class="line">2015 12 31</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Illegal</span><br><span class="line">Illegal</span><br><span class="line">Saturday</span><br><span class="line">Wednesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">judge_week</span>(<span class="params">year, month, day</span>):</span><br><span class="line">    lst1 = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    lst2 = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    date = days = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    lst_days = [<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">29</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">28</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>]:</span><br><span class="line">        <span class="keyword">if</span> day &lt; <span class="number">1</span> <span class="keyword">or</span> day &gt; <span class="number">30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Illegal&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> year &gt;= <span class="number">1</span>:  <span class="comment">#1年1月1日为星期一</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, year):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>    <span class="comment">#累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month-<span class="number">1</span>):</span><br><span class="line">                date += lst2[i]    <span class="comment">#累加整月数</span></span><br><span class="line">        total=date+day+days</span><br><span class="line">        x=total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[x])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(year + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                days += <span class="number">366</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                days += <span class="number">365</span>  <span class="comment"># 累加整年数</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span>) == <span class="number">0</span>) <span class="keyword">and</span> ((year % <span class="number">100</span>) != <span class="number">0</span>) <span class="keyword">or</span> ((year % <span class="number">400</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">                date += lst2[i]  <span class="comment"># 累加整月数</span></span><br><span class="line">        total = date - day + <span class="number">1</span> + days</span><br><span class="line">        x = total % <span class="number">7</span></span><br><span class="line">        <span class="built_in">print</span>(lst_days[(<span class="number">8</span> - x)%<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    year, month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    judge_week(year, month, day)</span><br></pre></td></tr></table></figure><h2 id="040-成绩排序"><a href="#040-成绩排序" class="headerlink" title="040:成绩排序"></a>040:成绩排序</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。</p></li><li><p>输入<br>第一行为n (0 &lt; n &lt; 20)，表示班里的学生数目；<br>接下来的n行，每行为每个学生的名字和他的成绩, 中间用单个空格隔开。名字只包含字母且长度不超过20，成绩为一个不大于100的非负整数。</p></li><li><p>输出<br>把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Kitty 80</span><br><span class="line">Hanmeimei 90</span><br><span class="line">Joey 92</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Joey 92</span><br><span class="line">Hanmeimei 90 </span><br><span class="line">Kitty 80</span><br><span class="line">Tim 28</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">student = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    temp1 = [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])]</span><br><span class="line">    student.append(temp1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -x[<span class="number">1</span>], x[<span class="number">0</span>]</span><br><span class="line">student.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(student[i][<span class="number">0</span>], student[i][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="041-图像模糊处理"><a href="#041-图像模糊处理" class="headerlink" title="041:图像模糊处理"></a>041:图像模糊处理</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>给定n行m列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：<br>1.四周最外侧的像素点灰度值不变；<br>2.中间各像素点新灰度值为该像素点及其上下左右相邻四个像素点原灰度值的平均（舍入到最接近的整数）。</p></li><li><p>输入<br>第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 &lt;= n &lt;= 100，1 &lt;= m &lt;= 100。<br>接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。</p></li><li><p>输出<br>n行，每行m个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">100 0 100 0 50</span><br><span class="line">50 100 200 0 0</span><br><span class="line">50 50 100 100 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100 0 100 0 50</span><br><span class="line">50 80 100 60 0</span><br><span class="line">50 80 100 90 200</span><br><span class="line">100 100 50 50 100</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(str1.split()[<span class="number">0</span>]), <span class="built_in">int</span>(str1.split()[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#print(n,m)</span></span><br><span class="line"></span><br><span class="line">picture = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    str1 = <span class="built_in">input</span>()</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        temp += [<span class="built_in">int</span>(str1.split()[j])]</span><br><span class="line">    picture.append(temp)</span><br><span class="line"><span class="comment">#print(picture)</span></span><br><span class="line"><span class="comment">#print(picture[0][1])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">outpicture = copy.deepcopy(picture)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m-<span class="number">1</span>):</span><br><span class="line">            temp = (picture[i-<span class="number">1</span>][j] + picture[i+<span class="number">1</span>][j] + picture[i][j] + picture[i][j-<span class="number">1</span>] + picture[i][j+<span class="number">1</span>]) / <span class="number">5</span></span><br><span class="line">            outpicture[i][j] = <span class="built_in">round</span>(temp)</span><br><span class="line"><span class="comment">#print(outpicture)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">print</span>(outpicture[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="042-向量点积计算"><a href="#042-向量点积计算" class="headerlink" title="042:向量点积计算"></a>042:向量点积计算</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>在线性代数、计算几何中，向量点积是一种十分重要的运算。</li></ul><p>给定两个n维向量 $a=(a_1, a_2, …, a_n)$ 和 $ b=(b_1, b_2, …, b_n) $，求点积$ a·b=a_1 b_1+a_2 b_2+…+a_n b_n $。</p><ul><li><p>输入<br>第一行是一个整数n。1 &lt;= n &lt;= 1000。<br>第二行包含n个整数$ a_1, a_2, …, a_n $。<br>第三行包含n个整数$ b_1, b_2, …, b_n $。<br>相邻整数之间用单个空格隔开。每个整数的绝对值都不超过1000。</p></li><li><p>输出<br>一个整数，即两个向量的点积结果。</p></li><li><p>样例输入<br>3<br>1 4 6<br>2 1 5</p></li><li><p>样例输出<br>36</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">stra = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">strb = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    result += <span class="built_in">int</span>(stra[i]) * <span class="built_in">int</span>(strb[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="043-病人排队"><a href="#043-病人排队" class="headerlink" title="043:病人排队"></a>043:病人排队</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：</li></ul><ol><li>老年人（年龄 &gt;= 60岁）比非老年人优先看病。</li><li>老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</li><li>非老年人按登记的先后顺序看病。</li></ol><ul><li><p>输入<br>第1行，输入一个小于100的正整数，表示病人的个数；<br>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。</p></li><li><p>输出<br>按排好的看病顺序输出病人的ID，每行一个。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">021075 40</span><br><span class="line">004003 15</span><br><span class="line">010158 67</span><br><span class="line">021033 75</span><br><span class="line">102012 30</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">021033</span><br><span class="line">010158</span><br><span class="line">021075</span><br><span class="line">004003</span><br><span class="line">102012</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">patient = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    patient.append(temp)</span><br><span class="line"></span><br><span class="line">patientA, patientB = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(patient[i][<span class="number">1</span>]) &gt;= <span class="number">60</span>:</span><br><span class="line">        patientA.append(patient[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        patientB.append(patient[i])</span><br><span class="line"><span class="comment">#print(patientA)</span></span><br><span class="line"><span class="comment">#print(patientB)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -<span class="built_in">int</span>(x[<span class="number">1</span>])</span><br><span class="line">patientA.sort(key = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientA)):</span><br><span class="line">    <span class="built_in">print</span>(patientA[i][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(patientB)):</span><br><span class="line">    <span class="built_in">print</span>(patientB[i][<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="044-矩阵乘法"><a href="#044-矩阵乘法" class="headerlink" title="044:矩阵乘法"></a>044:矩阵乘法</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>计算两个矩阵的乘法。<code>n * m</code> 阶的矩阵A乘以 <code>m * k</code> 阶的矩阵B得到的矩阵C是 <code>n * k</code> 阶的，且<code>C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + …… +A[i][m-1] * B[m-1][j]</code> (<code>C[i][j]</code> 表示C矩阵中第i行第j列元素)。</p></li><li><p>输入<br>第一行为n, m, k，表示A矩阵是n行m列，B矩阵是m行k列，n, m, k均小于100<br>然后先后输入A和B两个矩阵，A矩阵n行m列，B矩阵m行k列，矩阵中每个元素的绝对值不会大于1000。</p></li><li><p>输出<br>输出矩阵C，一共n行，每行k个整数，整数之间以一个空格分开。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br><span class="line">2 2 2</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tempstr = <span class="built_in">input</span>()</span><br><span class="line">n, m, k = <span class="built_in">int</span>(tempstr.split()[<span class="number">0</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">1</span>]), <span class="built_in">int</span>(tempstr.split()[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">A, B, C, CC = [], [], [], <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    D = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">           d += <span class="built_in">int</span>(A[i][l]) * <span class="built_in">int</span>(B[l][j])</span><br><span class="line">        D.append(d)</span><br><span class="line">    C = C + D</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n*k):</span><br><span class="line">    CC = CC + <span class="built_in">str</span>(C[i])</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % k==<span class="number">0</span>:</span><br><span class="line">        CC += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        CC += <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(CC)</span><br></pre></td></tr></table></figure></li></ul><h2 id="045-回文子串"><a href="#045-回文子串" class="headerlink" title="045:回文子串"></a>045:回文子串</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li>描述<br>给定一个字符串，输出所有长度至少为2的回文子串。</li></ul><p>回文子串即从左往右输出和从右往左输出结果是一样的字符串，比如：abba，cccdeedccc都是回文字符串。</p><ul><li><p>输入<br>一个字符串，由字母或数字组成。长度500以内。</p></li><li><p>输出<br>输出所有的回文子串，每个子串一行。<br>子串长度小的优先输出，若长度相等，则出现位置靠左的优先输出。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123321125775165561</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">33</span><br><span class="line">11</span><br><span class="line">77</span><br><span class="line">55</span><br><span class="line">2332</span><br><span class="line">2112</span><br><span class="line">5775</span><br><span class="line">6556</span><br><span class="line">123321</span><br><span class="line">165561</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str1) + <span class="number">1</span> - i):</span><br><span class="line">        temp = str1[j:j + i]</span><br><span class="line">        <span class="keyword">if</span> temp == temp[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure></li></ul><h2 id="046-校园食宿预订系统"><a href="#046-校园食宿预订系统" class="headerlink" title="046:校园食宿预订系统"></a>046:校园食宿预订系统</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>某校园为方便学生订餐，推出食堂预定系统。食宿平台会在前一天提供菜单，学生在开饭时间前可订餐。 食堂每天会推出m个菜，每个菜有固定的菜价和总份数，售卖份数不能超过总份数。 假设共有n个学生点餐，每个学生固定点3个菜，当点的菜售罄时, 学生就买不到这个菜了。 请根据学生预定记录，给出食堂总的预定收入 数据满足1 &lt;= n &lt;= 6000，3 &lt;= m &lt;= 6000，单品菜价不大于1000元，每个菜的配额不超过3000</p></li><li><p>输入<br>第一行两个整数n和m，代表有n个学生订餐，共有m个可选的菜<br>下面m行，每行三个元素，分别是菜名、售价和可提供量，保证菜名不重合，菜价为整数<br>下面n行，每行三个元素，表示这个学生点的三个菜的菜名</p></li><li><p>输出<br>一个整数，表示食堂的收入</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">yangroupaomo 13 10</span><br><span class="line">jituifan 7 5</span><br><span class="line">luosifen 16 3</span><br><span class="line">xinlamian 12 20</span><br><span class="line">juruo_milktea 999 1</span><br><span class="line">yangroupaomo luosifen juruo_milktea</span><br><span class="line">luosifen xinlamian jituifan</span><br><span class="line">yangroupaomo jituifan juruo_milktea</span><br><span class="line">jituifan xinlamian luosifen</span><br><span class="line">yangroupaomo yangroupaomo yangroupaomo</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p></li></ul><p>1157</p><ul><li><p>提示<br>如果用python做，要用字典，<br>如果用其它语言做，也要用类似的数据结构<br>否则会超时<br>名字长度范围没有给出，长度不会太离谱。请自己选用合适的办法确保这不是个问题</p></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>()</span><br><span class="line">n, m = <span class="built_in">int</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">1</span>])</span><br><span class="line">A, B, C = <span class="built_in">dict</span>(), <span class="built_in">dict</span>(), <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment"># 菜谱A：&#123;菜名:[售价,现在数量]&#125;</span></span><br><span class="line"><span class="comment"># 学生B：&#123;学生编号:[菜名0,菜名1,菜名2]&#125;</span></span><br><span class="line"><span class="comment"># 菜谱C：&#123;菜名:[售价,原始数量]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜谱读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    A.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line">    C.update(&#123;temp.split()[<span class="number">0</span>]: [<span class="built_in">int</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">int</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生选菜读入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    B.update(&#123;i: [<span class="built_in">str</span>(temp.split()[<span class="number">0</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">1</span>]), <span class="built_in">str</span>(temp.split()[<span class="number">2</span>])]&#125;)</span><br><span class="line"><span class="comment">#print(B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历学生点菜</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> B.values():</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">0</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">0</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">1</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">1</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">1</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">2</span>] <span class="keyword">in</span> A <span class="keyword">and</span> A[i[<span class="number">2</span>]][<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">        A[i[<span class="number">2</span>]][<span class="number">1</span>] += - <span class="number">1</span></span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"><span class="comment">#print(C)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="comment"># 遍历菜谱计算价格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A.keys():</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> C:</span><br><span class="line">        <span class="built_in">sum</span> += (C[i][<span class="number">1</span>] - A[i][<span class="number">1</span>]) * C[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="程序设计与算法（一）测验汇总-2022夏季-63题"><a href="#程序设计与算法（一）测验汇总-2022夏季-63题" class="headerlink" title="程序设计与算法（一）测验汇总(2022夏季)(63题)"></a>程序设计与算法（一）测验汇总(2022夏季)(63题)</h1><h2 id="001-输出第二个整数"><a href="#001-输出第二个整数" class="headerlink" title="001:输出第二个整数"></a>001:输出第二个整数</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入三个整数，把第二个输入的整数输出。</p></li><li><p>输入<br>只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。</p></li><li><p>输出<br>只有一行，一个整数，即输入的第二个整数。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 789</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStr = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(inputStr.split()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="002-字符菱形"><a href="#002-字符菱形" class="headerlink" title="002:字符菱形"></a>002:字符菱形</h2><p>总时间限制: 1000ms 内存限制: 65536kB</p><ul><li><p>描述<br>给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。</p></li><li><p>输入<br>输入只有一行， 包含一个字符。</p></li><li><p>输出<br>该字符构成的菱形。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="built_in">str</span> + <span class="built_in">str</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="003-打印ASCII码"><a href="#003-打印ASCII码" class="headerlink" title="003:打印ASCII码"></a>003:打印ASCII码</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个除空格以外的可见字符（保证在函数scanf中可使用格式说明符%c读入），输出其ASCII码。</p></li><li><p>输入<br>一个除空格以外的可见字符。</p></li><li><p>输出<br>一个十进制整数，即该字符的ASCII码。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(a))</span><br></pre></td></tr></table></figure></li></ul><h2 id="004-打印字符"><a href="#004-打印字符" class="headerlink" title="004:打印字符"></a>004:打印字符</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>输入一个ASCII码，输出对应的字符。</p></li><li><p>输入<br>一个整数，即字符的ASCII码，保证存在对应的可见字符。</p></li><li><p>输出<br>一行，包含相应的字符。</p></li><li><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(a)))</span><br></pre></td></tr></table></figure></li></ul><h2 id="005-整型数据类型存储空间大小"><a href="#005-整型数据类型存储空间大小" class="headerlink" title="005:整型数据类型存储空间大小"></a>005:整型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义int，short类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提示<br>使用sizeof函数可以得到一个特定变量的存储空间大小。例如：对于int型变量x，sizeof(x)的值为4，即x的存储空间为4字节。</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="built_in">int</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(a))</span><br></pre></td></tr></table></figure><h2 id="006-浮点型数据类型存储空间大小"><a href="#006-浮点型数据类型存储空间大小" class="headerlink" title="006:浮点型数据类型存储空间大小"></a>006:浮点型数据类型存储空间大小</h2><blockquote><p>总时间限制: 1000ms 内存限制: 65536kB</p></blockquote><ul><li><p>描述<br>分别定义float，double类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。</p></li><li><p>输入<br>无。</p></li><li><p>输出<br>一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。</p></li><li><p>样例输入<br>（无）</p></li><li><p>样例输出<br>（不提供）</p></li><li><p>提交代码</p></li></ul><p>同上</p><h1 id="程序设计与算法（二）测验汇总-2022夏季-26题"><a href="#程序设计与算法（二）测验汇总-2022夏季-26题" class="headerlink" title="程序设计与算法（二）测验汇总(2022夏季)(26题)"></a>程序设计与算法（二）测验汇总(2022夏季)(26题)</h1><h1 id="程序设计与算法（三）测验和作业题汇总-2022夏季-45题"><a href="#程序设计与算法（三）测验和作业题汇总-2022夏季-45题" class="headerlink" title="程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)"></a>程序设计与算法（三）测验和作业题汇总(2022夏季)(45题)</h1><h1 id="练习-47题"><a href="#练习-47题" class="headerlink" title="练习(47题)"></a>练习(47题)</h1>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-OpenJudge</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第六章列表</title>
    <link href="http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/"/>
    <id>http://hibiscidai.com/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/</id>
    <published>2022-10-03T00:00:00.000Z</published>
    <updated>2022-10-04T08:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8.png" class="" title="实用Python程序设计MOOC-第六章列表"><p>实用Python程序设计MOOC-第六章列表</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第六章列表"><a href="#实用Python程序设计MOOC-第六章列表" class="headerlink" title="实用Python程序设计MOOC-第六章列表"></a>实用Python程序设计MOOC-第六章列表</h1><h1 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h1><h2 id="列表的增删和修改"><a href="#列表的增删和修改" class="headerlink" title="列表的增删和修改"></a>列表的增删和修改</h2><ul><li>列表可以增删元素，列表的元素可以修改，列表元素可以是任何类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">empty = []<span class="comment">#[]表示空表</span></span><br><span class="line">list1 = [<span class="string">&#x27;Pku&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>];</span><br><span class="line">list1[<span class="number">1</span>] = <span class="number">100</span> <span class="comment">#列表元素可以赋值</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 1997, 2000]</span></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]<span class="comment">#删除元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000]</span></span><br><span class="line">list1 += [<span class="number">100</span>, <span class="number">110</span>]<span class="comment">#添加另一列表的元素100和110，在list1原地添加，没有新建一个列表</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110]</span></span><br><span class="line">list1.append(<span class="number">200</span>) <span class="comment">#添加元素200,append用于添加单个元素，括号的内容被认为是一个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200]</span></span><br><span class="line">list1.append([<span class="string">&#x27;ok&#x27;</span>, <span class="number">123</span>])<span class="comment">#添加单个元素</span></span><br><span class="line"><span class="built_in">print</span>(list1)<span class="comment">#&gt;&gt;[&#x27;Pku&#x27;, 100, 2000, 100, 110, 200, [&#x27;ok&#x27;, 123]]</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = [a, n]<span class="comment">#a若变，x也变</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;[[1, &#x27;b&#x27;, &#x27;c&#x27;], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>])<span class="comment">#&gt;&gt;[1, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">1</span>])<span class="comment">#&gt;&gt;b</span></span><br></pre></td></tr></table></figure><h2 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h2><ul><li>列表相加可以得到新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span><span class="comment">#此时c已经是新建的列表，并没有和a建立联系，所以和a没有关系</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="列表和"><a href="#列表和" class="headerlink" title="列表和+="></a>列表和+=</h2><ul><li>对列表来说，<code>a += b</code> 和<code>a = a + b</code>不同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a += [<span class="number">3</span>]<span class="comment">#b和a指向相同地方,在a末尾添加元素,b也受影响</span></span><br><span class="line"><span class="built_in">print</span>(a, b)<span class="comment">#&gt;&gt;[1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a = a + [<span class="number">4</span>, <span class="number">5</span>] <span class="comment">#对a重新赋值,不会影响到b</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="列表乘法"><a href="#列表乘法" class="headerlink" title="列表乘法"></a>列表乘法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="literal">True</span>] * <span class="number">3</span>)<span class="comment">#&gt;&gt;[True, True, True]</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([a * <span class="number">3</span>])<span class="comment">#&gt;&gt;[[1, 2, 1, 2, 1, 2]]</span></span><br><span class="line"></span><br><span class="line">c = [a] *<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2], [1, 2], [1, 2]]</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[[1, 2, 3], [1, 2, 3], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, 2, 1, 2, 1, 2]</span></span><br></pre></td></tr></table></figure><p><strong>重点题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">0</span>]] * <span class="number">2</span> + [[<span class="number">0</span>]] * <span class="number">2</span><span class="comment">#&gt;&gt;[[0], [0], [0], [0]]</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[[5], [5], [0], [0]]</span></span><br></pre></td></tr></table></figure><img src="/2022/10/03/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%97%E8%A1%A8/%E5%88%97%E8%A1%A8%E4%B9%98%E6%B3%95.png" class="" title="列表乘法"><h2 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h2><ul><li>列表的切片返回新的列表，用法和字符串切片相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[2, 3]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[100，3]</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>]) <span class="comment">#&gt;&gt;[4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])<span class="comment">#[2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line"><span class="built_in">print</span>(x, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">x = <span class="number">100</span><span class="comment">#不会修改列表的元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">lst[i] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#[100, 100, 100, 100]</span></span><br></pre></td></tr></table></figure><h2 id="列表比大小"><a href="#列表比大小" class="headerlink" title="列表比大小"></a>列表比大小</h2><ul><li>两个列表比大小，就是逐个元素比大小，直到分出胜负。</li><li>如果有两个对应元素不可比大小，则出runtime error。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">12</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &gt; [<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>] &lt; [<span class="string">&#x27;ab&#x27;</span> , <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>])<span class="comment">#runtime error</span></span><br></pre></td></tr></table></figure><h1 id="列表应用例题-校门外的树"><a href="#列表应用例题-校门外的树" class="headerlink" title="列表应用例题:校门外的树"></a>列表应用例题:校门外的树</h1><p>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，…. L，都种有一棵树。<br>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树(包括区域端点处的两棵树)移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><ul><li><p>输入<br>第一行有两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)，L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。</p></li><li><p>输出<br>包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。</p></li><li><p>样例输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">500 3</span><br><span class="line">150 300</span><br><span class="line">100 200</span><br><span class="line">470 471</span><br></pre></td></tr></table></figure></li><li><p>样例输出<br>298</p></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">L, M = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">good = [<span class="literal">True</span>] * (L + <span class="number">1</span>) <span class="comment">#good[i] 为True表示坐标i的树还在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    start, end = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            good[k] = <span class="literal">False</span> <span class="comment">#坐标k处的树被移走了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(good))    <span class="comment">#sum是python函数，可以求列表元素和，True是1，False是0</span></span><br></pre></td></tr></table></figure><h1 id="列表的朴素排序"><a href="#列表的朴素排序" class="headerlink" title="列表的朴素排序"></a>列表的朴素排序</h1><p>如果有N个元素需要排序，那么首先从N个元素中找到最小的那个(称为第0小的)放在第0个位子上(和原来的第0个位子上的元素交换位置)，然后再从剩下的N-1个元素中找到最小的放在第1个位子上，然后再从剩下的N-2个元素中找到最小的放在第2个位子…..直到所有的元素都就位。</p><p>选择排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SelectionSort</span>(<span class="params">a</span>): <span class="comment">#选择排序</span></span><br><span class="line"><span class="comment">#将列表a从小到大排序</span></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):<span class="comment">#每次从a[i]及其右边的元素里选出最小的，放在a[i]这个位置</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):<span class="comment">#依次考察a[i]及其右边元素</span></span><br><span class="line"><span class="keyword">if</span> a[i] &gt; a[j]:</span><br><span class="line">a[i], a[j] = a[j], a[i]</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">SelectionSort(lst)<span class="comment">#&gt;&gt;[1，2，4，6，12，56]</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><p>选择排序：时间复杂度 $ O(n^2) $，即对有n个元素的列表(数组)，需要做 $ n^2 $ 次比较<br>冒泡排序、插入排序时间复杂度都是$ O(n^2) $</p><p>好的排序算法，比如归并排序，快速排序，复杂度是$ O(n<em>log(n)) $<br>python自带的排序功能，复杂度是$ O(n</em>log(n)) $<br>可以认为排序这件事，复杂度就是$ O(n*log(n)) $</p><h1 id="用排序函数对简单列表排序"><a href="#用排序函数对简单列表排序" class="headerlink" title="用排序函数对简单列表排序"></a>用排序函数对简单列表排序</h1><h2 id="简单顺序排序"><a href="#简单顺序排序" class="headerlink" title="简单顺序排序"></a>简单顺序排序</h2><ul><li><code>a.sort()</code>可以对列表a从小到大排序，改变a的内存结构</li><li><code>sorted(a)</code>返回a经过从小到大排序后的新列表，a不变，创建新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort()<span class="comment">#[1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line">a = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(a)<span class="comment">#b:[1, 2, 3, 4, 5, 6, 7], a不变</span></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br><span class="line">b = <span class="built_in">sorted</span>(a, reverse = <span class="literal">True</span>)<span class="comment">#[33, 25, 16, 7, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="默认多组对比顺序排列"><a href="#默认多组对比顺序排列" class="headerlink" title="默认多组对比顺序排列"></a>默认多组对比顺序排列</h2><p>元组比大小是按照元组需要比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>),<span class="comment">#姓名, 成绩, 年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort()<span class="comment">#先按姓名, 再按成绩, 再按年龄排序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;Mike&#x27;, &#x27;C&#x27;, 19)]</span></span><br></pre></td></tr></table></figure><h2 id="自定义比较排序"><a href="#自定义比较排序" class="headerlink" title="自定义比较排序"></a>自定义比较排序</h2><p>自定义比较函数key<br>比较的不是元素本身，而是元素调用key的函数得到的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myKey</span>(<span class="params">x</span>): <span class="comment">#自定义比较函数</span></span><br><span class="line"><span class="keyword">return</span> x % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">25</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a.sort(key = myKey)</span><br><span class="line"><span class="comment"># key是函数, sort按对每个元素调用该函数的返回值从小到大排序</span></span><br><span class="line"><span class="comment"># [1, 2, 33, 4, 25, 16, 7]按个位数排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(<span class="string">&quot;This is a test string from Andrew&quot;</span>.split(), key = <span class="built_in">str</span>.lower)</span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;Andrew&#x27;, &#x27;from&#x27;, &#x27;is&#x27;, &#x27;string&#x27;, &#x27;test&#x27;, &#x27;This&#x27;]不区分大小写排序</span></span><br></pre></td></tr></table></figure><h1 id="复杂列表的自定义排序"><a href="#复杂列表的自定义排序" class="headerlink" title="复杂列表的自定义排序"></a>复杂列表的自定义排序</h1><ul><li>用不同关键字排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), <span class="comment">#姓名，成绩，年龄</span></span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">(<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">2</span>]) <span class="comment">#按年龄排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">0</span>]) <span class="comment">#按姓名排序</span></span><br><span class="line"><span class="comment">#[(&#x27;Bom&#x27;, &#x27;D&#x27;, 10), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18)]</span></span><br></pre></td></tr></table></figure><h2 id="Iambda表达式"><a href="#Iambda表达式" class="headerlink" title="Iambda表达式"></a>Iambda表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x : x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>表示一个函数，参数是x，返回值是x[2]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="keyword">lambda</span> x, y : x + y <span class="comment">#k是一个函数，参数是x, y, 返回值是x+y.</span></span><br><span class="line"><span class="built_in">print</span>(k(<span class="number">4</span>, <span class="number">5</span>))<span class="comment">#&gt;&gt;9</span></span><br></pre></td></tr></table></figure><p>当关键字相同，排序前哪个在前面，排完之后就在前</p><h2 id="多级排序"><a href="#多级排序" class="headerlink" title="多级排序"></a>多级排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>，<span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line">students.sort(key = f)<span class="comment">#先按年龄从高到低，再按成绩从高到低，再按姓名字典序</span></span><br><span class="line"><span class="built_in">print</span>(students)<span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12)，( &#x27;Mike&#x27;, &#x27;C&#x27;, 12)，(&#x27;Bom&#x27;，&#x27;D&#x27;， 10) ]</span></span><br></pre></td></tr></table></figure><h2 id="Python元组的排序"><a href="#Python元组的排序" class="headerlink" title="Python元组的排序"></a>Python元组的排序</h2><ul><li>元组不能修改，因此无sort函数，可以用<code>sorted</code>得到新的排序后的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> (-x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">students = ((<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),(<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;Bom&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">10</span>))<span class="comment">#students是元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(students, key = f))<span class="comment">#sorted的结果是列表</span></span><br><span class="line"><span class="comment">#&gt;&gt;[(&#x27;Mike&#x27;, &#x27;C&#x27;, 19), (&#x27;Mike&#x27;, &#x27;C&#x27;, 18), (&#x27;John&#x27;, &#x27;A&#x27;, 15), (&#x27;Mike&#x27;, &#x27;B&#x27;, 12), (&#x27;Wang&#x27;, &#x27;B&#x27;, 12), (&#x27;Mike&#x27;, &#x27;C&#x27;, 12), (&#x27;Bom&#x27;, &#x27;D&#x27;, 10)]</span></span><br></pre></td></tr></table></figure><h1 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h1><p><code>append(x)</code>添加元素x到尾部<br><code>extend(x)</code>添加列表x中的元素到尾部<br><code>insert(i,x)</code>将元素x插入到下标i处<br><code>remove(x)</code>删除元素x<br><code>del(i)</code>删除下标为i的元素<br><code>reverse()</code>颠倒整个列表<br><code>index(x)</code>查找元素x，找到则返回第一次出现的下标，找不到则引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a, b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.append(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 6]]</span></span><br><span class="line"></span><br><span class="line">b.insert(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6]]</span></span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">1</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">3</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, &#x27;K&#x27;, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="string">&#x27;K&#x27;</span>)<span class="comment">#只会删掉第一个K</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, 2, &#x27;K&#x27;, 3, [5, 100, 6], 5, 100, 6]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[6, 100, 5, [5, 100, 6], 3, &#x27;K&#x27;, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;K&#x27;</span>))<span class="comment">#&gt;&gt;5</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;m&#x27;</span>)) <span class="comment">#找不到&#x27;m&#x27;,会引发异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)<span class="comment">#&gt;&gt;&#x27;m&#x27; is not in list</span></span><br></pre></td></tr></table></figure><h2 id="列表映射"><a href="#列表映射" class="headerlink" title="列表映射"></a>列表映射</h2><ul><li><code>map(function, sequence)</code>， 可用于将一个序列（列表、元组、集合…）映射到另一个序列</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))<span class="comment">#&gt;&gt;123[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a延时操作已经没有结果了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(a))<span class="comment">#&gt;&gt;()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般是执行中进行</span></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="number">2</span> * x, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[4, 6, 8]</span></span><br></pre></td></tr></table></figure><ul><li>map用于输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br><span class="line">输入:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br><span class="line">输出:<span class="number">1</span> <span class="number">23</span> <span class="number">45</span></span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><ul><li><code>filter(function, sequence)</code>，抽取序列中令<code>function(x)</code>为True的元素x</li><li>返回一个延时求值对象，可以转换成<code>list</code>, <code>tuple</code>, <code>set</code>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lst = tup1e(<span class="built_in">filter</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))<span class="comment">#抽取出偶数</span></span><br><span class="line"><span class="built_in">print</span>(lst)<span class="comment">#&gt;&gt;(2, 4)</span></span><br></pre></td></tr></table></figure><h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment">#=&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line"></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment">#=&gt;[4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br><span class="line"></span><br><span class="line">[[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>] <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#=&gt;[[&#x27;AX&#x27;, &#x27;BX&#x27;, &#x27;CX&#x27;], [&#x27;AY&#x27;, &#x27;BY&#x27;, &#x27;CY&#x27;], [&#x27;AZ&#x27;, &#x27;BZ&#x27;, &#x27;CZ&#x27;]]</span></span><br><span class="line"></span><br><span class="line">L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>)]</span><br><span class="line"><span class="comment">#=&gt;[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line">[s <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">int</span>)]</span><br><span class="line"><span class="comment">#=&gt;[18]</span></span><br></pre></td></tr></table></figure><h1 id="元组生成式"><a href="#元组生成式" class="headerlink" title="元组生成式"></a>元组生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line"><span class="comment">#&gt;&gt;(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)</span></span><br></pre></td></tr></table></figure><h1 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h1><ul><li><p>二维列表a可以看作是矩阵，<code>a[i][j]</code>就是第i行第j列的元素</p></li><li><p>错误生成二维列表的方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = [a] * <span class="number">3</span><span class="comment">#b有三个元素，都是指针，都和a指向同一地方</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[[0, 1, 100], [0, 1, 100], [0, 1, 100]]</span></span><br></pre></td></tr></table></figure><ul><li>正确生成二维列表的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">2</span>], matrix[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">#&gt;&gt;6 9</span></span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[1, 2, 3], [4, 100, 6], [7, 8, 9]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>) ]</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;[[0, 1, 2], [3, 4, 5]]</span></span><br></pre></td></tr></table></figure><ul><li>生成一个3行4列的矩阵，所有元素都是0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">lst.append([<span class="number">0</span>] * <span class="number">4</span>)</span><br><span class="line">lst[<span class="number">0</span>][<span class="number">0</span>] = lst[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="built_in">print</span>(lst[i][j], end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((1, 2, 3), (4, 5, 6), (7, 8, 9))</span></span><br><span class="line"></span><br><span class="line">matrix = <span class="built_in">tuple</span>(<span class="built_in">tuple</span>(<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(matrix)<span class="comment">#&gt;&gt;((0, 0, 0), (0, 0, 0), (0, 0, 0))</span></span><br></pre></td></tr></table></figure><h1 id="列表拷贝"><a href="#列表拷贝" class="headerlink" title="列表拷贝"></a>列表拷贝</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]<span class="comment">#是a的拷贝,b和a不是同一个对象,指向不同东西</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">b += [<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#[5, 2, 3, 4, 10]</span></span><br></pre></td></tr></table></figure><h2 id="列表深拷贝"><a href="#列表深拷贝" class="headerlink" title="列表深拷贝"></a>列表深拷贝</h2><ul><li>列表浅拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = a[:]</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;[1, [2, 3]] </span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">#&gt;&gt;[1, [2, 3], 4]</span></span><br></pre></td></tr></table></figure><p>未能进行深拷贝!</p><p><code>浅拷贝</code>：只拷贝指针，并没有拷贝指针指向的内容<br><code>深拷贝</code>：不仅拷贝指针，还拷贝指针指向的内容</p><ul><li>列表深拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a= [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;[1, [2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;[1, [2], 4]</span></span><br></pre></td></tr></table></figure><h1 id="元组和列表互转"><a href="#元组和列表互转" class="headerlink" title="元组和列表互转"></a>元组和列表互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">tuple</span>(a)<span class="comment">#b:(1,2,3)</span></span><br><span class="line">c = <span class="built_in">list</span>(b)<span class="comment">#c:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">(a, b, c) = t<span class="comment">#a=1, b=3, c=2</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[a, b, c] = s<span class="comment">#a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><h1 id="元组、列表和字符串互转"><a href="#元组、列表和字符串互转" class="headerlink" title="元组、列表和字符串互转"></a>元组、列表和字符串互转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;he1lo&quot;</span>))<span class="comment">#&gt;&gt;[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;] </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]))<span class="comment">#&gt;&gt;a44c</span></span><br><span class="line"><span class="built_in">print</span> (tup1e (<span class="string">&quot;hello&quot;</span>) )<span class="comment">#&gt;&gt;(&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;c&#x27;</span>))) <span class="comment">#&gt;&gt;a44c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第六章列表</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第五章字符串和元组</title>
    <link href="http://hibiscidai.com/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/"/>
    <id>http://hibiscidai.com/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/</id>
    <published>2022-09-30T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84.png" class="" title="实用Python程序设计MOOC-第五章字符串和元组"><p>实用Python程序设计MOOC-第五章字符串和元组</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第五章字符串和元组"><a href="#实用Python程序设计MOOC-第五章字符串和元组" class="headerlink" title="实用Python程序设计MOOC-第五章字符串和元组"></a>实用Python程序设计MOOC-第五章字符串和元组</h1><h1 id="Python变量的指针本质"><a href="#Python变量的指针本质" class="headerlink" title="Python变量的指针本质"></a>Python变量的指针本质</h1><h2 id="Python的数据类型"><a href="#Python的数据类型" class="headerlink" title="Python的数据类型"></a>Python的数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>int，float，complex</p><h3 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h3><p>字符串：str<br>元组：tuple<br>列表：list<br>字典：dict<br>集合：set</p><h2 id="isinstance函数"><a href="#isinstance函数" class="headerlink" title="isinstance函数"></a>isinstance函数</h2><p><code>isinstance(x, y)</code> 函数查询数据x是否是类型y</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;1233&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">str</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, <span class="built_in">int</span>))<span class="comment">#&gt;&gt;False</span></span><br><span class="line">b = (<span class="number">1</span>, <span class="number">3</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, <span class="built_in">tuple</span>))<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="len函数"><a href="#len函数" class="headerlink" title="len函数"></a>len函数</h2><p>len函数可以用来求组合数据类型的元素个数 (长度)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;12345&quot;</span>))<span class="comment">#&gt;&gt;5求字符串十</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment">#&gt;&gt;4求列表长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))<span class="comment">#&gt;&gt;3求元组长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;))<span class="comment">#&gt;&gt;3求集合元素个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(&#123;<span class="string">&#x27;tom&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;jack&#x27;</span>:<span class="number">3</span>&#125;))<span class="comment">#&gt;&gt;求字典元素个数</span></span><br></pre></td></tr></table></figure><h2 id="Python变量的指针本质-1"><a href="#Python变量的指针本质-1" class="headerlink" title="Python变量的指针本质"></a>Python变量的指针本质</h2><ul><li>Pyhton中的变量都是指针</li><li>Python中所有可赋值的东西，即可以出现在赋值号”=”左边的东西，都是指针</li><li>指针即代表内存单元的地址</li><li><p>将指针称作”箭头”， 更容易理解。所有变量都是箭头，指向内存某处</p></li><li><p>对变量进行赋值的本质，就是让该变量(箭头)指向某个地方</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span><span class="comment">#a → 3</span></span><br><span class="line">b = <span class="number">4</span><span class="comment">#b → 4</span></span><br></pre></td></tr></table></figure><ul><li>用一个变量对另一个变量赋值意味着让两个变量指向同一个地方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b<span class="comment">#a ↘ 3</span></span><br><span class="line"><span class="comment">#b → 4</span></span><br></pre></td></tr></table></figure><h2 id="is运算符和-的区别"><a href="#is运算符和-的区别" class="headerlink" title="is运算符和==的区别"></a>is运算符和==的区别</h2><p><code>a is b</code> 为True说a和b指向同一个地方</p><p><code>a == b</code>为True说明a和b指向的地方放的的东西相同，但是a和b不一定指向相同的地方</p><p><code>a = b</code> 会使得a和b指向同一个地方</p><p><code>x is y</code> 表示x和y是否指向同一个地方<br><code>x == y</code> 表示x和y的内容是否相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">#a → [1,2,3,4]</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">#b → [1,2,3,4]</span></span><br><span class="line"><span class="built_in">print</span>(a == b)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"></span><br><span class="line">c == a</span><br><span class="line"><span class="built_in">print</span>(a == c)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>] = <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;[1, 2, &#x27;ok&#x27;, 4]</span></span><br><span class="line"><span class="comment">#因为a和c指向同一个地方，所以修改a[2]，c[2] 也变。a[2]和c[2]是同一个东西</span></span><br></pre></td></tr></table></figure><ul><li><p>对int，float，complex，str，tuple类型的变量a和b，只需关注<code>a == b</code>是否成立，关注<code>a is b</code>是否成立无意义。因这些数据本身都不会更改，不会产生a指向的东西改了b指向的东西也跟着变的情况。数据类型不可能改变的。</p></li><li><p>对list，dict，set类型的变量a和b，<code>a == b</code>和<code>a is b</code>的结果都需要关注。因这些数据本身会改变。改别了a指向的内容，说不定b指向的内容也变了。该数据类型可能改变的。</p></li></ul><h2 id="列表元素的指针本质"><a href="#列表元素的指针本质" class="headerlink" title="列表元素的指针本质"></a>列表元素的指针本质</h2><p>列表的元素也可以赋值，因此也是指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><img src="/2022/09/30/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84/%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E7%9A%84%E6%8C%87%E9%92%88%E6%9C%AC%E8%B4%A8.png" class="" title="列表元素的指针本质"><h1 id="字符串的转义字符"><a href="#字符串的转义字符" class="headerlink" title="字符串的转义字符"></a>字符串的转义字符</h1><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><code>\</code>及其后面的某些字符会构成转义字符，即两个字符当一个字符看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;hello\nworld\tok\&quot;1\\2&quot;</span>) <span class="comment">#\n \t \&quot; \\都是“转义字符”代表换行，制表符，双引号，斜杠</span></span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world ok&quot;1\2</span><br></pre></td></tr></table></figure></p><p>字符，包括\n这样的转义字符，只能出现在字符串里面，必须用引号括起来!</p><p><code>print(a\nb)</code> 不合法，不会打出a的值，然后换行，再打出b的值</p><ul><li>规定 <code>\</code> 不转义的字符串</li></ul><p><code>print(r&#39;ab\ncd&#39;)    #&gt;&gt;ab\ncd</code></p><p><code>r</code>表示字符串里面的\就是\，不会和后面的字符合并起来看待</p><h1 id="字符串的切片-子串"><a href="#字符串的切片-子串" class="headerlink" title="字符串的切片(子串)"></a>字符串的切片(子串)</h1><ul><li>字符串的切片( 也叫子串，即连续的一部分)</li></ul><p><code>a[x:y]</code>表示字符串a里从下标x到下标y那一部分的子串(不包括下标y的那个字符)，<strong>左闭右开</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">2</span>])<span class="comment">#&gt;&gt;B区间是`左闭右开`，终点不算</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt;ABC</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">3</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt;BC</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])<span class="comment">#&gt;&gt;CD终点省略就是一直取到最后一个字符</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">3</span>])<span class="comment">#&gt;&gt;ABC起点省略就是从头开始取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abcd&quot;</span>[<span class="number">2</span>:<span class="number">3</span>])<span class="comment">#&gt;&gt;c</span></span><br></pre></td></tr></table></figure><p><code>a[x:y:z]</code>表示，从<code>a[x]</code>取到<code>a[y]</code> (<code>a[y]</code>不算)，每z个字符取一个，最后拼起来。<br>z为负数则代表倒着取，<strong>左开右闭</strong>。<br>x, y可以省略。x, y全省略表示从头取到尾或从尾取到头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1234&quot;</span>[<span class="number">3</span>:<span class="number">1</span>:-<span class="number">1</span>]) <span class="comment">#&gt;&gt;43</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abcde&quot;</span>[::-<span class="number">1</span>])<span class="comment">#&gt;&gt;edcba可用于反转字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345678&quot;</span>[<span class="number">1</span>:<span class="number">7</span>:<span class="number">2</span>])<span class="comment">#&gt;&gt;246</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345678&quot;</span>[<span class="number">7</span>:<span class="number">1</span>:-<span class="number">2</span>])<span class="comment">#&gt;&gt;864</span></span><br></pre></td></tr></table></figure><p>字符串切片的用法也适用于元组和列表！</p><h1 id="字符串的分割-split"><a href="#字符串的分割-split" class="headerlink" title="字符串的分割(split)"></a>字符串的分割(split)</h1><h2 id="split函数详解"><a href="#split函数详解" class="headerlink" title="split函数详解"></a>split函数详解</h2><p><code>s.split(x)</code> 用字符串x做分隔符分割字符串s，得到分隔后的列表</p><p>两个相邻分隔符之间会被分隔出一个空串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;12..34.5346...a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;..&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12&#x27;, &#x27;34.5346&#x27;,&#x27;.a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;.&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12&#x27;, &#x27;&#x27;，&#x27;34&#x27;, &#x27;5346`, &#x27;&#x27;, &#x27;&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;34&quot;</span>))<span class="comment">#&gt;&gt; [&#x27;12..&#x27;, &#x27;&#x27;.5&#x27;, &#x27;6...a&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="字符串高级分割"><a href="#字符串高级分割" class="headerlink" title="字符串高级分割"></a>字符串高级分割</h2><ul><li>用多个分隔串进行分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re<span class="comment">#正则表达式包</span></span><br><span class="line">a = <span class="string">&#x27;Beautiful, is; better*than\nugly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;;| |,|\*|\n&#x27;</span>, a)) <span class="comment">#分隔串用|隔开]</span></span><br><span class="line"><span class="comment">#&#x27;;&#x27;</span></span><br><span class="line"><span class="comment">#&#x27; &#x27;</span></span><br><span class="line"><span class="comment">#&#x27;,&#x27;</span></span><br><span class="line"><span class="comment">#&#x27;*&#x27; \*代表*</span></span><br><span class="line"><span class="comment">#&#x27;\n&#x27; 都被看做分隔符</span></span><br><span class="line"><span class="comment">#&gt;&gt; [&#x27;Beautiful&#x27;, &#x27;&#x27;, &#x27;is&#x27;, &#x27;&#x27;, &#x27;better&#x27;, &#x27;than&#x27;, &#x27;ugly&#x27;]</span></span><br></pre></td></tr></table></figure><p>两个相邻的分隔串之间，会隔出一个空串</p><h1 id="字符串的函数"><a href="#字符串的函数" class="headerlink" title="字符串的函数"></a>字符串的函数</h1><ul><li><code>count</code>求子串出现次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;thisAAbb AA&#x27;</span></span><br><span class="line">s.count(<span class="string">&#x27;AA&#x27;</span>)<span class="comment">#返回2,AA出现2次</span></span><br></pre></td></tr></table></figure><ul><li><code>len</code>字符串长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="built_in">len</span>(s)<span class="comment">#4</span></span><br></pre></td></tr></table></figure><ul><li><code>upper</code>，<code>lower</code>转大写、小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())<span class="comment">#&gt;&gt;ABC</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;abc</span></span><br></pre></td></tr></table></figure><ul><li><code>find</code>，<code>rfind</code>，<code>index</code>，<code>rindex</code></li></ul><p>在字符串中查找子串，返回找到的位置(下标)。<br>找不到的话，find返回-1，index引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;ab&quot;</span>))<span class="comment">#&gt;&gt;4,&quot;ab&quot;第一次出现在下标4</span></span><br><span class="line"><span class="built_in">print</span>(s.rfind(<span class="string">&quot;ab&quot;</span>))<span class="comment">#&gt;&gt;10</span></span><br><span class="line"><span class="comment">#find从头开始找,rfind从尾巴开始找。返回第一个找到的位置</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s.index(<span class="string">&quot;afb&quot;</span>) <span class="comment">#找不到&quot;afb&quot;因此会产生异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment">#&gt;&gt;substring not found</span></span><br></pre></td></tr></table></figure><ul><li><code>find</code>还可以指定查找起点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;12&quot;</span>, <span class="number">4</span>))<span class="comment">#&gt;&gt;13指定从下标4处开始查找</span></span><br></pre></td></tr></table></figure><p>如果想要找到所有的子串，需要写一个循环，规定指针</p><ul><li><code>replace</code>替换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;1234abc567abc12&quot;</span></span><br><span class="line">b = s.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;FGHI&quot;</span>) <span class="comment">#b由把s里所有abc换成FGHI而得</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;1234FGHI567FGHI12</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;1234abc567abc12</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="comment">#&gt;&gt;123456712</span></span><br></pre></td></tr></table></figure><ul><li><code>isdigit()</code>，<code>islower()</code>，<code>isupper()</code> 判断字符串是否是数，是否全是小写，是否全是大写等</li><li><code>startswith</code>，<code>endswith</code> 判断字符串是否以某子串开头、结尾</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123.4&quot;</span>.isdigit())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>.isdigit())<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a123.4&quot;</span>.isdigit())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ab123&quot;</span>.islower())<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ab123&quot;</span>.islower())<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li><code>strip()</code> 返回除去头尾空白字符(空格，<code>\r</code>  <code>\t</code> <code>\n</code>)后的字符串</li><li><code>lstrip()</code> 返回除去头部(左端)空白字符后的字符串</li><li><code>rstrip()</code> 返回除去尾部(右端)空白字符后的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot; \t12 34 \n&#x27;&quot;</span>.strip())<span class="comment">#&gt;&gt;12 34</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; \t12 34 5&quot;</span>.lstrip())<span class="comment">#&gt;&gt;12 34 5</span></span><br></pre></td></tr></table></figure><p><code>strip(s)</code>，<code>lstrip(s)</code>，<code>rstrip(s)</code>返回除去两端、左端、右端在s中出现的字符后的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="string">&quot;takeab \n&quot;</span>.strip(<span class="string">&quot;ba \n&quot;</span>))<span class="comment">#&gt;&gt;take</span></span><br><span class="line"><span class="comment">#去除两端&#x27;b&#x27;, &#x27;a&#x27;, &#x27; &#x27;, &#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;cd\t12 34 5&quot;</span>.lstrip(<span class="string">&quot;d\tc&quot;</span>) ) <span class="comment">#&gt;&gt;12 34 5</span></span><br><span class="line"><span class="comment">#去除左端&#x27;d&#x27;, &#x27;\t&#x27;, &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字符串的编码和格式化"><a href="#字符串的编码和格式化" class="headerlink" title="字符串的编码和格式化"></a>字符串的编码和格式化</h1><p>字符串的编码在内存中的编码是unicode的，虽然写入文件时可能是gbk或者utf-8的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))<span class="comment">#&gt;&gt;97</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;好&quot;</span>))<span class="comment">#&gt;&gt;22920</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">22900</span>))<span class="comment">#&gt;&gt;奴</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))<span class="comment">#&gt;&gt;a</span></span><br></pre></td></tr></table></figure><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;He1lo &#123;0&#125; &#123;1:10&#125;, you get $&#123;2:0.4f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Mr.&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">3.2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;Hello Mr. Jack      , you get $3.2000</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;Hello &#123;0&#125; &#123;1:&gt;10&#125;, you get $&#123;2:0.4f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Mr.&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">3.2</span>)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#Hello Mr.       Jack, you get $3.2000</span></span><br></pre></td></tr></table></figure><p><code>&#123;序号:宽度.精度 类型&#125;</code> 宽度可以是0<br><code>&gt;</code> : 右对齐<br><code>&lt;</code> : 左对齐<br><code>^</code> : 中对齐</p><p>如<code>&#123;0:&gt;10.4f&#125;</code>表示第0项是小数，以宽度至少是10字符，右对齐(宽度不足时空格补在左边)，保留小数点后面4位的方式输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Today is %s.%d.&quot;</span> % (<span class="string">&#x27;May&#x27;</span>, <span class="number">21</span>))<span class="comment">#Today is May.21.</span></span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li>一个元组由数个逗号分隔的值组成，前后可加括号</li><li>元组不能修改，即不可增删元素，不可对元素赋值，不可修改元素顺序(如排序)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;he1lo!&#x27;</span><span class="comment">#t是一个元组</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])<span class="comment">#&gt;&gt;12345</span></span><br><span class="line"><span class="built_in">print</span>(t)<span class="comment">#&gt;&gt;(12345, 54321, &#x27;hello!&#x27;)</span></span><br><span class="line">u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)<span class="comment">#u有两个元素，都是元组</span></span><br><span class="line"><span class="built_in">print</span>(u)<span class="comment">#&gt;&gt;((12345, 54321, &#x27;hello!&#x27;), (1, 2, 3, 4, 5))</span></span><br><span class="line"><span class="built_in">print</span>(u[<span class="number">0</span>][<span class="number">1</span>])<span class="comment">#&gt;&gt;54321</span></span><br><span class="line"><span class="built_in">print</span>(u[<span class="number">1</span>][<span class="number">2</span>])<span class="comment">#&gt;&gt;3</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">88888</span><span class="comment">#运行错误,元组的元素不能赋值</span></span><br></pre></td></tr></table></figure><ul><li>元组的元素的内容有可能被修改。<br>例如，如果元素是列表，就可以修改该列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = (<span class="string">&quot;he11o&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]) <span class="comment">#[1, 2, 3]是列表</span></span><br><span class="line">v[<span class="number">1</span>] = <span class="number">32</span> <span class="comment">#运行错误，元组元素不可修改成指向别的</span></span><br><span class="line">v[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&#x27;world&#x27;</span> <span class="comment">#可以</span></span><br><span class="line"><span class="built_in">print</span>(v)<span class="comment">#&gt;&gt;(&#x27;hello&#x27;, [&#x27;world&#x27;, 2, 3], [3, 2, 1])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(v))<span class="comment">#&gt;&gt;3求长度，</span></span><br></pre></td></tr></table></figure><h2 id="元组元素的指针本质"><a href="#元组元素的指针本质" class="headerlink" title="元组元素的指针本质"></a>元组元素的指针本质</h2><ul><li>元组的元素都是指针。元组元素不可修改，是指不可改变元组元素的指向，但是元组元素指向的内容，是有可能被修改的</li></ul><p>所谓的元组元素不可改成别的，类似于组建了一只球队，规定球队人员不可更改。但是队员换个发型，增加体重，受伤缺胳膊少腿了，都是可以的</p><h2 id="单元素的元组"><a href="#单元素的元组" class="headerlink" title="单元素的元组"></a>单元素的元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">empty = ()<span class="comment">#空元组</span></span><br><span class="line">singleton = <span class="string">&#x27;hello&#x27;</span>,<span class="comment">#注意末尾的,如果没有，就不是元组而是字符串了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(empty))<span class="comment">#&gt;&gt;0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(singleton))<span class="comment">#&gt;&gt;1</span></span><br><span class="line">x = (<span class="string">&#x27;hello&#x27;</span>,)<span class="comment">#无逗号则x为字符串</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;(&#x27;hello&#x27;,)</span></span><br></pre></td></tr></table></figure><h2 id="用下标访问元组，以及元组切片"><a href="#用下标访问元组，以及元组切片" class="headerlink" title="用下标访问元组，以及元组切片"></a>用下标访问元组，以及元组切片</h2><p>用法和字符串一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1[<span class="number">0</span>])<span class="comment">#&gt;&gt;Google</span></span><br><span class="line"><span class="built_in">print</span>(tup2[<span class="number">1</span>:<span class="number">5</span>])<span class="comment">#&gt;&gt;(2, 3, 4, 5)</span></span><br><span class="line"><span class="built_in">print</span>(tup2[::-<span class="number">1</span>])<span class="comment">#&gt;&gt;(7, 6, 5, 4, 3, 2, 1)</span></span><br><span class="line"><span class="built_in">print</span>(tup2[-<span class="number">1</span>:<span class="number">0</span>:-<span class="number">2</span>])<span class="comment">#&gt;&gt;(7, 5, 3)</span></span><br></pre></td></tr></table></figure><h2 id="可以对元组进行连接组合"><a href="#可以对元组进行连接组合" class="headerlink" title="可以对元组进行连接组合"></a>可以对元组进行连接组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>);</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2;</span><br><span class="line"><span class="built_in">print</span>(tup3)<span class="comment">#&gt;&gt;(12, 34.56, &#x27;abc&#x27;, &#x27;xyz&#x27;)</span></span><br><span class="line">tup3 += (<span class="number">10</span>, <span class="number">20</span>)<span class="comment">#等价于tup3 = tup3 + (10, 20), 新建了一个元组</span></span><br><span class="line"><span class="built_in">print</span>(tup3)<span class="comment">#&gt;&gt;(12, 34.56, &#x27;abc&#x27;, &#x27;xyz&#x27;, 10, 20)</span></span><br></pre></td></tr></table></figure><h2 id="元组运算和迭代"><a href="#元组运算和迭代" class="headerlink" title="元组运算和迭代"></a>元组运算和迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;(1, 2, 3, 1, 2, 3, 1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line"><span class="built_in">print</span>(i, end = <span class="string">&quot;&quot;</span>)<span class="comment">#&gt;&gt;123</span></span><br></pre></td></tr></table></figure><h2 id="元组赋值"><a href="#元组赋值" class="headerlink" title="元组赋值"></a>元组赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = x</span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> x) <span class="comment"># true is 表示两个操作数是否指向同一个东西,即是否是同一个对象</span></span><br><span class="line"><span class="comment"># 指针指向同一个地方</span></span><br><span class="line"></span><br><span class="line">x += (<span class="number">100</span>,)<span class="comment">#等价于x = x + (100,)新建了一个元组</span></span><br><span class="line"><span class="comment"># 执行完之后x和b不在指向同一个指针</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#(1, 2, 3, 100)</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3)</span></span><br></pre></td></tr></table></figure><h2 id="元组比大小"><a href="#元组比大小" class="headerlink" title="元组比大小"></a>元组比大小</h2><ul><li>两个元组比大小，就是逐个元素比大小，直到分出胜负</li><li>如果有两个对应元素不可比大小，则出<code>runtime error</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">12</span> ) &lt; (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>) &lt; (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">13</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>) &gt; (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>))<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>) &lt; (<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">13</span>) )<span class="comment">#runtime error</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">t = (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">#可执行</span></span><br><span class="line">t[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;a&quot;</span><span class="comment">#可执行</span></span><br><span class="line">t += (<span class="number">1</span>, <span class="number">2</span>)<span class="comment">#可执行</span></span><br></pre></td></tr></table></figure><p><strong>重点例题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = (a, a)<span class="comment">#([1, 2, 3], [1, 2, 3])</span></span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span><span class="comment">#([1, 100, 3], [1, 100, 3])</span></span><br><span class="line"><span class="comment">#直接修改了a的内存空间</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment">#[1, 100, 3], ([1, 100, 3], [1, 100, 3])</span></span><br></pre></td></tr></table></figure><h1 id="用元组-列表-取代复杂分支结构"><a href="#用元组-列表-取代复杂分支结构" class="headerlink" title="用元组(列表)取代复杂分支结构"></a>用元组(列表)取代复杂分支结构</h1><ul><li>输入1-7，输出星期几</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">weekdays = <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>, <span class="string">&quot;Sunday&quot;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">7</span> <span class="keyword">or</span> n &lt; <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Illegal&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(weekdays[n - <span class="number">1</span>]) </span><br></pre></td></tr></table></figure><h2 id="万年历"><a href="#万年历" class="headerlink" title="万年历"></a>万年历</h2><ul><li><p>例题<br>已知2012年1月25日是星期三，编写一个程序，输入用”年月日”表示的一个2012年1月25日以后的期，输出该日期是星期几(星期天输出0)。</p></li><li><p>Sample Input<br>2015 11 02</p></li><li><p>Sample Output<br>1</p></li><li><p>思路</p></li></ul><p>2012年1月22日是星期天。算出给定日期是从改天起过了x天，然后输出x%7</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">monthDays = [-<span class="number">1</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]<span class="comment">#十二个月的天数</span></span><br><span class="line">days = <span class="number">0</span> <span class="comment">#从2012-01-22开始过了多少天</span></span><br><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">year, month, date = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>]), <span class="built_in">int</span>(lst[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2012</span>, year): <span class="comment">#先累加过掉的整年的天数</span></span><br><span class="line"><span class="keyword">if</span> y%<span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> y%<span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> y%<span class="number">400</span> == <span class="number">0</span>:<span class="comment">#闰年</span></span><br><span class="line">days += <span class="number">366</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">days += <span class="number">365</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year%<span class="number">4</span> ==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year%<span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">monthDays[<span class="number">2</span>] = <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, month):<span class="comment">#再累加year那年过掉的整月的天数</span></span><br><span class="line">days += monthDays [i]</span><br><span class="line"></span><br><span class="line">days += date <span class="comment">#累加year年month那个月的天数</span></span><br><span class="line">days -= <span class="number">22</span> <span class="comment">#2012年1月22日是星期天。扣掉2012年的前22天</span></span><br><span class="line"><span class="built_in">print</span>(days % <span class="number">7</span>) <span class="comment">#星期天算一周的第0天</span></span><br></pre></td></tr></table></figure><ul><li>下面的方法可以更快算出过掉的整年的总天数，不必逐年累加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">days = <span class="number">0</span></span><br><span class="line">days += (year - <span class="number">2012</span>) * <span class="number">365</span></span><br><span class="line"><span class="keyword">if</span> year &gt; <span class="number">2012</span> :</span><br><span class="line">days += (year - <span class="number">2012</span> - <span class="number">1</span>) // <span class="number">4</span> +<span class="number">1</span><span class="comment">#补上闰年多的一天</span></span><br><span class="line">days -= (year - <span class="number">2000</span> - <span class="number">1</span>) // <span class="number">100</span> - (year - <span class="number">2000</span> - <span class="number">1</span>) // <span class="number">400</span><span class="comment">#扣掉把100的整数倍都当作闰年而多加的天数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第五章字符串和元组</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第四章函数和递归</title>
    <link href="http://hibiscidai.com/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/"/>
    <id>http://hibiscidai.com/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/</id>
    <published>2022-09-23T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92.png" class="" title="实用Python程序设计MOOC-第四章函数和递归"><p>实用Python程序设计MOOC-第四章函数和递归</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第四章函数和递归"><a href="#实用Python程序设计MOOC-第四章函数和递归" class="headerlink" title="实用Python程序设计MOOC-第四章函数和递归"></a>实用Python程序设计MOOC-第四章函数和递归</h1><h1 id="函数的概念和用法"><a href="#函数的概念和用法" class="headerlink" title="函数的概念和用法"></a>函数的概念和用法</h1><h2 id="为什么需要函数？"><a href="#为什么需要函数？" class="headerlink" title="为什么需要函数？"></a>为什么需要函数？</h2><p>写了一段平方根的代码，程序里面无数地方都要求平方根，难道需要的地方都把这段代码拷贝一遍?</p><p>数百个程序员如何合写一个程序?都在一个. py文件上操作吗?不同程序员实现不同功能，一个程序员要使用另一个程序员写的功能时怎么办?</p><p>“函数”：将实现了某一功能，并需要在程序中多处使用的代码包装起来形成一个功能模块(即写成一个”函数”)，那么当程序中需要使用该项功能时，只需写一条语句，调用实现该功能的”函数”即可。</p><p>不同的程序员可以分别写不同的函数，拼起来形成一个大程序。</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2.</span>...</span>):</span><br><span class="line">语句体(函数体)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">语句体(即<span class="string">&quot;函数体&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数调用和return语句"><a href="#函数调用和return语句" class="headerlink" title="函数调用和return语句"></a>函数调用和return语句</h2><h3 id="调用函数："><a href="#调用函数：" class="headerlink" title="调用函数："></a>调用函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><p>对函数的调用，也是一个表达式。函数调用表达式的值，由函数内部的return语句决定。return语句语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>return语句的功能是结束函数的执行，并将”返回值”作为结果返回。”返回值”是常量、变量或复杂的表达式均可。如果函数不需要返回值，return语句就直接写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>return语句作为函数的出口，可以在函数中多次出现。多个return语句的”返回值”可以不同。在哪个return语句结束函数的执行，函数的返回值就和哪个return语句里面的”返回值”相等。</p><h3 id="函数使用实例1-Max函数"><a href="#函数使用实例1-Max函数" class="headerlink" title="函数使用实例1 : Max函数"></a>函数使用实例1 : Max函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Max</span>(<span class="params">x,y</span>):<span class="comment">#传入形参</span></span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line"><span class="keyword">return</span> X</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"><span class="comment">#函数到此结束</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = Max(<span class="number">4</span>, <span class="number">6</span>)<span class="comment">#传入实参</span></span><br><span class="line"><span class="built_in">print</span>(n, Max(<span class="number">20</span>, n)</span><br><span class="line"><span class="built_in">print</span>(Max(<span class="string">&quot;about&quot;</span>, <span class="string">&quot;take&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 20</span><br><span class="line">take</span><br></pre></td></tr></table></figure><h3 id="函数使用实例2-判断是否是素数的函数"><a href="#函数使用实例2-判断是否是素数的函数" class="headerlink" title="函数使用实例2 :判断是否是素数的函数"></a>函数使用实例2 :判断是否是素数的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">IsPrime</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">or</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> n != <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n, <span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> i * i &gt; n:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"><span class="keyword">if</span>(IsPrime(i)):</span><br><span class="line"><span class="built_in">print</span>(i, end = <span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span><br></pre></td></tr></table></figure><h3 id="不返回值的函数"><a href="#不返回值的函数" class="headerlink" title="不返回值的函数"></a>不返回值的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrawCircle</span>(<span class="params">x, y, r</span>):</span><br><span class="line"><span class="comment">#下面的代码在屏幕上以(x,y)点为圆心，r为半径画圆</span></span><br><span class="line"><span class="keyword">return</span><span class="comment">#没有也可以</span></span><br></pre></td></tr></table></figure><p>调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DrawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sumAndDifference</span>(<span class="params">x, y</span>):</span><br><span class="line"><span class="keyword">return</span> x+y, x-y</span><br><span class="line">s, d = sumAndDifference(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s, d)</span><br></pre></td></tr></table></figure><p>=&gt;155</p><h2 id="函数中的变量"><a href="#函数中的变量" class="headerlink" title="函数中的变量"></a>函数中的变量</h2><ul><li>一个函数内部定义(赋值)的变量，在这个函数外部不能使用</li><li>不同函数中的同名变量不会互相影响</li><li>函数中的变量和全局变量(在函数外面定义的变量)同名的情况(假设都叫x)：<br>  1)如果没有对x赋值，函数中的x就是全局的x<br>  2)如果对x赋值，且没有特别声明，则在函数中全局的x不起作用，函数中的x就是只在函数内部起作用的x<br>  3)函数内部可以用global x声明函数里的x就是全局变量x</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">4</span><span class="comment">#全局的x </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f0</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f0:&quot;</span>, x) <span class="comment">#这个x是全局的x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">x = <span class="number">8</span><span class="comment">#这个x是局部的x，不会改变全局的x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f1:&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line"><span class="keyword">global</span> x<span class="comment">#说明本函数中的x都是全局的x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f2:&quot;</span>, x)</span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f2:&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x in f3=&quot;</span>, x)<span class="comment">#会出错。因后面有赋值而被当作局部的x，此处没赋值就先使用了，不行</span></span><br><span class="line">x = <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f0() #&gt;&gt; x in f0:4</span><br><span class="line">f1() #&gt;&gt; x in f1:8</span><br><span class="line">print(x) #&gt;&gt;4</span><br><span class="line">f2()</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt;&gt; x <span class="keyword">in</span> f2:4</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt;&gt; x <span class="keyword">in</span> f2:5</span></span><br><span class="line">print(x) #&gt;&gt; 5</span><br><span class="line">f3() #调用f3会出错</span><br></pre></td></tr></table></figure><h2 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x)</span><br><span class="line"><span class="built_in">float</span>(x)</span><br><span class="line"><span class="built_in">str</span>(x)</span><br><span class="line"><span class="built_in">ord</span>(x)</span><br><span class="line"><span class="built_in">chr</span>(x)</span><br><span class="line"><span class="built_in">abs</span>(x)</span><br><span class="line"><span class="built_in">len</span>(x) </span><br><span class="line"><span class="built_in">len</span>(<span class="string">&quot;123&quot;</span>) </span><br><span class="line"><span class="built_in">len</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">max</span>(x)</span><br><span class="line">x是列表，如<span class="built_in">max</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">min</span>(x)</span><br><span class="line">x是列表，如<span class="built_in">min</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">max</span>(x1, x2, x3...)</span><br><span class="line"><span class="built_in">min</span>(x1, x2, x3...)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))<span class="comment">#&gt;&gt; 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;af&quot;</span>))<span class="comment">#&gt;&gt;ab</span></span><br></pre></td></tr></table></figure><h1 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h1><ul><li>一个概念的定义中用到了这个概念本身，这就叫递归</li></ul><p>用递归的方式定义”n的阶乘”</p><p>1) “1的阶乘”是1<br>2）”n的阶乘”就是n乘以”(n-1)的阶乘”</p><p>第二句中用到了阶乘这个需要定义的概念</p><ul><li>一个函数，自己调用自己，就是递归。</li><li>和调用别的函数无本质区别，可以看作是调用另一个同名同功能函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Factorial</span>(<span class="params">n</span>):<span class="comment">#函数返回n的阶乘</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> <span class="comment">#终止条件</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> n * Factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(Factorial(<span class="number">4</span>))<span class="comment">#&gt;&gt;24</span></span><br><span class="line"><span class="built_in">print</span>(Factoria1(<span class="number">5</span>))<span class="comment">#&gt;&gt;120 </span></span><br></pre></td></tr></table></figure><ul><li>递归函数需要有终止条件，否则就会无穷递归导致程序无法终止甚至崩溃</li><li>递归定义也需要有终止条件，否则无法让人明表。例如”n的阶乘”的定义中的：<br>  1) “1的阶乘”是1</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/Factorial%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" class="" title="Factorial函数执行过程"><ul><li>求斐波那契数列第n项的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Fib</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> Fib(n-<span class="number">1</span>) + Fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n,m</span>):</span><br><span class="line"><span class="keyword">if</span>n== <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> n &gt;= m:</span><br><span class="line"><span class="keyword">return</span> f(m, n-m) + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> f(n, m-n) + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#&gt;&gt; 7</span></span><br></pre></td></tr></table></figure><h1 id="递归例题-上台阶"><a href="#递归例题-上台阶" class="headerlink" title="递归例题:上台阶"></a>递归例题:上台阶</h1><p>上台阶问题：有n级台阶，每步可以走一级或两级，问有多少种不同的走法？</p><blockquote><p>先做一步，剩下问题和原问题形式相同，规模变小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ways</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> ways(n-<span class="number">1</span>) + ways(n-<span class="number">2</span>)<span class="comment">#第一步走一级的走法+第一步走2两级的走法</span></span><br><span class="line"><span class="built_in">print</span>(ways(<span class="number">4</span>))<span class="comment">#&gt;&gt; 5</span></span><br></pre></td></tr></table></figure><h1 id="递归例题-汉诺塔-Hanoi"><a href="#递归例题-汉诺塔-Hanoi" class="headerlink" title="递归例题:汉诺塔(Hanoi)"></a>递归例题:汉诺塔(Hanoi)</h1><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98.png" class="" title="汉诺塔问题"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hanoi</span>(<span class="params">n, src, mid, dest</span>):<span class="comment">#将src座上的n个盘子,以mid座为中转,移动到dest座</span></span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>):<span class="comment">#只需移动一个盘子</span></span><br><span class="line"><span class="comment">#直接将盘子从src移动到dest即可</span></span><br><span class="line"><span class="built_in">print</span>(src + <span class="string">&quot;-&gt;&quot;</span> + dest)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">#递归终止</span></span><br><span class="line">Hanoi(n-<span class="number">1</span>, src, dest, mid)<span class="comment">#先将n-1个盘子从src移动到mid</span></span><br><span class="line"><span class="built_in">print</span>(src + <span class="string">&quot;-&gt;&quot;</span> + dest) <span class="comment">#再将一个盘子从src移动到dest</span></span><br><span class="line">Hanoi(n-<span class="number">1</span>, mid, src, dest) <span class="comment">#最后将n-1个盘子从mid移动到d</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">Hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">B</span></span><br><span class="line"><span class="meta prompt_">C-&gt;</span><span class="language-bash">B</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">B-&gt;</span><span class="language-bash">A</span></span><br><span class="line"><span class="meta prompt_">B-&gt;</span><span class="language-bash">C</span></span><br><span class="line"><span class="meta prompt_">A-&gt;</span><span class="language-bash">C</span></span><br></pre></td></tr></table></figure><p>n个盘子需要2^n-1次</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/%E6%B1%89%E8%AF%BA%E5%A1%94%E6%89%8B%E5%B7%A5%E8%A7%A3%E6%B3%95.png" class="" title="汉诺塔手工解法"><h1 id="递归例题-绘制雪花曲线-科赫曲线"><a href="#递归例题-绘制雪花曲线-科赫曲线" class="headerlink" title="递归例题:绘制雪花曲线(科赫曲线)"></a>递归例题:绘制雪花曲线(科赫曲线)</h1><p>雪花曲线的递归定义<br>1)长为size，方向为x(x是角度)的0阶雪花曲线，是方向x上一根长为size的线段<br>2)长为size，方向为x的n阶雪花曲线，由以下四部分依次拼接组成：<br>1.长为size/3，方向为x的n-1阶雪花曲线<br>2.长为size/3，方向为x+60的n-1阶雪花曲线<br>3.长为size/3，方向为x-60的n-1阶雪花曲线<br>4.长为size/3，方向为x的n-1阶雪花曲线</p><p>size是整体长度</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="1阶0度雪花曲线"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="2阶0度雪花曲线"><p>四段一阶的雪花曲线构成<br>1.长度为size/3，方向为0°的1阶雪花曲线<br>2.长度为size/3，方向为60°的1阶雪花曲线<br>3.长度为size/3，方向为-60°的1阶雪花曲线<br>4.长度为size/3，方向为0°的1阶雪花曲线</p><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="3阶0度雪花曲线"><p>四段二阶的雪花曲线构成<br>1.长度为size/3，方向为0°的2阶雪花曲线<br>2.长度为size/3，方向为60°的2阶雪花曲线<br>3.长度为size/3，方向为-60°的2阶雪花曲线<br>4.长度为size/3，方向为0°的2阶雪花曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle<span class="comment">#曲图要用这个turtle包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snow</span>(<span class="params">n,size</span>): <span class="comment">#n是阶数目，size是长度 从当前起点出发，在当前方向画一个丧度为size，阶为n的雪花曲线</span></span><br><span class="line"><span class="keyword">if</span> n== <span class="number">0</span>:</span><br><span class="line">turtle.fd(size) <span class="comment"># 笔沿着当前方向前进size</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]: <span class="comment">#对列表中的每个元素angle:</span></span><br><span class="line">turtle.left(angle) <span class="comment">#笔左转ang1e度 ，turtle .1t (ang1e)也可</span></span><br><span class="line">snow(n-<span class="number">1</span>, size/<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">600</span>)<span class="comment">#窗口缺省位于屏幕正中间，宽高800*600像素，窗口中央坐标(0,0)</span></span><br><span class="line"><span class="comment">#初始笔的前进方向是0度。正东方是0度，正北是90度</span></span><br><span class="line">turtle.penup() <span class="comment">#抬起笔</span></span><br><span class="line">turtle.goto(-<span class="number">300</span>, -<span class="number">50</span>) <span class="comment">#将笔移动到-300, -50位置</span></span><br><span class="line">turtle.pendown() <span class="comment">#放下笔</span></span><br><span class="line">turtle.pensize(<span class="number">3</span>) <span class="comment">#笔的粗度是3</span></span><br><span class="line">snow(<span class="number">3</span>, <span class="number">600</span>)<span class="comment">#绘制长度为600 ,阶为3的雪花曲线，方向水平</span></span><br><span class="line">turtle.done()<span class="comment">#保持绘图窗口</span></span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B60%E5%BA%A6%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.gif" class="" title="3阶0度雪花曲线"><p>窗口正中心位置是(0, 0)<br>画图要有画笔，画笔需要有方向<br>雪花曲线画完之后笔的方向和初始方向一样</p><ul><li>画整个雪花</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%85%A8%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.png" class="" title="3阶全雪花曲线"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(<span class="number">800</span>, <span class="number">800</span>)</span><br><span class="line">turtle.speed(<span class="number">1000</span>)</span><br><span class="line">turtle.penup() </span><br><span class="line">turtle.goto(-<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">level = <span class="number">3</span></span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.right(<span class="number">120</span>) <span class="comment">#右拐120度</span></span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.right(<span class="number">120</span>)</span><br><span class="line">snow(level, <span class="number">400</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%85%A8%E9%9B%AA%E8%8A%B1%E6%9B%B2%E7%BA%BF.gif" class="" title="3阶全雪花曲线"><ul><li>递归问题解法</li></ul><p>1.先做一步，观察剩下问题是否和原问题相同，规模更小<br>2.将一个大问题分解成若干个子问题，有些子问题和原问题都是形式相同，规模更小的<br>3.选取合适的边界条件</p><h1 id="奇异三角形"><a href="#奇异三角形" class="headerlink" title="奇异三角形"></a>奇异三角形</h1><p>一个边长为x的0阶奇异三角形，是一个边长为x的等边三角形<br>一个边长为x的n阶奇异三角形，是一个边长为x的等边三角形，三个角上分别是一个边长为x/2的n-1阶奇异三角形</p><ul><li>0阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/0%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="0阶奇异三角形"><ul><li>1阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="1阶奇异三角形"><ul><li>2阶奇异三角形</li></ul><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.png" class="" title="2阶奇异三角形"><ul><li><p>输入整数n，(0&lt;=n&lt;=5)，绘制n阶奇异三角形</p></li><li><p>提示</p></li></ul><p>1) turtle.left(x) 可以向左拐 x 度<br>2) turtle.right(x)可以向右拐 x 度<br>3) pos = turtle.pos() 可以取得画笔当前位置， 以后 turtle.goto(pos)就可以移动画笔到那个位置<br>4) turtle.seth(x)可以设置画笔方向为角度 x<br>5) 绘图完成后调用 turtle.done() 可以保持绘图窗口</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">intn = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">san</span>(<span class="params">n, x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == n:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">60</span>, -<span class="number">120</span>, -<span class="number">120</span>]:</span><br><span class="line">            turtle.left(angle)</span><br><span class="line">            turtle.fd(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos = turtle.pos()</span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line">        turtle.penup()</span><br><span class="line"></span><br><span class="line">        turtle.goto(pos)  <span class="comment">#-180</span></span><br><span class="line">        turtle.right(<span class="number">120</span>)</span><br><span class="line">        turtle.fd(x / <span class="number">2</span>)</span><br><span class="line">        turtle.right(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        turtle.pendown()</span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line">        turtle.penup()</span><br><span class="line"></span><br><span class="line">        turtle.goto(pos)</span><br><span class="line">        turtle.right(<span class="number">180</span>)</span><br><span class="line">        turtle.fd(x / <span class="number">2</span>)</span><br><span class="line">        turtle.pendown()</span><br><span class="line"></span><br><span class="line">        san(n - <span class="number">1</span>, x / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">turtle.setup(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">san(intn, <span class="number">200</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/1%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="1阶奇异三角形"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/2%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="2阶奇异三角形"><img src="/2022/09/23/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%87%BD%E6%95%B0%E5%92%8C%E9%80%92%E5%BD%92/3%E9%98%B6%E5%A5%87%E5%BC%82%E4%B8%89%E8%A7%92%E5%BD%A2.gif" class="" title="3阶奇异三角形">]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第四章函数和递归</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第三章循环语句</title>
    <link href="http://hibiscidai.com/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://hibiscidai.com/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-09-16T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/16/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.png" class="" title="实用Python程序设计MOOC-第三章循环语句"><p>实用Python程序设计MOOC-第三章循环语句</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第三章循环语句"><a href="#实用Python程序设计MOOC-第三章循环语句" class="headerlink" title="实用Python程序设计MOOC-第三章循环语句"></a>实用Python程序设计MOOC-第三章循环语句</h1><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>有时，需要重复多次执行一系列语句，因此需要循环语句</p><h2 id="for循环语句语法"><a href="#for循环语句语法" class="headerlink" title="for循环语句语法"></a>for循环语句语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">&lt;statements <span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;statements <span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>依次对sequence中的每个值，执行<statements 1>然后再执行<statements 2>。通常不需要else部分<br>sequence可以是range(..)，也可以是字符串、列表、元组、字典、集合</p><ul><li>for循环语句测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#[0,5)</span></span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>): <span class="comment">#[5,9)</span></span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure></p><ul><li>for循环语句测试2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):<span class="comment">#步长3</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">9</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">10</span>, -<span class="number">100</span>, -<span class="number">30</span>) :</span><br><span class="line"><span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-10</span><br><span class="line">-40</span><br><span class="line">-70</span><br></pre></td></tr></table></figure></p><ul><li>for循环语句测试3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>):</span><br><span class="line"><span class="built_in">print</span>(i,<span class="string">&quot; &quot;</span>,end=<span class="string">&quot;&#x27;)</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 6 9</span><br></pre></td></tr></table></figure></p><h2 id="for循环遍历列表"><a href="#for循环遍历列表" class="headerlink" title="for循环遍历列表"></a>for循环遍历列表</h2><ul><li>写法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):<span class="comment">#len,求列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(i, a[i])</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 Google</span><br><span class="line">1 Baidu</span><br><span class="line">2 IBM</span><br><span class="line">3 Taobao</span><br><span class="line">4 QQ</span><br></pre></td></tr></table></figure></p><p>len也可以用来求字符串长度，元组、集合、字典元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;abc&quot;</span>))<span class="comment">#&gt;&gt;3</span></span><br></pre></td></tr></table></figure><ul><li>写法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Google</span><br><span class="line">Baidu</span><br><span class="line">IBM</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure></p><h2 id="for循环遍历字符串"><a href="#for循环遍历字符串" class="headerlink" title="for循环遍历字符串"></a>for循环遍历字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Taobao&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T</span><br><span class="line">a</span><br><span class="line">o</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;IBM&quot;</span>, <span class="string">&quot;Taobao&quot;</span>] </span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line"><span class="keyword">if</span> site == <span class="string">&quot;IBM&quot;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;site: &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No break&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">site: Baidu</span><br><span class="line">site: Google</span><br><span class="line">OK</span><br><span class="line">site: IBM</span><br><span class="line">site: Taobao</span><br><span class="line">No break</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Goog1e&quot;</span>, <span class="string">&quot;IBM&quot;</span>, <span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:<span class="comment">#对sites中的每个值site</span></span><br><span class="line"><span class="keyword">if</span> site == <span class="string">&quot;IBM&quot;</span> :</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="keyword">break</span><span class="comment">#跳出循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;site: &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No break&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><p>else子句在循环结束时会执行，但是如果break了，则不会执行</p><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site: Baidu</span><br><span class="line">site: Google</span><br><span class="line">OK</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27; Taobao&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> letter == <span class="string">&#x27;o&#x27;</span>:<span class="comment">#字母为o时跳过输出</span></span><br><span class="line"><span class="keyword">continue</span><span class="comment">#直接跳到下次循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前字母:&#x27;</span>, letter)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前字母: T</span><br><span class="line">当前字母: a</span><br><span class="line">当前字母: b</span><br><span class="line">当前字母: a</span><br></pre></td></tr></table></figure></p><h2 id="连续输出26个字母"><a href="#连续输出26个字母" class="headerlink" title="连续输出26个字母"></a>连续输出26个字母</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>abcdefghi jklmnopqrstuvwxyz<br>字母的ASCII编码是连续的</p><h3 id="字符的编码"><a href="#字符的编码" class="headerlink" title="字符的编码"></a>字符的编码</h3><p><code>ord(x)</code> 求字符x的编码(字符就是长度为1的字符串)<br><code>chr(x)</code> 求编码为x的字符</p><p>可以用8个连续的0或1(即1个字节)来表示一个字母、数字或标点符号，比如用”00100000”表示空格，用”01100001”表示字母”a”，用”01100010”表示字母”b”，用”01100011”表示字母”c”……。由8个0或者1的组成的串，一共有2^8即256种不同的组合，这就足以表示10个阿拉伯数字以及英语中用到的所有字母和标点符号了。此即为ASCII编码方案。</p><h2 id="连续输出0-9"><a href="#连续输出0-9" class="headerlink" title="连续输出0-9"></a>连续输出0-9</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>0123456789<br>‘0’-‘9’的ASCII编码是连续的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>) + <span class="number">4</span>))<span class="comment">#E</span></span><br></pre></td></tr></table></figure><h1 id="for循环简单例题"><a href="#for循环简单例题" class="headerlink" title="for循环简单例题"></a>for循环简单例题</h1><h2 id="例题1-输入n个整数求和"><a href="#例题1-输入n个整数求和" class="headerlink" title="例题1 输入n个整数求和"></a>例题1 输入n个整数求和</h2><ul><li><p>输入<br>第一行是整数n，n&gt;=1，后面有n行，每行一个整数</p></li><li><p>输出<br>输出后面那n个整数的和</p></li><li><p>样例输入<br>3<br>1<br>2</p></li><li><p>样例输出<br>11</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#做n次</span></span><br><span class="line">total += <span class="built_in">int</span>(<span class="built_in">input</span>())<span class="comment">#每次读入一行</span></span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><h2 id="例题2-从小到大输出n的因子"><a href="#例题2-从小到大输出n的因子" class="headerlink" title="例题2 从小到大输出n的因子"></a>例题2 从小到大输出n的因子</h2><p>输入一个正整数，从小到大输出它的所有因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">1 3 5 15</span><br></pre></td></tr></table></figure><h2 id="例题3-从大到小输出n的因子"><a href="#例题3-从大到小输出n的因子" class="headerlink" title="例题3 从大到小输出n的因子"></a>例题3 从大到小输出n的因子</h2><p>输入一个正整数m，从大到小输出它的所有因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):<span class="comment">#步长-1</span></span><br><span class="line"><span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">15 5 3 1</span><br></pre></td></tr></table></figure><h1 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h1><p>循环可以嵌套，形成多重循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">...<span class="comment">#内重循环的执行次数一共是n×m次</span></span><br></pre></td></tr></table></figure><h2 id="多重循环例题1-多次求n个数的和"><a href="#多重循环例题1-多次求n个数的和" class="headerlink" title="多重循环例题1 多次求n个数的和"></a>多重循环例题1 多次求n个数的和</h2><ul><li><p>输入<br>第一行是整数m，m&gt;=1, 表示有m组数据，接下来就是m组数据<br>对于每组数据：<br>第一行是整数n，n&gt;= 1<br>接下来是n行，每行一个整数</p></li><li><p>输出<br>对每组数据，输出后面那n个整数的和</p></li><li><p>样例输入<br>2<br>3<br>1<br>2<br>3<br>2<br>10<br>20</p></li><li><p>样例输出<br>6<br>30</p></li><li><p>提交代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):<span class="comment">#m组数据，所以要处理m次</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#n个数，每个一行，所以要input n次</span></span><br><span class="line">total += <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><h2 id="多重循环例题2-取两个数"><a href="#多重循环例题2-取两个数" class="headerlink" title="多重循环例题2 取两个数"></a>多重循环例题2 取两个数</h2><p>给定正整数n和m，在1至n这n个数中，取出两个不同的数，使得其和是m的因子，问有多少中不同的取法。输出这些取法。</p><p>思路：穷举1-n这n个数中取两个数的所有取法，对每一种取法，判断其和是不是m的因子</p><p>第一个数取1，第二个数分别取2, 3…..n<br>第一个数取2，第二个数分别取3, 4…..n<br>….<br>第一个数取n-2，第二个数分别取n-1，n<br>第一个数取n-1，第二个数取n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span><span class="comment">#取法总数</span></span><br><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">n, m = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):<span class="comment">#取第一个数i，共n-1中取法</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n+<span class="number">1</span>):<span class="comment">#第二个数要比第一个数大，以免取法重复</span></span><br><span class="line"><span class="keyword">if</span> m % (i+j) == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(i, j)</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">9 18↙</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">1 8</span><br><span class="line">2 4</span><br><span class="line">2 7</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">7</span><br></pre></td></tr></table></figure></p><h2 id="多重循环中的break"><a href="#多重循环中的break" class="headerlink" title="多重循环中的break"></a>多重循环中的break</h2><p>只会跳出当前那重循环，不会跳出多重循环</p><ul><li>例题：给定正整数n和m，在1至n这n个数中，取出两个不同的数x、y，使得x&lt;y且x+y是m的因子。要求输出的数对里面，x不重复，且y尽可能小。输出这些取法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">n, m = <span class="built_in">int</span>(lst[<span class="number">0</span>]), <span class="built_in">int</span>(lst[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):<span class="comment">#取第一个数i,共n-1种取法</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n+<span class="number">1</span>):<span class="comment">#第二个数要比第一个数大,以免取法重复</span></span><br><span class="line"><span class="keyword">if</span> m % (i+j) == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(i,j)</span><br><span class="line"><span class="keyword">break</span><span class="comment">#后面的j不用再取了，直接换下一个i</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9 18↙</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure></p><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li>while循环语法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 逻辑表达式exp: </span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><p>1)判断 exp 是否为真，若为真，转2)，若为假，转3)<br>2)执行 语句组1，回到 1)<br>3)执行 语句组2<br>4)继续往下执行…….</p><ul><li>while循环语法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 逻辑表达式exp:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>1)判断 exp 是否为真，若为真，转2)，若为假，转3)<br>2)执行语句组1，回到1)<br>3)继续往下执行……</p><ul><li>while循环例题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(count, <span class="string">&quot;小于5&quot;</span>)</span><br><span class="line">count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(count, <span class="string">&quot;大于或等于5&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0小于5</span><br><span class="line">1小于5</span><br><span class="line">2小于5</span><br><span class="line">3小于5</span><br><span class="line">4小于5</span><br><span class="line">5大于或等于5</span><br></pre></td></tr></table></figure></p><ul><li>while循环语法3-break</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> exp:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不停执行，直到exp为真时跳出循环</p><ul><li>连续输出26个字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">26</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>abcdefqhijklmnoparstuvwxvz 字母的ASCII编码是连续的</p><ul><li>例题：输入一个正整数n，从小到大输出它的所有因子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">X = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x&lt;=n:</span><br><span class="line"><span class="keyword">if</span> n&amp;x == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">x += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15↙</span><br><span class="line">1 3 5 15</span><br></pre></td></tr></table></figure></p><ul><li>例题：提示用户输入密码，密码不正确则提示不正确，然后要求输入，密码正确则提示成功，然后结束。密码是pku</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>) != <span class="string">&quot;pku&quot;</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码不正确!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码输入成功!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入密码:bba↙</span><br><span class="line">密码不正确!</span><br><span class="line">请输入密码:std↙</span><br><span class="line">密码不正确!</span><br><span class="line">请输入密码:pku↙</span><br><span class="line">密码输入成功!</span><br></pre></td></tr></table></figure></p><ul><li>输入三个整数，求它们的最小公倍数</li></ul><p>枚举法，一个个试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>):</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y,z = <span class="built_in">int</span>(s[<span class="number">0</span>]), <span class="built_in">int</span>(s[<span class="number">1</span>]), <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">n = m = <span class="built_in">max</span>(x, y, z)<span class="comment">#从三者里面最大的开始试</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> n % x == O <span class="keyword">and</span> n % y == <span class="number">0</span> <span class="keyword">and</span> n % z == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">n = n + m<span class="comment">#没必要一个个试，而是每间隔m个试一下(还可进一步改进)</span></span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="用whi-le语句和异常处理进行输入"><a href="#用whi-le语句和异常处理进行输入" class="headerlink" title="用whi le语句和异常处理进行输入"></a>用whi le语句和异常处理进行输入</h2><p>在0penjudge做题时，有些题目，输入数据没有结束标志，也不告诉你有多少数据。</p><p>例如:</p><p>输入若干行，每行若干整数，求所有整数的最大值</p><p>输入样例:<br>152393<br>87 6<br>34</p><p>输出样例:<br>87</p><p>如何判断输入结束，就是需要解决的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">lst = s.split()</span><br><span class="line">maxV = <span class="built_in">int</span>(lst[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">lst = s.split()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">maxV = <span class="built_in">max</span>(maxV, <span class="built_in">int</span>(x))</span><br><span class="line">s = <span class="built_in">input</span>()<span class="comment">#输入数据已经没有了还执行input，会产生异常</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span><span class="comment">#pass语句啥也不做</span></span><br><span class="line"><span class="built_in">print</span>(maxV)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">15 23 6↙</span><br><span class="line">15 5 3 1↙</span><br><span class="line">3 4↙</span><br><span class="line">Ctrl+Z↙代表输入停止</span><br><span class="line"></span><br><span class="line">23</span><br></pre></td></tr></table></figure></p><h2 id="异常处理结构"><a href="#异常处理结构" class="headerlink" title="异常处理结构"></a>异常处理结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句组<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">&lt;语句组<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>如果在&lt;语句组1&gt;执行过程中出现了异常(runtime error)， 程序立即从语句组1中跳出，去执行&lt;语句组2&gt;，然后再继续往下执行。如果&lt;语句组1&gt;执行正常完，则程序继续往下执行，不会执行&lt;语句组2&gt;</p><p>常见的异常有:<br>1)不合适的转换，例如int(“abc”) int(“23. 34”) float (“abc”)<br>2)输入已经结束(已经没有输入数据了)后，还执行input()，在openjudge做题常见<br>3)除法除数为0<br>4)整数和字符串相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">a = <span class="number">100</span>/n</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5↙</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">20.2</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0↙</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">error</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abc↙</span><br><span class="line"></span><br><span class="line">error</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="循环综合例题"><a href="#循环综合例题" class="headerlink" title="循环综合例题"></a>循环综合例题</h2><h3 id="例题1-求斐波那契数列第k项"><a href="#例题1-求斐波那契数列第k项" class="headerlink" title="例题1.求斐波那契数列第k项"></a>例题1.求斐波那契数列第k项</h3><p>菲波那契数列是指这样的数列：数列的第一个和第二个数都为1，接下来每个数都等于前面2个数之和。给出一个正整数k，要求菲波那契数列中第k个数是多少。</p><ul><li><p>输入<br>输入一行，包含一个正整数k。</p></li><li><p>输出：<br>输出一行，包含一个正整数，表示菲波那契数列中第k个数的大小。</p></li><li><p>样例输入<br>19</p></li><li><p>样例输出<br>4181</p></li><li><p>解法一，迭代，不停地由已知推未知</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> <span class="keyword">or</span> k == <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a1 = a2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">2</span>):</span><br><span class="line">a1,a2 = a2, a1+a2</span><br><span class="line"><span class="built_in">print</span>(a2)</span><br></pre></td></tr></table></figure><h2 id="例题2-求阶乘的和"><a href="#例题2-求阶乘的和" class="headerlink" title="例题2.求阶乘的和"></a>例题2.求阶乘的和</h2><p>给定正整数n，求不大于n的正整数的阶乘的和(即求1!+2!+3!+…+n!)</p><ul><li><p>输入<br>输入有一行，包含一个正整数n (1 &lt; n &lt; 12)。</p></li><li><p>输出<br>输出有一行：阶乘的和。</p></li><li><p>样例输入<br>5</p></li><li><p>样例输出<br>153</p></li><li><p>解法1</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line">f = <span class="number">1</span><span class="comment">#存放i阶乘</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, i+<span class="number">1</span>):</span><br><span class="line">f *= j<span class="comment">#此操作一共做1+2+3+...+n次</span></span><br><span class="line">s += f</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>重复计算多。比如算3!时算了一遍1<em>2</em>3，算4!时又算一遍1<em>2</em>3<br>改进: 1<em>2</em>3只要算一遍就应该记下来，下次算4!直接用它</p><ul><li>解法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s,f = <span class="number">0</span>,<span class="number">1</span><span class="comment">#s是第几个数，f表示阶乘</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">f *= i</span><br><span class="line">s += f</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">f值变化过程: <span class="number">1</span>*<span class="number">2</span>, <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>, <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">4</span> ......</span><br></pre></td></tr></table></figure><h2 id="例题3-输入正整数n-n-gt-2-，求不大于n的全部质数"><a href="#例题3-输入正整数n-n-gt-2-，求不大于n的全部质数" class="headerlink" title="例题3.输入正整数n(n&gt;=2)，求不大于n的全部质数"></a>例题3.输入正整数n(n&gt;=2)，求不大于n的全部质数</h2><ul><li>解法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):<span class="comment">#每次判断i是否是质数</span></span><br><span class="line">ok = <span class="literal">True</span><span class="comment">#开始假设i是质数</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i)</span><br><span class="line"><span class="keyword">if</span> i % k == <span class="number">0</span></span><br><span class="line">ok == <span class="literal">False</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>此解法做了没必要的尝试，偶数，以及k大于i的平方根后就不必再试</p><ul><li>解法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">ok = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, i, <span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i % k == <span class="number">0</span>:</span><br><span class="line">ok = <span class="literal">False</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> k*k &gt;i:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第三章循环语句</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</title>
    <link href="http://hibiscidai.com/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/"/>
    <id>http://hibiscidai.com/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/</id>
    <published>2022-09-09T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/09/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E5%92%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6.png" class="" title="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"><p>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"><a href="#实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制" class="headerlink" title="实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制"></a>实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</h1><h1 id="算术运算、逻辑运算和分支语句"><a href="#算术运算、逻辑运算和分支语句" class="headerlink" title="算术运算、逻辑运算和分支语句"></a>算术运算、逻辑运算和分支语句</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><code>+</code> 加法<br><code>-</code> 减法(双操作数)，取相反数(单操作数)<br><code>*</code> 乘法<br><code>/</code> 除法，结果是小数。即便能整除也是小数。<br><code>%</code> 取模(求余数)<br><code>//</code> 求商，结果是整数<br><code>**</code> 求幂</p><h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">3</span>+<span class="number">2</span>)*(<span class="number">6</span>-<span class="number">3</span>) / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;7.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>/<span class="number">8</span>)<span class="comment">#&gt;&gt;1.25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1088</span>)<span class="comment">#&gt;&gt;2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span>/<span class="number">4</span>)<span class="comment">#&gt;&gt;3.75</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span>//<span class="number">4</span>)<span class="comment">#&gt;&gt;3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.4</span>/<span class="number">2.2</span>)<span class="comment">#&gt;&gt;1.5454545454545452</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.4</span>//<span class="number">2.2</span>)<span class="comment">#&gt;&gt;1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">3</span>)<span class="comment">#&gt;&gt;8</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">9</span>//<span class="number">4</span>)<span class="comment">#&gt;&gt;-3 往小里取整</span></span><br></pre></td></tr></table></figure><h2 id="算术表达式-1"><a href="#算术表达式-1" class="headerlink" title="算术表达式"></a>算术表达式</h2><ul><li><code>/</code>计算的结果都是小数，哪怕能整除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">10</span>/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;5.0</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">10</span><span class="comment">#-x相当于0-x</span></span><br><span class="line"><span class="built_in">print</span>(-a) <span class="comment">#&gt;&gt;-10</span></span><br><span class="line"><span class="built_in">print</span>(-a*<span class="number">3</span>)<span class="comment">#&gt;&gt;-30等价于(-a)*3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+-<span class="number">5</span>)<span class="comment">#&gt;&gt;-2</span></span><br></pre></td></tr></table></figure><ul><li>有小数的算术表达式，结果就是小数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">10.0</span>-<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;0.0</span></span><br><span class="line">z=<span class="number">7.5</span>-<span class="number">2.5</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;5.0 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>+<span class="number">0</span>*<span class="number">4.5</span>)<span class="comment">#&gt;&gt;2.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>+<span class="number">10</span>/<span class="number">5</span>)<span class="comment">#&gt;&gt;4.0</span></span><br></pre></td></tr></table></figure><ul><li>算术运算符优先级</li></ul><p>第一级: <code>**</code><br>第二级: <code>*///%</code><br>第三级: <code>+-</code></p><p>可以用<code>( )</code>指定计算顺序: <code>(3+4)*(1+2)</code><br>记不得优先级就用( )</p><ul><li>算术运算的同时赋值</li></ul><p><code>+=</code>：a+=b等价于a=a+b<br><code>-=</code>：a-=b 等价于a=a-b<br><code>*=</code>：…<br><code>/=</code>：…<br><code>%=</code>：…<br><code>//=</code>：…<br><code>**=</code>：…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">6</span></span><br><span class="line">a/=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;2.0</span></span><br><span class="line">a**=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#&gt;&gt;8.0</span></span><br></pre></td></tr></table></figure><ul><li>常见问题或注意事项</li></ul><p>数学上的运算符号或代数式写法，不是拿到程序里就能直接用的!</p><p>比如|x| 在程序里并不能求x的绝对值，而是没定义，会出错!</p><p>2(x+3) (4+x)这样的表达式也不能在程序里写!</p><p>应该写:<code>2*(x+3)*(4+x)</code></p><p>乘法就一定要用<code>*</code></p><p>/的结果一定是小数。一个算术表达式，只要有一个操作数是小数，其结果就一定是小数。</p><p>如果x是小数print(x)就会打出小数形式，哪怕x = 4/2。如果题目要求是整数，就要注意了，不要把整数当小数打出来。</p><p>print(4/2)打出2. 0</p><p>/是÷不是分数线</p><p><code>a/b*c</code>是<code>a÷b×c</code>，不是<code>a/(b*c)</code></p><h2 id="关系运算符和booI类型"><a href="#关系运算符和booI类型" class="headerlink" title="关系运算符和booI类型"></a>关系运算符和booI类型</h2><ul><li>六种关系运算符用于数值的比较</li></ul><p>相等 <code>==</code><br>不等 <code>!=</code><br>大于 <code>&gt;</code><br>小于 <code>&lt;</code><br>大于等于 <code>&gt;=</code><br>小于等于 <code>&lt;=</code></p><ul><li>比较的结果是bool类型，成立则为True，反之为False</li><li>bool类型数据只有两种取值，True或False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span>&lt;<span class="number">5</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>!=<span class="number">7</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a=<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a&lt;<span class="number">6</span>&lt;<span class="number">8</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a==<span class="number">4</span>&lt;<span class="number">6</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>&lt;a&gt;<span class="number">5</span>)<span class="comment">#&gt;&gt;False&#x27;</span></span><br><span class="line">b=a&lt;<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="comment">#1为true，0为false</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">1</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">2</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line">b=a&gt;<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(b==<span class="number">0</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line">a=<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li>关系运算符也能比较字符串(按字典序，大小写相关)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;k&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;k&quot;</span>)<span class="comment">#&gt;&gt; True</span></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;abc&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="string">&quot;Abc&quot;</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &lt; <span class="string">&quot;acd&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &lt; <span class="string">&quot;abcd&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> &gt; <span class="string">&quot;Abc&quot;</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符和逻辑表达式"><a href="#逻辑运算符和逻辑表达式" class="headerlink" title="逻辑运算符和逻辑表达式"></a>逻辑运算符和逻辑表达式</h2><ul><li><p>逻辑运算符用于表达式的逻辑操作，有and or not 三种，操作的结果是True或False</p></li><li><p><code>与:exp1 and exp2</code></p></li></ul><p>当且仅当exp1和exp2的值都为True(或相当于True)时，结果为True(或相当于True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">n &gt; <span class="number">4</span> <span class="keyword">and</span> n &lt; <span class="number">5</span><span class="comment">#false</span></span><br><span class="line">n &gt;= <span class="number">2</span> <span class="keyword">and</span> n &lt; <span class="number">5</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span><span class="comment">#true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">and</span> <span class="literal">False</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">and</span> <span class="literal">True</span>)<span class="comment">#&gt;&gt;True</span></span><br></pre></td></tr></table></figure><ul><li>什么相当于True或False </li></ul><p>●<code>0</code>，<code>&quot;&quot;</code>(空字符串)，<code>[]</code> (空表)都相当于False (但除0以外都不等于False)<br>●非0的数，非空的字符串和非空列表，都相当于True (但除1以外，都不等于True)<br>●True 可以看作1，False 可以看作0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> == <span class="number">1</span><span class="comment">#True</span></span><br><span class="line"><span class="literal">False</span> == <span class="number">0</span><span class="comment">#True</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">False</span><span class="comment">#False</span></span><br><span class="line"><span class="number">2</span>==<span class="literal">True</span><span class="comment">#False</span></span><br><span class="line">[] == <span class="literal">False</span><span class="comment">#False</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>] == <span class="literal">True</span><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><code>或:exp1 or exp2</code></p><p>当且仅当exp1和exp2的值都为False(或相当于False) 时，结果为False(或相当于False)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">n &gt; <span class="number">4</span> <span class="keyword">or</span> n &lt; <span class="number">5</span><span class="comment">#True</span></span><br><span class="line">n &lt;= <span class="number">2</span> <span class="keyword">or</span> n &gt; <span class="number">5</span><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><code>非:not exp</code></p><p>exp值为True (或相当于True)时，结果为False (或相当于False)<br>exp值为False (或相当于False)时，结果为True (或相当于True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span><span class="comment">#False</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">5</span><span class="comment">#False </span></span><br><span class="line"><span class="keyword">not</span> <span class="number">0</span><span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> <span class="string">&quot;abc&quot;</span><span class="comment">#False</span></span><br><span class="line"><span class="keyword">not</span> <span class="string">&quot;&quot;</span><span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">4</span> &gt; <span class="number">6</span><span class="comment">#False 先not后and</span></span><br><span class="line"><span class="keyword">not</span> []<span class="comment">#True</span></span><br><span class="line"><span class="keyword">not</span> [<span class="number">1</span>]<span class="comment">#False</span></span><br></pre></td></tr></table></figure><ul><li>逻辑运算符的优先级</li></ul><p><code>not &gt; and &gt; or</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">1</span> &gt; <span class="number">2</span>)<span class="comment">#&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span>)and1 &gt; <span class="number">2</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">4</span> &gt;<span class="number">6</span> 即 (<span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>) <span class="keyword">and</span> (<span class="number">4</span> &gt; <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>逻辑表达式是短路计算的，即对逻辑表达式的计算，在整个表达式的值已经能够断<br>定的时候即会停止</p><p><code>exp1 and exp2</code>：如果已经算出表达式exp1为假，那么整个表达式的值肯定为假，于是表达式exp2就不需要再计算</p><p><code>exp1 or exp2</code>：如果已经算出exp1为真，那么整个表达式必定为真，于是exp2也不必计算</p><ul><li>各种运算符的优先级</li></ul><p>从高到低</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">●算术运算符 ** * / // % + -</span><br><span class="line">●关系运算符 &lt; &gt; == != &lt;= &gt;=</span><br><span class="line">●逻辑运算符 <span class="keyword">not</span> <span class="keyword">and</span> <span class="keyword">or</span></span><br><span class="line">记不得就勤用()</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+<span class="number">2</span>&lt;<span class="number">5</span>)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+(<span class="number">2</span>&lt;<span class="number">5</span>))<span class="comment">#&gt;&gt;4,因2&lt;5相当于1 </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( [] == <span class="literal">False</span>)<span class="comment">#&gt;&gt;false</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> [])<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="number">0</span> == <span class="literal">False</span>)<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="number">1</span> == <span class="literal">True</span>)<span class="comment">#&gt;&gt;true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="string">&quot;&quot;</span>)<span class="comment">#&gt;&gt;true</span></span><br></pre></td></tr></table></figure><h1 id="条件分支语句-if语句"><a href="#条件分支语句-if语句" class="headerlink" title="条件分支语句(if语句)"></a>条件分支语句(if语句)</h1><p>有时，并非所有的程序语句都要被顺序执行到，会希望满足某种条件就执行这部分语句，满足另一条件就执行另一部分语句。这就需要“条件分支语句”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 逻辑表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 逻辑表达式<span class="number">2</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br><span class="line">...<span class="comment">#可以有多种个elif</span></span><br><span class="line"><span class="keyword">elif</span> 逻辑表达式n: </span><br><span class="line">语句组n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>依次计算逻辑表达式1、逻辑表达式2…只要碰到一个表达式i为真，则执行语句组i( 前面为假的表达式对应的语句组不会被执行) ，且后面的表达式不再计算，后面的语句组也都不会被执行。</p><p>若所有表达式都为假，则执行语句组n+1</p><p>注意，缩进的前一行末尾有<code>:</code></p><ul><li>可以没有elif, 也可以没有else， 也可以都没有</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式:</span><br><span class="line">语句组<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>Python程序的语句前面不能加空格或制表符，除非：</li></ul><ol><li>它在if语句中的某个”语句组”里面</li><li>在for，while….等语句的语句组里面</li><li>在函数体里面</li></ol><h2 id="if缩进对齐"><a href="#if缩进对齐" class="headerlink" title="if缩进对齐"></a>if缩进对齐</h2><ul><li>if语句中的语句组，每条语句左边必须缩进，且缩进情况必须一样(对齐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入: 5，输出: ab<br>输入: 4，无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入: 4，输出：b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span> (<span class="built_in">input</span>()) == <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>出错！没有对齐的缩进！</p><ul><li>什么相当于True或False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;ok&quot;</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;ok&quot;</span>)<span class="comment">#&gt;&gt;ok</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;null string&quot;</span>)<span class="comment">#无输出</span></span><br><span class="line">a = [<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="built_in">print</span> (a)<span class="comment">#&gt;&gt;[4,2]</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">20</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="number">20</span>)<span class="comment">#&gt;&gt;20</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="number">0</span>)<span class="comment">#无输出</span></span><br></pre></td></tr></table></figure><h2 id="if语句嵌套"><a href="#if语句嵌套" class="headerlink" title="if语句嵌套"></a>if语句嵌套</h2><ul><li>在一条if语句的某个分支(语句组)里，还可以再写if语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入：4，输出: bad<br>输入：3，输出: good<br>输入：-1，无输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;bad&quot;</span>)</span><br></pre></td></tr></table></figure><p>输入：4，无输出<br>输入：3，输出: good<br>输入：-1，无输出</p><h2 id="if语句实例"><a href="#if语句实例" class="headerlink" title="if语句实例"></a>if语句实例</h2><ul><li>例:输入密码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="string">&quot;python&quot;</span></span><br><span class="line">userInput = <span class="built_in">input</span>()<span class="comment">#等待用户输入密码</span></span><br><span class="line"><span class="keyword">if</span> userInput == password:<span class="comment"># ==判断两边的表达式值是否相等</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对了!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;错了&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>if语句实例:温度转换程序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tmpStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值:&quot;</span>) <span class="comment">#tmpStr是变量名,随便取啥都行</span></span><br><span class="line"><span class="keyword">if</span> tmpStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]: <span class="comment">#如果输入华氏温度</span></span><br><span class="line">C = ((<span class="built_in">float</span>(tmpStr[<span class="number">0</span>:-<span class="number">1</span>])) - <span class="number">32</span> ) / <span class="number">1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&quot;</span> + <span class="built_in">str</span>(C) + <span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> tmpStr[-<span class="number">1</span>] <span class="keyword">in</span> <span class="string">&quot;Cc&quot;</span>: <span class="comment">#如果输入摄氏温度</span></span><br><span class="line">F = <span class="number">1.8</span> * <span class="built_in">eval</span>(tmpStr[<span class="number">0</span>:-<span class="number">1</span>]) + <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&quot;</span> + <span class="built_in">str</span>(F) + <span class="string">&quot;F&quot;</span>) <span class="comment">#str将F转字符串</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)<span class="comment">#用float替代eval也可以</span></span><br></pre></td></tr></table></figure><p>请输入带有符号的温度值：45F<br>转换后的温度是7.22222222222222C<br>请输入带有符号的温度值：8.2C<br>转换后的温度是46.76F</p><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><p>若s是一个字符串，则:<br><code>s[x:y]</code>是s的从下标x到下标y的左边那个字符构成的子串(切片)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;12345&quot;</span>[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#&gt;&gt;23</span></span><br><span class="line">a = <span class="string">&quot;abcdef&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:-<span class="number">1</span>])<span class="comment">#&gt;&gt; cde</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">6</span>])<span class="comment">#&gt;&gt; abcdef</span></span><br></pre></td></tr></table></figure><ul><li><p>常见错误</p></li><li><p>不要把if …eIse或if…elif…else 写成多个if</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">...</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">...</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; xxx&quot;</span>)</span><br><span class="line">a =<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> a &lt;= <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>两段代码不一样</p><p>…中可能把a的值改成了&lt;= 5。写多个if，哪些代码会被执行，哪些不会被执行，很容易搞错。</p><p>例题：请写一个程序，该程序输入一个年份，根据该年份是否是建国整十周年、建党整十周年以及是否是闰年给出不同的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span> (<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Illegal year&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Legal year.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> year &gt; <span class="number">1949</span> <span class="keyword">and</span> (year - <span class="number">1949</span>) % <span class="number">10</span> == <span class="number">0</span>:<span class="comment">#建国整十</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Luky year.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> year &gt; <span class="number">1921</span> <span class="keyword">and</span> <span class="keyword">not</span> ((year - <span class="number">1921</span>) % <span class="number">10</span>) :<span class="comment">#建党整十</span></span><br><span class="line"><span class="comment">#只是为了演示not的用法，没必要这么写</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good year.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line"><span class="comment"># year % 100若不为0，则year % 100就相当于True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Leap year.&quot;</span>) <span class="comment">#闰年</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Common year.&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-2</span><br><span class="line">Illegal year.</span><br><span class="line"></span><br><span class="line">1959</span><br><span class="line">Legal year.</span><br><span class="line">Luky year.</span><br><span class="line"></span><br><span class="line">1931</span><br><span class="line">Legal year.</span><br><span class="line">Good year.</span><br><span class="line"></span><br><span class="line">2008</span><br><span class="line">Legal year.</span><br><span class="line">Leap year.</span><br></pre></td></tr></table></figure><h2 id="输出格式控制"><a href="#输出格式控制" class="headerlink" title="输出格式控制"></a>输出格式控制</h2><ul><li>字符串中的格式控制符:</li></ul><p><code>%s</code> 表示此处要输出一个字符串<br><code>%d</code> 表示此处要输出一个整数<br><code>%f</code> 表示此处要输出一个小数<br><code>%.nf</code> 表示此处要输出一个小数， 保留小数点后面n位，四舍六入，五则可能入也可能舍。</p><p>格式控制符只能出现在字符串中!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">1.746</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is %s, I am %.2fm tall.&quot;</span> % (<span class="string">&quot;tom&quot;</span>, h))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My age is %d.&quot;</span> % <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d%s&quot;</span> % (<span class="number">18</span>, <span class="string">&quot;he1lo&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f, %.2f&quot;</span> % (<span class="number">5.225</span>, <span class="number">5.325</span>)) <span class="comment">#&gt;&gt; 5.22,5.33 四舍六入，遇到五会有一般舍去，一半进位</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">My name is tom, I am 1.75m tall.</span><br><span class="line">My age is 18.</span><br><span class="line">18hello</span><br><span class="line">5.22, 5.33</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">h = <span class="number">1.746</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;My name is %s, I am %.2f m tall.&quot;</span> % (<span class="string">&quot;tom&quot;</span>, h)</span><br><span class="line"></span><br><span class="line">是个字符串。比下面这个等价字符串简洁:</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;My name is %s&quot;</span> % name + <span class="string">&quot;I am %.2f m tall.&quot;</span> % h</span><br></pre></td></tr></table></figure><ul><li>题目：在一行输入两个小数x，y，请输出(x+y) * x的值，保留小数点后面5位</li></ul><p>错误解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().split()</span><br><span class="line">x,y = <span class="built_in">float</span>(s[<span class="number">0</span>]) , <span class="built_in">float</span>(s[<span class="number">1</span>])</span><br><span class="line">m = <span class="string">&#x27;%.5f&#x27;</span> % (x+y)</span><br><span class="line">z = <span class="built_in">float</span>(m) * x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.5f&quot;</span> % z)</span><br></pre></td></tr></table></figure><p>x+y本来就是小数没有必要先转成字符串，又转成小数。结果要保留小数点后面5位，并非中间的计算过程也要保留小数点后面5位</p>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第二章基本运算、条件分支和输出格式控制</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>实用Python程序设计MOOC-第一章Python初探</title>
    <link href="http://hibiscidai.com/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/"/>
    <id>http://hibiscidai.com/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/</id>
    <published>2022-09-02T00:00:00.000Z</published>
    <updated>2022-10-03T05:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/09/02/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2/%E5%AE%9E%E7%94%A8Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1MOOC-%E7%AC%AC%E4%B8%80%E7%AB%A0Python%E5%88%9D%E6%8E%A2.png" class="" title="实用Python程序设计MOOC-第一章Python初探"><p>实用Python程序设计MOOC-第一章Python初探</p><span id="more"></span><p>[TOC]</p><h1 id="实用Python程序设计MOOC-第一章Python初探"><a href="#实用Python程序设计MOOC-第一章Python初探" class="headerlink" title="实用Python程序设计MOOC-第一章Python初探"></a>实用Python程序设计MOOC-第一章Python初探</h1><h1 id="Python语言来历"><a href="#Python语言来历" class="headerlink" title="Python语言来历"></a>Python语言来历</h1><h2 id="常见程序设计语言"><a href="#常见程序设计语言" class="headerlink" title="常见程序设计语言"></a>常见程序设计语言</h2><ul><li>Java：使用最广泛的语言。主要用于互联网服务器端应用和Android手机App开发</li><li>C/C++：开发对速度要求较高的系统软件，以及大型端游</li><li>C#：微软公司程序设计语言，网站开发，桌面应用开发</li><li>PHP：网站开发</li><li>JavaScript：网站前端开发。在浏览器中运行</li><li>Swift：苹果公司语言，用于开发iPhone App和Mac桌面应用程序</li></ul><h2 id="为什么学Python"><a href="#为什么学Python" class="headerlink" title="为什么学Python"></a>为什么学Python</h2><ul><li>简单易学</li><li>有众多的库支持，功能强大</li><li>编程效率高</li><li>跨平台(Windows, Linux，Mac OS…)</li></ul><p>库：别人写好的功能模块</p><h2 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h2><p>Python的作者，Guido von Rossum，荷兰人。</p><p>1982年，Guido从阿姆斯特丹大学(University of Amsterdam) 获得了数学和计算机硕士学位。</p><p>之所以选中Python (大蟒蛇的意思)作为该编程语言的名字，是因为他是一个叫Monty Python的喜剧团体的爱好者。</p><p><code>www.python.org</code></p><p>Python雏形 1991年<br>Python 1. 0 1994年11月<br>Python 2. 0 2000年<br>Python 2. 7.13是Python 2的最后版本<br>Python 3. 0 2008年<br>Python 3 不向后兼容Python2</p><p>目前: Python 3. 6.2</p><h1 id="Python的开发环境搭建"><a href="#Python的开发环境搭建" class="headerlink" title="Python的开发环境搭建"></a>Python的开发环境搭建</h1><h2 id="搭建Python开发环境"><a href="#搭建Python开发环境" class="headerlink" title="搭建Python开发环境"></a>搭建Python开发环境</h2><p>1、 下载并安装Python 3. x<br>2、下载并安装pycharm -community-4. 0.4<br>(非必需，但强烈推荐)<br><a href="http://www">http://www</a>. jetbra ins. com/ pycharm/ down I oad/ #sect i on=w indows<br>3、配置pycharm<br>4、在pycharm建工程<br>5、编写、运行python程序</p><blockquote><p>安装时候选择为所有用户安装，并且添加Python到path。</p></blockquote><h2 id="以命令行方式运行python程序"><a href="#以命令行方式运行python程序" class="headerlink" title="以命令行方式运行python程序"></a>以命令行方式运行python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`hello.py`</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><blockquote><p>使用pycharm解释器设置。</p></blockquote><h1 id="Python语言的基本要素"><a href="#Python语言的基本要素" class="headerlink" title="Python语言的基本要素"></a>Python语言的基本要素</h1><p>程序中的所有字符都必须是英文(半角)字符，不能是中文(全角)字符，注意.,(,”之类的，都必须是英文字符!</p><p>除非就是要输出中文文字，才会在”字符串”中使用中文</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>并非需要执行的指令，只是为了编程者方便理解程序之.用<br>单行注释: “#” 开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b</span><br><span class="line"><span class="comment">#让a和b的值相同</span></span><br></pre></td></tr></table></figure><p>Pycharm中，选中若干行， <code>Ctrl + &#39;/&#39;</code>可将这些行都变成注释/都由注释变为非注释。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量有名字，可以用来存储数据。其值可变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = a <span class="comment">#让b的值变得和a一样</span></span><br><span class="line"><span class="built_in">print</span> (a+b)</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p><h2 id="变量的命名办法"><a href="#变量的命名办法" class="headerlink" title="变量的命名办法"></a>变量的命名办法</h2><ul><li>变量由大小写字母、数字和下划线构成，中间不能有空格，长度不限，不能以数字开头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">_doorNum</span><br><span class="line">x1</span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line">a2</span><br><span class="line">A</span><br><span class="line">number_of_students MYTYPE</span><br></pre></td></tr></table></figure><ul><li><p>变量名最好能够体现变量的含义</p></li><li><p>多单词的变量名，最好第一个单词小写，后面单词首字母大写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dateOfBirth</span><br><span class="line">numOfDogs</span><br><span class="line">bookPrice</span><br></pre></td></tr></table></figure><ul><li>变量名是大小写相关的</li></ul><p>a和A,name和Name是不同的变量。</p><ul><li>有些名字Python预留了,不可用作变量的名字</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">as</span><br><span class="line">assert</span><br><span class="line">break</span><br><span class="line">class</span><br><span class="line">continue</span><br><span class="line">def</span><br><span class="line">del</span><br><span class="line">elif</span><br><span class="line">else</span><br><span class="line">except</span><br><span class="line">exec</span><br><span class="line">for</span><br><span class="line">finally</span><br><span class="line">from</span><br><span class="line">global</span><br><span class="line">if</span><br><span class="line">import</span><br><span class="line">in</span><br><span class="line">is</span><br><span class="line">lambda</span><br><span class="line">not</span><br><span class="line">or</span><br><span class="line">pass</span><br><span class="line">print</span><br><span class="line">raise</span><br><span class="line">return</span><br><span class="line">try</span><br><span class="line">while</span><br><span class="line">with</span><br><span class="line">yield</span><br></pre></td></tr></table></figure><p>如果不小心用了，python会报错</p><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量=表达式</span><br></pre></td></tr></table></figure><p>将变量的值变得和”表达式”的值一样</p><p>变量、数、字符串……都是“表达式”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;he&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &gt;&gt;he</span></span><br><span class="line">b=<span class="number">3</span>+<span class="number">2</span></span><br><span class="line">a=b<span class="comment"># a的值变得和b一样</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># &gt;&gt;5</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &gt;&gt;5</span></span><br><span class="line">b=b+a<span class="comment"># b的值改为原来b的值加a</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># &gt;&gt;10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="string">&quot;he&quot;</span>,<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment"># &gt;&gt;he 12</span></span><br><span class="line">a,b = b,a<span class="comment">#交换a,b的值</span></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment"># &gt;&gt;12 he</span></span><br><span class="line">c,a,b = a,b,a</span><br><span class="line"><span class="built_in">print</span>(a,b,c)<span class="comment"># &gt;&gt;he 12 12</span></span><br><span class="line">a=b=c=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)<span class="comment">#&gt;&gt;10 10 10</span></span><br></pre></td></tr></table></figure><h2 id="程序顶格书写"><a href="#程序顶格书写" class="headerlink" title="程序顶格书写"></a>程序顶格书写</h2><p>程序每行前面不能留空格</p><h1 id="初步认识字符串"><a href="#初步认识字符串" class="headerlink" title="初步认识字符串"></a>初步认识字符串</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="可以且必须用单引号、双引号或三引号括起来"><a href="#可以且必须用单引号、双引号或三引号括起来" class="headerlink" title="可以且必须用单引号、双引号或三引号括起来"></a>可以且必须用单引号、双引号或三引号括起来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;I said: &#x27;hello&#x27; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># &gt;&gt;1 said:&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I said: &quot;hello&quot; &#x27;</span>) <span class="comment">#&gt;&gt;| said:&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;I said: &#x27;he said &quot;hello&quot;&#x27;.&#x27;&#x27;&#x27;</span>) <span class="comment">#&gt;&gt;I said:&#x27;he said&quot;hello&quot;&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;this \</span></span><br><span class="line"><span class="string">is \</span></span><br><span class="line"><span class="string">good&quot;</span>)<span class="comment">#&gt;&gt;this is good 字符串太长时，自己看起来分行，输出不分行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello, word)<span class="comment">#错!没有用引号括起来</span></span><br></pre></td></tr></table></figure><h3 id="字符串里面不会包含变量"><a href="#字符串里面不会包含变量" class="headerlink" title="字符串里面不会包含变量"></a>字符串里面不会包含变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">1.75</span></span><br><span class="line"><span class="built_in">print</span>(s)<span class="comment">#&gt;&gt;1.75</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am s m tall&quot;</span>)<span class="comment">#&gt;&gt;I am s m tall</span></span><br><span class="line"><span class="comment"># 字符串中的s就是个字符，和前面的变量s没有关系!!!</span></span><br><span class="line"><span class="comment"># 字符串必须用引号括起来，用引号括起来的就是字符串!</span></span><br><span class="line">a=<span class="number">4</span></span><br><span class="line">b=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a+b&quot;</span>)<span class="comment">#&gt;&gt; a+b 不会打出9!!!!!</span></span><br></pre></td></tr></table></figure><h3 id="三双引号字符串中可以包含换行符、制表符以及其他特殊字符。"><a href="#三双引号字符串中可以包含换行符、制表符以及其他特殊字符。" class="headerlink" title="三双引号字符串中可以包含换行符、制表符以及其他特殊字符。"></a>三双引号字符串中可以包含换行符、制表符以及其他特殊字符。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">para_str= <span class="string">&quot;&quot;&quot;多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB(\t)。</span></span><br><span class="line"><span class="string">也可以使用换行符[ \n ]。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class="line"><span class="string">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class="line"><span class="string">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class="line"><span class="string">&lt;/BODY&gt; &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(para <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB()。</span><br><span class="line">也可以使用换行符[</span><br><span class="line">]。</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="line">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="line">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="line">ONCLICK= =&quot;window . history .back() &quot;&gt;&lt;/FORM&gt;</span><br><span class="line">&lt;/BODY&gt; &lt;/HTML&gt;</span><br></pre></td></tr></table></figure></p><h3 id="字符串的下标"><a href="#字符串的下标" class="headerlink" title="字符串的下标"></a>字符串的下标</h3><p>有n个字符的字符串，其中的每个字符都是长度为1的字符串：</p><p>从左到右依次编号为0,1,2…n-1<br>从右到左依次编号为-1,-2…-n</p><p>编号就是下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>]) <span class="comment">#&gt;&gt;D</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>]) <span class="comment">#&gt;&gt;A</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>]) <span class="comment">#&gt;&gt;C</span></span><br></pre></td></tr></table></figure><h3 id="用”-”连接字符串"><a href="#用”-”连接字符串" class="headerlink" title="用”+”连接字符串"></a>用”+”连接字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line">b=<span class="string">&quot;1234&quot;</span></span><br><span class="line">a=a+b</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;ABCD1234</span></span><br><span class="line"></span><br><span class="line">a=a+a[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#&gt;&gt;ABCD1234B</span></span><br></pre></td></tr></table></figure><h3 id="不可以修改字符串中的字符"><a href="#不可以修改字符串中的字符" class="headerlink" title="不可以修改字符串中的字符"></a>不可以修改字符串中的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;ABCD&quot;</span></span><br><span class="line">a[<span class="number">2</span>]=<span class="string">&#x27;k&#x27;</span><span class="comment">#错，字符串中的字符不能修改</span></span><br></pre></td></tr></table></figure><h3 id="用in-not-in判断子串"><a href="#用in-not-in判断子串" class="headerlink" title="用in,not in判断子串"></a>用in,not in判断子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;Hello&quot;</span></span><br><span class="line">b=<span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;el&quot;</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt; True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;th&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> b)<span class="comment">#&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lot&quot;</span> <span class="keyword">in</span> a)<span class="comment">#&gt;&gt;False</span></span><br></pre></td></tr></table></figure><h1 id="字符串和数的转换"><a href="#字符串和数的转换" class="headerlink" title="字符串和数的转换"></a>字符串和数的转换</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x)<span class="comment">#把字符串转换成整数,(x不会变成整数，int (x)这个表达式的值是整数)</span></span><br><span class="line"><span class="built_in">float</span>(x)<span class="comment">#把字符串x转换成小数</span></span><br><span class="line"><span class="built_in">str</span>(x)<span class="comment">#把x转换成字符串</span></span><br><span class="line"><span class="built_in">eval</span>(x)<span class="comment">#把字符串x看作一个python表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求其值初学者程序出现runtime error,多半是由于做了不合法的转换，如int(x)而x为&quot;a12&quot;或&quot;12.34&#x27;,float(x)而x为&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">15</span></span><br><span class="line">b=<span class="string">&quot;12&quot;</span></span><br><span class="line">c=a+b<span class="comment">#错误的语句,字符串和整数无法相加</span></span><br><span class="line"><span class="built_in">print</span>(a+<span class="built_in">int</span>(b))<span class="comment">#&gt;&gt;27 b没有变成整数int(b)这个表达式的值是个整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a)+b)<span class="comment">#&gt;&gt;1512</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">1</span>+<span class="built_in">float</span>(<span class="string">&quot;3.5&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&gt;&gt;4.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+<span class="built_in">eval</span>(<span class="string">&quot;4.5&quot;</span>)) <span class="comment">#&gt;&gt;7.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;3+2&quot;</span>))<span class="comment">#&gt;&gt;5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;3+a&quot;</span>))<span class="comment">#&gt;&gt;18</span></span><br></pre></td></tr></table></figure><ul><li>小数到整数的转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(x) <span class="comment">#x是小数,则去尾取整</span></span><br><span class="line"><span class="built_in">int</span>(<span class="number">3.2</span>)<span class="comment">#3</span></span><br><span class="line"><span class="built_in">int</span>(<span class="number">3.9</span>)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><h2 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">-</th><th style="text-align:center">-</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">整数</td><td style="text-align:center">123456</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">小数</td><td style="text-align:center">3.2</td></tr><tr><td style="text-align:center">complex</td><td style="text-align:center">复数1+2j</td></tr><tr><td style="text-align:center">Str</td><td style="text-align:center">字符串</td><td style="text-align:center">“he1lo”</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">列表</td><td style="text-align:center">[1,2, ‘ok’ ,4.3]</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">元组</td><td style="text-align:center">(1,2, ‘ok’ ,4.3)</td></tr><tr><td style="text-align:center">bool</td><td style="text-align:center">布尔</td><td style="text-align:center">True False</td></tr><tr><td style="text-align:center">dict</td><td style="text-align:center">字典</td><td style="text-align:center">{“tom” :20, “jack” :30}</td></tr><tr><td style="text-align:center">set</td><td style="text-align:center">集合</td><td style="text-align:center">{“tom” ,18, 71}</td></tr></tbody></table></div><h1 id="最简单的输入输出"><a href="#最简单的输入输出" class="headerlink" title="最简单的输入输出"></a>最简单的输入输出</h1><h2 id="输出语句print"><a href="#输出语句print" class="headerlink" title="输出语句print"></a>输出语句print</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x,y,z....)</span><br><span class="line"><span class="comment">#连续输出多项，以空格分隔，然后换行</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z....,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#连续输出多项，以空格分隔，不换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)<span class="comment">#&gt;&gt;1 2 3ok</span></span><br></pre></td></tr></table></figure><h2 id="输入语句input"><a href="#输入语句input" class="headerlink" title="输入语句input"></a>输入语句input</h2><p>格式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">input</span>(y)</span><br><span class="line"><span class="comment">#x是变量</span></span><br><span class="line"><span class="comment">#y是字符串，或任何值为字符串的表达式</span></span><br><span class="line"><span class="comment">#输出y，并等待输入。敲回车后输入的字符串被赋值给x</span></span><br></pre></td></tr></table></figure></p><ul><li>最简单的能处理输入的Python程序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s+<span class="string">&quot;,你好! &quot;</span>)</span><br></pre></td></tr></table></figure><p>注意:以后做OpenJudge作业的时候，input里面不要写任何东西，<code>s=input()</code></p><blockquote><p>input()每次输入一行，如果有多行输入，就用多次input()<br>如果输入已经结束(后面没有输入数据了)，再进行input()，就会产生runtime error</p></blockquote><h1 id="初步认识列表"><a href="#初步认识列表" class="headerlink" title="初步认识列表"></a>初步认识列表</h1><h2 id="列表可以有0到任意多个元素，元素可以通过下标访问"><a href="#列表可以有0到任意多个元素，元素可以通过下标访问" class="headerlink" title="列表可以有0到任意多个元素，元素可以通过下标访问"></a>列表可以有0到任意多个元素，元素可以通过下标访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">empty=[]<span class="comment">#空表</span></span><br><span class="line">list1=[<span class="string">&#x27;Goog1e&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>,<span class="number">1997</span>,<span class="number">2000</span>]</span><br><span class="line">list2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1[0]:&quot;</span>，list1[<span class="number">0</span>]) <span class="comment">#&gt;&gt;1ist1[0] : Google</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">2001</span><span class="comment">#更改了列表中下标为2的元素。</span></span><br><span class="line">a=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后的第三个元素为:&quot;</span>,list1[a]) <span class="comment">#变量也能做下标</span></span><br><span class="line"><span class="comment">#&gt;&gt;更新后的第三个元素为:2001</span></span><br></pre></td></tr></table></figure><h2 id="用in判断列表是否包含某个元素"><a href="#用in判断列表是否包含某个元素" class="headerlink" title="用in判断列表是否包含某个元素"></a>用in判断列表是否包含某个元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;4&quot;</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> lst,<span class="number">3</span> <span class="keyword">in</span> lst,<span class="string">&quot;4&quot;</span> <span class="keyword">in</span> lst)<span class="comment">#&gt;&gt;False True True</span></span><br></pre></td></tr></table></figure><ul><li>实例:输入两个整数求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line">numbers=s.split()<span class="comment">#s分割后得到的列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(numbers[<span class="number">0</span>])+<span class="built_in">int</span>(numbers[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>若输入:3 4<br>则:s为:”3 4”<br>numbers为: [“3”, “4”]<br>输出: 7</p><h2 id="字符分割成列表"><a href="#字符分割成列表" class="headerlink" title="字符分割成列表"></a>字符分割成列表</h2><p>若x是字符串，则<code>x.split()</code>的值是一个列表，包含字符串x经空格、制表符、换行符分隔得到的所有子串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;34\t\t45\n7&quot;</span>.split()) <span class="comment">#&gt;&gt;[&#x27;34&#x27;,&#x27;45&#x27;,&#x27;7&#x27;]</span></span><br><span class="line"><span class="comment">#\t是制表符，\n是换行符号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ab cd hello&quot;</span>.split()) <span class="comment">#&gt;&gt;[&#x27;ab&#x27;,&#x27;cd&#x27;,&#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">&quot;1234&quot;</span></span><br><span class="line">lst = s.split ()</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment">#&gt;&gt;[ &#x27;12&#x27;，&#x27;34&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实用Python程序设计MOOC-第一章Python初探</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://hibiscidai.com/tags/Python/"/>
    
    <category term="PythonMOOC" scheme="http://hibiscidai.com/tags/PythonMOOC/"/>
    
  </entry>
  
  <entry>
    <title>主要岩石矿物密度</title>
    <link href="http://hibiscidai.com/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/"/>
    <id>http://hibiscidai.com/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/</id>
    <published>2022-05-20T10:00:00.000Z</published>
    <updated>2022-05-20T10:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/20/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6/%E4%B8%BB%E8%A6%81%E5%B2%A9%E7%9F%B3%E7%9F%BF%E7%89%A9%E5%AF%86%E5%BA%A6.png" class="" title="主要岩石矿物密度"><p>主要岩石矿物密度</p><span id="more"></span><p>[TOC]</p><h1 id="主要岩石矿物密度"><a href="#主要岩石矿物密度" class="headerlink" title="主要岩石矿物密度"></a>主要岩石矿物密度</h1><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">密度范围</th></tr></thead><tbody><tr><td style="text-align:center">纯橄榄岩</td><td style="text-align:center">2.5 - 3.3</td></tr><tr><td style="text-align:center">锰矿</td><td style="text-align:center">3.4 - 6.0</td></tr><tr><td style="text-align:center">橄榄岩</td><td style="text-align:center">2.6 - 3.6</td></tr><tr><td style="text-align:center">钨酸钙矿</td><td style="text-align:center">5.9 - 6.2</td></tr><tr><td style="text-align:center">玄武岩</td><td style="text-align:center">2.6 - 3.3</td></tr><tr><td style="text-align:center">铬铁矿</td><td style="text-align:center">3.2 - 4.4</td></tr><tr><td style="text-align:center">辉长岩</td><td style="text-align:center">2.7 - 3.4</td></tr><tr><td style="text-align:center">赤铁矿</td><td style="text-align:center">5.1 - 5.2</td></tr><tr><td style="text-align:center">安山岩</td><td style="text-align:center">2.5 - 3.8</td></tr><tr><td style="text-align:center">磁铁矿</td><td style="text-align:center">4.8 - 5.2</td></tr><tr><td style="text-align:center">辉绿岩</td><td style="text-align:center">2.9 - 3.3</td></tr><tr><td style="text-align:center">黄铁矿</td><td style="text-align:center">4.9 - 5.2</td></tr><tr><td style="text-align:center">玢岩</td><td style="text-align:center">2.6 - 3.9</td></tr><tr><td style="text-align:center">黄铜矿</td><td style="text-align:center">4.1 - 4.3</td></tr><tr><td style="text-align:center">花岗岩</td><td style="text-align:center">2.4 - 3.1</td></tr><tr><td style="text-align:center">钛铁矿</td><td style="text-align:center">4.5 - 5.0</td></tr><tr><td style="text-align:center">石英岩</td><td style="text-align:center">2.6 - 2.9</td></tr><tr><td style="text-align:center">磁黄铁矿</td><td style="text-align:center">4.3 - 4.8</td></tr><tr><td style="text-align:center">流纹岩</td><td style="text-align:center">2.3 - 2.9</td></tr><tr><td style="text-align:center">表土</td><td style="text-align:center">1.1 - 2.0</td></tr><tr><td style="text-align:center">片麻岩</td><td style="text-align:center">2.4 - 2.9</td></tr><tr><td style="text-align:center">粘土</td><td style="text-align:center">1.5 - 2.2</td></tr><tr><td style="text-align:center">云母岩</td><td style="text-align:center">2.5 - 3.0</td></tr><tr><td style="text-align:center">铝钒上</td><td style="text-align:center">2.4 - 2.5</td></tr><tr><td style="text-align:center">干枚岩</td><td style="text-align:center">2.7 - 2.8</td></tr><tr><td style="text-align:center">砂</td><td style="text-align:center">1.4 - 1.7</td></tr><tr><td style="text-align:center">蛇纹岩</td><td style="text-align:center">2.6 - 3.2</td></tr><tr><td style="text-align:center">白垩</td><td style="text-align:center">1.8 - 2.6</td></tr><tr><td style="text-align:center">大理岩</td><td style="text-align:center">2.6 - 2.9</td></tr><tr><td style="text-align:center">硬石膏</td><td style="text-align:center">2.7 - 3.0</td></tr><tr><td style="text-align:center">白云岩</td><td style="text-align:center">2.4 - 2.9</td></tr><tr><td style="text-align:center">石膏</td><td style="text-align:center">2.2 - 2.4</td></tr><tr><td style="text-align:center">页岩</td><td style="text-align:center">2.1 - 2.8</td></tr><tr><td style="text-align:center">煤</td><td style="text-align:center">1.2 - 1.7</td></tr><tr><td style="text-align:center">石灰岩</td><td style="text-align:center">2.3 - 3.0</td></tr><tr><td style="text-align:center">褐煤</td><td style="text-align:center">1.1 - 1.3</td></tr><tr><td style="text-align:center">砂岩</td><td style="text-align:center">1.8 - 2.8</td></tr><tr><td style="text-align:center">钾盐</td><td style="text-align:center">1.9 - 2.0</td></tr><tr><td style="text-align:center">闪长岩</td><td style="text-align:center">2.7 - 3.0</td></tr><tr><td style="text-align:center">盐岩</td><td style="text-align:center">2.1 - 2.2</td></tr><tr><td style="text-align:center">重晶石</td><td style="text-align:center">4.4 - 4.7</td></tr><tr><td style="text-align:center">刚玉</td><td style="text-align:center">3.9 - 4.0</td></tr><tr><td style="text-align:center">氟石</td><td style="text-align:center">3.1 - 3.2</td></tr></tbody></table></div><h1 id="常见重矿物类型"><a href="#常见重矿物类型" class="headerlink" title="常见重矿物类型"></a>常见重矿物类型</h1><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">常见</th></tr></thead><tbody><tr><td style="text-align:center">稳定重矿物</td><td style="text-align:center">石榴子石、错石、刚玉、电气石、锡石、金红石、白钛矿、磁铁矿、榍石、十字石、蓝晶石、独居石</td></tr><tr><td style="text-align:center">不稳定重矿物</td><td style="text-align:center">重晶石、磷灰石、绿帘石、黝帘石、阳起石、符山石、红柱石、硅线石、黄铁矿、透闪石、普通角闪石、透辉石、普通辉石、斜方辉石、橄榄石、黑云母</td></tr></tbody></table></div><h1 id="不同母岩类型的重矿物组合"><a href="#不同母岩类型的重矿物组合" class="headerlink" title="不同母岩类型的重矿物组合"></a>不同母岩类型的重矿物组合</h1><div class="table-container"><table><thead><tr><th style="text-align:center">母岩</th><th style="text-align:center">重矿物组合</th></tr></thead><tbody><tr><td style="text-align:center">酸性岩浆岩</td><td style="text-align:center">磷灰岩、普通角闪石、独居石、金红石、榍石、锆石、电气石(粉红)、锡石、黑云母</td></tr><tr><td style="text-align:center">伟晶岩</td><td style="text-align:center">锡石、萤石、白云母、黄玉、电气石、黑钨矿</td></tr><tr><td style="text-align:center">中性及基性岩浆岩</td><td style="text-align:center">普通辉石、紫苏辉石、普通角闪石、透辉石、磁铁矿、钛铁矿</td></tr><tr><td style="text-align:center">变质岩</td><td style="text-align:center">红柱石、石榴石、硬绿泥石、蓝闪石、蓝晶石、硅线石、十字石、绿帘石、黝帘石、镁电气石(黄、褐色)黑云母，白云母、硅灰石、董青</td></tr><tr><td style="text-align:center">再改造的沉积岩</td><td style="text-align:center">锆石(圆)、电气石(圆)、金红石</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">主要岩石矿物密度</summary>
    
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/categories/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/tags/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    <category term="石油地质" scheme="http://hibiscidai.com/tags/%E7%9F%B3%E6%B2%B9%E5%9C%B0%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</title>
    <link href="http://hibiscidai.com/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/"/>
    <id>http://hibiscidai.com/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/</id>
    <published>2022-03-20T01:00:00.000Z</published>
    <updated>2022-03-23T05:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/03/20/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/%E7%99%BD%E4%BA%91%E5%87%B9%E9%99%B7%E7%8F%A0%E6%B1%9F%E7%BB%84-%E6%81%A9%E5%B9%B3%E7%BB%84%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E4%BD%8E%E6%B8%97%E6%B0%94%E5%B1%82%E6%B5%8B%E4%BA%95%E8%AF%84%E4%BB%B7-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81.png" class="" title="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"><p>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</p><span id="more"></span><h1 id="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"><a href="#白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码" class="headerlink" title="白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码"></a>白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文有关《白云凹陷珠江组-恩平组高温高压低渗气层测井评价》附录1软件核心代码展示；</p><p>内容仅供学习参考，引用参考请标明本文代码来源，对本文代码进行恶意盗用或占用知识产权，本人及团队追究其法律责任。</p><h1 id="泥质含量计算关键源码"><a href="#泥质含量计算关键源码" class="headerlink" title="泥质含量计算关键源码"></a>泥质含量计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal0</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> GR = <span class="keyword">this</span>._gr.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"><span class="built_in">double</span> IGR = (GR - <span class="keyword">this</span>._grmin) / (<span class="keyword">this</span>._grmax - <span class="keyword">this</span>._grmin);</span><br><span class="line"></span><br><span class="line">VSH = (Math.Pow(<span class="number">2</span>, <span class="keyword">this</span>._gcur * IGR) - <span class="number">1</span>) / (Math.Pow(<span class="number">2</span>, <span class="keyword">this</span>._gcur) - <span class="number">1</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> GR = <span class="keyword">this</span>._gr.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">VSH = <span class="keyword">this</span>._shgr1 * GR + <span class="keyword">this</span>._shgr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">VSHCal2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> TH = <span class="keyword">this</span>._th.Value;</span><br><span class="line"><span class="built_in">double</span> VSH = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">VSH = (TH - <span class="keyword">this</span>._thmin) / (<span class="keyword">this</span>._thmax - <span class="keyword">this</span>._thmin) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectVSH</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == VSH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> VSH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> corVSH = VSH;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corVSH)</span><br><span class="line">corVSH = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corVSH)</span><br><span class="line">corVSH = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corVSH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="孔隙度计算关键源码"><a href="#孔隙度计算关键源码" class="headerlink" title="孔隙度计算关键源码"></a>孔隙度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal0</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = ((AC - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma) / <span class="keyword">this</span>._cp - (VSH / <span class="number">100</span>) * (<span class="keyword">this</span>._poracsh - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma)) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AC+<span class="function">PORAC2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porac1 * AC + <span class="keyword">this</span>._porac2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal2</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = (CNL - VSH / <span class="number">100</span> * <span class="keyword">this</span>._porcnlsh) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal3</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porcnl1 * CNL + <span class="keyword">this</span>._porcnl2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal4</span>(<span class="params"><span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = ((DEN - <span class="keyword">this</span>._pordenma4) / (<span class="keyword">this</span>._pordenf4 - <span class="keyword">this</span>._pordenma4) - (VSH / <span class="number">100</span>) * (<span class="keyword">this</span>._pordensh - <span class="keyword">this</span>._pordenma4) / (<span class="keyword">this</span>._pordenf4 - <span class="keyword">this</span>._pordenma4)) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal5</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porden1 * DEN + <span class="keyword">this</span>._porden2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal6</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PORDEN = (DEN - <span class="keyword">this</span>._pordenf6) / (<span class="keyword">this</span>._pordenma6 - <span class="keyword">this</span>._pordenf6);</span><br><span class="line"><span class="built_in">double</span> PORCNL = (CNL - <span class="keyword">this</span>._porcnlf) / (<span class="keyword">this</span>._porcnlma - <span class="keyword">this</span>._porcnlf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = Math.Pow((Math.Pow(PORDEN, <span class="number">2</span>) + Math.Pow(PORCNL, <span class="number">2</span>)) / <span class="number">2</span>, <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal7</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poracden1 * AC + <span class="keyword">this</span>._poracden2 * DEN + <span class="keyword">this</span>._poracden3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal8</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poraccnl1 * AC + <span class="keyword">this</span>._poraccnl2 * CNL + <span class="keyword">this</span>._poraccnl3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal9</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._porcnlden1 * CNL + <span class="keyword">this</span>._porcnlden2 * DEN + <span class="keyword">this</span>._porcnlden3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PORCal10</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> POR = <span class="number">-9999.99</span>;</span><br><span class="line">POR = <span class="keyword">this</span>._poraccnlden1 * AC + <span class="keyword">this</span>._poraccnlden2 * CNL + <span class="keyword">this</span>._poraccnlden3 * DEN + <span class="keyword">this</span>._poraccnlden4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> POR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectPOR</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> corPOR = POR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == corPOR)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corPOR)</span><br><span class="line">    corPOR = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPOR)</span><br><span class="line">    corPOR = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corPOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._porshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._porvshc1 &lt;= <span class="keyword">this</span>._porvshc2)</span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._porvshc1;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._porvshc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._porvshc2;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._porvshc1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = (vsh2 - VSH) / (vsh2 - vsh1) * corPOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPOR = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt; corPOR)</span><br><span class="line">    corPOR = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPOR)</span><br><span class="line">    corPOR = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corPOR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="渗透率计算关键源码"><a href="#渗透率计算关键源码" class="headerlink" title="渗透率计算关键源码"></a>渗透率计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal0</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line">PERM = <span class="keyword">this</span>._permpor1 * Math.Pow(Math.E, <span class="keyword">this</span>._permpor2 * CPOR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal1</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line">PERM = <span class="keyword">this</span>._permti1 * Math.Pow(CPOR, <span class="keyword">this</span>._permti2) / Math.Pow(<span class="keyword">this</span>._swb, <span class="keyword">this</span>._permti3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal2</span>(<span class="params"><span class="built_in">double</span> CPOR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> AC = <span class="keyword">this</span>._ac.Value;</span><br><span class="line"><span class="built_in">double</span> CNL = <span class="keyword">this</span>._cnl.Value;</span><br><span class="line"><span class="built_in">double</span> DEN = <span class="keyword">this</span>._den.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> FZI = <span class="number">0</span>;</span><br><span class="line">FZI = <span class="keyword">this</span>._permfzi1 + <span class="keyword">this</span>._permfzi2 * AC + <span class="keyword">this</span>._permfzi3 * CNL + <span class="keyword">this</span>._permfzi4 * DEN;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> FZI1 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">double</span> FZI2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._permfzib1 &gt;= <span class="keyword">this</span>._permfzib2)</span><br><span class="line">&#123;</span><br><span class="line">    FZI1 = <span class="keyword">this</span>._permfzib1;</span><br><span class="line">    FZI2 = <span class="keyword">this</span>._permfzib2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    FZI1 = <span class="keyword">this</span>._permfzib2;</span><br><span class="line">    FZI2 = <span class="keyword">this</span>._permfzib1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FZI1 &lt;= FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi1f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi1f2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FZI2 &lt;= FZI &amp;&amp; FZI1 &gt; FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi2f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi2f2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FZI2 &gt; FZI)</span><br><span class="line">&#123;</span><br><span class="line">    PERM = <span class="keyword">this</span>._permfzi3f1 * Math.Pow(CPOR, <span class="keyword">this</span>._permfzi3f2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal3</span>(<span class="params"><span class="built_in">double</span> CPOR, <span class="built_in">double</span> CVSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DTST = <span class="keyword">this</span>._dtst.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">PERM = Math.Pow(<span class="number">10</span>, <span class="keyword">this</span>._permdtst1f1) * Math.Pow(CPOR, <span class="keyword">this</span>._permdtst1f2) * Math.Pow(DTST, <span class="keyword">this</span>._permdtst1f3) * Math.Pow(CVSH, <span class="keyword">this</span>._permdtst1f4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">PERMCal4</span>(<span class="params"><span class="built_in">double</span> CPOR, <span class="built_in">double</span> CVSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> DTST = <span class="keyword">this</span>._dtst.Value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> PERM = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">PERM = Math.Pow(<span class="number">10</span>, <span class="keyword">this</span>._permdtst2f1 + <span class="keyword">this</span>._permdtst2f2 * CPOR + <span class="keyword">this</span>._permdtst2f3 * DTST + <span class="keyword">this</span>._permdtst2f4 * CVSH);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectPERM</span>(<span class="params"><span class="built_in">double</span> PERM, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-9999.99</span> == PERM)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> corPERM = PERM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPERM)</span><br><span class="line">    corPERM = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._permshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corPERM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._permshcor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._permvshc1 &lt;= <span class="keyword">this</span>._permvshc2)</span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._permvshc1;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._permvshc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vsh1 = <span class="keyword">this</span>._permvshc2;</span><br><span class="line">        vsh2 = <span class="keyword">this</span>._permvshc1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = (vsh2 - VSH) / (vsh2 - vsh1) * corPERM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">    &#123;</span><br><span class="line">        corPERM = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; corPERM)</span><br><span class="line">    corPERM = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> corPERM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="含水饱和度计算关键源码"><a href="#含水饱和度计算关键源码" class="headerlink" title="含水饱和度计算关键源码"></a>含水饱和度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal0</span>(<span class="params"><span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = Math.Pow(<span class="keyword">this</span>._swaa * <span class="keyword">this</span>._swab * <span class="keyword">this</span>._swarw / RT / Math.Pow(POR / <span class="number">100</span>, <span class="keyword">this</span>._swam), <span class="number">1</span> / <span class="keyword">this</span>._swan) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal1</span>(<span class="params"><span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> m = <span class="number">1.911</span>;</span><br><span class="line">    <span class="built_in">double</span> n = <span class="number">1.663</span>;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    <span class="built_in">double</span> T = <span class="number">120</span>;</span><br><span class="line">    <span class="built_in">double</span> P = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> swa2thd = <span class="keyword">this</span>._manager.CurrentIndexValue;</span><br><span class="line">    <span class="built_in">float</span> swa2php = <span class="keyword">this</span>._manager.CurrentIndexValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2tflag)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">this</span>._swa2t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//T = T_sur + G_t×H_d / 100</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2tflag)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">this</span>._swa2ttsur + <span class="keyword">this</span>._swa2tgt * swa2thd / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="keyword">this</span>._swa2p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P=G_p×H_p</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="keyword">this</span>._swa2pgp * swa2php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a = <span class="keyword">this</span>._swa2a;</span><br><span class="line"></span><br><span class="line">    b = <span class="keyword">this</span>._swa2b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2zjsm1 + (<span class="keyword">this</span>._swa2zjsm2 * T + <span class="keyword">this</span>._swa2zjsm3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjsm4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">this</span>._swa2zjxm1 + (<span class="keyword">this</span>._swa2zjxm2 * T + <span class="keyword">this</span>._swa2zjxm3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjxm4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == <span class="keyword">this</span>._swa2mflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(T ≤ 150℃，P ≤ 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &gt;= T &amp;&amp; <span class="number">40</span> &gt;= P) &#123;</span><br><span class="line">            m = <span class="keyword">this</span>._swa2epm1 + (<span class="keyword">this</span>._swa2epm2 * T + <span class="keyword">this</span>._swa2epm3) * Math.Log(P) + <span class="keyword">this</span>._swa2epm4 * T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(T &gt; 150℃，P &gt; 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &lt; T &amp;&amp; <span class="number">40</span> &lt; P) &#123;</span><br><span class="line">            m = <span class="keyword">this</span>._swa2epm5 + (<span class="keyword">this</span>._swa2epm6 * T + <span class="keyword">this</span>._swa2epm7) * Math.Log(P) + <span class="keyword">this</span>._swa2epm8 * T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2zjsn1 + (<span class="keyword">this</span>._swa2zjsn2 * T + <span class="keyword">this</span>._swa2zjsn3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjsn4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="keyword">this</span>._swa2zjxn1 + (<span class="keyword">this</span>._swa2zjxn2 * T + <span class="keyword">this</span>._swa2zjxn3) * Math.Log(P) + <span class="keyword">this</span>._swa2zjxn4 * T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == <span class="keyword">this</span>._swa2nflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(T ≤ 150℃，P ≤ 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &gt;= T &amp;&amp; <span class="number">40</span> &gt;= P)</span><br><span class="line">        &#123;</span><br><span class="line">            n = <span class="keyword">this</span>._swa2epn1 + (<span class="keyword">this</span>._swa2epn2 * T + <span class="keyword">this</span>._swa2epn3) * Math.Log(P) + <span class="keyword">this</span>._swa2epn4 * T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(T &gt; 150℃，P &gt; 40MPa)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">150</span> &lt; T &amp;&amp; <span class="number">40</span> &lt; P)</span><br><span class="line">        &#123;</span><br><span class="line">            n = <span class="keyword">this</span>._swa2epn5 + (<span class="keyword">this</span>._swa2epn6 * T + <span class="keyword">this</span>._swa2epn7) * Math.Log(P) + <span class="keyword">this</span>._swa2epn8 * T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SW = Math.Pow(a * b * <span class="keyword">this</span>._swarw / RT / Math.Pow(POR / <span class="number">100</span>, m), <span class="number">1</span> / n) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal2</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> C = <span class="number">1</span> - (VSH / <span class="number">100</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = Math.Pow((<span class="number">1</span> / RT * Math.Pow((Math.Pow(VSH / <span class="number">100</span>, C) / <span class="keyword">this</span>._swyrsh) + (POR / <span class="number">100</span> / Math.Pow(<span class="keyword">this</span>._swya * <span class="keyword">this</span>._swyrw, <span class="number">0.5</span>)), <span class="number">2</span>)), <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWCal3</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> RT = <span class="keyword">this</span>._rt.Value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SW = <span class="number">-9999.99</span>;</span><br><span class="line">    SW = <span class="number">0.4</span> * <span class="keyword">this</span>._swsrw / Math.Pow(POR / <span class="number">100</span>, <span class="number">2</span>) * (Math.Pow((<span class="number">5</span> * Math.Pow(POR / <span class="number">100</span>, <span class="number">2</span>) / RT / <span class="keyword">this</span>._swsrw + Math.Pow(VSH / <span class="number">100</span> / <span class="keyword">this</span>._swsrsh, <span class="number">2</span>)), <span class="number">0.5</span>) - VSH / <span class="number">100</span> / <span class="keyword">this</span>._swsrsh) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectSW</span>(<span class="params"><span class="built_in">double</span> SW, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-9999.99</span> == SW)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> corSW = SW;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSW)</span><br><span class="line">        corSW = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSW)</span><br><span class="line">        corSW = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == <span class="keyword">this</span>._swshcor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">20</span> &lt;= VSH &amp;&amp; <span class="number">45</span> &gt;= VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = (<span class="number">45</span> - VSH) / (<span class="number">45</span> - <span class="number">20</span>) * corSW;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">45</span> &lt; VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == <span class="keyword">this</span>._swshcor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> vsh1 = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">double</span> vsh2 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._swvshc1 &lt;= <span class="keyword">this</span>._swvshc2)</span><br><span class="line">        &#123;</span><br><span class="line">            vsh1 = <span class="keyword">this</span>._swvshc1;</span><br><span class="line">            vsh2 = <span class="keyword">this</span>._swvshc2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            vsh1 = <span class="keyword">this</span>._swvshc2;</span><br><span class="line">            vsh2 = <span class="keyword">this</span>._swvshc1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vsh1 &lt;= VSH &amp;&amp; vsh2 &gt;= VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = (vsh2 - VSH) / (vsh2 - vsh1) * corSW;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vsh2 &lt; VSH)</span><br><span class="line">        &#123;</span><br><span class="line">            corSW = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSW)</span><br><span class="line">        corSW = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSW)</span><br><span class="line">        corSW = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> corSW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="束缚水饱和度计算关键源码"><a href="#束缚水饱和度计算关键源码" class="headerlink" title="束缚水饱和度计算关键源码"></a>束缚水饱和度计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal0</span>(<span class="params"><span class="built_in">double</span> GR, <span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> SWI0ISH = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">double</span> SWI0Y = <span class="number">1</span>;</span><br><span class="line">    SWI0ISH = (GR - <span class="keyword">this</span>._swi0grmin) / (<span class="keyword">this</span>._swi0grmax - <span class="keyword">this</span>._swi0grmin);</span><br><span class="line">    SWI0Y = <span class="number">3</span> * (<span class="number">1</span> - SWI0ISH) / (<span class="number">5</span> * Math.Pow(<span class="keyword">this</span>._swi0pormax / <span class="number">100</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SWI0ISH &gt; <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = (<span class="number">2</span> * SWI0ISH - SWI0Y) / (<span class="number">2</span> - SWI0Y) * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0.5</span> == SWI0ISH)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (SWI0ISH &lt; <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SWI = <span class="number">2</span> * SWI0ISH / (<span class="number">2</span> + SWI0Y) * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal1</span>(<span class="params"><span class="built_in">double</span> RT, <span class="built_in">double</span> POR</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    SWI = <span class="number">1</span> / POR / <span class="number">100</span> * Math.Pow(<span class="keyword">this</span>._swi1rwb / RT, <span class="number">0.5</span>) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SWICal2</span>(<span class="params"><span class="built_in">double</span> POR, <span class="built_in">double</span> VSH</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> SWI = <span class="number">-9999.99</span>;</span><br><span class="line"></span><br><span class="line">    SWI = (<span class="keyword">this</span>._swi2a - Math.Log10(POR / VSH - <span class="keyword">this</span>._swi2b)) * <span class="number">100</span> / <span class="keyword">this</span>._swi2c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SWI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">CorrectSWI</span>(<span class="params"><span class="built_in">double</span> SWI</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-9999.99</span> == SWI)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SWI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> corSWI = SWI;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> &lt; corSWI)</span><br><span class="line">        corSWI = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; corSWI)</span><br><span class="line">        corSWI = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> corSWI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="层数据统计核心算法"><a href="#层数据统计核心算法" class="headerlink" title="层数据统计核心算法"></a>层数据统计核心算法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span>[] <span class="title">getCurveArray</span>(<span class="params">String CurveName, <span class="built_in">float</span> StartDep, <span class="built_in">float</span> EndDep</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ICurve getCurve = <span class="keyword">this</span>._manager.GetInCurve(CurveName);</span><br><span class="line">    IDataAccessCollection a = getCurve.GetValues(StartDep, EndDep);</span><br><span class="line">    <span class="built_in">float</span>[] result = <span class="keyword">new</span> <span class="built_in">float</span>[a.Count];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        IDataAccess temp = a.GetValue(i);</span><br><span class="line">        <span class="built_in">float</span> dtemp = BitConverter.ToSingle(temp.GetBytes(), <span class="number">0</span>);</span><br><span class="line">        result[i] = dtemp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getMax</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> max = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getMin</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> min = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getAve</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> sum = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> result = sum / a.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">getHistogramPeak</span>(<span class="params"><span class="built_in">float</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SortedList sortedListArray = <span class="keyword">new</span> SortedList();</span><br><span class="line"></span><br><span class="line">    sortedListArray.Add(a[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">int</span> sortedListArrayIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; a.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortedListArray.ContainsKey(a[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = sortedListArray.IndexOfKey(a[i]);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">value</span>++;</span><br><span class="line"></span><br><span class="line">            sortedListArray.Remove(a[i]);</span><br><span class="line"></span><br><span class="line">            sortedListArray.Add(a[i], <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sortedListArray.Add(a[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> MaxFrequency = <span class="number">0</span>;</span><br><span class="line">    ICollection Values = sortedListArray.Values;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> v <span class="keyword">in</span> Values)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; MaxFrequency)</span><br><span class="line">        &#123;</span><br><span class="line">            MaxFrequency = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> CountMaxFrequency = <span class="number">0</span>;</span><br><span class="line">    ICollection Keys = sortedListArray.Keys;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">float</span> k <span class="keyword">in</span> Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(sortedListArray.IndexOfKey(k));</span><br><span class="line">        <span class="keyword">if</span> (MaxFrequency == <span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CountMaxFrequency++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span>[] getResult = <span class="keyword">new</span> <span class="built_in">float</span>[CountMaxFrequency];</span><br><span class="line">    <span class="built_in">int</span> tempindex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">float</span> k <span class="keyword">in</span> Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = (<span class="built_in">int</span>)sortedListArray.GetByIndex(sortedListArray.IndexOfKey(k));</span><br><span class="line">        <span class="keyword">if</span> (MaxFrequency == <span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            getResult[tempindex] = k;</span><br><span class="line">            tempindex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> resultSum = (<span class="built_in">float</span>)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; getResult.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        resultSum += getResult[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> result = resultSum / getResult.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="气层识别计算关键源码"><a href="#气层识别计算关键源码" class="headerlink" title="气层识别计算关键源码"></a>气层识别计算关键源码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ0</span>(<span class="params"><span class="built_in">float</span> AC, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((AC &gt; <span class="number">0</span> &amp;&amp; AC &lt; <span class="number">69</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (AC &gt; <span class="number">69</span> &amp;&amp; AC &lt; <span class="number">75</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">-0.4167</span> * AC + <span class="number">38.25</span>)) || (AC &gt; <span class="number">75</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AC &gt; <span class="number">0</span> &amp;&amp; AC &lt; <span class="number">62</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AC &gt;= <span class="number">62</span> &amp;&amp; AC &lt; <span class="number">69</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((AC &gt;= <span class="number">69</span> &amp;&amp; AC &lt;= <span class="number">75</span> &amp;&amp; RT &gt;= (<span class="number">-0.4167</span> * AC + <span class="number">38.25</span>)) || (AC &gt; <span class="number">75</span> &amp;&amp; RT &gt;= <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ1</span>(<span class="params"><span class="built_in">float</span> DEN, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((DEN &gt; <span class="number">2.53</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (DEN &gt; <span class="number">2.43</span> &amp;&amp; DEN &lt; <span class="number">2.53</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">27</span> * DEN - <span class="number">58.81</span>)) || (DEN &gt; <span class="number">0</span> &amp;&amp; DEN &lt; <span class="number">2.43</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.8</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEN &gt; <span class="number">2.65</span> &amp;&amp; DEN &lt; <span class="number">2.8</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEN &gt;= <span class="number">2.53</span> &amp;&amp; DEN &lt; <span class="number">2.65</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((DEN &gt;= <span class="number">2.53</span> &amp;&amp; DEN &lt;= <span class="number">2.65</span> &amp;&amp; RT &gt;= (<span class="number">27</span> * DEN - <span class="number">58.81</span>)) || (DEN &gt; <span class="number">0</span> &amp;&amp; DEN &lt; <span class="number">2.53</span> &amp;&amp; RT &gt;= <span class="number">6.8</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ2</span>(<span class="params"><span class="built_in">float</span> CNL, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((CNL &gt; <span class="number">0</span> &amp;&amp; CNL &lt; <span class="number">8.5</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9.5</span>) || (CNL &gt; <span class="number">8.5</span> &amp;&amp; CNL &lt; <span class="number">13</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">-0.6667</span> * CNL + <span class="number">15.167</span>)) || (CNL &gt; <span class="number">13</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.5</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CNL &gt; <span class="number">0</span> &amp;&amp; CNL &lt; <span class="number">5.9</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CNL &gt;= <span class="number">5</span> &amp;&amp; CNL &lt; <span class="number">8.5</span> &amp;&amp; RT &gt;= <span class="number">9.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CNL &gt;= <span class="number">8.5</span> &amp;&amp; CNL &lt;= <span class="number">13</span> &amp;&amp; RT &gt;= (<span class="number">-0.6667</span> * CNL + <span class="number">15.167</span>)) || (CNL &gt; <span class="number">13</span> &amp;&amp; RT &gt;= <span class="number">6.5</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ3</span>(<span class="params"><span class="built_in">float</span> RT, <span class="built_in">float</span> RS</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> RTS = <span class="number">0</span>;</span><br><span class="line">    RTS = RT / RS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6</span>) || (RT &gt; <span class="number">6</span> &amp;&amp; RT &lt; <span class="number">9</span> &amp;&amp; RTS &lt; (<span class="number">-0.4167</span> * RT + <span class="number">4.7</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">9</span> &amp;&amp; RTS &gt; <span class="number">0</span> &amp;&amp; RTS &lt; <span class="number">0.95</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt;= <span class="number">6</span> &amp;&amp; RT &lt;= <span class="number">9</span> &amp;&amp; RTS &gt;= (<span class="number">-0.4167</span> * RT + <span class="number">4.7</span>)) || (RT &gt; <span class="number">9</span> &amp;&amp; RTS &gt;= <span class="number">0.95</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ4</span>(<span class="params"><span class="built_in">float</span> AC, <span class="built_in">float</span> DEN, <span class="built_in">float</span> POR, <span class="built_in">float</span> RT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> PORAC = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORDEN = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORCNL = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">float</span> PORC = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PORAC = (<span class="built_in">float</span>)((AC - <span class="keyword">this</span>._poracma) / (<span class="keyword">this</span>._poracf - <span class="keyword">this</span>._poracma));</span><br><span class="line">    PORDEN = (<span class="built_in">float</span>)((DEN - <span class="keyword">this</span>._pordenma) / (<span class="keyword">this</span>._pordenf - <span class="keyword">this</span>._pordenma));</span><br><span class="line">    PORCNL = (<span class="built_in">float</span>)((POR - <span class="keyword">this</span>._porcnlma) / (<span class="keyword">this</span>._porcnlf - <span class="keyword">this</span>._porcnlma));</span><br><span class="line">    PORC = (PORDEN - PORAC) / <span class="number">2</span> - PORCNL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((PORC &lt; <span class="number">-0.02</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">7</span>) || (PORC &gt; <span class="number">-0.02</span> &amp;&amp; PORC &lt; <span class="number">0.0023</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; (<span class="number">89.686</span> * PORC + <span class="number">8.7937</span>)) || (PORC &gt; <span class="number">0.0023</span> &amp;&amp; RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">9</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PORC &gt; <span class="number">0.05</span> &amp;&amp; RT &gt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PORC &gt; <span class="number">0.0023</span> &amp;&amp; PORC &lt;= <span class="number">0.05</span> &amp;&amp; RT &gt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((PORC &lt; <span class="number">-0.02</span> &amp;&amp; RT &gt;= <span class="number">7</span>) || (PORC &gt;= <span class="number">-0.02</span> &amp;&amp; PORC &lt;= <span class="number">0.0023</span> &amp;&amp; RT &gt;= (<span class="number">89.686</span> * PORC + <span class="number">8.7937</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">POIGZ5</span>(<span class="params"><span class="built_in">float</span> RT, <span class="built_in">float</span> CMPR, <span class="built_in">float</span> POIS</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> ND = <span class="number">0</span>;</span><br><span class="line">    ND = (CMPR - <span class="keyword">this</span>._cmprmin) / (<span class="keyword">this</span>._cmprmax - <span class="keyword">this</span>._cmprmin) - (POIS - <span class="keyword">this</span>._poismin) / (<span class="keyword">this</span>._poismax - <span class="keyword">this</span>._poismin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((RT &gt; <span class="number">0</span> &amp;&amp; RT &lt; <span class="number">6.8</span>) || (RT &gt; <span class="number">6.8</span> &amp;&amp; RT &lt; <span class="number">10</span> &amp;&amp; ND &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">10</span> &amp;&amp; ND &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RT &gt;= <span class="number">6.8</span> &amp;&amp; ND &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件加载代码"><a href="#配置文件加载代码" class="headerlink" title="配置文件加载代码"></a>配置文件加载代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ID</span>&gt;</span>1106<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Name</span>&gt;</span>高温高压气层评价模块1<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>高温高压气层评价模块1<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LibraryFile</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU.dll<span class="tag">&lt;/<span class="name">LibraryFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ClassName</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU.MainProgressMethod<span class="tag">&lt;/<span class="name">ClassName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Code</span>&gt;</span>MainProgressMethod<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FunctionName</span>&gt;</span>OnNewProcessMethod<span class="tag">&lt;/<span class="name">FunctionName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromDeep</span>&gt;</span>false<span class="tag">&lt;/<span class="name">FromDeep</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StepIndex</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">StepIndex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Template</span>&gt;</span>Normal Template\BAIYUNSAG.plt<span class="tag">&lt;/<span class="name">Template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">CollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MaxAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MinAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MinAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VisualState</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageFile</span>&gt;</span>BaiyunSagSWPU.png<span class="tag">&lt;/<span class="name">ImageFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ID</span>&gt;</span>1107<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Name</span>&gt;</span>高温高压气层评价模块2<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>高温高压气层评价模块2<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LibraryFile</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU2.dll<span class="tag">&lt;/<span class="name">LibraryFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ClassName</span>&gt;</span>Cosl.ELIS.Process.BaiyunSagSWPU2.MainProgressMethod<span class="tag">&lt;/<span class="name">ClassName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Code</span>&gt;</span>MainProgressMethod<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FunctionName</span>&gt;</span>OnNewProcessMethod<span class="tag">&lt;/<span class="name">FunctionName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromDeep</span>&gt;</span>false<span class="tag">&lt;/<span class="name">FromDeep</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StepIndex</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">StepIndex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Template</span>&gt;</span>Normal Template\BAIYUNSAG.plt<span class="tag">&lt;/<span class="name">Template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">CollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MaxAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MinAllowedCollapseState</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">MinAllowedCollapseState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VisualState</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageFile</span>&gt;</span>BaiyunSagSWPU2.png<span class="tag">&lt;/<span class="name">ImageFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">白云凹陷珠江组-恩平组高温高压低渗气层测井评价-软件核心代码</summary>
    
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/categories/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记5</title>
    <link href="http://hibiscidai.com/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
    <id>http://hibiscidai.com/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</id>
    <published>2022-01-10T12:00:00.000Z</published>
    <updated>2022-05-12T14:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记5"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记5</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记5"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记5" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记5"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记5</h1><h1 id="第十七章-Java数据库程序设计"><a href="#第十七章-Java数据库程序设计" class="headerlink" title="第十七章 Java数据库程序设计"></a>第十七章 Java数据库程序设计</h1><h2 id="关系数据库系统"><a href="#关系数据库系统" class="headerlink" title="关系数据库系统"></a>关系数据库系统</h2><p><code>数据库</code>是按照一定的数据结构来组织、存储和管理数据的仓库；<br><code>数据库管理系统</code>（Data BaseManagement System, DBMS）是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库；<br><code>数据库系统</code>（database system）由数据库、数据库管理系统以及应用程序组成。</p><p>应用程序视为用户与数据库之间的接口。</p><img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="应用程序与数据库之间的关系"><p>大多数数据库系统都是关系数据库系统。它们都是基于关系数据模型的，这种模型有三个要素：<code>结构</code>、<code>完整性</code>和<code>语言</code>。</p><p><code>结构</code>定义了数据的表示；<br><code>完整性</code>是一些对数据的约束，所谓约束就是当向数据库中输入数据时所必须遵守的规则，所以约束也称为限制条件；<br><code>语言</code>则提供了访问和操纵数据的手段。</p><h3 id="数据库与数据库表"><a href="#数据库与数据库表" class="headerlink" title="数据库与数据库表"></a>数据库与数据库表</h3><p>一个关系型数据库通常是由一个或多个二维数据库表组成，数据库中的二维数据库表简称表。</p><p>数据库中的所有数据和信息都被保存在这些表中。</p><p>数据库中的每个表都具有唯一的表名称，表中的行称为<code>记录</code>，列称为<code>字段</code>。</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>完整性约束是对表强加了一个限制条件，表中的所有合法值都必须满足该条件。</p><p>完整性约束有三种类型：域约束、主码约束和外码约束。<br>域约束和主码约束只涉及一个表，而外码约束则涉及多个表。</p><h4 id="域约束"><a href="#域约束" class="headerlink" title="域约束"></a>域约束</h4><p>域就是字段的取值范围，域约束就是规定一个表的字段的允许取值。</p><h4 id="主码约束"><a href="#主码约束" class="headerlink" title="主码约束"></a>主码约束</h4><p>主码也称为主键，是表中用于唯一确定一条记录的一个字段或最小的字段组。<br>主码可以由一个字段组成，也可以是由多个字段共同组成，由多个字段共同组成的主码称为复合主码。<br>若一个表中存在多个可以作为主码的字段，则称这些字段为候选码或候选键。</p><h4 id="外码约束"><a href="#外码约束" class="headerlink" title="外码约束"></a>外码约束</h4><p>若一个表的某个字段（或字段组合）不是该表的主码，却是另一个表的主码，则称这样的字段为该表的外码或外键。外码是表与表之间的纽带。</p><blockquote><p>所有关系数据库系统都支持主码约束和外码约束。但不是所有数据库系统都支持域约束。</p></blockquote><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><code>结构化查询语言</code>（Structured Query Language, SQL）是用来定义表和完整性约束以及访问和操纵数据库的语言，它是访问关系数据库的通用语言。</p><p><code>[]</code>：表示可选项，即方括号中的内容可以根据需要进行选择；不选用时，则使用系统的默认值。方括号本身不是SQL语句的一部分，所以输入时不要输入方括号本身。<br><code>&#123;&#125;</code>：表示必选项，即大括号中的内容必须要提供。在实际操作时也不要输入大括号本身。<br><code>&lt; &gt;</code>：表示尖括号中的内容是用户必须提供的参数。输入时不要输入尖括号本身。<br><code>|</code>：表示只能选一项，竖线分隔多个选择项，用户必须选择其中之一。<br><code>[，...n]</code>：表示前面的项可重复n次，相互之间以逗号隔开。</p><blockquote><p>SQL的关键字不区分大小写。<br>SQL中不区分字符型和字符串型量，而统一定义为字符串型量，字符串型常量的定界符既可使用单引号也可使用双引号。</p></blockquote><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE StudentScore;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>][,<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>]]...[,<span class="operator">&lt;</span>表级完整性约束<span class="operator">&gt;</span>]);</span><br></pre></td></tr></table></figure><p><code>&lt;表名&gt;</code>：要创建的表的名字，表名在同一数据库中不允许重名。<br><code>&lt;字段名&gt;</code>：字段名字。<br><code>&lt;数据类型&gt;</code>：指定字段的数据类型，对有些数据类型还需同时给出其长度、小数位数。<br><code>&lt;字段级完整性约束&gt;</code>：字段完整性约束条件，主要有如下几种：NULL和NOT NULL：限制字段可以为NULL（空），或者不能为NULL；PRIMARY KEY：设置字段为主码；UNIQUE：设置字段值具有唯一性。<br><code>&lt;表级完整性约束&gt;</code>：表级完整性约束条件所使用的关键字与字段级完整性约束相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="title function_">Student</span><span class="params">(sNo CHAR(<span class="number">9</span>)</span> NOT NULL PRIMARY KEY, sName <span class="title function_">CHAR</span><span class="params">(<span class="number">12</span>)</span> NOT NULL, sex <span class="title function_">CHAR</span><span class="params">(<span class="number">2</span>)</span>, age INT, dept <span class="title function_">CHAR</span><span class="params">(<span class="number">50</span>)</span>); <span class="comment">//创建表Student, sNo为主码</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">Course</span><span class="params">(cNo CHAR(<span class="number">9</span>)</span> NOT NULL PRIMARY KEY, cName <span class="title function_">CHAR</span><span class="params">(<span class="number">30</span>)</span></span><br><span class="line">NOT NULL, credit INT);<span class="comment">//创建表Course, cNo为主码</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">Score</span><span class="params">(sNo CHAR(<span class="number">9</span>)</span> NOT NULL, cNo <span class="title function_">CHAR</span><span class="params">(<span class="number">6</span>)</span> NOT NULL, grade FLOAT, PRIMARY <span class="title function_">KEY</span><span class="params">(sNo, cNo)</span>);<span class="comment">//创建表Score,字段组sNo和cNo为复合主码</span></span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">ALTER</span> COLUDMN <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="operator">&lt;</span>字段级完整性约束<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>]<span class="operator">|</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>完整性约束<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>ALTER COLUMN子句</code>：修改表中已有字段的定义。<br><code>ADD COLUMN子句</code>：增加新字段及相应的完整性约束条件。<br><code>DROP COLUMN子句</code>：在该表中删除该子句中给出的字段。<br><code>DROP CONSTRAINT子句</code>：删除指定的完整性约束条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>利用<span class="keyword">SQL</span>语句给Student表添加一个字符型的电话字段phone,长度为<span class="number">11</span>个字符。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> phone <span class="type">CHAR</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure><h3 id="表数据操作"><a href="#表数据操作" class="headerlink" title="表数据操作"></a>表数据操作</h3><p>SQL的数据操作语言（Data Manipulation Language, DML）的功能，包括向表中插入数据、修改数据、删除数据和查询数据等，对应操作所使用的命令为INSERT（ 插入） 、UPDATE（修改）、DELETE（删除）和SELECT（查询）等。</p><h4 id="插入数据-INSERT"><a href="#插入数据-INSERT" class="headerlink" title="插入数据-INSERT"></a>插入数据-INSERT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>字段名[,<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>]...<span class="operator">&gt;</span>)]<span class="keyword">VALUES</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>值<span class="operator">&gt;</span>]...);</span><br></pre></td></tr></table></figure><p><code>&lt;表名&gt;</code>：要添加新记录的表。<br><code>&lt;字段名&gt;</code>：可选项，指定待添加数据的字段。<br><code>VALUES子句</code>：指定待添加数据的具体值。当指定字段名时，VALUES子句中值的排列顺序必须和字段名的排列顺序一致；若不指定字段，则VALUES子句中值的排列顺序必须与创建表字段时的排列顺序一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中插入一条学生记录，学号：<span class="number">201201009</span>，姓名：王毅，性别：男，年龄：<span class="number">18</span>，系别：外语。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(sNo, sName, sex, age, dept)<span class="keyword">VALUES</span>(<span class="string">&#x27;201201009&#x27;</span>, <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;外语&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据-UPDATE"></a>修改数据-UPDATE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span><span class="keyword">SET</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[, <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>SET子句</code>：给出要修改的字段及其修改后的值。<br><code>WHERE子句</code>：指定待修改的记录应当满足的条件。WHERE子句省略时，则修改表中所有记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student <span class="keyword">SET</span> dept<span class="operator">=</span><span class="string">&#x27;金融&#x27;</span> <span class="keyword">WHERE</span> sNo<span class="operator">=</span><span class="string">&#x27;201201009&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除数据-DELETE"><a href="#删除数据-DELETE" class="headerlink" title="删除数据-DELETE"></a>删除数据-DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p><code>WHERE子句</code>：指定待删除的记录应当满足的条件。WHERE子句省略时，则删除表中所有记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中删除学号为<span class="number">201201009</span>的学生记录。</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> sNo<span class="operator">=</span><span class="string">&#x27;201201009&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="数据查询-SELECT"><a href="#数据查询-SELECT" class="headerlink" title="数据查询-SELECT"></a>数据查询-SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>][TOP n [<span class="keyword">PERCENT</span>]]&#123; <span class="operator">*</span> <span class="operator">|</span>&#123;<span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">|</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span><span class="operator">|</span>&#125;</span><br><span class="line">[[<span class="keyword">AS</span>]<span class="operator">&lt;</span>别名<span class="operator">&gt;</span>]<span class="operator">|</span><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>[[<span class="keyword">AS</span>]<span class="operator">&lt;</span>别名<span class="operator">&gt;</span>]&#125;[...n]&#125;</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>查询条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>字段名表<span class="operator">&gt;</span>[<span class="keyword">HAVING</span> <span class="operator">&lt;</span>分组条件<span class="operator">&gt;</span>]]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>次序表达式<span class="operator">&gt;</span>[ASCI <span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><p><code>ALL</code>：指定在结果集中显示所有记录，包括重复行。ALL是默认设置。<br><code>DISTINCT</code>：指定在结果集中显示所有记录，但不包括重复行。<br><code>TOP n[PERCENT]</code>：指定从结果集中输出前n行，如果指定了PERCENT，表示从结果集中输出<br>前百分之n行。<br><code>∗</code>：指定返回查询表中的所有字段。<br><code>&lt;字段名&gt;</code>：指定要返回的字段。<br><code>&lt;表达式&gt;</code>：返回由字段名、常量、函数以及运算符连接起来的表达式的值。<br><code>&lt;别名&gt;</code>：指定在结果集中用”别名”来替换字段名或表达式进行显示。<br><code>FROM子句</code>：用于指定查询的表或视图。<br><code>WHERE子句</code>：用于设置查询条件。<br><code>GROUP BY子句</code>：指明按照<code>&lt;字段名表&gt;</code>中的值进行分组，该字段的值相同的记录为一个组。分组后每个组只返回一行结果。如果GROUP子句带HAVING子句，则只有满足HAVING指定条件的组才予以输出。如果GROUP BY后有多个字段名，则先按第一个字段分组，再按第二个字段分组，依次类推。<br><code>HAVING子句</code>：用来指定每一个分组内应该满足的条件，即对每个分组内的记录进行再筛选，它通常与GROUP BY子句一起使用。HAVING子句中的分组条件格式与WHERE子句中的条件格式类似。<br><code>ORDER BY子句</code>：将查询结果按指定的次序表达式的值升序或降序排列。次序表达式可以是字段名、字段的别名或表达式。ASC指定升序排列，DESC指定降序排列，默认排序方式为ASC。</p><blockquote><p>WHERE子句是对整个表中的数据筛选出满足条件的记录；<br>HAVING子句是对GROUP BY分组查询后产生的组设置的条件，所以是筛选出满足条件的组。<br>在HAVING子句中可以使用统计函数，而在WHERE子句则不能。<br>ORDER BY子句需放在SQL命令中的最后。</p></blockquote><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中只查询学生的学号sNo和姓名sName两个字段，并且字段名分别以别名“学号”和“姓名”进行显示。</span><br><span class="line"><span class="keyword">SELECT</span> sNo <span class="keyword">AS</span> 学号, sName <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> Student; <span class="operator">/</span><span class="operator">/</span>＂学号＂和＂姓名＂为别名</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li>WHERE常用的运算符及功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">= 、&gt; 、&lt; 、&gt;=、 &lt;=、 !=、 &lt; &gt;</td><td style="text-align:center">比较大小</td></tr><tr><td style="text-align:center">BETWEEN AND、NOT BETWEEN AND</td><td style="text-align:center">确定范围</td></tr><tr><td style="text-align:center">IN、NOT IN</td><td style="text-align:center">确定集合</td></tr><tr><td style="text-align:center">LIKE、NOT LIKE</td><td style="text-align:center">字符匹配</td></tr><tr><td style="text-align:center">IS NULL、IS NOT NULL</td><td style="text-align:center">判断空值</td></tr><tr><td style="text-align:center">AND、OR、NOT</td><td style="text-align:center">逻辑运算(多重条件查询)</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>确定范围运算符使用格式</span><br><span class="line">v <span class="keyword">BETWEEN</span> v1 <span class="keyword">AND</span> v2<span class="operator">/</span><span class="operator">/</span>v<span class="operator">&gt;=</span>v1 <span class="keyword">AND</span> v<span class="operator">&lt;=</span>v2</span><br><span class="line">v <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> v1 <span class="keyword">AND</span> v2<span class="operator">/</span><span class="operator">/</span>v<span class="operator">&lt;</span>v1 <span class="keyword">OR</span> v<span class="operator">&gt;</span>v2</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中查找计算机系的所有同学</span><br><span class="line"><span class="keyword">SELECT</span> ∗ <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h4><p>逻辑运算符的优先级由高到低为：NOT，AND，OR，可以使用括号改变其优先级。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在学生表Student中查找计算机系所有男同学。</span><br><span class="line"><span class="keyword">SELECT</span> ∗ <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>当查询条件不知道完全精确的值时，还可以使用LIKE或NOT LIKE进行模糊查询，模糊查询也称为部分匹配查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>[<span class="keyword">NOT</span>]<span class="keyword">LIKE</span> <span class="operator">&lt;</span>匹配串<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;字段名&gt;</code>必须是字符型的字段；<br><code>&lt;匹配串&gt;</code>可以是一个完整的字符串，也可以是包含通配符的字符串。</p><ul><li>模糊查询时字符串中的通配符及其功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:center">功能说明</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">%</td><td style="text-align:center">代表0个或多个字符</td><td style="text-align:center">‘ab%表示’ab’后可接任意字符串</td></tr><tr><td style="text-align:center">_ (下画线)</td><td style="text-align:center">代表一个字符</td><td style="text-align:center">‘a _ b’表示’a’与’b’之间可为任意单个字符</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">表示在某一范围内的字符</td><td style="text-align:center">[0-9]表示0~9的字符</td></tr><tr><td style="text-align:center">[ ^ ]</td><td style="text-align:center">表示不在某一范围内的字符</td><td style="text-align:center">[ ^ 0-9]表示不在0~9的字符</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ∗ FROM Student WHERE sName LIKE <span class="string">&#x27;李%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="常用的统计函数及统计汇总查询"><a href="#常用的统计函数及统计汇总查询" class="headerlink" title="常用的统计函数及统计汇总查询"></a>常用的统计函数及统计汇总查询</h4><p>在SQL中除了可以使用算术运算符+（加法）、—（减法）、∗（乘法）和 / （除法）外，SQL还提供了一系列统计函数。</p><ul><li>常用的统计函数及功能</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">AVG(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的平均值(必须是数值型列)</td></tr><tr><td style="text-align:center">SUM(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的总和(必领是数值型列)</td></tr><tr><td style="text-align:center">MAX(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的最大值</td></tr><tr><td style="text-align:center">MIN(&lt;字段名&gt;)</td><td style="text-align:center">求字段名所在列的最小值</td></tr><tr><td style="text-align:center">COUNT(+)</td><td style="text-align:center">统计表中记录的个数</td></tr><tr><td style="text-align:center">COUNT([DISTINCT] &lt;字段名&gt;)</td><td style="text-align:center">统计字段名所在列非空值的个数,DISTINCT表示不包括字段的重复值</td></tr></tbody></table></div><blockquote><p>上述函数中除COUNT(*)外，其他函数在计算过程中均忽略NULL值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中统计所有成绩grade的平均值。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(grade) <span class="keyword">AS</span>平均成绩 <span class="keyword">FROM</span> Score; <span class="operator">/</span><span class="operator">/</span>＂平均成绩＂是表达式<span class="built_in">AVG</span>(grade)的别名</span><br></pre></td></tr></table></figure><h4 id="ORDER-BY-字句"><a href="#ORDER-BY-字句" class="headerlink" title="ORDER BY 字句"></a>ORDER BY 字句</h4><p>ORDER BY是一个可选的子句，它允许根据指定字段的值按照升序或者降序的顺序显示查询结<br>果。其中默认为升序排列，用<code>ASC</code>表示，降序排列用<code>DESC</code>表示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中查询课程号cNo为c001的学生的学号sNo和成绩grade，并按成绩降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> sNo, grade <span class="keyword">FROM</span> Score <span class="keyword">WHERE</span> cNo<span class="operator">=</span><span class="string">&#x27;c001&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> grade <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h4 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h4><p>统计函数只能产生单一的汇总数据，使用GROUP BY子句，则可以生成分组的汇总数据。</p><p>GROUP BY子句可以按关键字段的值来组织数据，关键字段值相同的为一组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在成绩表Score中查询每门课程的课程号cNo和学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> cNo, <span class="built_in">COUNT</span>(∗) <span class="keyword">AS</span> 人数 <span class="keyword">FROM</span> Score <span class="keyword">GROUP</span> <span class="keyword">BY</span> cNo; <span class="operator">/</span><span class="operator">/</span>&quot;人数&quot;是别名</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC是为在Java程序中访问数据库而设计的一组Java API，是Java数据库应用程序开发中的一项核心技术。</p><h4 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h4><p>JDBC的含义是Java Database Connectivity，它是Java程序中访问数据库的标准API。</p><p>一般来说，JDBC做三件事：与数据库建立连接；发送SQL语句；处理SQL语句执行的结果。</p><h3 id="JDBC类型"><a href="#JDBC类型" class="headerlink" title="JDBC类型"></a>JDBC类型</h3><p>JDBC不能直接访问数据库，必须依赖于数据库厂商或第三方提供的JDBC驱动程序。</p><h4 id="类型1-JDBC-ODBC桥加ODBC驱动程序"><a href="#类型1-JDBC-ODBC桥加ODBC驱动程序" class="headerlink" title="类型1:JDBC-ODBC桥加ODBC驱动程序"></a>类型1:JDBC-ODBC桥加ODBC驱动程序</h4><p>JDBC-ODBC桥由Sun公司开发，是JDK提供的标准API。</p><p>于JDBC-ODBC桥先调用ODBC再由ODBC去调用本地数据库接口访问数据库，所以执行效率比较低。</p><p>需要客户端预装对应的ODBC驱动程序，所以不适合Internet/Intranet应用。</p><h4 id="类型2-本地API部分用Java编写的驱动程序"><a href="#类型2-本地API部分用Java编写的驱动程序" class="headerlink" title="类型2:本地API部分用Java编写的驱动程序"></a>类型2:本地API部分用Java编写的驱动程序</h4><p>是部分使用Java语言编写和部分使用本机代码编写的驱动程序，它将JDBC的调用直接翻译成对特定DBMS（如MySQL、SQL Server、Oracle等）客户端API的调用后再去访问数据库。</p><p>是用特定的DBMS客户端取代JDBC-ODBC桥和ODBC，因此也具有与JDBC-ODBC桥相类似的局限性。</p><h4 id="类型3-JDBC网络协议纯Java驱动程序√"><a href="#类型3-JDBC网络协议纯Java驱动程序√" class="headerlink" title="类型3:JDBC网络协议纯Java驱动程序√"></a>类型3:JDBC网络协议纯Java驱动程序√</h4><p>用纯Java语言编写。</p><p>它将JDBC的调用转换成与DBMS无关的网络协议命令，之后发送给一个网络服务器中的数据库中间件，该中间件进一步将网络协议命令转换成某种DBMS所能理解的操作命令。</p><p>网络协议是平台无关的。</p><p>种驱动程序不调用任何本地代码。</p><p>在服务器上配置有数据库驱动程序，并且由于多了一个中间件传递数据，它的执行效率还不是最好。</p><h4 id="类型4-本地协议纯Java驱动程序√"><a href="#类型4-本地协议纯Java驱动程序√" class="headerlink" title="类型4:本地协议纯Java驱动程序√"></a>类型4:本地协议纯Java驱动程序√</h4><p>将JDBC调用直接转换成特定DBMS所使用的网络协议，这将允许从客户机上直接调用DBMS服务器，访问速度快。</p><p>完全由Java语言实现，实现了平台的独立性。</p><p>但对于不同的数据库需要下载不同的驱动程序。</p><h3 id="使用JDBC开发数据库应用程序"><a href="#使用JDBC开发数据库应用程序" class="headerlink" title="使用JDBC开发数据库应用程序"></a>使用JDBC开发数据库应用程序</h3><p>JDBC API主要位于Java的<code>java.sql</code>包与<code>javax.sql</code></p><ul><li>JDBC中主要的类与接口</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类与接口</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">DriverManager</td><td style="text-align:center">负责加载各种不同驱动程序(driver)并根据不同的请求。向调用者返回相应的数据库连接(conneetion)</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">数据库连接,负责与数据库间进行通信,SQL执行以及事务处理都是在某个特定连接环境中进行的,并可以产生用以执行SQL的Statement对象</td></tr><tr><td style="text-align:center">Statement</td><td style="text-align:center">用以执行不含参数的静态SQL查询和更新,并返回执行结果</td></tr><tr><td style="text-align:center">PreparedStatement</td><td style="text-align:center">用以执行包含参数的动态SQL查询和更新(在服务器端编译,允许重复执行以提高效率</td></tr><tr><td style="text-align:center">CallableStatement</td><td style="text-align:center">用以调用数据库中的存储过程</td></tr><tr><td style="text-align:center">ResultSet</td><td style="text-align:center">用以获得SQL查询结果</td></tr><tr><td style="text-align:center">SQLException</td><td style="text-align:center">代表在数据库连接的建立。关闭或SQL语句的执行过程中发生了异常</td></tr></tbody></table></div><blockquote><p>JDBC驱动程序开发商已提供了对这些接口的实现类，所以在使用时实际上是调用这些接口实现类中的方法。</p></blockquote><h4 id="建立与数据库的链接"><a href="#建立与数据库的链接" class="headerlink" title="建立与数据库的链接"></a>建立与数据库的链接</h4><p>数据库连接的建立包括两个步骤：<br>一是加载相应数据库的JDBC驱动程序；<br>二是创建数据库连接。</p><h5 id="加载JDBC驱动程序"><a href="#加载JDBC驱动程序" class="headerlink" title="加载JDBC驱动程序"></a>加载JDBC驱动程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class.forName(JDBCDriverClass);</span><br></pre></td></tr></table></figure><p>该方法是Class类的静态方法，参数JDBCDriverClass是要加载的JDBC驱动程序类的名称，它是以字符串形式表达的类名。</p><ul><li>数据库的驱动程序类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">驱动程序类</th><th style="text-align:center">所在包</th></tr></thead><tbody><tr><td style="text-align:center">Access</td><td style="text-align:center">sun.jdbc.odbe.JdbcOdbeDriver</td><td style="text-align:center">捆绑JDK</td></tr><tr><td style="text-align:center">SQL Server</td><td style="text-align:center">com.microsoft.sqlserver.jdbc.SQLServerDriver</td><td style="text-align:center">sqljdbc42.jar</td></tr><tr><td style="text-align:center">MySQL</td><td style="text-align:center">com.mysql.jdbc.Driver</td><td style="text-align:center">mysql-connector-java-5.1.45-bin.jar</td></tr><tr><td style="text-align:center">Oracle</td><td style="text-align:center">oracle.jdbc.driver.OracleDriver</td><td style="text-align:center">ojdbc6.jar</td></tr></tbody></table></div><h5 id="创建数据库连接"><a href="#创建数据库连接" class="headerlink" title="创建数据库连接"></a>创建数据库连接</h5><p>由于JDBC驱动程序与数据库的连接是以对象的形式表示的，所以创建数据库连接也称创建数据库连接对象。</p><ul><li>DriverManager类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static Conection getConnection(String url, String user, String password)</td><td style="text-align:center">建立JDBC驱动程序到指定数据库URL的连接。其中url提供了一种标识数据库的方法，user为用户名，password为密码</td></tr><tr><td style="text-align:center">public static Driver getDriver(Stringurl)</td><td style="text-align:center">返回url所指定的数据库连接的驱动程序</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(String url, String user, String password);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc: &lt; subprotocol &gt; : &lt; subname &gt;</span><br></pre></td></tr></table></figure><p><code>&lt; subprotocol &gt;</code>是子协议，指数据库连接的方式；<br><code>&lt; subname &gt;</code>是子名称，是一种标识数据库的方法。</p><ul><li>数据库的URL</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">URL</th></tr></thead><tbody><tr><td style="text-align:center">Access</td><td style="text-align:center">jdbc:odbe:dataSource</td></tr><tr><td style="text-align:center">SQL Server</td><td style="text-align:center">jdbc:sqLserver://hostname:port#;DatabaseName-dbname</td></tr><tr><td style="text-align:center">MySQL</td><td style="text-align:center">jdbc:mysl://hostname/dbname</td></tr><tr><td style="text-align:center">Oracle</td><td style="text-align:center">jdbc:oracle:thin:@hostname:port#:oracleDBSID</td></tr></tbody></table></div><p>1）Access数据库的URL是<code>jdbc:odbc:dataSource</code>。ODBC数据源可以使用Windows下的<br>ODBC数据源管理器（data source administrator）来创建。</p><p>2）SQL Server数据库的URL指定包含数据库的主机名（hostname）、数据库监听输入连接<br>请求的端口号（port#）和数据库名（dbname）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection (<span class="string">&quot;jdbc:sqlserver://1ocalhost:1433;DatabaseName=StudentScore&quot;</span>,<span class="string">&quot;sa&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>3）MySQL数据库的URL指定包含数据库的主机名（hostname）和数据库名（dbname）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConection(<span class="string">&quot;jdbe:mysql://localhost/StudentScore&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>4）Oracle数据库的URL指定主机名（hostname）、数据库监听输入连接请求的端口号<br>（ port# ） 以及数据库名（ oracleDBSID ） 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:StudentScore&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Connection接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Statement createStatement()</td><td style="text-align:center">创建一个Statement对象用束将SQL语句发送到数据库</td></tr><tr><td style="text-align:center">public Statement createStatement(int resultSetType, int resultSetConcurreney)</td><td style="text-align:center">功能同上，参数resultSetType指定结果集类型，有三个取值：<br />TYPE_FORWORD_ONLY表示只可向前移动记录指针;<br />TYPE_SCROLL_INSENSITIVE表示可双向移动记录指针，但不及时更新，也就是如果数据库中的数据修改过，并不在ResultSet中反映出来；<br />TYPE_SCROLL_SENSITIVE表示可双向移动记录指针，并及时跟踪据库的更新，以便更改ResultSet中的数据。<br />参数resultSetConcurreney指定结果集的并发模式，有两个取值：<br />CONCUR_READ_ONLY表示不能用结果集更新数据库中的表；<br /> CONCUR_UPDATABLE表示能用结果集更新数据库中的表</td></tr><tr><td style="text-align:center">public PreparedStatement prepareStatement(String sql)</td><td style="text-align:center">创建一个PreparedStatement对象来将具有参数的动态SQL语句发送到数据库</td></tr><tr><td style="text-align:center">public CallableStatement prepareCall(String sql)</td><td style="text-align:center">创建一个CallableStatement对象来调用数据库的存储过程</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">断开连接，释放此Conneetion对象的数据库和JDBC资源</td></tr><tr><td style="text-align:center">public boolean isClosed()</td><td style="text-align:center">用于判断Connetion对象是否已经被关闭</td></tr><tr><td style="text-align:center">public void setAutoCommit(boolean autoCommit)</td><td style="text-align:center">设置是否关闭自动提交模式</td></tr><tr><td style="text-align:center">public void commit()</td><td style="text-align:center">提交SQL语句，使从上一次提交/回滚以来进行的所有更改生效</td></tr><tr><td style="text-align:center">public void rollback()</td><td style="text-align:center">取消SQL语句的执行，撤销在当前事务中进行的所有更改</td></tr></tbody></table></div><h4 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h4><p>执行SQL语句包括两个步骤：<br>一是创建Statement对象；<br>二是通过调用该对象的相应方法将SQL语句发送到所连接的数据库去执行。</p><h5 id="创建Statement对象"><a href="#创建Statement对象" class="headerlink" title="创建Statement对象"></a>创建Statement对象</h5><p>创建一个Statement接口对象，该对象将各种SQL语句发送到所连接的数据库中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure><h5 id="调用Statement对象的相应方法将SQL语句发送到所连接的数据库"><a href="#调用Statement对象的相应方法将SQL语句发送到所连接的数据库" class="headerlink" title="调用Statement对象的相应方法将SQL语句发送到所连接的数据库"></a>调用Statement对象的相应方法将SQL语句发送到所连接的数据库</h5><p>如果SQL语句运行后产生结果集，Statement对象会将结果集封装成ResultSet对象并返回。</p><ul><li>Statement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ResultSet executeQuery(String sql)</td><td style="text-align:center">执行给定的SQL语句，并将结果封装在结果集ResultSet对象中返回</td></tr><tr><td style="text-align:center">public int executeUpdate(String sql)</td><td style="text-align:center">执行给定的SQL语句，该语句可能是INSERT、UPDATE或DELETE或是不返回任何内容的SQL语句(如DDL语句)。该语句的返回值是一个整数，表示受影响的行数(即更新计数)</td></tr><tr><td style="text-align:center">public boolean execute(String sql)</td><td style="text-align:center">执行给定的SQL语句。如果执行的是SELECT语句，则返回true，调用getResultSet()方法获得执行SQL语句的返回结果；如果执行的是INSERT、UPDATE或DELETE，或者不返回任何内容的SQL语旬，则返回false，调用getUpdateCount()方法获得执行SQL语句的返回结果</td></tr><tr><td style="text-align:center">public ResultSet getResultSet()</td><td style="text-align:center">以ResultSet对象的形式返回当前结果。如果结果是更新计数(即执行executeUpdate()方法)或没有结果，则返回null</td></tr><tr><td style="text-align:center">以更新计数的形式返回当前结果;如果结果为ResultSet 对象或</td></tr><tr><td style="text-align:center">public int getUpdateCount()</td><td style="text-align:center">没有更多结果,则返回-1。每个结果只应调用一次该方法</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">释放此Statement对象的数据库和JDBC资源</td></tr></tbody></table></div><blockquote><p>在executeQuery()与executeUpdate()方法中的字符串参数，如果超出一行将出现编译错误，所以在构造SQL参数时，需要将表达多行的字符串加上双引号并将各行用加号“+”连接起来。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;SELECT sNo,sName,sex,age FROM Student WHERE dept=&#x27;计算机&#x27;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sqlStr);<span class="comment">//执行查询操作并将查询结果存放到ResultSet对象rs中</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO Student(sNo,sName,sex,age,dept)＂+</span></span><br><span class="line"><span class="string">&quot;</span>VALUES(<span class="string">&#x27;201201009&#x27;</span>,<span class="string">&#x27;王毅&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;外语&#x27;</span>)<span class="string">&quot;;</span></span><br><span class="line"><span class="string">stmt.executeUpdate(sqlStr);</span></span><br></pre></td></tr></table></figure><h4 id="处理返回结果"><a href="#处理返回结果" class="headerlink" title="处理返回结果"></a>处理返回结果</h4><p>结果集是包含SQL的SELECT语句中符合条件的所有行，这些行的全体称为结果集，返回的结果集是一个表，而这个表就是ResultSet接口的对象。</p><p>在结果集中通过记录指针（也称为游标）控制具体记录的访问，记录指针指向结果集的当前记录。在结果集中可以使用getXXX()方法从当前行获取值。</p><ul><li>ResultSet接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean absolute(int row)</td><td style="text-align:center">将记录指针移动到结果集的第row条记录</td></tr><tr><td style="text-align:center">public boolean relative(int row)</td><td style="text-align:center">按相对行数(或正或负)移动记录指针</td></tr><tr><td style="text-align:center">public void beforFirst()</td><td style="text-align:center">将记录指针移动到结果集的头(第一条记录之前)</td></tr><tr><td style="text-align:center">public boolean first()</td><td style="text-align:center">将记录指针移动到结果集的第一条记录</td></tr><tr><td style="text-align:center">public boolean previous()</td><td style="text-align:center">将记录指针从结果集的当前位置移动到上一条记录</td></tr><tr><td style="text-align:center">public boolean next()</td><td style="text-align:center">将记录指针从结果集的当前位置移动到下一条记录</td></tr><tr><td style="text-align:center">public boolean last()</td><td style="text-align:center">将记录指针移动到结果集的最后一条记录</td></tr><tr><td style="text-align:center">public void afterLast()</td><td style="text-align:center">将记录指针移动到结果集的尾(最后一条记录之后)</td></tr><tr><td style="text-align:center">public boolean isAfterlLast()</td><td style="text-align:center">判断记录指针是否位于结果集的尾(最后一条记录之后)</td></tr><tr><td style="text-align:center">public boolean isBeforeFirst()</td><td style="text-align:center">判断记录指针是否位于结果集的头(第一条记录之前)</td></tr><tr><td style="text-align:center">public boolean isFirst()</td><td style="text-align:center">判断记录指针是否位于结果集的第一条记录</td></tr><tr><td style="text-align:center">public boolean isLast()</td><td style="text-align:center">判断记录指针是否位于结果集的最后一条记录</td></tr><tr><td style="text-align:center">public int getRow()</td><td style="text-align:center">返回当前记录的行号</td></tr><tr><td style="text-align:center">public String getString(String columnLabel)</td><td style="text-align:center">返回当前记录字段名为columnLabel的值</td></tr><tr><td style="text-align:center">public String getString(int columnIndex)</td><td style="text-align:center">返回当前行第columnIndex列的值，类型为String</td></tr><tr><td style="text-align:center">public int getInt(int columnIndex)</td><td style="text-align:center">返回当前行第columnIndex列的值，类型为int</td></tr><tr><td style="text-align:center">public Statement getStatement()</td><td style="text-align:center">返回生成结果集的Statement对象</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">释放此ResultSet对象的数据库和JDBC资源</td></tr><tr><td style="text-align:center">public ResdtSetMetaData getMetaData()</td><td style="text-align:center">返回结果集的列的编号、类型和属性</td></tr></tbody></table></div><p>记录指针的最初始位置位于第一条记录之前，即结果集的头。</p><p>第一次调用next()方法使记录指针移到第一条记录，当记录指针移动到结果集的尾时其返回false。</p><p>在使用ResultSet对象的getXXX()方法对结果集中的数据进行访问时，一定要使数据库中字段的数据类型与Java的数据类型相匹配。</p><p>使用<code>Statement stmt = conn.createStatement();</code>语句，虽然可以得到Statement<br>类的对象stmt，通过语句<code>ResultSet rs = stmt.executeQuert(&quot;SELECT∗FROM Student&quot;);</code>也可以得到相应的结果集rs，但这种类型的结果集rs不能来回移动记录指针读取记录。如果需要来回移动记录指针读取结果集，创建Statement语句的时候需要使用如下带参数的方法定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">(<span class="type">int</span> resultSetType, <span class="type">int</span> resultSetConcurrency)</span>;</span><br><span class="line"></span><br><span class="line">conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);</span><br></pre></td></tr></table></figure><ul><li>常用的SQL数据类型与Java数据类型之间的对应关系</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">SQL数据类型</th><th style="text-align:center">Java数据类型</th><th style="text-align:center">结果集中对应的方法</th></tr></thead><tbody><tr><td style="text-align:center">integer/ int</td><td style="text-align:center">int</td><td style="text-align:center">getInt()</td></tr><tr><td style="text-align:center">smallint</td><td style="text-align:center">short</td><td style="text-align:center">getShort()</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">double</td><td style="text-align:center">getDouble()</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">double</td><td style="text-align:center">getDouble()</td></tr><tr><td style="text-align:center">real</td><td style="text-align:center">float</td><td style="text-align:center">getFloat()</td></tr><tr><td style="text-align:center">varchar/char/varchar2</td><td style="text-align:center">java.lang.String</td><td style="text-align:center">getString()</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">boolean</td><td style="text-align:center">getBoolean()</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">java.sql.Date</td><td style="text-align:center">getDate()</td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">java.sql.Time</td><td style="text-align:center">getTime()</td></tr><tr><td style="text-align:center">blob</td><td style="text-align:center">java.sql.Blob</td><td style="text-align:center">getBlob()</td></tr><tr><td style="text-align:center">clob</td><td style="text-align:center">java.sql.Clob</td><td style="text-align:center">getClob()</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在使用getXXX()方法进行取值时，可以通过字段名或列号来标识要获取数据的列。</span></span><br><span class="line"><span class="comment">//下面两条语句的作用是一样的，都是读取当前行中sNo字段的内容。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;sNo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ResultSet中，字段是从左至右编号的，并且从1开始。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> rs.getString(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="关闭创建的各种对象"><a href="#关闭创建的各种对象" class="headerlink" title="关闭创建的各种对象"></a>关闭创建的各种对象</h4><p>关闭的次序是：<br>①关闭结果集对象；<br>②关闭Statement对象；<br>③关闭连接对象。</p><blockquote><p>在任一时间内，一个给定的Statement对象只能打开一个结果集。当重新使用同一个Statement对象时，将会关闭先前生成的任何结果集。<br>在重新执行Statement对象之前，需要完成对当前ResultSet对象的处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(rs!=<span class="literal">null</span>) rs.close();    <span class="comment">//关闭结果集对象</span></span><br><span class="line">    <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) stmt.close();    <span class="comment">//关闭Statement对象</span></span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="literal">null</span>) conn.close();    <span class="comment">//关闭JDBC与数据库的连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库的进一步操作"><a href="#数据库的进一步操作" class="headerlink" title="数据库的进一步操作"></a>数据库的进一步操作</h3><p>JDBC中执行SQL对表的查询有三种方式：<br>不含参数的静态查询（静态SQL语句）：Statement；<br>含有参数的动态查询（动态SQL语句）：PreparedStatement；<br>存储过程调用：CallableStatement。</p><h4 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h4><p>谓静态SQL语句是指在执行executeQuery()、executeUpdate()等方法时，作为参数的SQL语句的内容固定不变，也就是SQL语句中没有参数。</p><h4 id="PreparedStatement接口"><a href="#PreparedStatement接口" class="headerlink" title="PreparedStatement接口"></a>PreparedStatement接口</h4><p>就是可以在SQL语句中提供参数，这使得可以对相同的SQL语句替换参数从而多次使用。<br><code>预编译语句</code>：先让数据库管理系统在内部通过预先编译，形成带参数的内部指令，并保存在PreparedStatement接口的对象中。提高程序的执行效率。</p><p>PreparedStatement对象也可用于执行不带参数的预编译的SQL语句。</p><ul><li>PreparedStatement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean execute()</td><td style="text-align:center">执行任何种类的SQL的语句，可能会产生多个结果集</td></tr><tr><td style="text-align:center">public ResultSet executeQuery()</td><td style="text-align:center">执行SQL查询命令SELECT并返回结果集</td></tr><tr><td style="text-align:center">public int executeUpdate()</td><td style="text-align:center">执行修改的SQL指令如INSERT、DELETE、UPDATE等</td></tr><tr><td style="text-align:center">public ResultSetMetaData getMetaData()</td><td style="text-align:center">返回结果集ResultSet的有关字段的信息</td></tr><tr><td style="text-align:center">public void clearParameters()</td><td style="text-align:center">清除当前所有参数的值</td></tr><tr><td style="text-align:center">public void setBoolean(int parameterIndex, boolean x)</td><td style="text-align:center">给第parameterIndex个参数设置boolean型值x</td></tr><tr><td style="text-align:center">public void setInt(int parameterIndex, int x)</td><td style="text-align:center">给第parameterIndex个参数设置int型值x</td></tr><tr><td style="text-align:center">public void setDouble (int parameterIndex, double x)</td><td style="text-align:center">给第parameterIndex个参数设置double型值x</td></tr><tr><td style="text-align:center">public void setString (int parameterlndex, String x)</td><td style="text-align:center">给第parameterIndex个参数设置String型值x</td></tr><tr><td style="text-align:center">public void setDate(int parameterIndex, Date x)</td><td style="text-align:center">给第parameterIndex个参数设置Date型值x</td></tr><tr><td style="text-align:center">public void setObject (int parameterIndex, Object x)</td><td style="text-align:center">给第parameterIndex个参数设置Object型值x</td></tr></tbody></table></div><p>可通过Connection的<code>prepareStatement()</code>方法创建<code>PreparedStatement</code>对象。在创建用于<code>PreparedStatement</code>对象的动态SQL语句时，可使用<code>?</code>作为动态参数的占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">insertSql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO Student(sNo,sName,sex,age,dept)VALUES(?,?,?,?,?);&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(insertSql);</span><br></pre></td></tr></table></figure><p>在执行带参数的SQL语句前，必须对<code>?</code>进行赋值。这可以通过使用setXXX()方法，通过占位符的下标完成对输入参数的赋值（下标是从1开始的），XXX根据不同的数据类型进行选择。</p><h4 id="CallableStatement-接口"><a href="#CallableStatement-接口" class="headerlink" title="CallableStatement 接口"></a>CallableStatement 接口</h4><p>存储过程是一组SQL语句，它们形成一个相对独立的逻辑单元，能完成特定的任务。</p><p>该接口可以处理一般的SQL语句，也可以处理IN（输入）参数，同时它还定义了OUT（输出）参数及INOUT（输入输出）参数的处理方法</p><p>IN（输入）：接收传递给存储过程的值；<br>OUT（输出）：用于存储过程执行结束后接收一个返回值，所以在调用存储过程时，不需要向OUT参数传递任何值；<br>INOUT（输入输出）：当存储过程被调用时，需要向该参数传递一个值，当存储过程执行完后该参数还将接收一个返回值；</p><ul><li>CallableStatement接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void setInt( String parameterName,int x)</td><td style="text-align:center">将名为parameterName的参数设置为int型值x</td></tr><tr><td style="text-align:center">public void setFloat(String parameterName,float x)</td><td style="text-align:center">将名为parameterName的参数设置为float 型值x</td></tr><tr><td style="text-align:center">public void setDouble(String parameterName, double x)</td><td style="text-align:center">将名为parameterName的参数设置为double型值x</td></tr><tr><td style="text-align:center">public void set Boolean(String parameterName, boolean x)</td><td style="text-align:center">将名为parameterName的参数设置为boolean型值x</td></tr><tr><td style="text-align:center">public void setString(String parameterName, String x)</td><td style="text-align:center">将名为parameterName的参数设置为String 型值x</td></tr><tr><td style="text-align:center">public void setDate(String parameterName, Date x)</td><td style="text-align:center">将名为parameterName的参数设置为Date型值x</td></tr><tr><td style="text-align:center">public void setObject (String parameterName, Object x)</td><td style="text-align:center">将名为parameterName的参数设置为Object型值x</td></tr><tr><td style="text-align:center">public int getInt(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数int型值</td></tr><tr><td style="text-align:center">public int getInt(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的int 型值</td></tr><tr><td style="text-align:center">public float getFloat(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数float型值</td></tr><tr><td style="text-align:center">public float getFloat(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的float型值</td></tr><tr><td style="text-align:center">public double getDouble(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数double型值</td></tr><tr><td style="text-align:center">public double getDouble(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的double型值</td></tr><tr><td style="text-align:center">public String getString(int parameterIndex)</td><td style="text-align:center">返回第parameterIndex个参数String 型值</td></tr><tr><td style="text-align:center">public String getString(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的String 型值</td></tr><tr><td style="text-align:center">public Object getObject(String parameterName)</td><td style="text-align:center">返回参数名为parameterNam的Object型值</td></tr></tbody></table></div><p>创建一个CallableStatement对象可以使用Connection接口的prepareCall()方法，调用格式有三种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不带参数的存储过程调用</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;call存储过程名&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//带若干个参数的存储过程调用</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;call存储过程名(?,?,…)&#125;&quot;</span>); <span class="comment">//?是占位符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带若干个参数并且有返回值参数的存储过程调用（实际是函数调用）</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> conn.prepareCall(<span class="string">&quot;&#123;?=call存储过程名(?,?,…)&#125;&quot;</span>); <span class="comment">//?是占位符</span></span><br></pre></td></tr></table></figure><p>在执行带参数的SQL语句前，必须对IN和INOUT参数的占位符”?”进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cs.registerOutParamenter(<span class="type">int</span> index,<span class="type">int</span> sqlType);</span><br><span class="line"></span><br><span class="line">cs.registerOutParamenter(<span class="number">1</span>, java.sql.Types.INTEGER);</span><br></pre></td></tr></table></figure><p>利用CallableStatement执行存储过程时，其执行结果可能是多个ResultSet、多次修改记录或两者都有的情况。所以对CallableStatement一般调用execute()方法执行SQL语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cs.execute();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>使用CallableStatement实现对数据库StudentScore中Student表的各种存储过程的调用。</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第一个存储过程addStudent</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addStudent(<span class="keyword">no</span> <span class="type">CHAR</span>(<span class="number">9</span>), name <span class="type">CHAR</span>(<span class="number">12</span>), sex <span class="type">CHAR</span>(<span class="number">2</span>), age <span class="type">int</span>, dept <span class="type">CHAR</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(sNo, sName, sex, age, dept) <span class="keyword">VALUES</span>(<span class="keyword">no</span>, name, sex, age, dept);</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第二个存储过程getCount</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> getCount(<span class="keyword">OUT</span> total <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> total <span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第三个存储过程addSub</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addSub(<span class="keyword">INOUT</span> numl <span class="type">int</span>, <span class="keyword">INOUT</span> num2 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> numl <span class="operator">=</span> numl <span class="operator">+</span> num2;</span><br><span class="line"><span class="keyword">SET</span> num2 <span class="operator">=</span> numl <span class="operator">-</span> num2 <span class="operator">-</span> num2;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用CallableStatement按口,实现对存储过程的调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App17_18</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.myaql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost/StudentScore?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CallableStatenent</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">callsql1</span> <span class="operator">=</span> <span class="string">&quot;&#123;call addStudent(?,?,?,?,?)&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程IN型参数的占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">callSql2</span> <span class="operator">=</span> <span class="string">&quot;&#123;call getCount(?)&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程our型参数的占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">callSql3</span> <span class="operator">=</span> <span class="string">&quot;&#123;call addSub(?, ?&#125;&quot;</span>; <span class="comment">//&quot;?&quot;为存储过程INOUT型参数的占位符</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            </span><br><span class="line">            cs = conn.prepareCall(callSql1);<span class="comment">//创建用于执行存储过程的对象cs</span></span><br><span class="line">            cs.setstring(<span class="number">1</span>, <span class="string">&quot;201201009&quot;</span>);<span class="comment">//对第14行中的第1个IN参数赋值</span></span><br><span class="line">            es.setString(<span class="number">2</span>, <span class="string">&quot;王毅&quot;</span>);</span><br><span class="line">            cs.setString(<span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">            ca.setInt(<span class="number">4</span>, <span class="number">18</span>);</span><br><span class="line">            cs.setStrsing(<span class="number">5</span>, <span class="string">&quot;外语”);</span></span><br><span class="line"><span class="string">            cs.execute();//执行sQL, 的存储过程adStudent</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            ca = conn.prepareCall(callSql2);//创建用于执行存储过程的对象ca            </span></span><br><span class="line"><span class="string">            //下面语句注册getCount存鍺过程OUT参数的类型</span></span><br><span class="line"><span class="string">            cs.registerOutParameter(1, java.sql.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.execute();//执行SQL的存储过程getCount</span></span><br><span class="line"><span class="string">            int total = es.getInt(1);//返回存储过程getCount的第1个out参数</span></span><br><span class="line"><span class="string">            System.out.printIn(&quot;</span>总人数为: <span class="string">&quot; + total);</span></span><br><span class="line"><span class="string">            int a=5;</span></span><br><span class="line"><span class="string">            int b=3;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">            cs = conn. prepareCall(cal1Sq13);//创建用于执行存储过程的对象cs</span></span><br><span class="line"><span class="string">            ca.setInt(1, a);//对第16行中的第1个INOUT型参数赋值</span></span><br><span class="line"><span class="string">            cs. setInt(2, b);//对第16行中的第2个INOUT型参数赋值</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            //下面两条语句分别注册addSub第1.2个INOUT参数的类型</span></span><br><span class="line"><span class="string">            c8.regiaterOutParameter(1, java.sq1.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.registerOutParameter(2, java.sql.Types.INTEGER);</span></span><br><span class="line"><span class="string">            c8.execute();</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            //执行SQL的存储过程adSub</span></span><br><span class="line"><span class="string">            int sum = c8.getInt(1);</span></span><br><span class="line"><span class="string">            //返回存储过程addSub的第1个INOUT型参数的值</span></span><br><span class="line"><span class="string">            int sub = es.getInt(2);</span></span><br><span class="line"><span class="string">            //返回存储过程adSub的第2个INOUT型参数的值</span></span><br><span class="line"><span class="string">            System.out.println(a + &quot;</span>与<span class="string">&quot; + b + &quot;</span>的和: <span class="string">&quot; + sun + &quot;</span>,差: <span class="string">&quot; + sub);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        &#125; catch(Exception e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">        &#125; finally &#123;</span></span><br><span class="line"><span class="string">        try &#123;</span></span><br><span class="line"><span class="string">        if(cs != mu11) cs.close();</span></span><br><span class="line"><span class="string">                if(conn != mul1) conn.close();</span></span><br><span class="line"><span class="string">        &#125; catch(Exception e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取元数据"><a href="#获取元数据" class="headerlink" title="获取元数据"></a>获取元数据</h3><p>谓元数据（meta data）就是有关数据库和表结构的信息，如数据库中的表、表的字段、表的索引、数据类型、对SQL的支持程度等信息。</p><p>JDBC提供DatabaseMetaData接口用来获取数据库范围的信息，提供ResultSetMetaData接口用来获取特定结果集ResultSet的信息，如字段名和字段个数等。</p><h4 id="DatabasedMetaData接口-获取数据库信息"><a href="#DatabasedMetaData接口-获取数据库信息" class="headerlink" title="DatabasedMetaData接口-获取数据库信息"></a>DatabasedMetaData接口-获取数据库信息</h4><p>DatabaseMetaData接口主要是用来得到关于数据库的信息，如数据库中所有表名、系统函数、关键字、数据库产品名和数据库支持的JDBC 驱动程序名等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DatabaseMetaData</span> <span class="variable">dmd</span> <span class="operator">=</span> conn.getMetaData();</span><br></pre></td></tr></table></figure><ul><li>DatabaseMetaData接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean supportsOuterJoins()</td><td style="text-align:center">判断数据库是否支持外部连接</td></tr><tr><td style="text-align:center">public boolean supportsStoredProcedures()</td><td style="text-align:center">判断数据库是否支持存储过程</td></tr><tr><td style="text-align:center">public String getURL()</td><td style="text-align:center">返回用于连接数据库的URL地址</td></tr><tr><td style="text-align:center">public String getUserName()</td><td style="text-align:center">返回当前用户名</td></tr><tr><td style="text-align:center">public String getDatabaseProductName()</td><td style="text-align:center">返回使用的数据库产品名</td></tr><tr><td style="text-align:center">public String getDatabaseProductVersion()</td><td style="text-align:center">返回使用的数据库版本号</td></tr><tr><td style="text-align:center">public String getDriverName()</td><td style="text-align:center">返回用以连接的驱动程序名称</td></tr><tr><td style="text-align:center">public String getDriverVersion()</td><td style="text-align:center">返回用以连接的驱动程序版本号</td></tr><tr><td style="text-align:center">public ResultSet getTypeInfo()</td><td style="text-align:center">返回当前数据库中支持的所有数据类型的描述</td></tr></tbody></table></div><h4 id="ResultSetMetaData接口-获取结果集信息"><a href="#ResultSetMetaData接口-获取结果集信息" class="headerlink" title="ResultSetMetaData接口-获取结果集信息"></a>ResultSetMetaData接口-获取结果集信息</h4><p>ResultSetMetaData接口主要用来获取结果集的结构。例如，结果集字段的数量、字段的名字等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsMetaData</span> <span class="operator">=</span> rs.getMetaData();</span><br></pre></td></tr></table></figure><ul><li>ResultSetMetaData接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int getColumnCount()</td><td style="text-align:center">返回此ResultSet对象中的字段数</td></tr><tr><td style="text-align:center">public String getColumnName(int column)</td><td style="text-align:center">返回指定列的名称</td></tr><tr><td style="text-align:center">public int getColumnType(int column)</td><td style="text-align:center">返回指定列的SQL类型</td></tr><tr><td style="text-align:center">public int getColumnDisplaySize(int column)</td><td style="text-align:center">以字符为单位返回指定字段的最大宽度</td></tr><tr><td style="text-align:center">public boolean isAutoIncrement(int column)</td><td style="text-align:center">判断是否自动为指定字段进行编号，判断给定字段是否可以为null,返回值是columnNoNulls</td></tr><tr><td style="text-align:center">public int isNullable(int column)</td><td style="text-align:center">columnNullable或columnNullableUnknown之一</td></tr><tr><td style="text-align:center">public boolean isSearchable(int column)</td><td style="text-align:center">判断是否可以在WHERE子句中使用指定的字段</td></tr><tr><td style="text-align:center">public boolean isReadOnly(int column)</td><td style="text-align:center">判断指定的字段是否为只读</td></tr></tbody></table></div><h3 id="事物操作"><a href="#事物操作" class="headerlink" title="事物操作"></a>事物操作</h3><p>事务是保证数据库中数据完整性与一致性的重要机制。事务由一组SQL语句组成，这组语句要么都执行，要么都不执行，因此事务具有原子性。</p><p>已提交事务是指成功执行完毕的事务，未能成功执行完成的事务称为中止事务，对中止事务造成的变更需要进行撤销处理，称为<code>事务回滚</code>。</p><p>事物操作基于connection</p><h4 id="setAutoCommit"><a href="#setAutoCommit" class="headerlink" title="setAutoCommit()"></a>setAutoCommit()</h4><p>事务操作默认是自动提交。</p><p>即每一条SQL语句都被看作是一个事务，对数据库的更新操作成功后，系统将自动调用<code>commit()</code>方法提交。若把多个SQL语句作为一个事务就要关闭这种自动提交模式，这是通过调用当前连接的<code>setAutoCommit(flase)</code>方法来实现的。</p><h4 id="commit"><a href="#commit" class="headerlink" title="commit()"></a>commit()</h4><p>当连接的自动提交模式被关闭后，SQL语句的执行结果将不被提交。</p><h4 id="rollback"><a href="#rollback" class="headerlink" title="rollback()"></a>rollback()</h4><p>当调用<code>ommit()</code>法进行事务处理时，只要事务中的任何一条SQL语句没有生效，就会抛出SQLException异常。</p><p>这个方法将取消事务，并将该事务已执行部分对数据的修改恢复到事务执行前的值。</p><ul><li>回滚保存点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Savepoint</span> <span class="variable">s1</span> <span class="operator">=</span> conn.setSavepoint();</span><br><span class="line">conn.rollback(s1);</span><br></pre></td></tr></table></figure><h3 id="在窗口中访问数据库"><a href="#在窗口中访问数据库" class="headerlink" title="在窗口中访问数据库"></a>在窗口中访问数据库</h3><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>数据库、数据库管理系统和数据库系统是三个不同的概念。</li><li>一个关系型数据库是由一个或多个二维表构成的。表的列称为字段，行称为记录。</li><li>数据库中的表有三种约束：域约束、主码约束和外码约束。</li><li>SQL是结构化查询语言（Structured Query Language）的英文缩写，是用来定义数据库表和完<br>整性约束以及访问和操纵数据的语言。</li><li>JDBC是为在Java程序中访问数据库而设计的一组Java API，包含有一组类与接口，用于与数据库的连接、把SQL语句发送到数据库、处理SQL语句的结果以及获取数据库的元数据等。</li><li>使用Java开发任何数据库应用程序都需要四个接口：Driver、Connection、Statement和ResultSet。这些接口定义了使用SQL语句访问数据库的方法。JDBC驱动程序开发商或第三方已实现了这些接口中的方法。</li><li>使用JDBC访问数据库的一般步骤为：加载驱动程序、建立与数据库的连接、创建执行方式语句、执行SQL语句、处理返回结果和关闭创建的各种对象。</li><li>JDBC中有三种SQL查询方式：不含参数的静态查询、含有参数的动态查询和存储过程调用。这三种方式分别对应Statement、PreparedStatement和CallableStatement接口。</li><li>JDBC通过Statement接口实现静态SQL查询，通过PreparedStatement接口实现动态SQL查询，通过CallableStatement接口实现存储过程的调用。</li><li>JDBC通过ResultSet返回查询结果集，并提供记录指针对其记录进行定位。</li><li>JDBC通过DatabaseMetaData接口获得关于数据库的信息，通过ResultSetMetaData接口获取结果集的结构。</li><li>JDBC默认的事务提交方式是自动提交，可以通过setAutoCommit()方法控制事务提交方式，使用rollback()方法可实现事务回滚。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>写出在数据库StudentScore的Student表中查找所有年龄大于或等于19的同学的SQL语句。</li><li>写出姓名为“刘韵”的学生所学课程名称及成绩的SQL语句。</li><li>描述JDBC中Driver、Connection、Statement和ResultSet接口的功能。</li><li>使用Statement接口和PreparedStatement接口有什么区别？</li><li>归纳一下使用JDBC进行数据库访问的完整过程。</li><li>如何在结果集中返回字段的数目？如何在结果集中返回字段名？</li><li>编写一个应用程序，使其可以从StudentScore数据库的某个表中查询一个字段的所有信息。</li><li>创建一个名为Books的数据库，并在其中建立一个名为Book的表，字段包括书名、作者、出版社、出版时间和ISBN。编写一个应用程序，运用JDBC在该数据库中实现增加、删除和修改数据的功能。</li><li>假设在StudentScore数据库的Student表中，存在多个姓氏相同的人，根据这种情况建立查询，要求提供一个合适的图形界面，用户可以滚动查看查询记录。</li></ul><h1 id="第十八章-Java网络编程"><a href="#第十八章-Java网络编程" class="headerlink" title="第十八章 Java网络编程"></a>第十八章 Java网络编程</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>网络通信协议是计算机间进行通信所遵守的各种规则的集合。</p><p>Internet的主要协议有：网络层的IP协议；传输层的TCP和UDP协议；应用层的FTP、HTTP、SMTP等协议。其中传输控制协议（TransportControl Protocol, TCP）和网际互联协议（Internet Protocol，IP）是Internet的主要协议。</p><p>TCP/IP网络参考模型包括四个层次：应用层、传输层、网络层、链路层。</p><h4 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h4><p>链路层也称为数据链路层或网络接口层。通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。它们一起处理与电缆（或其他任何传输媒介）有关的物理接口细节。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层对TCP/IP网络中的硬件资源进行标识。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>在TCP/IP网络中，不同的机器之间进行通信时，数据的传输是由传输层控制的，这包括数据要发往的目的主机及应用程序、数据的质量控制等。</p><p>用于通信的端点是由Socket来定义的，而Socket是由IP地址和端口号组成的。</p><p>TCP是通过在端点与端点之间建立持续的连接而进行通信的。整个字节流到达接收端时完好无缺。</p><p>UDP是一种无连接的传输协议，传输方式是无序的，也不能确保绝对安全可靠，但它非常简单，也具有比较高的效率。</p><p>当对所传输的数据有时序性和可靠性等要求时，应使用TCP；<br>当传输的数据比较简单、对时序等无要求时，UDP能发挥更好的作用。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>大多数基于Internet的应用程序。<br>FTP、HTTP、SMTP、POP3、Telnet等。</p><h3 id="通信端口"><a href="#通信端口" class="headerlink" title="通信端口"></a>通信端口</h3><p>一台机器只能通过一条链路连接到网络上，网络端口号（port）就是用于区分一台主机中的不同应用程序。</p><p>个标记计算机逻辑通信信道的正整数。</p><p>其范围为0~65 535，其中，0~1023被系统保留，专门用于那些通用的服务（well-known service）</p><p>HTTP服务的端口号为80，Telnet服务的端口号为21，FTP服务的端口号为23。</p><p>IP地址和端口号组成了所谓的Socket。</p><p>Socket是网络上运行的程序之间双向通信链路的最后终结点，是TCP和UDP的基础。</p><h3 id="URL概念"><a href="#URL概念" class="headerlink" title="URL概念"></a>URL概念</h3><p>URL是统一资源定位器（Uniform Resource Locator）的英文缩写。</p><p>URL的基本结构由五部分组成，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传输协议://主机名:端口号/文件名#引用</span><br></pre></td></tr></table></figure><p>（1）传输协议（protocol）：指所使用的协议名，如HTTP、FTP等。<br>（2）主机名（hostname）：指资源所在的计算机。可以是IP地址，也可以是计算机的名称或域名。<br>（3）端口号（portnumber）：一个计算机中可能有多种服务，如Web服务、FTP服务或自己建立的服务等。为了区分这些服务，就需要使用端口号，每一种服务用一个端口号。<br>（4）文件名（filename）：包括该文件的完整路径。在HTTP中，有一个默认的文件名是index.html，因此，下列两个地址是等价的。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://java.sun.com</span><br><span class="line">http://java.sun.com/index.html</span><br></pre></td></tr></table></figure><br>（ 5 ） 引用（ reference ） ： 就是资源内部的某个参考点， 如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://java.sun.com/index.html#chapter1。</span><br></pre></td></tr></table></figure></p><h3 id="Java语言的网络编程"><a href="#Java语言的网络编程" class="headerlink" title="Java语言的网络编程"></a>Java语言的网络编程</h3><p>Java语言的网络编程分为三个层次。</p><ul><li>从网络上下载小程序</li><li>通过URL类的对象指明文件所在位置</li><li>利用java.net包中提供的类直接在程序中实现网络通信</li></ul><p>针对不同层次的网络通信，Java语言提供的网络功能有四大类：URL、InetAddress、Socket、Datagram。</p><ul><li>URL：面向应用层，通过URL, Java程序可以直接输出或读取网络上的数据。</li><li>InetAddress：面向的是IP层，用于标识网络上的硬件资源。</li><li>Socket和Datagram：面向的是传输层。Socket使用TCP，这是传统网络程序最常用的方式，可以想象为两个不同的程序通过网络的通信信道进行通信；Datagram则使用UDP，是另一种网络传输方式，它把数据的目的地址记录在数据包中，然后直接放在网络上。</li></ul><p>Java语言网络编程中主要使用的java.net包中的类如下。</p><ul><li>面向IP层的类：InetAddress；</li><li>面向应用层的类：URL、URLConnection；</li><li>TCP相关类：Socket、ServerSocket；</li><li>UDP 相关类： DatagramPacket 、DatagramSocket 、MulticastSocket。</li></ul><p>可能产生的异常包括BindExceptio 、ConnectException 、MalformedURLException 、NoRouteToHostException 、ProtocolException 、SocketException 、Unknown-HostException、UnknownServiceException。</p><h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><h3 id="创建URL对象"><a href="#创建URL对象" class="headerlink" title="创建URL对象"></a>创建URL对象</h3><ul><li>创建URL对象的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public URL(String spec)</td><td style="text-align:center">使用URL形式的字符串spec创建一个URL对象</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, int port, String file)</td><td style="text-align:center">创建一个协议为protocol、主机名为host、端口号为port、待访问的文件名为file的URL对象.</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, String file)</td><td style="text-align:center">创建一个URL对象,参数的含义同上、但使用默认端口号</td></tr><tr><td style="text-align:center">public URL(String protocol, String host, int port, String file, URLStream Handler handler)</td><td style="text-align:center">创建一个协议为protocol、主机名为host、端口号为port、待访问的文件名为file、URL流句柄为handler的URL对象</td></tr><tr><td style="text-align:center">public URL(URL context,String spec)</td><td style="text-align:center">使用已有的URL对象context和URL形式的字符串spec创建URL对象</td></tr><tr><td style="text-align:center">public URL(URL context, String spee, URI StreamHandlerhandler)</td><td style="text-align:center">参数同上，但创建的URL对象包含流句柄handler</td></tr></tbody></table></div><blockquote><p>在创建URL对象时，若发生错误，系统会产生MalformedURLException异常，这是非运行时异常，必须在程序中捕获处理。</p></blockquote><ul><li>URL类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean equals(Object obj)</td><td style="text-align:center">判断两个URL是否相同</td></tr><tr><td style="text-align:center">public final Object getContent()</td><td style="text-align:center">获取URL连接的内容</td></tr><tr><td style="text-align:center">public String getProtocol()</td><td style="text-align:center">返回URL对象的协议名称</td></tr><tr><td style="text-align:center">public String getHost()</td><td style="text-align:center">返回URL对象访问的计算机名称</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">返回URL对象访问的端口号</td></tr><tr><td style="text-align:center">public String getFile()</td><td style="text-align:center">返回URL指向的文件名</td></tr><tr><td style="text-align:center">public String getPath()</td><td style="text-align:center">返回URL对象所使用的文件路径</td></tr><tr><td style="text-align:center">public String getRef()</td><td style="text-align:center">返回URL对象的引用字符串，即获取参考点</td></tr><tr><td style="text-align:center">public URLConnction openConnection()</td><td style="text-align:center">打开URL指向的连接</td></tr><tr><td style="text-align:center">public final InputStream openStream()</td><td style="text-align:center">打开输人流</td></tr><tr><td style="text-align:center">protected void set(String protocol，String host, int port, String file, String ref)</td><td style="text-align:center">用给定参数设置URL中各字段的内容</td></tr><tr><td style="text-align:center">public String toString()</td><td style="text-align:center">返回整个URL字符串</td></tr></tbody></table></div><h3 id="使用URL类访问网络资源"><a href="#使用URL类访问网络资源" class="headerlink" title="使用URL类访问网络资源"></a>使用URL类访问网络资源</h3><h2 id="用Java语言实现底层网络通信"><a href="#用Java语言实现底层网络通信" class="headerlink" title="用Java语言实现底层网络通信"></a>用Java语言实现底层网络通信</h2><h3 id="InetAdress程序设计"><a href="#InetAdress程序设计" class="headerlink" title="InetAdress程序设计"></a>InetAdress程序设计</h3><p>Internet上主机的地址有两种表示方式，即域名和IP地址。</p><p>在已知一个InetAddress对象时，就可以通过一定的方法从中获取Internet上主机的地址（域名或IP地址）。</p><p>InetAddress类没有构造方法， 因此不能用new运算符来创建InetAddress对象，通常是用它提供的静态方法来获取。</p><ul><li>InetAddress类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static InetAddress getByName(String host)</td><td style="text-align:center">通过给定的主机名host, 获取InetAddress 对象的IP地址</td></tr><tr><td style="text-align:center">public static InetAddress getByAddress( byte[] addr)</td><td style="text-align:center">通过存放在字节数组中的IP地址,返回一个InetAddress对象</td></tr><tr><td style="text-align:center">public static InetAddress getLocalHost()</td><td style="text-align:center">获取本地主机的IP地址</td></tr><tr><td style="text-align:center">public byte[] getAddress()</td><td style="text-align:center">获取本对象的IP地址,并存放在字节数组中</td></tr><tr><td style="text-align:center">public String getHostAddress()</td><td style="text-align:center">利用InetAddress对象,获取该对象的IP地址</td></tr><tr><td style="text-align:center">public String getHostName()</td><td style="text-align:center">利用InetAddress对象,获取该对象的主机名</td></tr><tr><td style="text-align:center">public String toString()</td><td style="text-align:center">将IP地址转换成字符串形式的域名</td></tr></tbody></table></div><blockquote><p>该表中给的static方法通常会产生UnknownHostException异常，应在程序中捕获处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">myIPAddress</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">myServer</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.tom.com&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="基于连接的Socket通信程序设计"><a href="#基于连接的Socket通信程序设计" class="headerlink" title="基于连接的Socket通信程序设计"></a>基于连接的Socket通信程序设计</h3><p>Socket通信属于网络底层通信，它是网络上运行的两个程序间双向通信的一端，它既可以接收请求，也可以发送请求，利用它可以较方便地进行网络上的数据传输。</p><p>Socket 是实现客户与服务器（Client/Server, C/S）模式的通信方式。</p><h4 id="Socket通信机制的基本概念"><a href="#Socket通信机制的基本概念" class="headerlink" title="Socket通信机制的基本概念"></a>Socket通信机制的基本概念</h4><p>1）建立连接<br>2）连接地址<br>3）TCP/IP Socket通信</p><p>服务器端套接字使用的是ServerSocket类对象，客户端套接字使用的是Socket类对象，由此区分服务器端和客户端。</p><h4 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h4><p><code>java.net.Socket</code>继承自<code>java.lang.Object</code>类。</p><p>Socket类用在客户端，用户通过创建一个Socket对象来建立与服务器的连接。</p><p>通信开始之前先由通信双方确认身份并建立一条专用的虚拟连接通道；<br>然后它们通过这条通道传送数据信息进行通信；<br>当通信结束时再将原先所建立的连接拆除。</p><ul><li>Socket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Socket(String host ,int port)</td><td style="text-align:center">在客户端以指定的服务器地址host和端口号port,创建一个Socket对象,并向服务器端发出连接请求</td></tr><tr><td style="text-align:center">public Socket(InetAddress address,int port)</td><td style="text-align:center">同上,但IP地址由address指定</td></tr><tr><td style="text-align:center">public Socket(String host, int port, boolean stream)</td><td style="text-align:center">同上,但若stream为真,则创建流Socket对象,否则创建</td></tr><tr><td style="text-align:center">public Socket(InetAddress host, int port, boolean stream)</td><td style="text-align:center">数据报Socket对象同上,但IP地址由host指定</td></tr></tbody></table></div><ul><li>Socket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public InetAddress getInetAddress()</td><td style="text-align:center">获取创建Socket对象时指定的服务器的IP地址</td></tr><tr><td style="text-align:center">public InetAddress getLocalAddress()</td><td style="text-align:center">获取创建Socket对象时客户计算机的IP地址</td></tr><tr><td style="text-align:center">public InputStream getInputStream()</td><td style="text-align:center">为当前的Socket 对象创建输人流</td></tr><tr><td style="text-align:center">public OutputStream getOutputStream()</td><td style="text-align:center">为当前的Socket对象创建输出流</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">获取创建Socket时指定远程主机的端口号</td></tr><tr><td style="text-align:center">public void setReceiveBufferSize(int size)</td><td style="text-align:center">设置接收缓冲区的大小</td></tr><tr><td style="text-align:center">public int getReceiveBufferSize()</td><td style="text-align:center">返回接收缓冲区的大小</td></tr><tr><td style="text-align:center">public void setSendBufferSize(int size)</td><td style="text-align:center">设置发送缓冲区的大小</td></tr><tr><td style="text-align:center">public int getSendBufferSize()</td><td style="text-align:center">返回发送缓冲区的大小</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭建立的Socket连接</td></tr></tbody></table></div><h4 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h4><p><code>java.net.ServerSocket</code>继承自<code>java.lang.Object</code>类</p><ul><li>ServerSocket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ServerSocket(int port)</td><td style="text-align:center">以指定的端口port创建ServerSocket对象,并等候客户端的连接请求。端口号必须与客户端呼叫用的端口号相同</td></tr><tr><td style="text-align:center">public ServerSocket(intport, int backlog)</td><td style="text-align:center">同上,但以backlog指定最大的连接数,即可同时连接的客户端数量</td></tr></tbody></table></div><ul><li>ServerSocket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Socket accept()</td><td style="text-align:center">在服务器端的指定端口监听客户端发来的连接请求,并返回一个与客户端Socket对象相连接的Socket对象</td></tr><tr><td style="text-align:center">public InetAddress getInetAddress()</td><td style="text-align:center">返回服务器的IP地址</td></tr><tr><td style="text-align:center">public int getLocalPort()</td><td style="text-align:center">返回服务器的端口号</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭服务器端建立的套接字</td></tr></tbody></table></div><h4 id="Socket通信模式"><a href="#Socket通信模式" class="headerlink" title="Socket通信模式"></a>Socket通信模式</h4><p>1）客户建立到服务器的套接字对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Socket mySocket=<span class="keyword">new</span> <span class="title class_">Socket</span>(http:<span class="comment">//www.gduf.edu.cn,1880);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>getInputStream()</code>方法获得输入流，<code>getOutputStream()</code>方法获得输出流。</p><p>2）建立接收客户套接字的服务器套接字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">1880</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">sc</span> <span class="operator">=</span> serSocket.accept();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/10/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/TCP-IP%E4%B8%8B%E7%9A%84Socket%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F.jpg" class="" title="TCP-IP下的Socket网络通信模式"><p>Socket通信的步骤如下：<br>（1）在服务器端创建一个ServerSocket对象，并指定端口号；<br>（2）运行ServerSocket的accept（）方法，等候客户端请求；<br>（3）客户端创建一个Socket对象，指定服务器的IP地址和端口号，向服务器端发出连接请求；<br>（4）服务器端接收到客户端请求后，创建Socket对象与客户端建立连接；<br>（5）服务器端和客户端分别建立输入输出数据流，进行数据传输；<br>（6）通信结束后，服务器端和客户端分别关闭相应的Socket连接；<br>（7） 服务器端程序运行结束后， 调用ServerSocket 对象的close（）方法停止等候客户端请求。</p><p>为了能实现服务器端同时对多个客户进行服务，需要用多线程，在服务器端创建客户请求的监听线程，一旦客户发起连接请求，则在服务器端创建用于服务的Socket，利用该Socket完成与客户的通信，即每个线程针对一个客户进行服务。</p><h3 id="无连接的数据报通信程序设计"><a href="#无连接的数据报通信程序设计" class="headerlink" title="无连接的数据报通信程序设计"></a>无连接的数据报通信程序设计</h3><p>数据报通信是基于用户数据报协议（ User Datagram Protocol,UDP）的网络信息传输方式。数据报（datagram）是网络层数据单元在介质上传输信息的一种逻辑分组形式。<br>数据报是无连接的远程通信服务，它是一种在网络中传输的、独立的、自身包含地址信息的数据单位，不保证传送顺序和内容的准确性。数据报Socket又称为UDP套接字，它无须建立、拆除连接，直接将信息打包传向指定的目的地，使用起来比流式Socket要简单一些。但由于该种通信方式不能保证将所有数据都传送到目的地，所以一般用于传送非关键性的数据。</p><p>首先将数据打包，形成数据包，这类似于将信件装入信封，然后将数据包发往目的地；其次是接收端收到别人发来的数据包，然后查看数据包中的内容，这类似于从信封中取出信件。</p><p>DatagramPacket类在发送端用于将待发送的数据打包，在接收端则用于将收到的数据拆包；<br>DatagramSocket类用于实现数据报通信的过程中数据报的发送与接收。</p><h4 id="DatagramPacket类"><a href="#DatagramPacket类" class="headerlink" title="DatagramPacket类"></a>DatagramPacket类</h4><p>需要传输的数据、数据报的长度、IP 地址和端口号等信息。</p><ul><li>DatagramPacket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public DatagramPacket(byte[]buf, int length)</td><td style="text-align:center">创建一个用于接收数据报的对象，buf数组用于接收数据报中的数据，接收长度为length</td></tr><tr><td style="text-align:center">public DatagramPacket ( byte[] buf，int length, InetAddress address, int port)</td><td style="text-align:center">创建一个用于发送给远程系统的数据报对象。并将数组buf中长度为length的数据发送到地址为address、端口号为port的主机上</td></tr></tbody></table></div><ul><li>DatagramPacket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public byte[] getData()</td><td style="text-align:center">返回一个字节数组,包含收到或要发送的数据报中的数据</td></tr><tr><td style="text-align:center">public int getLength()</td><td style="text-align:center">返回发送或接收到的数据的长度</td></tr><tr><td style="text-align:center">public InetAddress getAddress()</td><td style="text-align:center">返回目标数据包的IP地址或发送该数据包主机的IP地址</td></tr><tr><td style="text-align:center">public int getPort()</td><td style="text-align:center">返回目标数据包的端口号或发送该数据包主机的端口号</td></tr></tbody></table></div><h4 id="DatagramSocket类"><a href="#DatagramSocket类" class="headerlink" title="DatagramSocket类"></a>DatagramSocket类</h4><p>于在发送主机中建立数据报通信方式，提出发送请求，实现数据报的发送与接收。</p><ul><li>DatagramSocket类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public DatagramSocket()</td><td style="text-align:center">创建一个以当前计算机的任一个可用端口为发送端口的数据报连接</td></tr><tr><td style="text-align:center">public DatagramSocket(int port)</td><td style="text-align:center">创建一个以当前计算机的指定端口为接收端口的数据报连接</td></tr><tr><td style="text-align:center">public DatagramSocket(int port, InetAddress laddr)</td><td style="text-align:center">用于在有多个IP地址的当前主机上，创建一一个以laddr 为指定IP地址、以port为指定端口的数据报连接</td></tr></tbody></table></div><p>SocketException异常</p><ul><li>DatagramSocket类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void receive(DatagramPacket p)</td><td style="text-align:center">从建立的数据报连接中接收数据,并保存到p中</td></tr><tr><td style="text-align:center">public void send(DatagramPacket p)</td><td style="text-align:center">将数据报对象p中包含的报文发送到所指定的IP地址主机的指定端口</td></tr><tr><td style="text-align:center">public void setSoTimeout(int timeout)</td><td style="text-align:center">设置传输超时为timeout</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭数据报连接</td></tr></tbody></table></div><blockquote><p>由于数据报是不可靠的通信方式，所以receive()方法不一定能接收到数据，为防止线程死掉，应该利用setSoTimeout()。</p></blockquote><h4 id="数据报通信的发送与接收过程"><a href="#数据报通信的发送与接收过程" class="headerlink" title="数据报通信的发送与接收过程"></a>数据报通信的发送与接收过程</h4><p>发送</p><p>（1）创建一个用于发送数据的DatagramPacket对象，使其包含如下信息：<br>要发送的数据；<br>数据报分组的长度；<br>发送目的地的主机IP地址和目的端口号。<br>（2）在指定的或可用的本机端口创建DatagramSocket对象。<br>（3）调用DatagramSocket对象的send()方法，以DatagramPacke对象为参数发送数据报。</p><p>接收</p><p>（1）创建一个用于接收数据报的DatagramPacket对象，其中包含空白数据缓冲区和指定数据报分组的长度。<br>（2）在指定的或可用的本机端口创建DatagramSocket对象。<br>（3） 调用DatagramSocket 对象的receive()方法， 以DatagramPacket对象为参数接收数据报，接收到的信息有：<br>收到的数据报分组的内容；<br>发送端主机的IP地址；<br>发送端主机的发送端口号。</p><p>在数据报通信中，由于通信双方之间并不需要建立连接，所以服务器端应用程序通信过程与客户端应用程序的通信过程是非常相似的，客户端与服务器端双方均可以发送与接收数据报分组。所不同的是服务器应用程序要面向网络中的所有计算机，所以服务器应用程序收到一个数据报分组后要分析它，得到数据报的源地址信息，这样才能创建正确的返回结果分组给客户机。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>通信端口是一个标记计算机逻辑通信信道的正整数，用于区分一台主机中的不同应用程序，端口号不是物理实体。</li><li>IP地址和端口号组成了所谓的Socket。Socket是实现客户与服务器（Client/Server, C/S）模式的通信方式，Socket原意为“插座”，在通信领域中译为“套接字”，在网络通信里的含义就是建立一个连接。</li><li>URL是统一资源定位器（Uniform Resource Locator）的简称，它表示Internet上某一资源的地址。URL的基本结构由五部分组成。</li><li>Java的网络编程分为三个层次。最高一级的网络通信就是从网络上下载小程序；次一级的通信就是通过URL类的对象指明文件所在位置，并从网络上下载音频、视频或图像文件，然后播放音频、视频或显示图像；最低一级的通信是利用java.net包中提供的类直接在程序中实现网络通信。</li><li>针对不同层次的网络通信，Java语言提供的网络功能有四大类：URL、InetAddress、Socket、Datagram。<br>（1）URL：面向应用层，通过URL，Java程序可以直接输出或读取网络上的数据。<br>（2）InetAddress：面向的是IP层，用于标识网络上的硬件资源。<br>（3）Socket和Datagram：面向的是传输层。Socket使用TCP，这是传统网络程序最常用的方式，可以想象为两个不同的程序通过网络的通信信道进行通信；Datagram则使用UDP，是另一种网络传输方式，它把数据的目的地址记录在数据包中，然后直接放在网络上。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是URL？URL地址由哪几部分组成？</li><li>什么是Socket？它与TCP/IP有何关系？</li><li>简述流式Socket的通信机制。它的最大特点是什么？为什么可以实现无差错通信？</li><li>什么是端口号？服务器端和客户端分别如何使用端口号？</li><li>什么是套接字？其作用是什么？</li><li>编写Java程序，使用InetAddress类实现根据域名自动到DNS（域名服务器）上查找IP地址的功能。</li><li>用Java程序实现流式Socket通信，需要使用哪两个类？它们是如何定义的？应怎样使用？</li><li>与流式Socket相比，数据报通信有何特点？</li></ul>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记5</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记4</title>
    <link href="http://hibiscidai.com/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
    <id>http://hibiscidai.com/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</id>
    <published>2022-01-05T12:00:00.000Z</published>
    <updated>2022-05-03T10:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记4"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记4</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记4"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记4" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记4"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记4</h1><h1 id="第十四章-图形界面设计"><a href="#第十四章-图形界面设计" class="headerlink" title="第十四章 图形界面设计"></a>第十四章 图形界面设计</h1><h2 id="图形用户界面概述"><a href="#图形用户界面概述" class="headerlink" title="图形用户界面概述"></a>图形用户界面概述</h2><p>图形用户界面（Graphics User Interface，GUI），是指用图形的方式，借助菜单、按钮等标准界面元素和鼠标操作，帮助用户方便地向计算机系统发出指令、启动操作，并将系统运行的结果以图形方式显示给用户的技术。GUI又称为图形用户接口。</p><p>Java语言的早期版本提供了两个处理图形用户界面的包：java.awt和javax.swing。</p><p>JDK 8版本JavaFX替代了AWT和Swing，方便开发富因特网应用（Rich Internet Applications, RIA）。<br>富因特网应用，是一种Web应用，表现一般桌面应用具有的特点和功能。JavaFX为支持触摸设备提供了多点触控支持，并且还内建了对2D、3D、动画的支持，以及视频和音频的回放功能，JavaFX程序可以无缝地在桌面或Web浏览器中运行。</p><h2 id="图形用户界面工具包JavaFX"><a href="#图形用户界面工具包JavaFX" class="headerlink" title="图形用户界面工具包JavaFX"></a>图形用户界面工具包JavaFX</h2><p>JavaFX是一个强大的图形和多媒体处理工具包集合，它不仅可以用于开发RIA，而且还可以用来开发桌面程序以及移动设备上的程序。</p><ul><li>JavaFX主要的类及节点类面板类和控件类的继承关系</li></ul><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E4%B8%BB%E8%A6%81%E7%9A%84%E7%B1%BB%E5%8F%8A%E8%8A%82%E7%82%B9%E7%B1%BB%E9%9D%A2%E6%9D%BF%E7%B1%BB%E5%92%8C%E6%8E%A7%E4%BB%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX主要的类及节点类面板类和控件类的继承关系"><h3 id="JavaFX组件分类"><a href="#JavaFX组件分类" class="headerlink" title="JavaFX组件分类"></a>JavaFX组件分类</h3><p>节点(node)：构成图形用户界面的各种元素。</p><p>构建图形用户界面的类主要分成三类：面板类（pane class）、控件类（control class）和辅助类（helper class）。</p><p>面板是一种容器，是用来包含各种控件和形状的类。</p><p>控件类又称为控件或组件，控件的作用是完成与用户的交互，包括接收用户的命令、接收用户输入的文本或用户的选择、向用户显示文本或图形等。</p><p>辅助类是用来描述控件属性的，例如，颜色类Color、字体类Font、图像类Image和图像显示类ImageView等。面板类和控件类等都是Node的子类，但辅助类并不都是Node类的子类。</p><h3 id="JavaFX的基本概念"><a href="#JavaFX的基本概念" class="headerlink" title="JavaFX的基本概念"></a>JavaFX的基本概念</h3><p>JavaFX程序用户界面的顶层称为舞台Stage，代表窗口。<br>舞台Stage中摆放的是场景Scene，场景Scene中可以包含各种布局面板和控件共同组成用户界面。</p><ul><li><code>舞台Stage</code>：是用于显示场景的窗口，它是JavaFX程序用户界面的顶层容器。</li><li><code>场景Scene</code>：是摆放在舞台中的对象，也是一个容器，其中可放置面板和节点等对象。</li><li><code>节点Node</code>：是可视化的组件，可以是面板、控件、图像视图、形状等。</li><li><code>面板Pane</code>：面板中可以摆放各种节点。JavaFX提供了多种面板供用户在窗口中组织节点。</li><li><code>控件Control</code>：包括标签、按钮、复选框、单选按钮、文本框、文本区等。</li><li><code>形状Shape</code>：是指文本、直线、圆、椭圆、矩形、弧、多边形、折线等。</li></ul><h4 id="JavaFX窗口结构"><a href="#JavaFX窗口结构" class="headerlink" title="JavaFX窗口结构"></a>JavaFX窗口结构</h4><p>任何JavaFX程序至少要有一个舞台和一个场景。<br>舞台是一个支持场景的平台，一个程序中只能有一个主舞台。<br>主舞台是应用程序自动访问的一个Stage对象，它是在应用程序启动时由系统创建的，通过start()方法的参数获得，用户不能自己创建。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E7%AA%97%E5%8F%A3%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="" title="JavaFX窗口结构示意图"><blockquote><p>场景Scene中可以包含面板Pane或控件Control，但不能包含形状Shape和图像显示类ImageView；面板Pane可以包含Node的任何子节点。</p></blockquote><p>在JavaFX应用程序中，场景中的内容是通过层次结构表示的。<br>场景中的元素称为节点，每个节点都表示一个用户界面的可视元素。</p><p>节点可以有子节点，有子节点的节点称为父节点或分支节点，没有子节点的节点称为叶节点。<br>在场景图中有一个称为根节点的特殊节点，根节点是顶级节点，它是唯一没有父节点的节点。根节点通常是一个面板。</p><h4 id="应用程序的父类Application、舞台Stage和场景Scene"><a href="#应用程序的父类Application、舞台Stage和场景Scene" class="headerlink" title="应用程序的父类Application、舞台Stage和场景Scene"></a>应用程序的父类Application、舞台Stage和场景Scene</h4><p>所有的JavaFX 主程序都需要继承抽象类<code>javafx.application.Application</code>。</p><p>继承了Application类的子类必须重写<code>start()</code>方法。<br><code>start()</code>方法一般用于将控件放入场景中，并在舞台中显示场景。</p><ul><li><code>javafx.application.Application</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static void launch(String… args)</td><td style="text-align:center">启动一个独立的JavaFX 程序。利用可变参数args接收命令行参数,该方法通常是从main()方法调用的。它不能被多次调用，否则将抛出异常。</td></tr><tr><td style="text-align:center">public void init()</td><td style="text-align:center">程序初始化方法，加载Application 类之后该方法立即被调用。在此方法中不能创建舞台和场景,但可以创建其他JavaFX对象来进行初始化操作，若没有初始化部分，不用覆盖此方法。</td></tr><tr><td style="text-align:center">public abstract void start(Stage primaryStage)</td><td style="text-align:center">JavaFX程序的人口点。参数primaryStage是程序的主舞台。可以设置程序场景。如果程序作为applet启动,主舞台将被嵌人到浏览器中。如果需要，程序可以创建其他舞台,但它们不是主要舞台，也不会嵌人到浏览器中。该方法在init()之后被调用。</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">该方法在程序停止时调用，为程序退出和销毁资源提供了方便。</td></tr></tbody></table></div><ul><li><code>javafx.stage.Stage</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Stage()</td><td style="text-align:center">创建一个新舞台</td></tr><tr><td style="text-align:center">public Stage(StageStyle style)</td><td style="text-align:center">以style为舞台创建一个新舞台，style的取值是枚举StageStyle中的常量</td></tr></tbody></table></div><p><code>StageStyle.DECORATED</code>：有标题栏装饰即有最大最小和关闭按钮(默认选项）<br><code>StageStyle.UNDECORATED</code>：纯白背景且无标题栏装饰<br><code>StageStyle.TRANSPARENT</code>：透明背景且没有标题栏装饰<br><code>StageStyle.UNIFIED</code>：有最大最小等按钮但没有标题栏装饰<br><code>StageStyle.UTILITY</code>：有标题栏装饰但只有关闭按钮</p><ul><li><code>javafx.stage.Stage</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void show()</td><td style="text-align:center">显示窗口</td></tr><tr><td style="text-align:center">public final void setTitle(String value)</td><td style="text-align:center">设置窗口的标题</td></tr><tr><td style="text-align:center">public final void setScene(Scene value)</td><td style="text-align:center">将场景value置于窗口中</td></tr><tr><td style="text-align:center">public final void setMaxmized(boolean value)</td><td style="text-align:center">设置窗口是否可以最大化</td></tr><tr><td style="text-align:center">public final void setAlwaysOnTop(boolean value)</td><td style="text-align:center">设置窗口是否在项层</td></tr><tr><td style="text-align:center">public final void setResizable(boolean value)</td><td style="text-align:center">设置是否可以改变窗口大小</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭舞台。这个调用等同于hide()方法隐藏窗口</td></tr></tbody></table></div><ul><li><code>javafx.scene.Scene</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Scene(Parent root)</td><td style="text-align:center">以root为根节点创建一个场景，通常使用某种面板对象作为根节点，场景的大小会根据其中节点的大小自动计算</td></tr><tr><td style="text-align:center">publc Scene(Parent root, double width, ouble height)</td><td style="text-align:center">创建宽为width、高为height像素的场景，并将节点root放人场景中</td></tr><tr><td style="text-align:center">public Scene(Parent root, Paint fill)</td><td style="text-align:center">创建以root为根节点的场景，fill作为场景的背景填充色</td></tr><tr><td style="text-align:center">public Scene(Parent root, double width, double height, Paint fill)</td><td style="text-align:center">创建指定大小和填充色的场景，并将根节点root放入场录中</td></tr></tbody></table></div><ul><li><code>javafx.scene.Scene</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final &lt; T extends Event &gt; void addEventHandler(EventType &lt; T &gt; eventType, EventHandler &lt; ? super T &gt; eventHandler)</td><td style="text-align:center">向场景注册事件监听者</td></tr><tr><td style="text-align:center">public final void setFill(Paint value)</td><td style="text-align:center">设置场景的背景填充色为value</td></tr><tr><td style="text-align:center">public final void setRoot(Parent value)</td><td style="text-align:center">设置场景的根节点</td></tr><tr><td style="text-align:center">public final void setOnContextMenuRequested(EventHandler &lt; ? super ContextMenuEvent &gt; value)</td><td style="text-align:center">为场最注册快捷菜单动作事件监听者</td></tr></tbody></table></div><p><code>命令按钮</code></p><p>可以用鼠标单击它来控制程序运行的流程。<code>javafx.scene.control</code>包提供了Button类，用来处理按钮控件的相关操作。按钮创建之后通过面板的add()方法将其放入到面板中。</p><ul><li><code>javafx.scene.control.Button</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Button()</td><td style="text-align:center">创建一个没有文字的按钮</td></tr><tr><td style="text-align:center">public Button(String text)</td><td style="text-align:center">创建一个以text为文字的按钮</td></tr><tr><td style="text-align:center">public Button(String text, Node graphic)</td><td style="text-align:center">创建一个文字为text、图标为graphie的按钮</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Button</code>类及其父类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">用value设置按钮上的文字</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">用value设置按钮上的图标</td></tr><tr><td style="text-align:center">public void setPrefSize(double prefWidth, double prefHeight)</td><td style="text-align:center">用指定的宽、高像素值设置按钮尺寸，取代系统自动计算出的默认尺寸</td></tr><tr><td style="text-align:center">public final void setOnAction(EventHandler &lt; ActionEvent &gt; value)</td><td style="text-align:center">为按钮注册单击事件监听者</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建主舞台即窗口，并创建一个场景和一个按钮，然后将按钮放入场景中，再把场景放入舞台上，最后将窗口显示出来。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;我是按钮&quot;</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bt, <span class="number">210</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;我的JavaFX窗口&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户是从命令行运行JavaFX程序，则主方法main()不是必需的；当从一个不完全支持JavaFX的IDE中启动JavaFX程序的时候，可能会需要主方法main()。</span></span><br><span class="line"><span class="comment">//当运行一个没有主方法main()的JavaFX程序时，JVM将自动调用launch()方法以运行应用程序。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Application.launch(args);<span class="comment">//定义在Application类中的静态方法，用于启动一个独立的JavaFX程序，该方法必须在mian()方法中调用才会启动JavaFX程序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_1运行结果"><blockquote><p>舞台默认是不显示的，舞台对象必须调用自己的show()方法才能将窗口显示出来。</p></blockquote><h2 id="JavaFX的布局面板"><a href="#JavaFX的布局面板" class="headerlink" title="JavaFX的布局面板"></a>JavaFX的布局面板</h2><p>虽然可以直接将节点置于场景中，但更好的办法是先将节点放入面板中，然后再将面板放入场景中。</p><h3 id="面板类Pane和JavaFX-CSS"><a href="#面板类Pane和JavaFX-CSS" class="headerlink" title="面板类Pane和JavaFX CSS"></a>面板类Pane和JavaFX CSS</h3><p><code>面板</code>是一种没有标题栏、没有边框的容器，用来组织节点，面板可以包含Node的任何子类型。</p><p>面板类主要有如下几种：</p><ul><li>栈面板类StackPane</li><li>边界面板类BorderPane</li><li>流式面板类FlowPane</li><li>网格面板类GridePane</li><li>单行面板类HBox和单列面板类VBox</li></ul><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%9D%A2%E6%9D%BF%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="面板的继承关系"><h4 id="面板类Pane"><a href="#面板类Pane" class="headerlink" title="面板类Pane"></a>面板类Pane</h4><p>Pane是所有其他面板的根类。<br><code>javafx.scene.layout.Pane</code>类对象通常用作显示形状的画布，而其子类面板则主要用作摆放节点。</p><ul><li><code>javafx.scene.layout.Pane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Pane()</td><td style="text-align:center">创建一个空面板，以后可向其添加其他控件和形状</td></tr><tr><td style="text-align:center">public Pane(Node… children)</td><td style="text-align:center">创建面板，并将参数指定的多个节点添加到面板中</td></tr></tbody></table></div><p>每个面板都包含一个列表用于存放面板中的节点， 这个列表是<code>javafx.collections.ObservableList</code>类的实例，<code>ObservableList</code>类似于ArrayList，是一个用于存储元素的集合。</p><p>使用<code>add(node)</code>可以将一个节点添加到面板中，调用<code>addAll(node1, node2, ..., noden)</code>可以将多个节点同时添加到面板中。</p><p>调用<code>remove(node)</code>方法从面板中删除一个节点或调用<code>removeAll()</code>方法删除面<br>板中的所有节点。</p><ul><li><code>javafx.scene.layout.Pane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ObservableList &lt; Node &gt; getChildren()</td><td style="text-align:center">返回面板用于存放节点的列表</td></tr><tr><td style="text-align:center">public final void setPadding(Insets value)</td><td style="text-align:center">利用Insets对象value设置面板四周边缘内侧空白空间的距离，单位是像素</td></tr><tr><td style="text-align:center">public void setPrefSize(doule prefWidth, double prefHeight)</td><td style="text-align:center">以给定的宽、高值作为偏好尺寸，来代替系统自动对该节点计算出的默认尺寸。即以给定的宽、高值优先设置面板的大小</td></tr><tr><td style="text-align:center">public boolean isResizable()</td><td style="text-align:center">判断面板是否可调整尺寸</td></tr><tr><td style="text-align:center">public final void setStyle(Stirng value)</td><td style="text-align:center">设置面板或节点的样式</td></tr><tr><td style="text-align:center">public final void setRotate(double values)</td><td style="text-align:center">以度为单位，设置节点围绕它的中心旋转value角度，若value为正，顺时针旋转，否则逆时针旋转</td></tr><tr><td style="text-align:center">public final void setTranslateX(double value)</td><td style="text-align:center">将节点在x轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final void setTranslateY(double value)</td><td style="text-align:center">将节点在y轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final void setTranslateZ(double value)</td><td style="text-align:center">将节点在z轴方向上平移value像素</td></tr><tr><td style="text-align:center">public final double getLayoutX()</td><td style="text-align:center">返回节点左上角的x坐标</td></tr><tr><td style="text-align:center">public final double getLayoutY()</td><td style="text-align:center">返回节点左上角的y坐标</td></tr><tr><td style="text-align:center">public final void setCache(boolean value)</td><td style="text-align:center">是否为节点设置缓冲，以提高性能</td></tr><tr><td style="text-align:center">public final void setOnContextMenuRequested(EventHandler &lt; ? super ContextMenuEvent value &gt;)</td><td style="text-align:center">为节点注册快捷菜单(上下文菜单)的动作事件</td></tr></tbody></table></div><blockquote><p>一个节点只能添加到一个面板中。</p></blockquote><h4 id="JavaFX-CSS"><a href="#JavaFX-CSS" class="headerlink" title="JavaFX CSS"></a>JavaFX CSS</h4><p>JavaFX的样式属性类似于Web页面中指定HTML元素样式的叠层样式表(Cascading Style Sheet，CSS)，因此，JavaFX的样式属性称为JavaFX CSS。</p><p>的setStyle()方法是Pane从其父类Node继承来的方法。</p><h3 id="栈面板类StackPane"><a href="#栈面板类StackPane" class="headerlink" title="栈面板类StackPane"></a>栈面板类StackPane</h3><p><code>java.scene.layout.StackPane</code></p><p>将所有节点都摆放在面板中央，后加入的节点添加到前一个节点之上，多个节点以叠加的形式放入栈面板中。</p><ul><li><code>javafx.scene.layout.StackPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public StackPane()</td><td style="text-align:center">创建栈面板，面板中的节点默认中心对齐</td></tr><tr><td style="text-align:center">public StackPane(Node… children)</td><td style="text-align:center">创建栈面板，并将参数指定的多个节点添加到面板，并中心对齐</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.StackPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static void clearConstraints(Node child)</td><td style="text-align:center">删除面板的child节点</td></tr><tr><td style="text-align:center">public static void setMargin(Node child, Insets value)</td><td style="text-align:center">为面板中节点设置外侧边缘周围的空白空间的距离</td></tr><tr><td style="text-align:center">public static void setAlignment(Node child, Pos value)</td><td style="text-align:center">设置节点child在面板中的对齐方式，value是取自枚举Pos中的枚举常量</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置节点的整体对齐方式</td></tr></tbody></table></div><ul><li><code>javafx.geometry.Pos</code>类中代表对齐方式常用的静态常量</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">静态常量名</th><th style="text-align:center">对齐方式</th></tr></thead><tbody><tr><td style="text-align:center">TOP_CENTER</td><td style="text-align:center">顶部居中对齐</td></tr><tr><td style="text-align:center">TOP_LEFT</td><td style="text-align:center">顶部左对齐</td></tr><tr><td style="text-align:center">TOP_RIGHT</td><td style="text-align:center">顶部右对齐</td></tr><tr><td style="text-align:center">CENTER</td><td style="text-align:center">中部居中对齐</td></tr><tr><td style="text-align:center">CENTER_LEFT</td><td style="text-align:center">中部左对齐</td></tr><tr><td style="text-align:center">CENTER_RIGHT</td><td style="text-align:center">中部右对齐</td></tr><tr><td style="text-align:center">BOTTOM_CENTER</td><td style="text-align:center">底部居中对齐</td></tr><tr><td style="text-align:center">BOTTOM_LEFT</td><td style="text-align:center">底部左对齐</td></tr><tr><td style="text-align:center">BOTTOM_RIGHT</td><td style="text-align:center">底部右对齐</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建栈面板，将在其上放置两个按钮，并用样式属性设置按钮和栈面板的外观样式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_3</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">StackPane</span> <span class="variable">sPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line">bt.setStyle(<span class="string">&quot;-fx-border-color: blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">bt1.setPrefSize(<span class="number">80</span>, <span class="number">50</span>);</span><br><span class="line">bt1.setStyle(<span class="string">&quot;-fx-border-color: green&quot;</span>);</span><br><span class="line">bt1.setRotate(-<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">sPane.getChildren().addAll(bt1, bt);</span><br><span class="line">sPane.setRotate(<span class="number">45</span>);</span><br><span class="line">sPane.setStyle(<span class="string">&quot;-fx-border-color: red; -fx-background-color: lightgray&quot;</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(sPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;栈面板&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_3%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_3运行结果"><blockquote><p>默认情况下，一个控件系统会基于其中的内容计算出默认的尺寸，并将它作为偏好尺寸。</p></blockquote><h3 id="流式面板类FlowPane"><a href="#流式面板类FlowPane" class="headerlink" title="流式面板类FlowPane"></a>流式面板类FlowPane</h3><p><code>javafx.scene.layout.FlowPane</code></p><p>将节点按水平方式一行一行地摆放，或者是按垂直方式一列一列地摆放。</p><ul><li>节点按照加入流式面板的先后顺序从左向右排列摆放，或者是从上向下排列摆放；</li><li>一行或一列排满节点之后就自动地转到下一行或下一列继续从左向右或从上向下排列；</li><li><p>每一行或每一列中的组件默认设置为居中排列。</p></li><li><p><code>javafx.scene.layout.FlowPane</code>类的主要构造方法</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FlowPane()</td><td style="text-align:center">创建流式水平布局面板,容器中的节点居中对齐,节点间水平和垂直间距均默认为0像素</td></tr><tr><td style="text-align:center">public FlowPane(double hgap, double vgaps)</td><td style="text-align:center">功能同上,但节点间水平间距为hgap像素，垂直间距为vgap像素</td></tr><tr><td style="text-align:center">public FlowPane(Orientation orientation)</td><td style="text-align:center">创建节点排列方向为orientation、节点间水平和垂直间距均默认为0像素的流式面板。<br /> orientation取值为<code>Orientation. HORIZONTAL</code>,表示水平布局；<br /> <code>Orientation.VERTICAL</code>,表示垂直布局</td></tr><tr><td style="text-align:center">public FlowPane(double hgap, double vgap, Node… children)</td><td style="text-align:center">创建流式面板,并将参数指定的多个节点添加到面板中,节点间水平间距为hgap像素,垂直间距为vgap像素</td></tr><tr><td style="text-align:center">public FlowPane(Orientation orientation, Node… children)</td><td style="text-align:center">创建节点排列方向为orientation,并将參数指定的多个节点添加到面板中,节点水平和垂直间距均默认为0像素</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.FlowPane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setHgap(double value)</td><td style="text-align:center">设置布局面板中各节点之间水平间距的像素数</td></tr><tr><td style="text-align:center">public final void setVgap(double value)</td><td style="text-align:center">设置布局面板中各节点之间垂直间距的像素数</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置流式布局中节点的摆放方向，orientation取值见上表</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置布局面板中整体对齐方式,value是枚拳Pos中的值</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置面板边缘内侧四周空白的距离</span></span><br><span class="line">rootNode.setPadding(<span class="keyword">new</span> <span class="title class_">Insets</span>(<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>));</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/Insets%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="" title="Insets对象参数示意图"><h3 id="边界面板类BoderPane"><a href="#边界面板类BoderPane" class="headerlink" title="边界面板类BoderPane"></a>边界面板类BoderPane</h3><p><code>类javafx.scene.layout.BorderPane</code></p><p>边界面板将显示区域分为上（top）、下（bottom）、左（left）、右（right）、中（center）五个区域，每个区域可以放置一个控件或其他面板，每个区域的大小是任意的，如果程序不需要某个区域，可以不定义，也不用留出空间。</p><ul><li><code>javafx.scene.layout.BorderPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public BorderPane()</td><td style="text-align:center">创建边界式面板对象</td></tr><tr><td style="text-align:center">public BorderPane(Node center)</td><td style="text-align:center">用指定节点center为中央区域控件创建边界式面板对象</td></tr><tr><td style="text-align:center">public BorderPane(Node center, Node top, Node right, Node bottom, Node left)</td><td style="text-align:center">创建边界式面板对象，并指定每个区域的节点</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.BorderPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTop(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的顶部区域</td></tr><tr><td style="text-align:center">public final void setBottom(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的底部区域</td></tr><tr><td style="text-align:center">public final void setLeft(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的左部区域</td></tr><tr><td style="text-align:center">public final void setRight(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的右部区域</td></tr><tr><td style="text-align:center">public final void setCenter(Node value)</td><td style="text-align:center">将节点value放置在边界式面板的中央区域</td></tr><tr><td style="text-align:center">public static void setAlignment(Node child, Pos value)</td><td style="text-align:center">设置节点的对齐方式</td></tr></tbody></table></div><p>如果要将某个区域的节点移除，如将顶部区域的节点删除，可以调用<code>rootPane.setTop(null)</code>方法来完成。如果一个区域没有被占用，那么不会分配空间给这个区域。</p><h3 id="网格面板类GridPane"><a href="#网格面板类GridPane" class="headerlink" title="网格面板类GridPane"></a>网格面板类GridPane</h3><p><code>javafx.scene.layout.GridPane</code></p><p>网格面板类似表格，由行和列组成的单元格用来放置节点。一个节点可以被放于任何单元格内，也可以根据需要占用多行或者多列摆放。</p><ul><li><code>javafx.scene.layout.GridPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public GridPane()</td><td style="text-align:center">创建网络面板</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.GridPane</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setHgap(double value)</td><td style="text-align:center">设置面板中节点间的水平间距为value像素</td></tr><tr><td style="text-align:center">public final void setVgap(double value)</td><td style="text-align:center">设置面板中节点间的垂直间距为value像素</td></tr><tr><td style="text-align:center">public void add(Node child, int columnIndex, int rowIndex)</td><td style="text-align:center">将节点child添加到网格面板的第columnIndex列和第rowIndex行单元格中</td></tr><tr><td style="text-align:center">public void add(Node child, int columnIndex, int rowIndex, int colspan, int rowspan)</td><td style="text-align:center">将节点添加到指定单元格中，并占用colspan列和rowspan行</td></tr><tr><td style="text-align:center">public static void setConstrains(Node child, int columnIndex, int rowIndex)</td><td style="text-align:center">将节点添加到指定的单元格中</td></tr><tr><td style="text-align:center">public static void setConstrains(Node child, int columnIndex, int rowIndex, int columnspan, int rowspan)</td><td style="text-align:center">将节点添加到指定的单元格中,并占用columnspan列和rowspan行</td></tr><tr><td style="text-align:center">public void addColumn(int columnIndex, Node… children)</td><td style="text-align:center">将参数指定的多个节点添加到指定的列</td></tr><tr><td style="text-align:center">public void addRow(int rowIndex, Node… children)</td><td style="text-align:center">将参数指定的多个节点添加到指定的行</td></tr><tr><td style="text-align:center">public static Integer getClumnIndex(Node child)</td><td style="text-align:center">返回给定节点child的列序号</td></tr><tr><td style="text-align:center">public static Integer getRowIndex(Node child)</td><td style="text-align:center">返回给定节点child的行序号</td></tr><tr><td style="text-align:center">public static void setColumnIndex(Node child, Integer value)</td><td style="text-align:center">将节点设置到新的列，该方法重新定位节点</td></tr><tr><td style="text-align:center">public static void setColumnIndex(Node child, Integer value)</td><td style="text-align:center">将节点设置到新的行，该方法重新定位节点</td></tr><tr><td style="text-align:center">public final void setGridLinesVisible(boolean value)</td><td style="text-align:center">设置是否显示网格线，默认值为false</td></tr><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置节点的对齐方式</td></tr></tbody></table></div><h3 id="单行面板类HBox和单列面板类VBox"><a href="#单行面板类HBox和单列面板类VBox" class="headerlink" title="单行面板类HBox和单列面板类VBox"></a>单行面板类HBox和单列面板类VBox</h3><p><code>javafx.scene.layout.HBox</code></p><p>单行面板也称水平面板，是在一行沿水平方向排列节点的方式。</p><ul><li><code>javafx.scene.layout.HBox</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public HBox()</td><td style="text-align:center">创建一个空的单行面板</td></tr><tr><td style="text-align:center">public HBox(double spacing)</td><td style="text-align:center">创建单行面板，其上节点的间距为spacing像素</td></tr><tr><td style="text-align:center">public HBox(Node… children)</td><td style="text-align:center">创建单行面板，并将参数指定的多个节点添加到面板中，节点的间距为0像素</td></tr><tr><td style="text-align:center">public HBox(double spacing, Node… children)</td><td style="text-align:center">创建单行面板，并将参数指定的多个节点添加到面板中，节点间距为spacing像素</td></tr></tbody></table></div><ul><li><code>javafx.scene.layout.HBox</code>类及父类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSpacing(double value)</td><td style="text-align:center">设置面板中节点之间的间距</td></tr><tr><td style="text-align:center">public static void setMargin(Node child, Insets value)</td><td style="text-align:center">为面板中的节点设置外边距</td></tr><tr><td style="text-align:center">pulic final void setAlignment(Pos value)</td><td style="text-align:center">设置面板中节点整体对齐方式，value是枚举Pos中的值</td></tr></tbody></table></div><h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p><code>javafx.scene.Group</code>,</p><p>Group是Parent的子类，不是Pane的子类。</p><p>Group 面板是一个组， 它包含一个可观察列表类ObservableList的对象，用于存放组的节点，这些节点只是按照出现在改组中的顺序显示，并不负责节点的布局，所以添加到Group中的控件通常需要绝对定位。</p><p>Group的主要作用是将一组节点组织在一起，并允许这些节点作为一个组进行操作。</p><p>Group是一个可以通过坐标设置控件位置的容器，而且控件和控件之间可以重叠，例如把两个控件的layoutX以及layoutY坐标都设置为0，那么这两个控件都会在Group的左上角出现，同时会重叠。</p><h2 id="JavaFX的辅助类"><a href="#JavaFX的辅助类" class="headerlink" title="JavaFX的辅助类"></a>JavaFX的辅助类</h2><p>辅助类<code>helper class</code>是用来描述节点属性的</p><ul><li>颜色类Color</li><li>字体类Font</li><li>图像类Image</li><li>图像显示类ImageView</li></ul><p>辅助类不都是Node类的子类</p><h3 id="颜色类Color"><a href="#颜色类Color" class="headerlink" title="颜色类Color"></a>颜色类Color</h3><p><code>javafx.scene.paint.Color</code>是抽象类Paint的子类，Paint是用于绘制节点的类</p><p>在JavaFX中每一种颜色都看成是由红、绿、蓝三原色和透明度组成</p><ul><li><code>javafx.scene.paint.Color</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Color(double red, double green, double blue, double opacity)</td><td style="text-align:center">用指定的red/green/blue三原色和透明度opacity创建对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.paint.Color</code>类中的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static Color color(double red, double green, double blue)</td><td style="text-align:center">用指定的red、green、blue值创建一个不透明的Color对象。参数取值范围均为0.0~1.0，与构造方法意义相同。</td></tr><tr><td style="text-align:center">public static Color color(double red, double green, double blue, double opacity)</td><td style="text-align:center">用指定的red、green、blue值及透明度opacity创建Color对象。参数取值范围均为0.0~1.0,与构造方法意义相同。</td></tr><tr><td style="text-align:center">public static Color rgb(int red, int green, int blue)</td><td style="text-align:center">用指定的red、green、blue值创建一个不透明的Color对象。参数取值范围均为0~255，与构造方法意义相似</td></tr><tr><td style="text-align:center">public static Color rgb(int red, int green, int blue, int opacity)</td><td style="text-align:center">用指定的red、green、blue值及透明度opacity创建Color对象。颜色参数取值范围均为0~255，opacity取值在0.0~1.0。</td></tr><tr><td style="text-align:center">public Color brighter()</td><td style="text-align:center">返回一个具有更大red、green、blue值的Color对象</td></tr><tr><td style="text-align:center">public Color darker()</td><td style="text-align:center">创建一个比Color对象更暗的Color对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.paint.Color</code>类中常用的代表颜色的静态常量</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">静态常量名</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">BEIGE</td><td style="text-align:center">浅褐色</td></tr><tr><td style="text-align:center">BROWN</td><td style="text-align:center">棕色</td></tr><tr><td style="text-align:center">GOLD</td><td style="text-align:center">金色</td></tr><tr><td style="text-align:center">LIGHTGRAY</td><td style="text-align:center">浅灰色</td></tr><tr><td style="text-align:center">ORANGE</td><td style="text-align:center">桔黄色</td></tr><tr><td style="text-align:center">SILVER</td><td style="text-align:center">银色</td></tr><tr><td style="text-align:center">BLACK</td><td style="text-align:center">黑色</td></tr><tr><td style="text-align:center">CYAN</td><td style="text-align:center">蓝青色</td></tr><tr><td style="text-align:center">GRAY</td><td style="text-align:center">灰色</td></tr><tr><td style="text-align:center">MAGENTA</td><td style="text-align:center">红紫色</td></tr><tr><td style="text-align:center">PINK</td><td style="text-align:center">粉红色</td></tr><tr><td style="text-align:center">WHITE</td><td style="text-align:center">白色</td></tr><tr><td style="text-align:center">BLUE</td><td style="text-align:center">蓝色</td></tr><tr><td style="text-align:center">DARKGRAY</td><td style="text-align:center">深蓝色</td></tr><tr><td style="text-align:center">GREEN</td><td style="text-align:center">绿色</td></tr><tr><td style="text-align:center">NAVY</td><td style="text-align:center">深蓝色</td></tr><tr><td style="text-align:center">RED</td><td style="text-align:center">红色</td></tr><tr><td style="text-align:center">YEALLOW</td><td style="text-align:center">黄色</td></tr></tbody></table></div><h3 id="字体类Font"><a href="#字体类Font" class="headerlink" title="字体类Font"></a>字体类Font</h3><p><code>javafx.scene.text.Font</code></p><p>描述字体名、字体粗细和字体大小的类。</p><ul><li><code>javafx.scene.text.Font</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public Font(double size)</td><td style="text-align:center">创建字体大小为size的字体对象，使用默认的System字体。size 的单位是磅值，1磅值为1/72英寸</td></tr><tr><td style="text-align:center">public Font(String name, double size)</td><td style="text-align:center">用给定的字体名称name和大小为size的值创建字体对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.text.Font</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public static Font font(String family, double size)</td><td style="text-align:center">创建字体名为family，大小为size的Font对象</td></tr><tr><td style="text-align:center">public static Font font(String family, FontWeight weight, double size)</td><td style="text-align:center">创建指定名称、字体粗细和大小的字体对象。字体粗细weight的取值在枚举FontWeight中定义,常用有BOLD(粗体) 、LIGHT(轻体)、NORMAL(正常体)</td></tr><tr><td style="text-align:center">public static Font font(String family, FontWeight weight, FontPosture posture, double size)</td><td style="text-align:center">创建指定名称、字体粗细、字体形态和大小的字体对象。字体形态posture的取值在枚举FontPosture中定义,为ITALIC(斜体)和默认的REGULAR(正常体)</td></tr><tr><td style="text-align:center">public final String getFamily()</td><td style="text-align:center">返回系统默认的字体</td></tr><tr><td style="text-align:center">public static List &lt; String &gt; getFamilies()</td><td style="text-align:center">返回字体集名称的列表</td></tr><tr><td style="text-align:center">public static List &lt; String &gt; getFontNames()</td><td style="text-align:center">返回所有字体完整名称的列表，包括字体集和粗细</td></tr></tbody></table></div><h3 id="图像类Image和图像显示类ImageView"><a href="#图像类Image和图像显示类ImageView" class="headerlink" title="图像类Image和图像显示类ImageView"></a>图像类Image和图像显示类ImageView</h3><p>JavaFX支持的图像格式有.jpg、.gif、.png和.bmp等。</p><ul><li><code>javafx.scene.image.Image</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public Image(String url)</td><td style="text-align:center">用图像的url地址创建图像</td></tr><tr><td style="text-align:center">public Image(String url, boolean backgroundLoading)</td><td style="text-align:center">用图像的url地址创建图像，并设置是否在后台加载(异步加载)图像</td></tr><tr><td style="text-align:center">public Image(String url, double requestedWidth, double requestedHeight, boolean preserveRatio, boolean smooth)</td><td style="text-align:center">创建图像，并指定图像边界框的宽和高(像素)，preserveRatio用于设置是否保持图像的高宽比，smooth用于设置是否使用平滑图像算法显示图像</td></tr><tr><td style="text-align:center">public Image(String url, double requestedWidth, double requestedHeight, boolean preserveRatio, boolean smooth, boolean backgroundLoading)</td><td style="text-align:center">参数意义同上，并设置是否在后台加载图像</td></tr></tbody></table></div><p>ImageView对象是一个可以显示图像的对象。<br>ImageView是一个包装器对象，用来引用Image对象。</p><ul><li><code>javafx.scene.image.ImageView</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public ImgaeView()</td><td style="text-align:center">创建一个不包含图像的lmageView对象</td></tr><tr><td style="text-align:center">public imageView(String url)</td><td style="text-align:center">用指定图像对象的url创建ImageView对象</td></tr><tr><td style="text-align:center">public imageView(Image image)</td><td style="text-align:center">用指定图像对象image创建ImageView对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.image.ImageView</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">代表颜色</th></tr></thead><tbody><tr><td style="text-align:center">public final void setImage(Image value)</td><td style="text-align:center">设置显示的图像</td></tr><tr><td style="text-align:center">public final void setFitWidth(double value)</td><td style="text-align:center">设置图像视图的宽度为value像素</td></tr><tr><td style="text-align:center">public final void setFitHeight</td><td style="text-align:center">设置图像视图的高度为value像素</td></tr><tr><td style="text-align:center">public final void setPreserveRatio(boolean value)</td><td style="text-align:center">设置图像是否保持缩放比例</td></tr><tr><td style="text-align:center">public final void setSmooth(boolean value)</td><td style="text-align:center">设置是否使用平滑图像算法显示图像</td></tr><tr><td style="text-align:center">public final void setViewport(Rectangle2D value)</td><td style="text-align:center">设置图像显示窗口，Rectangle2D对象value中需给出x坐标、y坐标、宽度和高度的像素值</td></tr></tbody></table></div><p>在ImageView类定义了x和y属性，用于表示ImageView图像视图的原点坐标。</p><p>image属性表示图像。fitWidth和fitHeight两个属性表示图像改变大小后将边界框调整到适合图像的宽度和高度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span> <span class="variable">img</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(<span class="string">&quot;image/test.jpg&quot;</span>);</span><br><span class="line"><span class="type">ImageView</span> <span class="variable">iv2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageView</span>();</span><br><span class="line">iv2.setImage(img);<span class="comment">//绑定组件</span></span><br><span class="line"></span><br><span class="line">iv2.setFifWidth(<span class="number">80</span>);<span class="comment">//视图宽度为80像素</span></span><br><span class="line">iv2.setPreserveRatio(<span class="literal">true</span>);<span class="comment">//设置保持缩放比例</span></span><br><span class="line">iv2.setSmooth(<span class="literal">true</span>);<span class="comment">//设置平滑显示图像</span></span><br><span class="line">iv2.setCache(<span class="literal">true</span>);<span class="comment">//设置缓冲以提高性能</span></span><br></pre></td></tr></table></figure><p>一个Image对象可以被多个ImageView对象所共享，本例中图像对象im被两个ImageView对象iv2和iv3所共享。</p><p>但ImageView对象是不可以共享的，即不能将一个ImageView对象多次放入一个面板或一个场景中。</p><p>由于ImageView类也是Node类的子类，因此也可以对它进行变换、缩放和模糊等特效操作。</p><h2 id="JavaFX的属性绑定和绑定属性"><a href="#JavaFX的属性绑定和绑定属性" class="headerlink" title="JavaFX的属性绑定和绑定属性"></a>JavaFX的属性绑定和绑定属性</h2><p>以将一个目标对象与一个源对象绑定，如果源对象中的值改变了，目标对象的值也将自动改变。</p><p>目标对象称为绑定对象或绑定属性，源对象称为可绑定对象或可观察对象。</p><p>目标对象与源对象的绑定是通过<code>javafx.beans.property.Property</code>接口中定义的<code>void bind(ObservableValue &lt; ? extends T &gt; observable)</code>方法实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.bind(source); <span class="comment">//源对象source相当于自变量,目标对象target相当于因变量</span></span><br></pre></td></tr></table></figure><p>JavaFX类中声明绑定属性的类型是形如XxxProperty样式。</p><p>JavaFX为基本类型、字符串类型和集合类型定义了绑定属性类型。如基本类型double的绑定属性类型是DoubleProperty，该类型是抽象类，所以不能用它创建对象，而必须用其子类SimpleDoubleProperty来创建具体的对象。</p><ul><li>JavaFX部分数据类型与其绑定属性类型及用于创建属性绑定对象所对应的子类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">绑定属性类型(抽象类)</th><th style="text-align:center">用于创建绑定属性对象的子类</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">IntgerProperty</td><td style="text-align:center">SimpleIntgerProperty</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">LongProperty</td><td style="text-align:center">SimpleLongProperty</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">FloatProperty</td><td style="text-align:center">SimpleFloatProperty</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">DoubleProperty</td><td style="text-align:center">SimpleDoubleProperty</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">BooleanProperty</td><td style="text-align:center">SimpleBooleanProperty</td></tr><tr><td style="text-align:center">String</td><td style="text-align:center">StringProperty</td><td style="text-align:center">SimpleStringProperty</td></tr><tr><td style="text-align:center">List</td><td style="text-align:center">ListProperty</td><td style="text-align:center">SimpleListProperty</td></tr><tr><td style="text-align:center">Set</td><td style="text-align:center">SetProperty</td><td style="text-align:center">SimpleSetProperty</td></tr><tr><td style="text-align:center">Map</td><td style="text-align:center">MapProperty</td><td style="text-align:center">SimpleMapProperty</td></tr></tbody></table></div><p>虽然绑定属性要用相应的绑定属性类型来声明，但创建该绑定属性时却要用其相应的子类来创建。</p><p>绑定属性：在类中声明为一种特殊数据类型的成员变量。</p><p>属性绑定：两个绑定属性之间建立一个绑定关系，这样当源对象的绑定属性值发生变化时，目标对象的绑定属性就会随之变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c.setCenterX(<span class="number">100</span>);</span><br><span class="line">c.setCenterY(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">c.centerXProperty().bind(pane.widthProperty().divide(<span class="number">2</span>));</span><br><span class="line">c.centerYProperty().bind(pane.heightProperty().divide(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>对于数值类型的绑定属性，如<code>DoubleProperty()</code>都具有<code>add()</code>、<code>substract()</code>、<code>multiply()</code>、<code>divide()</code>方法。</p><p>JavaFX属性的主要功能是属性绑定和事件处理。</p><p>通过属性的<code>addListener()</code>方法可以为其注册监听者，通过属性的<code>bind()</code>方法可以实现属性绑定。</p><p>利用<code>bind()</code>方法进行属性绑定时，只是目标对象随着源对象的变化而变化，这种绑定称为<code>单向绑定</code>。<br>有时候需要同步两个属性，即目标和源双方都既是绑定对象也是可观察对象，这时可使用<code>bindBidirectional()</code>方法进行属性的<code>双向绑定</code>。</p><p>属性双向绑定后，两者中不管哪一个发生变化，另一方也会被相应地更新。</p><h2 id="JavaFX常用控件"><a href="#JavaFX常用控件" class="headerlink" title="JavaFX常用控件"></a>JavaFX常用控件</h2><p>标签、按钮、复选框、单选按钮、文本框、文本区、组合框、列表视图等，控件是节点Node的子类。</p><p>与面板不同，控件类对象不能再包含其他控件，控件的作用是完成与用户的交互，包括接收用户的命令、接收用户的输入或用户的选择或向用户显示信息等。</p><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">标签</td><td style="text-align:center">Label</td><td style="text-align:center">菜单条</td><td style="text-align:center">MenuBar</td></tr><tr><td style="text-align:center">命令按钮</td><td style="text-align:center">Button</td><td style="text-align:center">菜单</td><td style="text-align:center">Menu</td></tr><tr><td style="text-align:center">单选按钮</td><td style="text-align:center">RadioButton</td><td style="text-align:center">菜单项</td><td style="text-align:center">MenuItem</td></tr><tr><td style="text-align:center">文本框</td><td style="text-align:center">TextField</td><td style="text-align:center">单选菜单按钮</td><td style="text-align:center">RadioMenuItem</td></tr><tr><td style="text-align:center">密码文本框</td><td style="text-align:center">PsswordField</td><td style="text-align:center">复选菜单按钮</td><td style="text-align:center">CheckMenuItem</td></tr><tr><td style="text-align:center">文本区</td><td style="text-align:center">TextArea</td><td style="text-align:center">弹出菜单</td><td style="text-align:center">ContextMenu</td></tr><tr><td style="text-align:center">复选框</td><td style="text-align:center">CheckBox</td><td style="text-align:center">滚动条</td><td style="text-align:center">ScrollBar</td></tr><tr><td style="text-align:center">组合框</td><td style="text-align:center">ComboBox</td><td style="text-align:center">进度条</td><td style="text-align:center">ProgressBar</td></tr><tr><td style="text-align:center">选择框</td><td style="text-align:center">ChoiceBox</td><td style="text-align:center">滑动条</td><td style="text-align:center">Slider</td></tr><tr><td style="text-align:center">列表视图</td><td style="text-align:center">ListView</td><td style="text-align:center">工具栏</td><td style="text-align:center">ToolBar</td></tr><tr><td style="text-align:center">表格视图</td><td style="text-align:center">TableView</td><td style="text-align:center">工具提示</td><td style="text-align:center">ToolTip</td></tr><tr><td style="text-align:center">树视图</td><td style="text-align:center">TreeView</td><td style="text-align:center">颜色选择器</td><td style="text-align:center">ColorPicker</td></tr><tr><td style="text-align:center">选项卡面板</td><td style="text-align:center">TabPane</td><td style="text-align:center">日期选择器</td><td style="text-align:center">DatePicker</td></tr><tr><td style="text-align:center">选项卡</td><td style="text-align:center">Tab</td><td style="text-align:center">对话框</td><td style="text-align:center">Dialog</td></tr><tr><td style="text-align:center">微调选择器</td><td style="text-align:center">Spinner</td><td style="text-align:center">超链接</td><td style="text-align:center">Hyperlink</td></tr></tbody></table></div><h3 id="标签类Label"><a href="#标签类Label" class="headerlink" title="标签类Label"></a>标签类Label</h3><p><code>javafx.scene.control.Label</code></p><p>用来显示文字、图片的控件，标签上的内容只能显示不可编辑，所以标签常用来给文本控件或其他控件作为标签用。</p><ul><li><code>javafx.scene.control.Label</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public Label()</td><td style="text-align:center">创建一个没有文字与图像的标签</td></tr><tr><td style="text-align:center">public Label(String text)</td><td style="text-align:center">创建标签，并以text为标签上的文字</td></tr><tr><td style="text-align:center">public Label(String text, Node graphic)</td><td style="text-align:center">以text为文字、以graphic为图形创建标签</td></tr></tbody></table></div><p>以Labeled类中定义的方法可为标签和按钮所共用</p><ul><li><code>javafx.scene.control.Labeled</code>类中标签和按钮的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">控件名称</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置控件上的文本</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置控件上的字体</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">设置控件上的图形为value</td></tr><tr><td style="text-align:center">public final vaoid setAlignment(Pos value)</td><td style="text-align:center">设置控件上文本和节点的对齐方式为value, value的取值是枚举Pos中的枚举常量</td></tr><tr><td style="text-align:center">public final void setTextFill(Paint value)</td><td style="text-align:center">设置文本的颜色</td></tr><tr><td style="text-align:center">public final void setWrapText(boolean value)</td><td style="text-align:center">设置如果文本超出宽度，是否自动换行</td></tr><tr><td style="text-align:center">public final void setUnderline(boolean value)</td><td style="text-align:center">设置文本是否加下画线</td></tr><tr><td style="text-align:center">public fianl void setConetntDisplay(ContentDisplay value)</td><td style="text-align:center">使用枚举ContentDisplay的常量值TOP、BOTTOM、LEFT和RIGHT等设置节点相对于文本的位置</td></tr></tbody></table></div><h3 id="文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane"><a href="#文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane" class="headerlink" title="文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane"></a>文本编辑控件TextField、PasswordFiled、TextArea与滚动面板ScrollPane</h3><p>文本编辑控件是可以接收用户的文本输入并具有一定编辑功能的界面元素。</p><p>文本编辑控件分为三种：</p><ul><li>第一种是<code>单行文本编辑控件</code>，简称文本框，也称文本行；</li><li>第二种是<code>密码文本框控件</code>，是通过PasswordField类实现的；</li><li>第三种是<code>多行文本编辑控件</code>，简称文本区，是通过TextArea类实现的。</li></ul><p>TextField类和TextArea类是javafx.scene.control.TextInputControl类的子类，而PasswordField类是TextField的子类。</p><ul><li><code>javafx.scene.control.TextInputControl</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">类名</th></tr></thead><tbody><tr><td style="text-align:center">public void appendText(String text)</td><td style="text-align:center">将文本text追加到输入框中</td></tr><tr><td style="text-align:center">public void clear()</td><td style="text-align:center">清除文本控件中的所有文本</td></tr><tr><td style="text-align:center">public void deleteText(int start, int end)</td><td style="text-align:center">在文本控件中删除start与end之间的文本</td></tr><tr><td style="text-align:center">public final String getSelectedText()</td><td style="text-align:center">返回选中的文本</td></tr><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回文本控件中的所有文本</td></tr><tr><td style="text-align:center">public String getText(int start, int end)</td><td style="text-align:center">返回start与end之间的文本</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置文本组件是否可编辑</td></tr><tr><td style="text-align:center">public final boolean isEditable()</td><td style="text-align:center">判断文本组件是否可编辑</td></tr><tr><td style="text-align:center">public void paste()</td><td style="text-align:center">将剪贴板中的内容粘贴到文本中，用于替换当前选择的文本。如果没有选择的文本，则插人到当前光标所在的位置</td></tr><tr><td style="text-align:center">public void selectAll()</td><td style="text-align:center">选中文本控件中的所有文本</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置文本控件中文本的字体</td></tr><tr><td style="text-align:center">public fianl void setText(String value)</td><td style="text-align:center">将字符串value设置为文本控件中的文本</td></tr><tr><td style="text-align:center">public final void setPromptText(String value)</td><td style="text-align:center">设置文本框的提示文本</td></tr></tbody></table></div><h4 id="文本框控件TextField"><a href="#文本框控件TextField" class="headerlink" title="文本框控件TextField"></a>文本框控件TextField</h4><ul><li><code>javafx.scene.control.TextField</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TextField()</td><td style="text-align:center">创建一个不包含文本的空白文本框</td></tr><tr><td style="text-align:center">public TextField(String text)</td><td style="text-align:center">创建初始文本为text的文本框</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TextField</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setAlignment(Pos value)</td><td style="text-align:center">设置文本框中文本的对齐方式，value是枚举Pos中的值</td></tr><tr><td style="text-align:center">public final void setPrefColumnCount(int value)</td><td style="text-align:center">设置文本框的显示宽度为value列</td></tr><tr><td style="text-align:center">public final void setOnAction(EventHandler &lt; ActionEvent &gt; value)</td><td style="text-align:center">设置文本框动作事件监听者</td></tr></tbody></table></div><h4 id="密码文本框控件PasswordField"><a href="#密码文本框控件PasswordField" class="headerlink" title="密码文本框控件PasswordField"></a>密码文本框控件PasswordField</h4><p><code>javafx.scene.control.PasswordField</code></p><p>只有一个无参的构造方法public PasswordField（）。密码文本框控件多用其父类的方法。</p><h4 id="文本区控件TextArea与滚动面板ScrollPane"><a href="#文本区控件TextArea与滚动面板ScrollPane" class="headerlink" title="文本区控件TextArea与滚动面板ScrollPane"></a>文本区控件TextArea与滚动面板ScrollPane</h4><p><code>javafx.scene.control.TextArea</code></p><p>文本区实际上是多行文本输入框，因为文本框只能输入一行文字，所以在需要输入和显示较多的文字时， 就可使用文本区。</p><ul><li><code>javafx.scene.control.TextArea</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TextArea()</td><td style="text-align:center">创建一个不包含文本的空文本区</td></tr><tr><td style="text-align:center">public TextArea(String text)</td><td style="text-align:center">创建一个默认文本为text的文本区</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TextArea</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setPrefColumnCount(int value)</td><td style="text-align:center">设置文本区的显示列数为value</td></tr><tr><td style="text-align:center">public final void setPreRow(int value)</td><td style="text-align:center">设置文本区的显示行数为value</td></tr><tr><td style="text-align:center">public final void setWrapText(boolean value)</td><td style="text-align:center">设置当文本区行的长度大于文本区的宽度时是否自动换行，Value的默认值为false，不换行</td></tr></tbody></table></div><p>文本区中显示的文本行数和列数都有可能超出文本区的范围，这时就需要使用滚动条来进行滚动操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口中利用面板组织文本编辑控件，并利用滚动面板实现文本区的滚动功能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Label;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextField;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.PasswordField;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ScrollPane;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Insets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_11</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Label</span> <span class="variable">lab1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;用户名: &quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Label</span> <span class="variable">lab2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;密码: &quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">PasswordField</span> <span class="variable">pf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PasswordField</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;你好,我是文本区&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">GridPane</span> <span class="variable">rootGP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridPane</span>();</span><br><span class="line">rootGP.setPadding(<span class="keyword">new</span> <span class="title class_">Insets</span>(<span class="number">10</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">8</span>));</span><br><span class="line">rootGP. setHgap(<span class="number">5</span>);</span><br><span class="line">rootGP. setVgap(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">tf.setPromptText(<span class="string">&quot;输人用户名&quot;</span>);</span><br><span class="line">rootGP.add(lab1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">rootGP.add(tf, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">pf.setPromptText(<span class="string">&quot;输人密码&quot;</span>);</span><br><span class="line">rootGP.add(lab2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">rootGP.add(pf, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认密码&quot;</span>);</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;编辑文本&quot;</span>);</span><br><span class="line">rootGP.add(bt1,<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">rootGP.add(bt2,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">ScrollPane</span> <span class="variable">scro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ta);</span><br><span class="line">ta.setPrefColumnCount(<span class="number">12</span>);</span><br><span class="line">ta.setEditable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">rootGP.add(scro, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(rootGP, <span class="number">400</span>, <span class="number">120</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;网格与文本控件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene) ;</span><br><span class="line">primaryStage.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_11%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_11运行结果"><blockquote><p>JavaFX的任何节点都可放置在滚动面板ScrollPane中。如果控件太大以致不能在显示区内完整显示时，滚动面板ScrollPane提供了垂直和水平方向的滚动支持。</p></blockquote><h3 id="复选框CheckBox和单选按钮RadioButton"><a href="#复选框CheckBox和单选按钮RadioButton" class="headerlink" title="复选框CheckBox和单选按钮RadioButton"></a>复选框CheckBox和单选按钮RadioButton</h3><p><code>javafx.scene.control.CheckBox</code><br><code>javafx.scene.control.RadioButton</code></p><p>复选框和单选按钮都是让用户选取项目的一种组件，用户利用该组件来获得相应的输入。</p><p>其中复选框可以单独使用，而单选按钮必须配合javafx.scene.control.ToggleGroup类将其组成单选按钮组来使用，所有隶属于同一ToggleGroup组的RadioButton组件具有互斥属性。</p><ul><li><code>javafx.scene.control.CheckBox</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public CheckBox()</td><td style="text-align:center">创建一个没有文字、初始状态未被选中的复选框</td></tr><tr><td style="text-align:center">public CheckBox(String box)</td><td style="text-align:center">创建一个以text为文字、初始状态未被选中的复选框</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.CheckBox</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSelected(boolean value)</td><td style="text-align:center">设置复选框是否被选中</td></tr><tr><td style="text-align:center">public final boolean isSelected</td><td style="text-align:center">判断复选框是否被选中，若选中则返回true，否则返回false</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置复选框上文字为value</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口中组织复选框和单选按钮。</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.RadioButton;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ToggleGroup;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.VBox;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App14_12</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;粗体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;斜体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CheckBox</span> <span class="variable">chk3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;楷体&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RadioButton</span> <span class="variable">rb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Button</span> <span class="variable">bt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Button</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;我是文本区&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    chk2.setSelected(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">3</span>);</span><br><span class="line">        vbL.getChildren().addAll(chk1, chk2, chk3);</span><br><span class="line">        </span><br><span class="line">        rb1.setSelected(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ToggleGroup</span> <span class="variable">gro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToggleGroup</span>();</span><br><span class="line">        rb1.setToggleGroup(gro);</span><br><span class="line">        rb2.setToggleGroup(gro);</span><br><span class="line">        rb3.setToggleGroup(gro);        </span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">3</span>);        </span><br><span class="line">        vbR.getChildren().addAll(rb1, rb2, rb3);</span><br><span class="line">        </span><br><span class="line">        <span class="type">HBox</span> <span class="variable">hB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>(<span class="number">20</span>);</span><br><span class="line">        hB.getChildren().addAll(bt1, bt2);</span><br><span class="line">        hB.setAlignment(Pos.CENTER);</span><br><span class="line">        </span><br><span class="line">        <span class="type">BorderPane</span> <span class="variable">rootBP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">        ta.setPrefColumnCount(<span class="number">10</span>);<span class="comment">//宽度10列</span></span><br><span class="line">        ta.setPrefRowCount(<span class="number">3</span>) ;<span class="comment">//显示高度3行</span></span><br><span class="line">        ta.setWrapText(<span class="literal">true</span>);<span class="comment">//自动换行</span></span><br><span class="line">        </span><br><span class="line">        rootBP.setLeft(vbL);</span><br><span class="line">        rootBP.setRight(vbR);</span><br><span class="line">        rootBP.setCenter(ta);</span><br><span class="line">        rootBP.setBottom(hB) ;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>( rootBP);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;复选框与单选按钮&quot;</span>);</span><br><span class="line">        primaryStage.setScene( scene) ;</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App14_12%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App14_12运行结果"><h3 id="选项卡面板TabPane和选项卡Tab"><a href="#选项卡面板TabPane和选项卡Tab" class="headerlink" title="选项卡面板TabPane和选项卡Tab"></a>选项卡面板TabPane和选项卡Tab</h3><p>在JavaFX中选项卡是由javafx.scene.control.Tab类实现，选项卡必须放入选项卡面板中，选项卡面板是由javafx.scene.control.TabPane类实现的。</p><p>可以把多个组件放在多个不同选项卡中，从而使页面不致拥挤，其选项卡的形式也能为程序增色不少。<br>用户只需单击每个选项卡的标题，就可以切换到不同的选项卡。<br>选项卡面板中的每个选项卡都可以直接放入节点，也可以添加一个面板来组织其他节点。</p><ul><li><code>javafx.scene.control.TabPane</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TabPane()</td><td style="text-align:center">创建一个不含选项卡的选项卡面板对象</td></tr><tr><td style="text-align:center">public TabPane(Tab… tabs)</td><td style="text-align:center">创建选项卡面板，并将参数指定的多个选项卡添加到选项卡面板中</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.TabPane</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTabMaxHeight(double value)</td><td style="text-align:center">设置选项卡面板的最大高度值为value</td></tr><tr><td style="text-align:center">public final void setTabMaxWidth(double value)</td><td style="text-align:center">设置选项卡面板的最大宽度值为value</td></tr><tr><td style="text-align:center">public final void setTabMinHeight(double value)</td><td style="text-align:center">设置选项卡面板的最小高度值为value</td></tr><tr><td style="text-align:center">public final void setTabMinWidth(double value)</td><td style="text-align:center">设置选项卡面板的最小宽度值为value</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Tab &gt; getTabs()</td><td style="text-align:center">返回选项卡面板中的节点列表</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Tab</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Tab()</td><td style="text-align:center">创建一个不含标题的选项卡对象</td></tr><tr><td style="text-align:center">public Tab(String text)</td><td style="text-align:center">创建一个标题为text的选项卡对象</td></tr><tr><td style="text-align:center">public Tab(String text, Node content)</td><td style="text-align:center">创建一个标题为text且包含节点content的选项卡对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Tab</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setContent(Node value)</td><td style="text-align:center">设置选项卡上包含的节点为value</td></tr><tr><td style="text-align:center">public final void setTooltip(Tooltip value)</td><td style="text-align:center">当鼠标悬停在选项卡上时提示信息为value</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">设置选项卡的标题为value</td></tr><tr><td style="text-align:center">public final void setStyle(String value)</td><td style="text-align:center">设置选项卡的样式</td></tr><tr><td style="text-align:center">public final void setClosable(boolean value)</td><td style="text-align:center">设置选项卡是否可以被关闭</td></tr></tbody></table></div><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>JavaFX的主类必须继承<code>javafx.application.Application</code>类并实现start()方法。JVM自动创建一个主舞台对象并将该对象的引用传递给start()方法。</li><li>任何JavaFX程序至少要有一个舞台和一个场景，舞台和场景共同构建了JavaFX程序的图形界面，它是构建应用程序的起点。</li><li>场景Scene中可以包含面板Pane或控件Control，但不能包含形状Shape和图像显示类ImageView。</li><li>虽然可以直接将节点置于场景中，但更好的办法是先将节点放入面板中，然后再将面板放入场景中。Pane类的对象通常用作显示形状的画布，但其子类面板主要用于包含和组织节点。</li><li>场景图是场景中所有节点构成的树形结构图。</li><li>Node类是所有节点的根类，该类中定义的属性和方法被其子类所共享。</li><li>Pane类是所有面板的基类，该类的getChildren()方法返回值是一个ObservableList对象，该对象是一个用于存储面板中节点的列表。</li><li>使用<code>javafx.scene.image.Image</code>类装载图像， 用<code>javafx.scene.image.ImageView</code>类显示图像。</li><li>绑定属性和属性绑定是两个不同的概念。绑定属性是指在类中声明为一种特殊数据类型的成员变量；而属性绑定则是指在两个绑定属性之间建立起一种绑定关系，这样当原对象的绑定属性值发生变化时，目标对象的绑定属性值就会随之变化。</li><li>声明绑定属性时，必须用绑定属性类型来声明绑定属性。</li><li>因为ToggleGroup不是节点类Node的子类，所以ToggleGroup类创建的单选按钮组对象不能加入到面板中。</li><li>JavaFX的任何节点都可放置在滚动面板ScrollPane中。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>JavaFX窗口的结构包含哪些内容？</li><li>JavaFX程序的主舞台是如何生成的？主舞台与其他舞台有何区别？如何显示一个舞台？</li><li>如何创建Scene对象？如何在舞台中设置场景？</li><li>什么是节点？什么是面板？什么是场景图？</li><li>可以直接将控件Control和面板Pane加入到场景Scene中吗？可以直接将形状Shape或者图像视图ImageView加入到场景中吗？</li><li>什么是属性绑定？单向绑定和双向绑定有何区别？是否所有属性都可进行双向绑定？</li><li>创建Color对象一定要用其构造方法吗？创建Font对象一定要用其构造方法吗？</li><li>编程实现输出系统中所有可用的字体？</li><li>可以将一个Image设置到多个ImageView上吗？ 可以将一个ImageView显示多次吗？</li><li>如何将一个节点加入到面板中？</li><li>创建一个HBox面板对象，并设置其上控件间距为10像素，然后将两个带有文字和图像的按钮添加到HBox面板中。</li><li>创建一个栈面板对象，并将一幅图像放置在栈面板中，然后将栈面板逆时针旋转45°。</li><li>编写一个JavaFX程序，在网格面板中，第一行放置标签和文本框，第二行设置文本区和按钮。</li><li>编写一个JavaFX程序，顺时针旋转90°显示三行文字，并对每行文字设置一个随机颜色和透明度，并设置不同的外观样式。</li><li>创建一个具有三个选项卡的选项卡面板，在每个选项卡中放置一个带有文字的标签。</li></ul><h1 id="第十五章-事件处理"><a href="#第十五章-事件处理" class="headerlink" title="第十五章 事件处理"></a>第十五章 事件处理</h1><p>使控件能够响应并处理用户的操作，这就是事件处理。</p><p>消息处理、事件驱动是面向对象编程技术的主要特点。</p><p>路线：</p><ul><li>创建窗口：利用主舞台和场景创建窗口。</li><li>创建节点：创建组成图形界面元素的各种节点，如按钮、文本框等。</li><li>构建场景图：根据具体需要利用面板组织窗口上各节点的布局。</li><li>响应事件：定义图形用户界面的事件和界面各元素对不同事件的响应，从而实现图形用户界面与用户的交互功能。</li></ul><h2 id="Java语言的事件处理机制——委托事件模型"><a href="#Java语言的事件处理机制——委托事件模型" class="headerlink" title="Java语言的事件处理机制——委托事件模型"></a>Java语言的事件处理机制——委托事件模型</h2><p>用户在界面中输入命令是通过键盘或对特定界面元素（如按钮）单击鼠标来实现的。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>谓事件（event）就是用户使用鼠标或键盘对窗口中的控件进行交互时所发生的事情。</p><p>事件用于描述发生了什么事情，对这些事件做出响应的程序，称为事件处理程序（event handler）。</p><h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>谓事件源（event source）就是能够产生事件并触发它的控件，如一个按钮就是按钮单击动作事件的事件源。</p><h4 id="事件监听者"><a href="#事件监听者" class="headerlink" title="事件监听者"></a>事件监听者</h4><p>把对事件进行处理的方法放在一个类对象中，这个类对象就是事件监听者（listener），简称<br>监听者。</p><p>事件源通过调用相应的方法将某个对象设置为自己的监听者，监听者有专门的方法来处理事件。</p><p>当事件源上发生事件时，事件监听者能够监听到，并调用相应的方法对发生的事件做出相应的处理。</p><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p><code>javafx.event</code>包中包含了事件类和用来处理事件的接口。</p><p>为了让监听者能对事件源发生的事件进行处理，创建该监听者对象的类必须声明实现相应的监听者接口，即必须在类中具体定义该接口中的所有方法，以供监听者自动调用相应事件处理方法来完成对应事件处理的任务，这些处理事件的方法就是事件处理程序。</p><h3 id="委托事件模型"><a href="#委托事件模型" class="headerlink" title="委托事件模型"></a>委托事件模型</h3><p>委托事件模型（delegation event model）将事件源（如命令按钮）和对事件做出的具体处理（利用监听者来对事件进行具体的处理）分离开来。</p><p>控件（事件源）不处理自己的事件，而是将事件处理委托给外部的处理实体（监听者）。</p><p>事件对象（eventobject）表示事件的内容，包含了与事件相关的任何属性，事件对象内部封装了一个对事件源的引用和其他信息，这个事件对象将作为参数自动传递给处理该事件的方法。</p><p>委托事件模型就是由产生<em>事件的对象（事件源）</em>、<em>事件对象</em>以及<em>事件监听者</em>对象之间所组成的关联关系。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%A7%94%E6%89%98%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" class="" title="委托事件模型的工作原理"><p>一个监听者可以为很多事件源服务，一个事件源可以有多个相同或不同类型的监听者。</p><p>多事件监听：一个控件对应多个事件。</p><p>单事件监听：多个控件对应一个事件。</p><p>事件监听者必须是一个对应的事件监听者接口的实例。JavaFX定义了一个对于事件T的统一的监听者接口<code>EventHandler &lt; T extends Event &gt;</code>。</p><p>ActionEvent 的每个监听者接口都应实现<code>handle(ActionEvent e)</code>方法，从而处理一个动作事件ActionEvent。</p><p>事件监听者对象必须通过事件源进行注册，注册方法依赖于事件类型。</p><p>动作事件<code>ActionEvent</code>，事件源是使用<code>setOnAction()</code>方法进行注册。<br>对于鼠标按下事件，事件源是使用<code>setOnMousePressed()</code>方法进行注册；<br>对于一个按键事件，事件源是使用<code>setOnKeyPressed()</code>方法进行注册。</p><h4 id="定义内部类并让内部类对象来承担监听者"><a href="#定义内部类并让内部类对象来承担监听者" class="headerlink" title="定义内部类并让内部类对象来承担监听者"></a>定义内部类并让内部类对象来承担监听者</h4><p>把实现接口的类定义成内部类，内部类可以访问外部类的成员方法与成员变量，包括私有成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个窗口中摆放两个控件：一个是命令按钮；另一个是文本区。当单击命令按钮后，将文本区中的字体颜色设置为红色。由于按钮触发动作事件，所以触发按钮便把ActionEvent的对象传递给向它注册的监听者，请它负责处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"><span class="type">Han</span> <span class="variable">eh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Han</span>();</span><br><span class="line">bt.setOnAction(eh);</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Han</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/App15_1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="App15_1运行结果"><p>类在实现监听者接口时，必须在类中具体定义该接口中只声明而未定义的所有方法。因为监听者接口<code>EventHandler &lt; ActionEvent &gt;</code>中只提供了一个<code>handle(ActionEvent e)</code>方法，该方法正是要把事件处理程序编写在里面的方法。</p><h4 id="使用匿名内部类来担任监听者"><a href="#使用匿名内部类来担任监听者" class="headerlink" title="使用匿名内部类来担任监听者"></a>使用匿名内部类来担任监听者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_2</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"></span><br><span class="line">bt.setOnAction(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                    ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Lambda表达式来担任监听者"><a href="#使用Lambda表达式来担任监听者" class="headerlink" title="使用Lambda表达式来担任监听者"></a>使用Lambda表达式来担任监听者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_3</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="type">Button</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;设置字体颜色&quot;</span>);</span><br><span class="line"><span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;字体颜色&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line">bPane.setBottom(bt);</span><br><span class="line"></span><br><span class="line">BorderPane.setAlignment(bt, Pos.CENTER);</span><br><span class="line"></span><br><span class="line">bt.setOnAction(e -&gt; ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">180</span>, <span class="number">100</span>);</span><br><span class="line">primaryStage.setTitle(<span class="string">&quot;操作事件&quot;</span>);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java语言的事件类"><a href="#Java语言的事件类" class="headerlink" title="Java语言的事件类"></a>Java语言的事件类</h2><p>Java事件类的根是<code>java.util.EventObject</code>，JavaFX事件类的根是<code>javafx.event.Event</code>。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E4%B8%BB%E8%A6%81%E4%BA%8B%E4%BB%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX主要事件类的继承关系"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是从事件对象中获取触发事件的事件源</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSource</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回的都是Object类型的对象，所以开发人员需要自己编写代码进行对象的强制类型转换。</span></span><br></pre></td></tr></table></figure><ul><li>用户动作、事件源、触发的事件类型和事件注册方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">用户动作</th><th style="text-align:center">事件源</th><th style="text-align:center">触发的事件类型</th><th style="text-align:center">事件注册方法</th></tr></thead><tbody><tr><td style="text-align:center">单击按钮</td><td style="text-align:center">Button</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">在文本框中按Enter键</td><td style="text-align:center">TextField</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选中或取消选中</td><td style="text-align:center">RadioButton</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选中或取消选中</td><td style="text-align:center">CheckBox</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">选择一个新选项</td><td style="text-align:center">ComboBox</td><td style="text-align:center">ActionEvent</td><td style="text-align:center">SetOnAction(EventHandler &lt; ActionEvent &gt; e)</td></tr><tr><td style="text-align:center">按下鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMousePressed(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">释放鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseReleased(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">单击鼠标</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseClicked(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标进人</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseEntered(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标离开</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseExited(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标移动</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseMoved(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">鼠标拖动</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">MouseEvent</td><td style="text-align:center">SetOnMouseDragged(EventHandler &lt; MouseEvent &gt; e)</td></tr><tr><td style="text-align:center">按下键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyPressed(EventHandler &lt; KeyEvent &gt; e)</td></tr><tr><td style="text-align:center">释放键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyReleased(EventHandler &lt; KeyEvent &gt; e)</td></tr><tr><td style="text-align:center">单击键</td><td style="text-align:center">Node、Scene</td><td style="text-align:center">KeyEvent</td><td style="text-align:center">SetOnKeyTyped(EventHandler &lt; KeyEvent &gt; e)</td></tr></tbody></table></div><blockquote><p>如果一个节点可以触发一个事件，那么这个节点的任何子节点都可以触发同样类型的事件。<br>如果要删除一个事件源的事件监听者只需用null作为参数，传递给事件注册方法即可。</p></blockquote><ul><li>事件类型、用户动作和事件注册方法所在的类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">事件类型</th><th style="text-align:center">用户操作</th><th style="text-align:center">时间注册方法所在的类</th></tr></thead><tbody><tr><td style="text-align:center">ActionEvent</td><td style="text-align:center">单击按钮或选择菜单项</td><td style="text-align:center">ButtonBase/ComboBoxBase/ContextMenu/MenuItem/TextField</td></tr><tr><td style="text-align:center">KeyEvent</td><td style="text-align:center">键盘操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">MouseEvent</td><td style="text-align:center">鼠标移动或按下按钮</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">MouseDragEvent</td><td style="text-align:center">按下鼠标、拖放操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">InputMethodEvent</td><td style="text-align:center">输人字符操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">DragEvent</td><td style="text-align:center">平台支持的拖放操作</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ScrollEvent</td><td style="text-align:center">对象滚动</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ContextMenuEvent</td><td style="text-align:center">快捷菜单被请求</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">TextEvent</td><td style="text-align:center">文本事件</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">WindowEvent</td><td style="text-align:center">窗口事件</td><td style="text-align:center">Node/Scene</td></tr><tr><td style="text-align:center">ListView.EditEvent</td><td style="text-align:center">ListView条目被编辑</td><td style="text-align:center">ListView</td></tr><tr><td style="text-align:center">TreeView.EditEvent</td><td style="text-align:center">TreeView条目被编辑</td><td style="text-align:center">TreeView</td></tr><tr><td style="text-align:center">TableColumn.CellEditEvent</td><td style="text-align:center">表格列被编辑</td><td style="text-align:center">TableColumn</td></tr></tbody></table></div><h3 id="动作事件ActionEvent"><a href="#动作事件ActionEvent" class="headerlink" title="动作事件ActionEvent"></a>动作事件ActionEvent</h3><p><code>javafx.event.ActionEvent</code>(操作事件)</p><p>处理ActionEvent事件时，监听者向事件源注册使用<code>事件源对象.setOnAction(EventHandler &lt; ActionEvent &gt; value)</code>语句，参数value是监听者对象。</p><h3 id="鼠标事件MouseEvent"><a href="#鼠标事件MouseEvent" class="headerlink" title="鼠标事件MouseEvent"></a>鼠标事件MouseEvent</h3><p><code>javafx.scene.input.MouseEvent</code></p><p>用鼠标单击事件源、鼠标指针进入或离开事件源，或移动、拖动鼠标等操作均会触发鼠标事件。</p><ul><li><code>javafx.scene.input.MouseEvent</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final MouseButton getButton()</td><td style="text-align:center">返回被单击的鼠标按钮。返回的是枚举值，其含义如下。 <br /> MouseButton.PRIMARY：鼠标左按钮；<br /> MouseButton.MIDDLE：鼠标中按钮；<br /> MouseButton.SECONDARY：鼠标右按钮；<br /> MouseButton.NONE：没有鼠标按钮</td></tr><tr><td style="text-align:center">public final double getX()</td><td style="text-align:center">返回事件源节点中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getY()</td><td style="text-align:center">返回事件源节点中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final double getScnenX()</td><td style="text-align:center">返回场景中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getScnenY()</td><td style="text-align:center">返回场景中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final double getScreenX()</td><td style="text-align:center">返回屏幕中鼠标点的x坐标</td></tr><tr><td style="text-align:center">public final double getScreenY()</td><td style="text-align:center">返回屏幕中鼠标点的y坐标</td></tr><tr><td style="text-align:center">public final boolean isAltDown()</td><td style="text-align:center">如果该事件中Alt键被按下，则返回true</td></tr><tr><td style="text-align:center">public final boolean isControlDown()</td><td style="text-align:center">如果该事件中Ctrl键被按下，则返回true</td></tr><tr><td style="text-align:center">public final boolean isShiftDown()</td><td style="text-align:center">如果该事件中Shift键被按下，则返回true</td></tr></tbody></table></div><p>面板左上角坐标为(0, 0) ，向右为x轴方向，正向下为y轴方向正，右下角坐标为(pane.getWidth(), pane.getHeight())。</p><h4 id="文本类"><a href="#文本类" class="headerlink" title="文本类"></a>文本类</h4><p><code>javafx.scene.text.Text</code></p><ul><li><code>javafx.scene.text.Text</code>的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Text()</td><td style="text-align:center">创建一个空文本对象</td></tr><tr><td style="text-align:center">public Text(String text)</td><td style="text-align:center">以字符串text作为文字创建文本对象</td></tr><tr><td style="text-align:center">public Text(double x, double y, String text)</td><td style="text-align:center">以给定的坐标及字符串创建文本对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.text.Text</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回文本对象中的文字</td></tr><tr><td style="text-align:center">public final void setText(Stirng value)</td><td style="text-align:center">设置文本对象中的文字</td></tr><tr><td style="text-align:center">public final double getX()</td><td style="text-align:center">返回文本对象的x坐标</td></tr><tr><td style="text-align:center">public final double getY()</td><td style="text-align:center">返回文本对象的y坐标</td></tr><tr><td style="text-align:center">public final void setX(double value)</td><td style="text-align:center">设置文本对象的x坐标</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置文本对象的y坐标</td></tr><tr><td style="text-align:center">public final void setFont(Font value)</td><td style="text-align:center">设置文本对象中文字的字体</td></tr><tr><td style="text-align:center">public final void setUnderline(boolean value)</td><td style="text-align:center">设置文本是否有下画线</td></tr><tr><td style="text-align:center">public final double getWrappingWidth()</td><td style="text-align:center">返回文本宽度的像素数</td></tr><tr><td style="text-align:center">public final void setTextAlignment(TextAlignment value)</td><td style="text-align:center">设置文本的对齐方式。value 的取值及含义如下。<br />TextAlignment.CENTER：居中对齐；<br />TextAlignment.JUSTIFY：两端对齐；<br />TextAlignment.LEFT：左对齐；<br />TextAlignment.RIGHT：右对齐</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.input.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_4</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> tOffX, tOffY;</span><br><span class="line"><span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="string">&quot;拖动我&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line">pane.getChildren().add(t);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">t.setOnMousePressed(e -&gt; handleMousePressed(e));</span><br><span class="line">t.setOnMouseDragged(e -&gt; handleMouseDragged(e));</span><br><span class="line"></span><br><span class="line">stage.setTitle(<span class="string">&quot;拖动操作&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleMousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">tOffX = e.getSceneX() - t.getX();</span><br><span class="line">tOffY = e.getSceneY() - t.getY();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleMouseDragged</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">t.setX(e.getSceneX() - tOffX);</span><br><span class="line">t.setY(e.getSceneY() - tOffY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.jpg" class="" title="鼠标事件处理"><h3 id="键盘事件KeyEvent"><a href="#键盘事件KeyEvent" class="headerlink" title="键盘事件KeyEvent"></a>键盘事件KeyEvent</h3><p><code>javafx.scene.input.KeyEvent</code></p><p>当用户在一个节点或一个场景上操作键盘时所触发的事件，如<code>按下</code>、<code>释放</code>、<code>敲击键盘按键</code>等，都会触发KeyEvent事件。</p><p>处理键盘事件KeyEvent的监听者接口是<code>EventHandler &lt; KeyEvent &gt;</code></p><ul><li><code>javafx.scene.input.KeyEvent</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final String getCharacter()</td><td style="text-align:center">返回按下的Unicode字符</td></tr><tr><td style="text-align:center">public final KeyCode getCode()</td><td style="text-align:center">返回按下字符的键值码，键码值由枚举KeyCode定义</td></tr><tr><td style="text-align:center">public final String getText()</td><td style="text-align:center">返回键码值对应的字符串</td></tr><tr><td style="text-align:center">public final boolean isAltDown()</td><td style="text-align:center">若Alt键被按下则返回true</td></tr><tr><td style="text-align:center">public final boolean isControlDown()</td><td style="text-align:center">若Ctrl键被按下则返回true</td></tr><tr><td style="text-align:center">public final boolean isShiftDown()</td><td style="text-align:center">若Shift键被按下则返回true</td></tr></tbody></table></div><ul><li>由枚举<code>javafx.scene.input.KeyCode</code>定义的常用键码值表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">表示键码的枚举值</th><th style="text-align:center">键描述</th><th style="text-align:center">表示键码的枚举值</th><th style="text-align:center">键描述</th></tr></thead><tbody><tr><td style="text-align:center">A~Z</td><td style="text-align:center">字母键A~Z</td><td style="text-align:center">UP</td><td style="text-align:center">上箭头键</td></tr><tr><td style="text-align:center">0~9</td><td style="text-align:center">数字键0~9</td><td style="text-align:center">DOWN</td><td style="text-align:center">下箭头键</td></tr><tr><td style="text-align:center">F1~F12</td><td style="text-align:center">功能键F1~F12</td><td style="text-align:center">LEFT</td><td style="text-align:center">左箭头键</td></tr><tr><td style="text-align:center">HOME</td><td style="text-align:center">Home键</td><td style="text-align:center">RIGHT</td><td style="text-align:center">右箭头键</td></tr><tr><td style="text-align:center">END</td><td style="text-align:center">End键</td><td style="text-align:center">KP_UP</td><td style="text-align:center">小键盘上的上箭头键</td></tr><tr><td style="text-align:center">PAGE_UP</td><td style="text-align:center">PageUp键</td><td style="text-align:center">KP_DOWN</td><td style="text-align:center">小键盘上的下箭头键</td></tr><tr><td style="text-align:center">PAGE_DOWN</td><td style="text-align:center">PageDown键</td><td style="text-align:center">KP_LEFT</td><td style="text-align:center">小键盘上的左箭头键</td></tr><tr><td style="text-align:center">CONTROL</td><td style="text-align:center">Ctrl键</td><td style="text-align:center">KP_RIGHT</td><td style="text-align:center">小键盘上的右箭头键</td></tr><tr><td style="text-align:center">SHIFT</td><td style="text-align:center">Shift键</td><td style="text-align:center">COMMA</td><td style="text-align:center">逗号键</td></tr><tr><td style="text-align:center">ALT</td><td style="text-align:center">Alt键</td><td style="text-align:center">SEMICOLON</td><td style="text-align:center">分号键</td></tr><tr><td style="text-align:center">TAB</td><td style="text-align:center">Tab键</td><td style="text-align:center">COLON</td><td style="text-align:center">冒号键</td></tr><tr><td style="text-align:center">ESCAPE</td><td style="text-align:center">Esc键</td><td style="text-align:center">PERIOD</td><td style="text-align:center">.键</td></tr><tr><td style="text-align:center">ENTER</td><td style="text-align:center">Enter键</td><td style="text-align:center">SLASH</td><td style="text-align:center">/键</td></tr><tr><td style="text-align:center">INSERT</td><td style="text-align:center">Insert键</td><td style="text-align:center">BACK_SLASH</td><td style="text-align:center">\键</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">Del键</td><td style="text-align:center">QUOTE</td><td style="text-align:center">左单引号‘ 键</td></tr><tr><td style="text-align:center">CAPS</td><td style="text-align:center">大写字母锁定键</td><td style="text-align:center">BACK_QUOTE</td><td style="text-align:center">右单引号’键</td></tr><tr><td style="text-align:center">NUM_LOCK</td><td style="text-align:center">数字锁定键</td><td style="text-align:center">OPEN_BRACKET</td><td style="text-align:center">[键</td></tr><tr><td style="text-align:center">PAUSE</td><td style="text-align:center">暂停键</td><td style="text-align:center">CLOSE_BRACKET</td><td style="text-align:center">]键</td></tr><tr><td style="text-align:center">PRINTSCREEN</td><td style="text-align:center">打印屏幕键</td><td style="text-align:center">EQUALS</td><td style="text-align:center">=号键</td></tr><tr><td style="text-align:center">BACK_SPACE</td><td style="text-align:center">退格键</td><td style="text-align:center">NUMPAD0~NUMPAD9</td><td style="text-align:center">小键盘上0~9键</td></tr><tr><td style="text-align:center">SPACE</td><td style="text-align:center">空格键</td><td style="text-align:center">CANCLE</td><td style="text-align:center">取消键</td></tr><tr><td style="text-align:center">UNDERSCORE</td><td style="text-align:center">下画线</td><td style="text-align:center">CLEAR</td><td style="text-align:center">清除键</td></tr><tr><td style="text-align:center">WINDOWS</td><td style="text-align:center">Windows键</td><td style="text-align:center">UNDEFINED</td><td style="text-align:center">是未知的键</td></tr></tbody></table></div><h2 id="复选框和单选按钮及相应的事件处理"><a href="#复选框和单选按钮及相应的事件处理" class="headerlink" title="复选框和单选按钮及相应的事件处理"></a>复选框和单选按钮及相应的事件处理</h2><p>单击一个 复选框CheckBox/单选按钮RadioButton 将其选中或取消选中时，将会触发动作事件ActionEvent。</p><p>要判断一个 复选框/单选按钮 是否被选中，可以调用<code>isSelected()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用复选框和单选按钮设置文本对象上文字的字体和颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.RadioButton;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ToggleGroup;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Font;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.FontWeight;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.FontPosture;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.VBox; </span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_6</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fN</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.NORMAL, FontPosture.REGULAR, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fB</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.BOLD, FontPosture.REGULAR, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fI</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.NORMAL, FontPosture.ITALIC, <span class="number">16</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">fBI</span> <span class="operator">=</span> Font.font(<span class="string">&quot;Times New Roman&quot;</span>, FontWeight.BOLD, FontPosture.ITALIC, <span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">CheckBox</span> <span class="variable">chkB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;粗体&quot;</span>);</span><br><span class="line">    <span class="type">CheckBox</span> <span class="variable">chkI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckBox</span>(<span class="string">&quot;斜体&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;绿色&quot;</span> );</span><br><span class="line">    <span class="type">RadioButton</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadioButton</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;复选框和单选按钮及相应的事件处理&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    VBox vbL= <span class="keyword">new</span> <span class="title class_">VBox</span>(<span class="number">20</span>);</span><br><span class="line">    vbL.setStyle(<span class="string">&quot;-fx-border-color: green&quot;</span>);</span><br><span class="line">    vbL.getChildren().addAll(chkB, chkI);</span><br><span class="line">    </span><br><span class="line">    <span class="type">ToggleGroup</span> <span class="variable">gro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToggleGroup</span>();</span><br><span class="line">        r.setToggleGroup(gro);</span><br><span class="line">        g.setToggleGroup(gro);</span><br><span class="line">        b.setToggleGroup(gro);</span><br><span class="line">        <span class="type">VBox</span> <span class="variable">vbR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VBox</span>();</span><br><span class="line">    vbR.setStyle(<span class="string">&quot;-fx-border-color: blue&quot;</span>);</span><br><span class="line">vbR.getChildren().addAll(r, g, b);</span><br><span class="line"></span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">rootBP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">        t.setFont(fN);</span><br><span class="line">        rootBP.setLeft(vbL);</span><br><span class="line">        rootBP.setRight(vbR);</span><br><span class="line">        rootBP.setCenter(t);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Han</span> <span class="variable">hand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Han</span>();</span><br><span class="line">        r.setOnAction(hand);</span><br><span class="line">        g.setOnAction(hand);</span><br><span class="line">        b.setOnAction(hand);</span><br><span class="line">        chkB.setOnAction(hand);</span><br><span class="line">        chkI.setOnAction(hand);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(rootBP, <span class="number">260</span>, <span class="number">60</span>);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;复选框与单选按钮&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Han</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(r.isSelected())</span><br><span class="line">t.setFill(Color.RED);</span><br><span class="line">            <span class="keyword">if</span>(g.isSelected())</span><br><span class="line">            t.setFill(Color.GREEN);</span><br><span class="line">            <span class="keyword">if</span>(b.isSelected())</span><br><span class="line">            t.setFill(Color.BLUE);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(chkB.isSelected() &amp;&amp; chkI.isSelected())</span><br><span class="line">t.setFont(fBI);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(chkB.isSelected())</span><br><span class="line">t.setFont(fB);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(chkI.isSelected())</span><br><span class="line">t.setFont(fI);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t.setFont(fN);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%9A%84%E5%BA%94%E7%94%A8.png" class="" title="复选框和单选按钮的应用"><h2 id="文本编辑控件及响应的事件处理"><a href="#文本编辑控件及响应的事件处理" class="headerlink" title="文本编辑控件及响应的事件处理"></a>文本编辑控件及响应的事件处理</h2><p>控件类TextField是单行文本框，用于接收用户输入的文本。</p><p>密码文本框PresswordField是TextField的子类，在密码文本框中输入的文本不回显，字符显示一个黑点。</p><h2 id="组合框及相应的事件处理"><a href="#组合框及相应的事件处理" class="headerlink" title="组合框及相应的事件处理"></a>组合框及相应的事件处理</h2><p>组合框（combo box）也称为下拉列表框（drop-down list）<br><code>javafx.scene.control.ComboBox &lt; T &gt;</code></p><p>组合框有两种非常不一样的模式：<br>一种是默认状态下的不可编辑模式，在这种模式下用户只能在下拉列表提供的内容中选择一项；<br>另一种是可编辑模式，其特点是可以在显示栏中输入组合框列表中不包括的内容。</p><p>JavaFX是用带有类型参数的泛型类<code>ComboBox &lt; T &gt;</code>来创建组合框控件，类型参数T为保存在组合框中的元素指定数据类型。</p><ul><li><code>javafx.scene.control.ComboBox &lt; T &gt;</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ComboBox()</td><td style="text-align:center">创建空的组合框对象</td></tr><tr><td style="text-align:center">public ComboBox(ObservableList &lt; T &gt; items)</td><td style="text-align:center">创建一个具有指定选项items的组合框</td></tr></tbody></table></div><p><code>javafx.collections.ObservableList &lt; T &gt;</code>是一个集合，它定义了一个可观察对象的列表，它能够在添加、更新和删除对象时通知控件。</p><p><code>javafx.collections.FXCollections</code>类中提供的静态方法<code>observableArrayList(ArrayOfElements)</code>用数组ArrayOfElements的元素创建一个ObservableList类对象。</p><ul><li><code>javafx.scene.control.ComboBox &lt; T &gt;</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setValue(T value)</td><td style="text-align:center">设置在组合框中选中的选项值为value</td></tr><tr><td style="text-align:center">public final T getValue()</td><td style="text-align:center">返回在组合框中选中的选项值</td></tr><tr><td style="text-align:center">public final void setItems(ObservableList &lt; T &gt; value)</td><td style="text-align:center">用value设置组合框中的选项值</td></tr><tr><td style="text-align:center">public final ObservableList &lt; T &gt; getItems()</td><td style="text-align:center">返回组合框中存储元素的列表</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置组合框是否可编辑</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在组合框中显示若干个颜色选项，当选中某个颜色时，将文本区中的文本设置为所选颜</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.collections.FXCollections;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ComboBox; </span><br><span class="line"><span class="keyword">import</span> javafx.collections.ObservableList; </span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.TextArea;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_8</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ComboBox&lt;String&gt; cbo = <span class="keyword">new</span> <span class="title class_">ComboBox</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> String[] color = &#123;<span class="string">&quot;红色&quot;</span>, <span class="string">&quot;绿色&quot;</span>, <span class="string">&quot;蓝色&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot;我喜欢用JavaFX编程&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">    ObservableList&lt;String&gt; items = FXCollections.observableArrayList(color);</span><br><span class="line">    cbo.getItems().addAll(items);</span><br><span class="line">    cbo.setPrefWidth(<span class="number">180</span>);</span><br><span class="line">    cbo.setValue(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="type">BorderPane</span> <span class="variable">bPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPane</span>();</span><br><span class="line">ta.setPrefColumnCount(<span class="number">10</span>);</span><br><span class="line">bPane.setTop(cbo);</span><br><span class="line">bPane.setCenter(ta);</span><br><span class="line"></span><br><span class="line">cbo.setOnAction(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">EventHandler</span> &lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;红色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: red&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;绿色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: green&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(cbo.getValue().equals(<span class="string">&quot;蓝色&quot;</span>))</span><br><span class="line">                        ta.setStyle(<span class="string">&quot;-fx-text-fill: blue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(bPane, <span class="number">185</span>, <span class="number">100</span>);</span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;组合框应用&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%BB%84%E5%90%88%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%861.png" class="" title="组合框及相应事件处理1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%BB%84%E5%90%88%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%862.png" class="" title="组合框及相应事件处理2"><h2 id="为绑定属性添加监听者"><a href="#为绑定属性添加监听者" class="headerlink" title="为绑定属性添加监听者"></a>为绑定属性添加监听者</h2><p>为控件注册监听者的方式是<code>控件名.setOnXXX()</code>，所以这种事件处理是属于控件级的。</p><p>除此之外JavaFX还定义了属性级别的监听，即所有跟属性变化相关的事件，都可以用<code>XXX.xxxxProperty().addListener()</code>的形式来进行事件监听。</p><p>过为属性添加一个监听者就可以处理一个可观察对象中值的变化。</p><ul><li><code>javafx.beans.Observable</code>接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">void addListener(InvalidationListener listener)</td><td style="text-align:center">为可观察对象注册监听者</td></tr><tr><td style="text-align:center">void remove Listener(InvalidationListener listener)</td><td style="text-align:center">删除为可观察对象注册的监听者</td></tr></tbody></table></div><p>作为参数的监听者listener必须实现<code>InvalidationListener</code>接口， 以覆盖该接口中定义的<code>void invalidated(Observable observable)</code>方法</p><h2 id="类表视图控件及相应的事件处理"><a href="#类表视图控件及相应的事件处理" class="headerlink" title="类表视图控件及相应的事件处理"></a>类表视图控件及相应的事件处理</h2><p>列表视图控件<code>javafx.scene.control.ListView &lt; T &gt;</code>的功能与组合框相似</p><p>列表视图中显示出多个选项供用户选择，而且也可设置是否可以进行多项选择，还可设置列表视图是否可以编辑。</p><p>使列表视图具有滚动功能，可以将列表视图添加到一个滚动面板ScrollPane中。</p><ul><li><code>javafx.scene.control.ListView &lt; T &gt;</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ListView()</td><td style="text-align:center">创建一个空的列表视图</td></tr><tr><td style="text-align:center">public ListView(ObservableList &lt; T &gt; items)</td><td style="text-align:center">创建一个列表框，其中的选项由参数items指定</td></tr></tbody></table></div><p>列表视图中选项的序号是从0开始的。</p><p>列表视图ListView＜T＞继承自<code>javafx.scene.control.Control</code>类，所以Control类中的方法都可用于列表视图类ListView＜T＞。</p><ul><li><code>javafx.scene.control.ListView &lt; T &gt;</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setSelectionModel(MultipleSelectionModel &lt; T &gt; value)</td><td style="text-align:center">设置单选还是多选模式</td></tr><tr><td style="text-align:center">public final MultipleSelectionModel &lt; T &gt; getSelectionModel()</td><td style="text-align:center">返回选择模式</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置列表视图是否可编辑</td></tr><tr><td style="text-align:center">public final void setItems(ObservableList &lt; T &gt; value)</td><td style="text-align:center">用value设置列表视图中的选项</td></tr><tr><td style="text-align:center">public final ObservableList &lt; T &gt; getItems()</td><td style="text-align:center">返回列表视图中存储元素的列表</td></tr><tr><td style="text-align:center">public final void setEditable(boolean value)</td><td style="text-align:center">设置列表视图是否可编辑</td></tr><tr><td style="text-align:center">public final void setPreWidth(double value)</td><td style="text-align:center">设置列表视图的宽度</td></tr><tr><td style="text-align:center">public final void setPrwHeight(double value)</td><td style="text-align:center">设置列表视图的高度</td></tr><tr><td style="text-align:center">public void setPrefSize(double prefWidth, double prefHeight)</td><td style="text-align:center">设置列表视图的宽度和高度</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置列表视图的方向。value取值如下：Orientation.HORIZ0NTAL：水平方向；Orientation.VERTICAL：垂直方向</td></tr></tbody></table></div><p>使用ListView＜T＞有两种基本方法：<br>第一种方法是可以忽略列表产生的事件，而是在程序需要的时候获得列表中的选中项；<br>第二种方法是通过注册选项变化监听者，监听列表中选项的变化，这样每次用户改变列表中的选项时就可以做出响应。</p><ul><li><code>javafx.scene.control.MultipleSelectionModel &lt; T &gt;</code>的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public abstract ObservableList &lt; Integer &gt; getSelectedIndices()</td><td style="text-align:center">返回选中项下标的列表</td></tr><tr><td style="text-align:center">public abstract ObservableList &lt; T &gt; getSelectedItems()</td><td style="text-align:center">返回选中项的列表</td></tr><tr><td style="text-align:center">public final void setSelectionMode(SelectionMode value)</td><td style="text-align:center">设置选择模式为枚举SelectionMode中的枚举值。SelectionMode.MULTIPLE：多选；SelectionMode.SINGLE：单选。此为默认选项</td></tr><tr><td style="text-align:center">public final SelectionMode getSelectionMode()</td><td style="text-align:center">返回选择模式</td></tr><tr><td style="text-align:center">public final int getSelectedIndex()</td><td style="text-align:center">返回选中项的下标，如果有多个选项被选中，则返回最后选中项的下标</td></tr><tr><td style="text-align:center">public final T getSelectedItem()</td><td style="text-align:center">返回选中的选项，如果有多个选项被选中，则返回最后被选中的选项</td></tr><tr><td style="text-align:center">public final ReadOnlyObjectProperty &lt; T &gt; selectedItemProperty()</td><td style="text-align:center">返回当前选中项的属性</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListView&lt;String&gt; lv = <span class="keyword">new</span> <span class="title class_">ListView</span>&lt;String&gt;(items);</span><br><span class="line">lv.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);</span><br><span class="line"></span><br><span class="line">lv.getSelectionModel().selectedItemProperty().addListener(</span><br><span class="line">ov -&gt; &#123;</span><br><span class="line">fp.getChildern().clear();</span><br><span class="line"><span class="keyword">for</span>(Integer i:lv.getSelectionModel().getSelectedIndices())</span><br><span class="line">fp.getChildren().add(iv[i]);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>ListView控件具有自动添加滚动条的特性。</p></blockquote><h2 id="滑动条及相应的事件处理"><a href="#滑动条及相应的事件处理" class="headerlink" title="滑动条及相应的事件处理"></a>滑动条及相应的事件处理</h2><p><code>javafx.scene.control.Slider</code><br>是一个水平或垂直的滑动轨道，其上有一个滑块可以让用户拖曳，滑块所在位置表示一个值，滑动条允许用户在一个有界的区间范围内选取一个值。</p><p>滑动条可以是水平的也可以是垂直的，可以设置是否带有刻度线和表明取值范围的标签。</p><ul><li><code>javafx.scene.control.Slider</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Slider()</td><td style="text-align:center">创建一个默认的水平滑动条</td></tr><tr><td style="text-align:center">public Slider(double min, doule max, double value)</td><td style="text-align:center">创建最小值min、最大值max且初始值为value的滑动条</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Slider</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final double getValue()</td><td style="text-align:center">返回滑块所在位置的值</td></tr><tr><td style="text-align:center">public final void setBlockIncrement(double value)</td><td style="text-align:center">设置单击滑块轨道时的调节值(块增量)，默认值是10</td></tr><tr><td style="text-align:center">public final void setMax(double value)</td><td style="text-align:center">设置滑动条区间范围的最大值，默认值是100</td></tr><tr><td style="text-align:center">public final void setMin(double value)</td><td style="text-align:center">设置滑动条区间范围的最小值，默认值是0</td></tr><tr><td style="text-align:center">public final void setValue(double value)</td><td style="text-align:center">设置滑动条的当前值</td></tr><tr><td style="text-align:center">public final void setMajorTickUnit(double value)</td><td style="text-align:center">设置滑动条上主刻度线的间隔，单位是像素</td></tr><tr><td style="text-align:center">public final void setMinorTickCount(int value)</td><td style="text-align:center">设置两个主刻度线之间次刻度线的间隔，单位是像素</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置滑动条的方向。value的取值如下：<br />Orientation.HORIZONTAL：水平方向，此为默认值；<br />Orientation.VERTICAL：垂直方向</td></tr><tr><td style="text-align:center">public final void setShowTickLabels(boolean value)</td><td style="text-align:center">设置是否显示刻度值</td></tr><tr><td style="text-align:center">public final void setShowTickMarks(boolean value)</td><td style="text-align:center">设置是否显示刻度线</td></tr><tr><td style="text-align:center">public final DoubleProperty valueProperty()</td><td style="text-align:center">返回滑动条值的属性</td></tr></tbody></table></div><p>由于滑动条的valueProperty是一个绑定属性， 所以可以在valueProperty属性上加一个监听者<code>addListener(InvalidationListener listener)</code>，这样当用户要在滑动条中拖曳滑动块时，就能监听到其值的变化并能自动进行处理属性值的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sl.valueProperty().addListener(</span><br><span class="line">ov -&gt; &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> sl.getValue();</span><br><span class="line"><span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(size);</span><br><span class="line">t.setFont(font);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>垂直滑动条的值从上向下是减少的。</p></blockquote><p>滚动条<code>javafx.scene.control.ScrollBar</code><br>允许用户从一个范围内的值中进行选择的控件。<br>用户可以拖动滑块、单击滚动条轨道或者单击滚动条左右两边的按钮来改变滚动条的值。</p><h2 id="进度条及相应的事件处理"><a href="#进度条及相应的事件处理" class="headerlink" title="进度条及相应的事件处理"></a>进度条及相应的事件处理</h2><p>进度条是一个显示用户任务完成前还需等待多长时间的控件，用于跟踪可用数字表示的任务进度。进度条类<code>javafx.scene.control.ProgressBar</code>。<br>ProgressBar是<code>javafx.scene.control.ProgressIndicator</code>的直接子类。<br>ProgressIndicator类则是将进度动态地显示在一个饼图里。</p><ul><li><code>javafx.scene.control.ProgressIndicator</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ProgressIndicator()</td><td style="text-align:center">创建进度不确定进度饼图，饼图表现为一个旋转的圆点环</td></tr><tr><td style="text-align:center">public ProgressIndicator(double progress)</td><td style="text-align:center">用给定的进度值progress创建一个进度饼形图，进度值progress取值为0.0~1.0，表示0%~100%</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ProgressIndicator</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setProgress(double value)</td><td style="text-align:center">用值value设置进度值，进度值value取值为0.0~1.0，表示0%~100%</td></tr><tr><td style="text-align:center">public final double getProgress()</td><td style="text-align:center">返回当前进度值，返回值为0.0~1.0，表示0%~100%</td></tr><tr><td style="text-align:center">public final boolean isIndeterminate()</td><td style="text-align:center">判断进度是否是不确定状态</td></tr><tr><td style="text-align:center">public final DoubleProperty progressProperty()</td><td style="text-align:center">返回进度的绑定属性</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ProgressBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ProgressBar()</td><td style="text-align:center">创建进度不确定的进度条，滑块在进度条内左右移动</td></tr><tr><td style="text-align:center">public ProgressBar(double progress)</td><td style="text-align:center">用给定的progress值创建一个进度条，progress的取值为0.0~1.0，表示0%~100%</td></tr></tbody></table></div><p>有时程序并不能确定一个任务完成的时间，这时进度饼图和进度条就保持在不确定状态直到可以确定任务的长度。<br>当进度条中的值不为0.0~1.0时进度饼图和进度条也会处于不确定状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在窗口放置一个滑动条、一个进度条和一个进度饼图，拖动滑动条并用其当前值表示的进度来摸拟任务的完成情况。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ObservableValue;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Pos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ProgressBar;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ProgressIndicator;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Slider;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_11</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Slider</span> <span class="variable">slider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Slider</span>();</span><br><span class="line">slider.setMin(<span class="number">0</span>);</span><br><span class="line">slider.setMax(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">ProgressBar</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressBar</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">ProgressIndicator</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressIndicator</span>();</span><br><span class="line"></span><br><span class="line">ChangeListener&lt;Number&gt; cListener = <span class="keyword">new</span> <span class="title class_">ChangeListener</span>&lt;Number&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changed</span><span class="params">(ObservableValue &lt;? extends Number&gt; ov,</span></span><br><span class="line"><span class="params">    Number oldVal, Number newVal)</span> &#123;</span><br><span class="line">                pb.setProgress(newVal.doubleValue() / <span class="number">50</span>);</span><br><span class="line">                pi.setProgress(newVal.doubleValue() / <span class="number">50</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">slider.valueProperty().addListener(cListener);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">HBox</span> <span class="variable">hb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>();</span><br><span class="line">        hb.setSpacing(<span class="number">5</span>);</span><br><span class="line">        hb.setAlignment(Pos.CENTER);</span><br><span class="line">        hb.getChildren().addAll(slider, pb, pi);</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(hb);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;进度条应用程序&quot;</span>);</span><br><span class="line">        stage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F1.png" class="" title="进度条程序1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F2.png" class="" title="进度条程序2"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A8%8B%E5%BA%8F3.png" class="" title="进度条程序3"><h2 id="菜单设计"><a href="#菜单设计" class="headerlink" title="菜单设计"></a>菜单设计</h2><p>每一个应用程序都会有菜单工具为用户的操作进行导航。</p><p>菜单通常有两种：<br>一种是窗口菜单或称下拉式菜单；<br>另一种是上下文菜单，也称弹出菜单或快捷菜单。</p><p>窗口菜单是相对于窗口的，它一般放在窗口标题栏的下面，总是与窗口同时出现。</p><p>每个菜单中再包含若干个菜单项，每个菜单项实际上可看作是另一种形式的命令按钮，也是在用户单击时引发一个动作事件，所以整个菜单就是一组经层次化组织、管理的命令集合。</p><p>弹出菜单是相对于某个指定控件的，当鼠标指向某控件并右击时，则会出现弹出菜单，弹出菜单也是由若干个菜单项组成，弹出菜单的结构相对简单。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E8%8F%9C%E5%8D%95%E7%B1%BB%E6%8E%A7%E4%BB%B6%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" class="" title="菜单类控件的继承关系图"><p>在菜单程序设计中通常会用到五种菜单类：<code>MenuBar</code>、<code>MenuItem</code>、<code>Menu</code>、<code>CheckMenuItem</code>和<code>RadioMenuItem</code>。</p><ul><li>菜单栏类MenuBar：该类是Node类的子类，菜单栏是菜单的容器，它包含管理菜单所必需的方法。</li><li>菜单项类MenuItem：该类是Object类的子类，它包含了管理菜单项所必需的方法。菜单项可以用来触发动作事件，也可以是一个子菜单。</li><li>菜单类Menu：该类是MenuItem类的子类，它包含了管理菜单的方法。单击某个菜单时，菜单就会展开并显示出菜单项的列表。单击某个菜单项会产生一个动作事件。</li><li>复选菜单项类CheckMenuItem：该类是MenuItem类的子类，它包含管理具有开关状态的菜单项所必需的方法。当某个CheckMenuItem对象被选中时，会在菜单项左边出现一个复选标记 ，再次选择该菜单项时取消选中，此时复选标记中的勾号会被清除。</li><li>单选菜单项类RadioMenuItem：该类是MenuItem类的子类，它与复选菜单项类CheckMenuItem一样是一种具有开关功能的菜单项。当多个RadioMenuItem对象作为ToggleGroup组的一部分来维护时，这组单选菜单项在同一时刻只能有一个被选中。</li></ul><blockquote><p>由于MenuItem类没有继承Node类，因此MenuItem的实例只能放在菜单中，而不能以其他方式加入场景图中。</p></blockquote><h3 id="菜单基本知识"><a href="#菜单基本知识" class="headerlink" title="菜单基本知识"></a>菜单基本知识</h3><p>要创建一个菜单系统，首先要创建一个菜单栏对象MenuBar。</p><p>再在菜单栏上添加若干个菜单对象Menu。</p><p>菜单项是MenuItem、CheckMenuItem或RadioMenuItem的对象。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E4%B8%89%E7%A7%8D%E8%8F%9C%E5%8D%95%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" class="" title="三种菜单元素的关系"><h4 id="菜单栏MenuBar"><a href="#菜单栏MenuBar" class="headerlink" title="菜单栏MenuBar"></a>菜单栏MenuBar</h4><p><code>javafx.scene.control.MenuBar</code></p><p>菜单的容器，它是为应用程序提供主菜单控制。</p><ul><li><code>javafx.scene.control.MenuBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MenuBar()</td><td style="text-align:center">创建菜单栏对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.MenuBar</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Menu &gt; getMenus()</td><td style="text-align:center">返回一个由菜单栏管理的菜单列表，菜单将被添加到该列表中</td></tr></tbody></table></div><p>向菜单栏上添加菜单，实际上是将菜单添加到ObservableList上。</p><p>可以通过调用<code>getMenus()</code>方法返回由菜单栏管理的菜单列表ObservableList的对象，然后调用它的<code>add()</code>或<code>addAll()</code>方法，将Menu对象添加到该菜单栏列表中。</p><p>所添加的菜单将按照添加顺序，从左到右排列在菜单栏中。也可使用<code>void add(int idx, Menu menu)</code>方法将菜单添加到菜单栏中的指定位置。</p><p>菜单的下标从0开始，从左到右编号。</p><p>可以通过<code>getMenus()</code>方法返回的ObservableList对象调用<code>remove(menu)</code>方法从菜单栏中删除不需要的菜单，若要获得菜单栏中所包含的菜单个数，可以用该列表对象调用<code>size()</code>方法。</p><h4 id="菜单Menu"><a href="#菜单Menu" class="headerlink" title="菜单Menu"></a>菜单Menu</h4><p><code>javafx.scene.control.Menu</code></p><p>添加到菜单栏上的对象。</p><p>菜单Menu由菜单项MenuItem来填充。</p><p>Menu的对象可以是另一个Menu对象中的选项，从而能够创建二级子菜单。</p><ul><li><code>javafx.scene.control.Menu</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Menu()</td><td style="text-align:center">创建Menu对象</td></tr><tr><td style="text-align:center">public Menu(String text)</td><td style="text-align:center">创建显示名称为text的Menu对象</td></tr><tr><td style="text-align:center">public Menu(String text, Node graphic)</td><td style="text-align:center">创建显示名字为text图标为graphic的菜单对象</td></tr><tr><td style="text-align:center">public Menu(String text, Node graphie, Menultem… items)</td><td style="text-align:center">功能同 上,并将参数指定的多个菜单项添加到菜单中</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.Menu</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; MenuItem &gt; getItems()</td><td style="text-align:center">返回当前与菜单关联的菜单项列表</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">将菜单的显示名字设置为value</td></tr><tr><td style="text-align:center">public final void setGraphie(Node value)</td><td style="text-align:center">为菜单添加图标</td></tr></tbody></table></div><blockquote><p>在菜单项列表中可以添加菜单分隔线，该分隔线是SeparatorMenuItem类的对象。利用分隔线可<br>以将相关的菜单项分组，从而有助于组织长菜单。</p></blockquote><h4 id="菜单项MenuItem"><a href="#菜单项MenuItem" class="headerlink" title="菜单项MenuItem"></a>菜单项MenuItem</h4><p><code>javafx.scene.control.MenuItem</code></p><ul><li><code>javafx.scene.control.MenuItem</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Menulterm()</td><td style="text-align:center">创建一个空的菜单项对象</td></tr><tr><td style="text-align:center">public Menultem(String text)</td><td style="text-align:center">创建一个名称为text的菜单项对象</td></tr><tr><td style="text-align:center">public Menultem(String text, Node graphic)</td><td style="text-align:center">创建一个名称为text，图标为graphic的菜单项对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.MenuItem</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDisable(boolean value)</td><td style="text-align:center">设置菜单项是否禁用</td></tr><tr><td style="text-align:center">public final void setGraphic(Node value)</td><td style="text-align:center">为菜单项设置图标</td></tr><tr><td style="text-align:center">public final void setText(String value)</td><td style="text-align:center">将菜单项的显示名字设置为value</td></tr><tr><td style="text-align:center">public void fire()</td><td style="text-align:center">在菜单项上引发动作事件</td></tr><tr><td style="text-align:center">public final void setAccelerator(KeyCombination value)</td><td style="text-align:center">设置菜单项的快捷键(加速键)</td></tr><tr><td style="text-align:center">public final void setMnemonicParsing(boolean value)</td><td style="text-align:center">设置热健(助记符)是否有效,默认为true</td></tr></tbody></table></div><p>MenuItem对象被选中时会产生动作事件，可以调用<code>setOnAction()</code>方法为MenuItem对象注册监听者，就像处理按钮事件一样。</p><blockquote><p>热键又称助记符，快捷键也称加速键。<br>热键是在菜单展开的情况下，同时按下”Alt+热键”即可选择菜单项。<br>而快捷键是在不用展开菜单的情况下，同时按下”Ctrl+快捷键”即可直接选择菜单中的菜单项。</p></blockquote><p>若要为Menu和MenuItem设置热键，只需在菜单和菜单项中为想要用作热键的字符前面添加一条下画线即可，因为默认情况下热键是有效的，否则只需调用<code>setMnemonicParsing(true)</code>将其设置为真即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span> <span class="variable">fileMenu</span> <span class="operator">=</span> newMenu(<span class="string">&quot;_File&quot;</span>);</span><br></pre></td></tr></table></figure><p>若要为菜单项设置快捷键，需要调用MenuItem的<code>setAccelerator(KeyCombination value)</code>方法。<br>通常用KeyCombination类的静态方法<code>public static KeyCombination keyCombination(String name)</code>进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opemMI.setAccelerator(KeyCombination.keyCombination(<span class="string">&quot;Ctrl + O&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem"><a href="#复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem" class="headerlink" title="复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem"></a>复选菜单项ChcekMenuItem和单选菜单项RadioMenuItem</h4><p>复选菜单类：<code>javafx.scene.control.CheckMenuItem</code><br>单选菜单类：<code>javafx.scene.control.RadioMenuItem</code></p><ul><li><code>javafx.scene.control.CheckMenuItem</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public CheckMenultem()</td><td style="text-align:center">创建没有名称与图标、最初状态未选中的复选菜单项</td></tr><tr><td style="text-align:center">public CheckMenuItem(String text)</td><td style="text-align:center">创建名为text、初始状态未选中的复选菜单项</td></tr><tr><td style="text-align:center">public CheckMenultem(String text, Node graphic)</td><td style="text-align:center">创建名为text，图标为graphie，初始状态未选中的复选菜单项</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.CheckMenuItem</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final boolean isSelected()</td><td style="text-align:center">判断复选菜单项是否被选中</td></tr><tr><td style="text-align:center">public final void setSelected(boolean value)</td><td style="text-align:center">设置复选菜单项的选中状态</td></tr><tr><td style="text-align:center">public final BooleanProperty selectedProperty()</td><td style="text-align:center">返回复选菜单项的状态属性</td></tr></tbody></table></div><h3 id="窗口菜单"><a href="#窗口菜单" class="headerlink" title="窗口菜单"></a>窗口菜单</h3><p>菜单项实际上可以看作是另一种形式的命令按钮，所以选择菜单项后会产生动作事件EventAction，因此需调用setOnAction()方法为MenuItem对象注册监听者。</p><p>使用动作事件处理程序来处理所有菜单选择时，确定选中了哪个菜单项的一种方法是检查选择的名称。</p><p>单独的匿名内部类或Lambda表达式来处理每个菜单项的动作事件，此时所选菜单项已知，所以不需要通过检查名称来确定哪个菜单项被选中。</p><h3 id="弹出菜单"><a href="#弹出菜单" class="headerlink" title="弹出菜单"></a>弹出菜单</h3><p><code>javafx.scene.control.ContextMenu</code></p><p>ContextMenu的直接父类是<code>javafx.scene.control.PopupControl</code>，它的一个间接父类是<code>javafx.stage.PopupWindow</code></p><p>当在某个控件上右击时，会弹出一个菜单供选择，所以弹出菜单又称上下文菜单或称快捷菜单。</p><ul><li><code>javafx.scene.control.ContextMenu</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ContextMenu()</td><td style="text-align:center">创建一个不含菜单项的弹出菜单对象</td></tr><tr><td style="text-align:center">public ContextMenu(Menultenm… items)</td><td style="text-align:center">用参数指定的多个菜单项创建一个弹出菜单对象</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ContextMenu</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Menultem &gt; getItems()</td><td style="text-align:center">返回与弹出菜单关联的菜单项列表</td></tr><tr><td style="text-align:center">public void show(Node anchor, double screenX, double screenY)</td><td style="text-align:center">在屏幕的(x,y)位置处显示弹出菜单,anchor指定弹出菜单所依附的组件</td></tr><tr><td style="text-align:center">public void hide()</td><td style="text-align:center">隐藏弹出菜单</td></tr><tr><td style="text-align:center">public final void setContextMenu(ContextMenu value)</td><td style="text-align:center">建立组件与弹出菜单value的关联</td></tr></tbody></table></div><p>首先创建菜单项，然后将其添加到弹出菜单中。</p><p>将弹出菜单与控件关联起来非常简单，只需对控件调用<code>setContextMenu()</code>方法，并传入对弹出菜单的引用即可。</p><p>也可以将弹出菜单与场景关联起来， 方法是对场景的根节点调用<code>setOnContextMenuRequested()</code>方法。该方法定义在Node类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setOnContextMenuRequested</span><span class="params">(EventHandler &lt; ? <span class="built_in">super</span> ContextM enuEvent&gt; value</span></span><br></pre></td></tr></table></figure><p>参数value指定当收到弹出菜单的请求时调用的处理程序。<br>处理程序必须调用ContextMenu定义的show()方法。</p><h2 id="工具栏设计"><a href="#工具栏设计" class="headerlink" title="工具栏设计"></a>工具栏设计</h2><p>将一些常用的命令按钮放置到工具栏上。</p><p><code>javafx.scene.control.ToolBar</code>工具栏类</p><p>工具栏上的控件通常是以图标形式出现的。</p><p>可以在工具栏上放置命令按钮，然后再把图标设置在命令按钮上。</p><p>工具栏中添加的多为命令按钮，所以其事件处理也是动作事件<code>ActionEvent</code>。</p><ul><li><code>javafx.scene.control.ToolBar</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ToolBar()</td><td style="text-align:center">创建一个空的水平工具栏</td></tr><tr><td style="text-align:center">public ToolBar(Node..items)</td><td style="text-align:center">创建一个由参数指定的多个节点的水平工具栏</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ToolBar</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Node &gt; getItems()</td><td style="text-align:center">返回工具栏的节点列表</td></tr><tr><td style="text-align:center">public final void setOrientation(Orientation value)</td><td style="text-align:center">设置工具栏的方向，参数value取值如下：<br />Orientation.HORIZONTAL：水平方向，此为默认值；<br />Orientation.VERTICAL：垂直方向</td></tr></tbody></table></div><p>向工具栏添加按钮或其他控件的方式与把菜单添加到菜单栏的方式基本相同，就是对<code>getItems()</code>方法返回的列表引用调用<code>add()</code>方法，但是通常在ToolBar构造方法中指定它们更方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">but1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageView</span>(<span class="string">&quot;icon/openFile.jpg&quot;</span>));</span><br><span class="line">but1.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);<span class="comment">//只显示按钮上的图标</span></span><br></pre></td></tr></table></figure><h2 id="文件选择对话框"><a href="#文件选择对话框" class="headerlink" title="文件选择对话框"></a>文件选择对话框</h2><p><code>javafx.stage.FileChooser</code></p><p>用户经常使用该类创建”打开”或”保存”文件对话框，所以它是一种用于文件选择控件。</p><ul><li><code>javafx.stage.FileChooser</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileChooser()</td><td style="text-align:center">创建打开默认目录的文件选择对话框</td></tr></tbody></table></div><ul><li><code>javafx.stage.FileChooser</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setTitle(String value)</td><td style="text-align:center">设置文件选择对话框的标题</td></tr><tr><td style="text-align:center">public final void setlnitialDirectory(File value)</td><td style="text-align:center">设置文件选择对话框的初始显示目录</td></tr><tr><td style="text-align:center">public ObservableList &lt; FileChooser.ExtensionFilter &gt; getExtensionFilters()</td><td style="text-align:center">返回文件对话框中使用的扩展名过滤器的文件选项列表</td></tr><tr><td style="text-align:center">public File showOpenDialog(Window ownerWindow)</td><td style="text-align:center">显示打开文件对话框，参数ownerWindow为文件对话框的所属窗口，通常是主舞台，返回值是用户选择的文件，若没选文件则返回null</td></tr><tr><td style="text-align:center">public List &lt; File &gt; showOpenMultipleDialog(Window ownerWindowr)</td><td style="text-align:center">显示打开文件对话框，返回在对话枢中选择的多个文件，并保存到List &lt; File &gt;对象中</td></tr><tr><td style="text-align:center">public File showSaveDialog(Window ownerWindow)</td><td style="text-align:center">显示保存文件对话框，返回选择的文件，若没有选择文件则返回null。多数ownerWindow为文件对话框的所属窗口</td></tr></tbody></table></div><p>可以通过设置initialDirectory和title属性来配置文件选择对话框窗口。文件选择对话框既可用作打开文件对话框，用于选择单个文件或多个文件，也可作为文件保存对话框。</p><blockquote><p>对话框一般分为模态和非模态两种。<br>模态对话框一定要处理完本对话框内的操作之后，才能返回到它的所属窗口继续运行。<br>非模态对话框在显示时，用户还可以操作其他窗口。<br>FileChooser类中的打开和保存对话框都是模态的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件过滤器</span></span><br><span class="line">FileChooser.<span class="type">ExtensionFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileChooser</span>.ExtensionFilter(<span class="string">&quot;所有.java文件&quot;</span>, <span class="string">&quot;*.java&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h2><p>通过一组单选按钮提供一组颜色值列表供用户选择。</p><p><code>javafx.scene.control.ColorPicker</code></p><p>它用于显示一个窗格，允许用户在一个调色板上通过单击颜色来选取一种颜色值，或在自定义颜色面板中选择颜色。</p><ul><li><code>javafx.scene.control.ColorPicker</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ColorPicker()</td><td style="text-align:center">创建初始颜色为白色的颜色选择器</td></tr><tr><td style="text-align:center">public ColorPicker(Color color)</td><td style="text-align:center">创建初始颜色为color的颜色选择器</td></tr></tbody></table></div><ul><li><code>javafx.scene.control.ColorPicker</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final T getValue()</td><td style="text-align:center">返回选中选项的值(父类中方法)</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Color &gt; getCustomColors()</td><td style="text-align:center">返回用户添加到调色板的自定义颜色列表</td></tr></tbody></table></div><p>ColorPicker控件包括颜色选择框、调色板以及自定义颜色面板。</p><p><code>颜色选择框</code>是一个组合框，包括了所有可以选择的颜色和颜色指示器，颜色指示器显示了当前选中的颜色；<br><code>调色板</code>包含了预定义的颜色集合以及自定义颜色的链接；<br><code>自定义颜色面板</code>是一个模态窗口，可以通过单击调色板上的链接打开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色选择器程序设计，在窗口中放置一个文本和一个颜色选择器，用在颜色选择器中选择的颜色来设置文本的颜色。</span></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.ColorPicker;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App15_16</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">HBox</span> <span class="variable">hB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBox</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ColorPicker</span> <span class="variable">cP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPicker</span>(Color.RED);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> Text t= <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;请选择颜色来设置我&quot;</span>); </span><br><span class="line">        hB.getChildren().addAll(cP, t);</span><br><span class="line">        t.setFill(cP.getValue());</span><br><span class="line">        cP.setOnAction(e -&gt; t.setFill(cP.getValue()));</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(hB, <span class="number">260</span>, <span class="number">100</span>);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;颜色选择器应用&quot;</span>);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A81.png" class="" title="颜色选择器应用1"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A82.png" class="" title="颜色选择器应用2"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E5%BA%94%E7%94%A83.png" class="" title="颜色选择器应用3"><h2 id="音频与视频程序设计"><a href="#音频与视频程序设计" class="headerlink" title="音频与视频程序设计"></a>音频与视频程序设计</h2><p>JavaFX提供了丰富的媒体类用于媒体的播放，主要有Media、MediaPlayer、MediaView等类。</p><p>目前JavaFX支持的音频格式有MP3、AIFF、WAV及MPEG-4等，支持的视频格式有FLVM和PEG-4。</p><p>媒体源是由类<code>javafx.scene.media.Media</code></p><ul><li><code>javafx.scene.media.Media</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Media(String source)</td><td style="text-align:center">用名字source创建一个媒体对象，目前它仅支持HTTP、FILE、URL和JAR格式的媒体源路径，设置后不可改变</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.Media</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie final Duration getDuration()</td><td style="text-align:center">返回媒体源以秒计时的持续时间对象</td></tr><tr><td style="text-align:center">publie final int getWidth()</td><td style="text-align:center">返回媒体视频以像素为单位的宽度</td></tr><tr><td style="text-align:center">public final int getWidth()</td><td style="text-align:center">返回媒体视频以像素为单位的高度</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaPlayer</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MediaPlayer(Media media)</td><td style="text-align:center">为媒体media创建一个播放器</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaPlayer</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setAutoPlay(boolean value)</td><td style="text-align:center">设置媒体是否自动播放</td></tr><tr><td style="text-align:center">public final void setCycleCount(int value)</td><td style="text-align:center">设置媒体播放次数</td></tr><tr><td style="text-align:center">public final void setVolume(double value)</td><td style="text-align:center">设置音频音量的大小，取值为0.0~1.0(最大)</td></tr><tr><td style="text-align:center">public final void setMute(boolean value)</td><td style="text-align:center">设置音频是否禁音</td></tr><tr><td style="text-align:center">public final void setBalance(double value)</td><td style="text-align:center">设置左、右声道的平衡值，最左边为-1，中间为0，最右边为1</td></tr><tr><td style="text-align:center">public void play()</td><td style="text-align:center">播放媒体</td></tr><tr><td style="text-align:center">public void pause()</td><td style="text-align:center">暂停媒体播放</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">停止媒体播放</td></tr><tr><td style="text-align:center">public void seek(Duration seekTime)</td><td style="text-align:center">将播放器定位到一个新的播放时间点</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaView</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public MediaView()</td><td style="text-align:center">创建一个不与媒体播放器关联的媒体视图</td></tr><tr><td style="text-align:center">public MediaView(MediaPlayer mediaPlayer)</td><td style="text-align:center">创建一个与指定媒体播放器mediaPlayer关联的媒体视图</td></tr></tbody></table></div><ul><li><code>javafx.scene.media.MediaView</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setX(double value)</td><td style="text-align:center">设置媒体视图的x坐标</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置媒体视图的y坐标</td></tr><tr><td style="text-align:center">publie final void setFitWidth(double value)</td><td style="text-align:center">设置媒体视图的宽度</td></tr><tr><td style="text-align:center">public final void setFitHeight(double value)</td><td style="text-align:center">设置媒体视图的高度</td></tr><tr><td style="text-align:center">public final void setMediaPlayer(MediaPlaver value)</td><td style="text-align:center">设置媒体视图的播放器为value</td></tr></tbody></table></div><p>一个Media对象可以被多个媒体播放器所共享，一个MediaPlayer也可以被多个MediaView所使用。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>委托事件模型是指当事件发生时，产生事件的对象会把此信息转给事件监听者处理的一种方式，而这个信息事实上是JavaFX中的<code>javafx.event</code>事件包里的某个类所建立的对象。</li><li>JavaFX中<code>javafx.event.Event</code>类中包含了用来处理事件的监听者接口，用于事件处理的方法就声明在这些接口中。</li><li>一个对象要成为事件源的事件监听者，满足两个条件即可：一是事件监听者必须是一个对应的事件监听者接口的实例，从而保证该监听者具有正确的事件处理方法；二是事件监听者对象必须通过事件源进行注册，注册方法依赖于事件类型。</li><li>对控件的什么操作触发什么事件类型、注册事件监听者及处理事件的方法见表15.1和表15.2。</li><li>JavaFX的监听分为两种：组件级别监听和属性级别监听。属性级别的监听主要用于绑定属性。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是事件？简述Java语言的委托事件模型。</li><li>若要处理事件，就必须要有事件监听者，担任监听者需满足什么条件？</li><li>写出控件与可能触发的事件之间的对应关系。</li><li>对于按下键和释放键的事件，使用什么方法来获得键的编码值？使用什么方法从一个键的单击事件中获得该键的字符？</li><li>设计一个窗口，在窗口内放置一个按钮，当不断地单击该按钮时，在其上显示它被单击的次数。</li><li>创建一个窗口，隐藏窗口的标题栏和边框，并在其上添加一个”退出”按钮。将鼠标指针放在窗口内的任意位置进行拖动窗口，当单击”退出”命令按钮后，结束程序运行。</li><li>在窗口的中央区域放置一个文本区控件，在窗口的下部区域添加红、绿、蓝三个单选按钮，并用其设置文本区中文本的颜色。</li><li>在窗口的中央区域放置一个文本区控件，在窗口的下部区域添加”粗体”和”斜体”两个复选框，并用其设置文本区中文本的字体。</li><li>编程，实现利用在滑动条中拖动滑块的方法对文本字体的大小进行设置。</li><li>编写一个简单的音频播放器，在程序中创建一个MediaPlayer对象，并用命令按钮实现播放、暂停和重放功能。</li></ul><h1 id="第十六章-绘图与动画程序设计"><a href="#第十六章-绘图与动画程序设计" class="headerlink" title="第十六章 绘图与动画程序设计"></a>第十六章 绘图与动画程序设计</h1><h2 id="图形坐标系与形状类"><a href="#图形坐标系与形状类" class="headerlink" title="图形坐标系与形状类"></a>图形坐标系与形状类</h2><p><code>javafx.scene.shape.Shape</code></p><p>形状类Shape是抽象类，它所派生的子类主要有Text、Line、Rectangle、Circle、Ellipse、Arc、Polygon、Polyline等。</p><p>Shape类是Node类的子类，所以形状类作为节点可以添加到面板上。</p><p>每个形状都具有大小、位置、形状、颜色、维数等属性。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%BD%A2%E7%8A%B6%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F.jpg" class="" title="形状类的继承关系示意"><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/Java%E5%9D%90%E6%A0%87%E7%B3%BB.jpg" class="" title="Java坐标系"><ul><li><code>javafx.scene.shape.Shape</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setFill(Paint value)</td><td style="text-align:center">设置填充形状内部区域的颜色为value</td></tr><tr><td style="text-align:center">public final void setStroke(Paint value)</td><td style="text-align:center">设置画笔颜色为value</td></tr><tr><td style="text-align:center">public final void setStrokeWidth(double value)</td><td style="text-align:center">设置画笔宽度为value</td></tr><tr><td style="text-align:center">public final void setSmooth(boolean value)</td><td style="text-align:center">设置是否对形状使用平滑算法</td></tr><tr><td style="text-align:center">public final void setStrokeDashOffset(double value)</td><td style="text-align:center">设置虛线的起始偏移量为value，即虛线往后移的量</td></tr><tr><td style="text-align:center">public final ObservableList &lt; Double &gt; getStrokeDashArray()</td><td style="text-align:center">定义表示虚线段长度的数组，数组中的值依次为不透明和透明段长度</td></tr><tr><td style="text-align:center">public final void setStrokeLineCap ( StrokeLineCap value)</td><td style="text-align:center">设置形状端点的风格，参数value取值如下：<br /> StrokeLinCap.BUTT：线条末端平直，此为默认值；<br />StrokeLineCap.ROUND：端点加一圆形线帽；<br />StrokeLineCap.SQUARE：端点加一正方形线帽</td></tr><tr><td style="text-align:center">public final void setStrokeType(StrokeType value)</td><td style="text-align:center">设置节点边界周围绘制描边的类型，参数value取值如下：<br />StrokeType.CENTERED：从中间向内外两侧；<br />StrokeType.INSIDE：向内侧；<br />StrokeType.OUTSIDE：向外侧</td></tr></tbody></table></div><h3 id="直线类Line"><a href="#直线类Line" class="headerlink" title="直线类Line"></a>直线类Line</h3><p><code>javafx.scene.shape.Line</code></p><p>一条直线有起点、终点、线宽、颜色等属性，用户可根据这些属性画出需要的直线。</p><ul><li><code>javafx.scene.shape.Line</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Line()</td><td style="text-align:center">创建一个空的直线</td></tr><tr><td style="text-align:center">public Line(double startX, double startY, double endX, double endY)</td><td style="text-align:center">以(startX, startY)为起点，以(endX, endY)为终点创建一条直线</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Line</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setStartX(double value)</td><td style="text-align:center">设置起点的x坐标</td></tr><tr><td style="text-align:center">public final void setStartY(double value)</td><td style="text-align:center">设置起点的y坐标</td></tr><tr><td style="text-align:center">public final void setEndX(double value)</td><td style="text-align:center">设置终点的x坐标</td></tr><tr><td style="text-align:center">public final void setEndY(double value)</td><td style="text-align:center">设置终点的y坐标</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制红、绿、蓝三条直线，红线设置为虚线。绿、蓝两条直线通过坐标的属性绑定使它们成为交叉线。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Line;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.StrokeLineCap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_1</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"></span><br><span class="line">Line rL= <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>,<span class="number">20</span>, <span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">rL.setStroke(Color.RED); </span><br><span class="line">rL.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">rL.setStrokeLineCap(StrokeLineCap.BUTT);<span class="comment">//设置线条两端平直</span></span><br><span class="line">rL.getStrokeDashArray().addAll(<span class="number">10d</span>, <span class="number">5d</span>, <span class="number">15d</span>);<span class="comment">//设置虚线段长度，依次为不透明和透明段的长度</span></span><br><span class="line">rL.setStrokeDashOffset(<span class="number">0</span>);<span class="comment">//虚线的后偏移量</span></span><br><span class="line">rL.endXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));<span class="comment">//属性绑定</span></span><br><span class="line"></span><br><span class="line"><span class="type">Line</span> <span class="variable">gL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">gL.setStroke(Color.GREEN);</span><br><span class="line">gL.setStrokeWidth(<span class="number">5</span>);</span><br><span class="line">gL.endXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));</span><br><span class="line">gL.endYProperty().bind(pane.heightProperty().multiply(<span class="number">4</span>).divide(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Line</span> <span class="variable">bL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Line</span>(<span class="number">10</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">bL.setStroke(Color.BLUE);</span><br><span class="line">bL.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">bL.setStrokeLineCap(StrokeLineCap.ROUND);<span class="comment">//设置线条两端具有圆形线帽</span></span><br><span class="line">bL.startXProperty().bind(pane.widthProperty().subtract(<span class="number">10</span>));</span><br><span class="line">bL.endYProperty().bind(pane.heightProperty().multiply(<span class="number">4</span>).divide(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">pane. getChildren().addAll(rL, gL, bL);</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">210</span>, <span class="number">120</span>);</span><br><span class="line">stage.setTitle(<span class="string">&quot;绘制直线&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%9B%B4%E7%BA%BF%E7%9A%84%E7%B1%BB%E5%9E%8B.png" class="" title="直线的类型"><h3 id="矩形类Rectangele"><a href="#矩形类Rectangele" class="headerlink" title="矩形类Rectangele"></a>矩形类Rectangele</h3><p><code>javafx.scene.shape.Rectangle</code></p><ul><li><code>javafx.scene.shape.Rectangle</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie Rectangle(double width,double height)</td><td style="text-align:center">创建宽为width，高为height的矩形</td></tr><tr><td style="text-align:center">public Rectangle(double width, double height, Paint fill)</td><td style="text-align:center">创建宽为width,高为height,填充色为fill的矩形</td></tr><tr><td style="text-align:center">public Rectangle(double x, double y, double width, double height)</td><td style="text-align:center">创建一个以(x,y)为左上角,宽为width,高为height的矩形</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Rectangle</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie final void setX(double value)</td><td style="text-align:center">设置矩形左上角的x坐标为value</td></tr><tr><td style="text-align:center">public final void setY(double value)</td><td style="text-align:center">设置矩形左上角的y坐标为value</td></tr><tr><td style="text-align:center">public final void setWidth(double value)</td><td style="text-align:center">设置矩形的宽度为value</td></tr><tr><td style="text-align:center">public final void setHeight(double value)</td><td style="text-align:center">设置矩形的高度为value</td></tr><tr><td style="text-align:center">public final void setAreWidth(double value)</td><td style="text-align:center">设置矩形圆角弧的水平直径为value</td></tr><tr><td style="text-align:center">public final void setArcHeight(double value)</td><td style="text-align:center">设置矩形圆角弧的垂直直径为value</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用循环在面板上添加四个矩形，每个都进行旋转，且画笔的颜色是随机的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Rectangle;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_2</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Pane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">r.setArcWidth(<span class="number">10</span>);<span class="comment">//设置圆角弧水平直径为10像素</span></span><br><span class="line">r.setArcHeight(<span class="number">6</span>);<span class="comment">//设置圆角弧垂直直径为6像素</span></span><br><span class="line">r.setRotate(i*<span class="number">360</span>/<span class="number">8</span>);<span class="comment">//设置旋转</span></span><br><span class="line">r.setStroke(Color.color(Math.random(), Math.random(), Math. random()));</span><br><span class="line">r.setFill(<span class="literal">null</span>);<span class="comment">//不填充颜色</span></span><br><span class="line">pane.getChildren().add(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">130</span>);</span><br><span class="line">stage.setTitle(<span class="string">&quot;矩形程序设计&quot;</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E7%9F%A9%E5%BD%A2%E7%A8%8B%E5%BA%8F.png" class="" title="矩形程序"><h3 id="圆形Circle"><a href="#圆形Circle" class="headerlink" title="圆形Circle"></a>圆形Circle</h3><p><code>javafx.scene.shape.Circle</code></p><ul><li><code>javafx.scene.shape.Circle</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">publie Circle(double radius)</td><td style="text-align:center">创建半径为radius的圆</td></tr><tr><td style="text-align:center">public Circle(double centerX, double centerY, double radius)</td><td style="text-align:center">创建以( centerX, centerY)为圆心，以radius为半径的圆</td></tr><tr><td style="text-align:center">public Circle(double centerX, double centerY, double radius, Paint fill)</td><td style="text-align:center">创建以(centerX.centerY)为圆心，以radius为半径，以fill为填充色的圆</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Circle</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置圆心的x坐标为value</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置圆心的y坐标为value</td></tr><tr><td style="text-align:center">public final void setRadius(double value)</td><td style="text-align:center">设置圆的半径为value</td></tr></tbody></table></div><h3 id="椭圆类Ellipse"><a href="#椭圆类Ellipse" class="headerlink" title="椭圆类Ellipse"></a>椭圆类Ellipse</h3><p><code>javafx.scene.shape.Ellipse</code></p><ul><li><code>javafx.scene.shape.Ellipse</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Ellipse(double radiusX, double radiusY)</td><td style="text-align:center">创建水平半径为radiusX 、垂直半径为radiusY的椭圆</td></tr><tr><td style="text-align:center">public Ellipse(double centerX, double centerY, double radiusX, double radiusY)</td><td style="text-align:center">创建以(centerX, centerY)为圆心，以radiusX 为水平半径，以radiusY为垂直半径的椭圆</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Ellipse</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置椭圆圆心的x坐标为value</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置椭圆圆心的y坐标为value</td></tr><tr><td style="text-align:center">public final void setRadiusX(double value)</td><td style="text-align:center">设置椭圆水平半径为value</td></tr><tr><td style="text-align:center">public final void setRadiusY(double value)</td><td style="text-align:center">设置椭圆垂直半径为value</td></tr></tbody></table></div><h3 id="弧类Arc"><a href="#弧类Arc" class="headerlink" title="弧类Arc"></a>弧类Arc</h3><p><code>javafx.scene.shape.Arc</code></p><ul><li><code>javafx.scene.shape.Arc</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Arc()</td><td style="text-align:center">创建一条空的弧</td></tr><tr><td style="text-align:center">public Arc(double centerX, double centerY，double radiusX, double radiusY, double startAngle, double length)</td><td style="text-align:center">以(centerX,centerY)为弧中心，以radiusX 为水平半径、radiusY为垂直半径、startAngle为起始角度、length为转过的角度创建一条弧</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Arc</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setCenterX(double value)</td><td style="text-align:center">设置弧中心点的x坐标</td></tr><tr><td style="text-align:center">public final void setCenterY(double value)</td><td style="text-align:center">设置弧中心点的y坐标</td></tr><tr><td style="text-align:center">public final void setRadiusX(double value)</td><td style="text-align:center">设置弧所在椭圆的水平半径</td></tr><tr><td style="text-align:center">public final void setRadiusY(double value)</td><td style="text-align:center">设置弧所在椭圆的垂直半径</td></tr><tr><td style="text-align:center">public final void setStartAngle(double value)</td><td style="text-align:center">设置弧的起始角,以度(°)为单位,正角度为逆时针旋转</td></tr><tr><td style="text-align:center">public final void setLength(double value)</td><td style="text-align:center">设置弧转过的角度，以度(°)为单位，正角度为逆时针旋转</td></tr><tr><td style="text-align:center">public final void setType(ArcType value)</td><td style="text-align:center">设置弧的类型，参数value取值如下：<br />ArcType.CHORD：闭合弧，弧的端点之间有连线；<br />ArcType.ROUND：扇形弧；<br />ArcTypeOPEN：开弧，弧的端点之间没有连线。</td></tr></tbody></table></div><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%BC%A7%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.jpg" class="" title="弧的参数说明"><p>0°是向右的x轴方向，正角度表示逆时针方向旋转。</p><h3 id="多边形类Polygon与折线类Polyline"><a href="#多边形类Polygon与折线类Polyline" class="headerlink" title="多边形类Polygon与折线类Polyline"></a>多边形类Polygon与折线类Polyline</h3><p>多边形：<code>javafx.scene.shape.Polygon</code>，一个连接点序列的闭合多边形。<br>折线类：<code>javafx.scene.shape.Polyline</code>，一个连接点序列的折线，折线不会自动闭合。</p><ul><li><code>javafx.scene.shape.Polygon</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Polygon()</td><td style="text-align:center">创建一个空的多边形对象</td></tr><tr><td style="text-align:center">public Polygon(double… points)</td><td style="text-align:center">以点集points作为顶点坐标创建一个多边形</td></tr></tbody></table></div><ul><li><code>javafx.scene.shape.Polygon</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservableList &lt; Double &gt; getPoints()</td><td style="text-align:center">返回一个双精度值列表作为顶点集的x坐标和y坐标</td></tr></tbody></table></div><h3 id="交互式程序设计"><a href="#交互式程序设计" class="headerlink" title="交互式程序设计"></a>交互式程序设计</h3><p>交互式程序设计就是用鼠标在面板上随意画图。</p><h2 id="动画程序设计"><a href="#动画程序设计" class="headerlink" title="动画程序设计"></a>动画程序设计</h2><p>在JavaFX中动画被分为过渡动画和时间轴动画。<br>过渡动画类<code>javafx.animation.Transition</code>和时间轴动画类<code>javafx.animation.Timeline</code>都是动画类<code>javafx.animation.Animation</code>的子类。</p><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/JavaFX%E5%B8%B8%E7%94%A8%E5%8A%A8%E7%94%BB%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" class="" title="JavaFX常用动画类的继承关系"><ul><li><code>javafx.animation.Animation</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void play()</td><td style="text-align:center">从当前位置播放动画</td></tr><tr><td style="text-align:center">public void pause()</td><td style="text-align:center">暂停动画播放</td></tr><tr><td style="text-align:center">public void playFromStart()</td><td style="text-align:center">从头播放动画</td></tr><tr><td style="text-align:center">public void stop()</td><td style="text-align:center">停止动画并重置动画</td></tr><tr><td style="text-align:center">protected final void setStatus(Animation.Status value)</td><td style="text-align:center">设置动画的状态为value，value取值如下：<br />Animation.Status.PAUSED：暂停；<br />Animation.Status.RUNNING：播放；<br />Animation.Status.STOPPED：停止</td></tr><tr><td style="text-align:center">public final void setRate(double value)</td><td style="text-align:center">设置动画播放的方向和速度</td></tr><tr><td style="text-align:center">public final void setCycleCount(int value)</td><td style="text-align:center">设置动画循环播放的次数</td></tr><tr><td style="text-align:center">public final void setAutoReverse(boolean value)</td><td style="text-align:center">设置在下一个周期动画中是否需要倒转方向</td></tr></tbody></table></div><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p><code>javafx.animation.Transition</code></p><p>最简单的动画可以通过过渡效果实现，使用特定的过渡类，定义有关的属性，然后把它应用到某种节点，最后播放动画即可。</p><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><p><code>javafx.animation.FadeTransition</code></p><p>指在给定时间内改变节点的不透明度效果来实现，即通过改变节点透明度实现目标节点逐渐消失的效果， 再通过<code>setAutoReverse()</code>方法实现节点的或隐或现效果。</p><ul><li><code>javafx.animation.FadeTransition</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FadeTransition()</td><td style="text-align:center">创建一个空的淡人淡出效果对象</td></tr><tr><td style="text-align:center">public FadeTransition(Duration duration)</td><td style="text-align:center">创建一个指定持续时间的淡人淡出效果对象，持续时间duration的取值如下：<br />Duration.INDEFINITE：无限循环；<br />Duration.ONE: 1ms；<br />Duration.UNKNOWN：未知；<br />Duration.ZERO: 0</td></tr><tr><td style="text-align:center">public FadeT ransition (Duration duration, Node node)</td><td style="text-align:center">创建一个持续时间同上，应用在节点node上的淡入淡出效果对象</td></tr></tbody></table></div><ul><li><code>javafx.animation.FadeTransition</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDuration(Duration value)</td><td style="text-align:center">设置转换持续时间为value，持续时间见上表</td></tr><tr><td style="text-align:center">public final void setNode(Node value)</td><td style="text-align:center">设置动画应用在节点value上，即转换的目标节点上</td></tr><tr><td style="text-align:center">public final void setFromValue(double value)</td><td style="text-align:center">设置动画的起始透明度为value，1.0表示不透明，0.0表示透明</td></tr><tr><td style="text-align:center">public final void setToValue(double value)</td><td style="text-align:center">设置动画结束的透明度为value，l.0表示不透明，0.0表示透明</td></tr><tr><td style="text-align:center">public final void setByValue(double value)</td><td style="text-align:center">设置动画透明度的递增值为value</td></tr></tbody></table></div><p>Duration定义了事件持续的时间，它是一个不可更改类。</p><ul><li><code>javafx.util.Duration</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Duration(double millis)</td><td style="text-align:center">创建持续millis毫秒(ms)的持续时间对象</td></tr></tbody></table></div><ul><li><code>javafx.util.Duration</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Duration add(Duration other)</td><td style="text-align:center">与调用者进行持续时间相加运算</td></tr><tr><td style="text-align:center">public Duration subtract(Duration other)</td><td style="text-align:center">与调用者进行持续时间相减运算</td></tr><tr><td style="text-align:center">public Duration multiply(double n)</td><td style="text-align:center">执行持续时间相乘运算</td></tr><tr><td style="text-align:center">public Duration divide(double n)</td><td style="text-align:center">执行持续时间除法运算</td></tr><tr><td style="text-align:center">public static Duration millis(double ms)</td><td style="text-align:center">返回指定ms毫秒数的持续时间</td></tr><tr><td style="text-align:center">public static Duration minutes(double m)</td><td style="text-align:center">返回指定m分钟数的持续时间</td></tr><tr><td style="text-align:center">public double toHours()</td><td style="text-align:center">返回持续时间值的小时数</td></tr><tr><td style="text-align:center">public double toMinutes()</td><td style="text-align:center">返回持续时间值的分钟数</td></tr><tr><td style="text-align:center">public double toSeconds()</td><td style="text-align:center">返回持续时间值的秒数</td></tr><tr><td style="text-align:center">public double toMillis()</td><td style="text-align:center">返回持续时间值的毫秒数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编制程序对圆实现淡入淡出效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.FadeTransition;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.shape.Circle;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.paint.Color;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"><span class="keyword">import</span> javafx.util.Duration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_8</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">StackPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">50</span>);</span><br><span class="line">        c.setStroke(Color.BLUE);</span><br><span class="line">        c.setFill(Color.RED);</span><br><span class="line">        pane.getChildren().add(c);</span><br><span class="line">        </span><br><span class="line">        <span class="type">FadeTransition</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FadeTransition</span>(Duration.millis(<span class="number">2000</span>));</span><br><span class="line">        ft.setFromValue(<span class="number">1.0</span>);</span><br><span class="line">        ft.setToValue(<span class="number">0.0</span>);</span><br><span class="line">        ft.setCycleCount(Animation.INDEFINITE); </span><br><span class="line">        ft.setAutoReverse(<span class="literal">true</span>);</span><br><span class="line">        ft.setNode(c);</span><br><span class="line">        ft.play();</span><br><span class="line">        </span><br><span class="line">        c.setOnMousePressed(e -&gt; ft.pause());</span><br><span class="line">        c.setOnMouseReleased(e -&gt; ft.play());</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(pane, <span class="number">200</span>, <span class="number">120</span>);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;淡人淡出动画&quot;</span>);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%88%A9%E7%94%A8%E9%80%8F%E6%98%8E%E5%BA%A6%E5%AE%9E%E7%8E%B0%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA%E6%95%88%E6%9E%9C.gif" class="" title="利用透明度实现淡入淡出效果"><h4 id="移动效果"><a href="#移动效果" class="headerlink" title="移动效果"></a>移动效果</h4><p><code>javafx.animation.PathTransition</code></p><p>一个在给定时间内节点沿着一条路径从一个端点到另一端点的移动动画。</p><ul><li><code>javafx.animation.PathTransition</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public PathTransition()</td><td style="text-align:center">创建一个空的移动效果对象</td></tr><tr><td style="text-align:center">public PathTransition(Duration duration, Shape path)</td><td style="text-align:center">创建一个持续时间为duration、路径为path的移动效果对象</td></tr><tr><td style="text-align:center">public Path ransition(Duration duration, Shape path, Node node)</td><td style="text-align:center">功能同上，移动效果应用在node节点上</td></tr></tbody></table></div><ul><li><code>javafx.animation.PathTransition</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void setDuration(Duration value)</td><td style="text-align:center">设置转换持续的时间为value</td></tr><tr><td style="text-align:center">public final void setNode(Node value)</td><td style="text-align:center">设置动画应用在节点value上，即转换的目标节点</td></tr><tr><td style="text-align:center">public final void setOrientation(PathTransition.OrientationType value)</td><td style="text-align:center">设置节点沿路径的移动方式,参数value 的取值是枚举PathTransition.OrientationType中的枚举常量，含义如下：<br />NONE：移动路径保持不变，保持与路径切线平行；<br />ORTHOGONAL_TO_ANGENT：与路径的切线垂直</td></tr><tr><td style="text-align:center">public final void setPath(Shape value)</td><td style="text-align:center">设置形状value为节点移动的路径</td></tr></tbody></table></div><h3 id="时间轴动画"><a href="#时间轴动画" class="headerlink" title="时间轴动画"></a>时间轴动画</h3><p><code>javafx.animation.Timeline</code></p><p><code>帧</code>就是动画中最小单位的单幅图像或影像画面，相当于电影胶片上的每一个镜头。</p><p><code>关键帧</code>是节点运动或变化中关键动作所处的那一帧。</p><p>关键帧与关键帧之间可以插入一些<code>中间帧</code>（或称为过渡帧）。</p><p>这些过渡帧由数学算法来调整其位置、不透明度、颜色以及动作所需的其他方面。由系统决定在两个关键帧的持续时间内需要插入多少过渡帧。在两个关键帧之间插入过渡帧的过程称为内插。</p><p>关键帧按照指定的持续时间散布在这个时间轴上。</p><p>这些关键帧中可能包含关键值，<code>关键值</code>表示的是特定应用程序值的最终状态，<code>程序值</code>包括位置、不透明度、颜色或在关键时间点执行的动作等。</p><p>关键值中包含一个用来说明在插入过渡帧的过程中所使用的算法，这个算法称为<code>插值器</code>。</p><p>关键帧就是在某一帧当中，设置某些关键性的属性值。</p><p>时间轴Timeline对象是一个包含多个关键帧KeyFrame对象的动画序列，这些KeyFrame按照它们在时间轴内的相对时间排序。</p><p>时间轴允许在一段时间之后使用插值器将动画属性修改为新的目标值，即通过更改节点的属性创建动画。</p><p>时间轴在时间方向上既可以向前移动，也可以向后移动。</p><p>可以循环播放一次或多次，甚至是无限循环播放。可指定每次循环时改变方向，这样它就能够先向前播放而后再向后播放。还可以加快或减慢播放的速率。</p><p>Timeline类是Animation类的子类</p><ul><li><code>javafx.animation.Timeline</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Timeline()</td><td style="text-align:center">创建一个空的时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(double targetFramerate)</td><td style="text-align:center">创建以targetFramerate为帧速率(每秒刷新图片的帧数)创建时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(KeyFrame… keyFrames)</td><td style="text-align:center">以参数指定的多个关键帧来创建时间轴对象</td></tr><tr><td style="text-align:center">public Timeline(double targetFramerate, KeyFrame… keyFrames)</td><td style="text-align:center">以targetFramerate为帧速率，以参数指定的多个关键帧来创建时间轴对象</td></tr></tbody></table></div><ul><li><code>javafx.animation.Timeline</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final ObservablelList &lt; KeyFrame &gt; getKeyFrames()</td><td style="text-align:center">返回时间轴上的关键帧列表</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyFrame</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public KeyFrame(Duration time, KeyValue… values)</td><td style="text-align:center">以time为持续时间，以给定的多个参数为关键值创建关键帧对象</td></tr><tr><td style="text-align:center">public KeyFrame(Duration time, String name, KeyValue… values)</td><td style="text-align:center">以time为持续时间，以name为名字并以给定的多个关键值创建关键帧对象</td></tr><tr><td style="text-align:center">public KeyFrame(Duration time, EventHandler &lt; ActionEvent &gt; onFinished, KeyValue… values)</td><td style="text-align:center">创建关键帧对象,参数同上；但onFinished是关键帧持续时间结束后被调用的事件处理方法</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyFrame</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回关键帧的名称</td></tr><tr><td style="text-align:center">publice Set &lt; KeyValue &gt; getValues()</td><td style="text-align:center">返回关键值实例集</td></tr><tr><td style="text-align:center">public Duration getTime()</td><td style="text-align:center">返回关键帧的时间偏移量</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyValue</code>类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public KeyValue(WritableValue &lt; T &gt; target, T endValue)</td><td style="text-align:center">创建以target为目标，以endValue为结束关键值对象，使用默认插值器Interpolator.LINEAR</td></tr><tr><td style="text-align:center">public KeyValue(WritableValue&lt; T &gt; target, T endValue, Interpolator interpolator)</td><td style="text-align:center">功能同上，使用的插值器为interpolator，取值如下：<br />Interpolator, LINEAR：线性；<br />Interpolator.DISCRETE：离散; <br />Interpolator.EASEIN:渐快；<br />Interpolator.EASEOUT：减速；<br />Interpolator.EASE_BOTH：增减速交替</td></tr></tbody></table></div><ul><li><code>javafx.animation.KeyValue</code>类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public WritableValue &lt; ? &gt; getTarget()</td><td style="text-align:center">返回关键值中的目标</td></tr><tr><td style="text-align:center">public Object getEndValue()</td><td style="text-align:center">返回关键值中的结束值</td></tr><tr><td style="text-align:center">public Interpolator get Interpolator()</td><td style="text-align:center">返回关键值中的插值器</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用时间轴动画，编写一个字幕滚动程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.KeyFrame;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.KeyValue;</span><br><span class="line"><span class="keyword">import</span> javafx.animation.Timeline;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.VPos;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Font;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"><span class="keyword">import</span> javafx.util.Duration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App16_10</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line"><span class="type">Text</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;滚动字幕&quot;</span>);</span><br><span class="line">        t.setTextOrigin(VPos.TOP);</span><br><span class="line">        t.setFont(Font.font(<span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Pane</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pane</span>(t);</span><br><span class="line">        root.setPrefSize(<span class="number">300</span>, <span class="number">60</span>);</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(root);</span><br><span class="line"></span><br><span class="line">        stage.setScene(scene); </span><br><span class="line">        stage.setTitle(<span class="string">&quot;时间轴动画程序设计&quot;</span>);</span><br><span class="line">        stage.show();</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">sceneWidth</span> <span class="operator">=</span> scene.getWidth();</span><br><span class="line">        <span class="type">double</span> <span class="variable">tWidth</span> <span class="operator">=</span> t.getLayoutBounds().getWidth();</span><br><span class="line">        </span><br><span class="line">        <span class="type">KeyValue</span> <span class="variable">sKeyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyValue</span>(t.translateXProperty(), sceneWidth);</span><br><span class="line">        <span class="type">KeyFrame</span> <span class="variable">sFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyFrame</span>(Duration.ZERO, sKeyValue);</span><br><span class="line">        <span class="type">KeyValue</span> <span class="variable">eKeyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyValue</span>(t.translateXProperty(), -<span class="number">1.0</span>*tWidth);</span><br><span class="line">        <span class="type">KeyFrame</span> <span class="variable">eFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyFrame</span>(Duration.seconds(<span class="number">5</span>), eKeyValue);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Timeline</span> <span class="variable">timeline</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timeline</span>(sFrame, eFrame);</span><br><span class="line">        timeline.setCycleCount(Timeline.INDEFINITE);</span><br><span class="line">        timeline.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/05/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/%E5%AD%97%E5%B9%95%E6%BB%9A%E5%8A%A8%E7%A8%8B%E5%BA%8F.gif" class="" title="字幕滚动程序"><p>该程序中用到的方法<code>getLayoutBounds()</code>和<code>translateXProperty()</code>均是 Node类中的方法 。</p><h2 id="本章小结-2"><a href="#本章小结-2" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>JavaFX的绘图面板中，原点在左上角，向右为x轴方向，向下为y轴方向。</li><li>形状类javafx.scene.shape.Shape是Node的子类。</li><li>抽象类Animation提供了JavaFX中动画制作的核心功能。</li><li>关键帧KayFrame是设置某些关键性属性值的帧。</li><li>关键值KeyValue是包含在KeyFrame对象中的某些参数值。</li><li>从一个关键帧过渡到另一个关键帧的过程中用于计算中间过渡帧的算法称为插值器。</li></ul><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>编程题，画一个圆角矩形，宽度200像素，高度100像素，左上角位于（20，20），圆角处的水平直径为30像素，垂直直径为20像素，并用红色填充。</li><li>编程题，画一个椭圆，中心在（150，100），水平半径为100像素，垂直半径为50像素，画笔颜色随机产生，不填充颜色，生成16个椭圆，每个椭圆旋转一个角度后都添加到面板中。</li><li>编程题，画一个半径为50像素的上半圆的轮廓。</li><li>编程题，画一个半径为50像素的下半圆，并用蓝色填充。</li><li>编程题，在窗口中放置“顺转”和“逆转”两个按钮，当单击按钮时，将椭圆每次都旋转30°。</li><li>编程题，画一个以（20，40）、（30，50）、（40，90）、（90，10）和（10，30）为顶点的多边形。</li><li>编程题，画一个以（20，40）、（30，50）、（40，90）、（90，10）和（10，30）为顶点的折线。</li><li>编程题，用动画实现一个钟摆，即一条直线上端固定，下端连接一个小球，小球来回摆动。</li></ul>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记4</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LaTex入门</title>
    <link href="http://hibiscidai.com/2022/01/02/LaTex%E5%85%A5%E9%97%A8/"/>
    <id>http://hibiscidai.com/2022/01/02/LaTex%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-02T09:00:00.000Z</published>
    <updated>2022-01-02T13:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/LaTex%E5%85%A5%E9%97%A8.png" class="" title="LaTex入门"><p>LaTex入门</p><span id="more"></span><h1 id="LaTex入门"><a href="#LaTex入门" class="headerlink" title="LaTex入门"></a>LaTex入门</h1><h1 id="什么是LaTex"><a href="#什么是LaTex" class="headerlink" title="什么是LaTex"></a>什么是LaTex</h1><p>是一种用于创建专业外观文档的工具。它基于所见即所得的理念，只关注文档的内容，而计算机将负责格式化。与Microsoft Word或LibreOffice Writer一样，用户可以输入纯文本并让LATEX处理其余内容，而不是在页面上隔开文本以控制格式。</p><p>它将文档的内容与样式分开。这意味着一旦您编写了文档的内容，我们就可以轻松更改其外观。同样，您可以创建一种文档样式，用于标准化许多不同文档的外观。这允许科学期刊为提交创建模板。这些模板具有预先制作的布局，这意味着只需添加内容。事实上，有数百种模板可用于从简历到幻灯片的所有内容。</p><h1 id="LaTex平台环境"><a href="#LaTex平台环境" class="headerlink" title="LaTex平台环境"></a>LaTex平台环境</h1><h2 id="miktex-PC端"><a href="#miktex-PC端" class="headerlink" title="miktex-PC端"></a>miktex-PC端</h2><p><a href="https://miktex.org/">miktex官网</a></p><p>MiKTeX 是开源的。是适用于 Windows、Linux 和 macOS 的现代 TeX 发行版。</p><p>使用TexWorks桌面工具进行文件编辑。</p><h2 id="overleaf-Web端"><a href="#overleaf-Web端" class="headerlink" title="overleaf-Web端"></a>overleaf-Web端</h2><p><a href="https://www.overleaf.com/">overleaf官网</a></p><p>在网页端完成内容编排。</p><h1 id="Hello-LaTex"><a href="#Hello-LaTex" class="headerlink" title="Hello LaTex"></a>Hello LaTex</h1><p>LaTex会生成<code>.tex</code>文件</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">First document. This is a simple example, with no </span><br><span class="line">extra parameters or packages included.</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex1.png" class="" title="hellolatex1"><ul><li>文档正文</li></ul><p>包含在 <code>\begin&#123;document&#125;</code> 和 <code>\end&#123;document&#125;</code>之间</p><ul><li>编译模式</li></ul><p><code>pdflatex</code></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 额外参数设置字体大小(12pt)和纸张大小(letterpaper) %</span></span><br><span class="line"><span class="keyword">\documentclass</span> [12pt, letterpaper] &#123; article &#125; </span><br><span class="line"><span class="comment">% 文档的编码 %</span></span><br><span class="line"><span class="keyword">\usepackage</span> [utf8] &#123; inputenc &#125;</span><br></pre></td></tr></table></figure><h2 id="文件序言"><a href="#文件序言" class="headerlink" title="文件序言"></a>文件序言</h2><p>在 <code>\begin&#123;document&#125;</code> 之前</p><h2 id="标题、作者和日期"><a href="#标题、作者和日期" class="headerlink" title="标题、作者和日期"></a>标题、作者和日期</h2><p>在文档中添加标题、作者和日期，必须在<code>序言</code>中添加三行。</p><ul><li>标题</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\title</span>&#123;First document&#125;</span><br></pre></td></tr></table></figure><ul><li>作者</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\author</span>&#123;Hibisci Dai&#125;</span><br></pre></td></tr></table></figure><ul><li>日期</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\date</span>&#123;February 2014&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%编译时自动获取本天%</span></span><br><span class="line"><span class="keyword">\today</span></span><br></pre></td></tr></table></figure><ul><li>致谢</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%这可以添加在作者姓名之后，在author命令的大括号内。它将在大括号内添加一个上标和一个脚注。如果您需要在文章中感谢某个机构，这将很有用%</span></span><br><span class="line"><span class="keyword">\thanks</span>&#123;funded by the Overleaf team&#125;</span><br></pre></td></tr></table></figure><p>加入序言之后，文章有</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">We have now added a title, author and date to our first <span class="keyword">\LaTeX</span>&#123;&#125; document!</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex2.png" class="" title="hellolatex2"><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是包含在文档中但不会被打印的文本片段，并且不会以任何方式影响文档。<br>需要在该行 <code>%</code> 包裹</p><h2 id="粗体、斜体和下划线"><a href="#粗体、斜体和下划线" class="headerlink" title="粗体、斜体和下划线"></a>粗体、斜体和下划线</h2><ul><li>粗体</li></ul><p><code>\textbf&#123;...&#125;</code></p><ul><li>斜体</li></ul><p><code>\textit&#123;...&#125;</code></p><ul><li>下划线</li></ul><p><code>\underline&#123;...&#125;</code></p><p>案例示例</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%粗体%</span></span><br><span class="line">Some of the <span class="keyword">\textbf</span>&#123;greatest&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%下划线%</span></span><br><span class="line">discoveries in <span class="keyword">\underline</span>&#123;science&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体、斜体%</span></span><br><span class="line">were made by <span class="keyword">\textbf</span>&#123;<span class="keyword">\textit</span>&#123;accident&#125;&#125;.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex3.png" class="" title="hellolatex3"><ul><li>依赖上下文的斜体命令</li></ul><p>参数不依赖于上下文-普通文本内的强调文本为斜体，但如果内部使用的这种行为相反斜体文本</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%正常斜体%</span></span><br><span class="line">Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.</span><br><span class="line"></span><br><span class="line"><span class="comment">%斜体中标正常%</span></span><br><span class="line"><span class="keyword">\textit</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体中斜体%</span></span><br><span class="line"><span class="keyword">\textbf</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex4.png" class="" title="hellolatex4"><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%声明使用图片包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片存放路径%</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123; &#123;images/&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">这里是测试图片。</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片名称%</span></span><br><span class="line"><span class="keyword">\includegraphics</span>&#123;test&#125;</span><br><span class="line"></span><br><span class="line">有一个测试图片。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p>latex本身无法管理图像，因此需要使用package。在文档中包含一个图像，应该使用该 <code>graphicx</code> 包。这个包提供了新的命令， <code>\includegraphics&#123;...&#125;</code>并且<code>\graphicspath&#123;...&#125;</code>。要使用该 <code>graphicx</code> 包，在序言中包含以下行：<code>\usepackage&#123;graphicx&#125;</code>。图像的文件名不应包含空格或多个点</p><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex5.png" class="" title="hellolatex5"><h3 id="图的标题、标签和参考"><a href="#图的标题、标签和参考" class="headerlink" title="图的标题、标签和参考"></a>图的标题、标签和参考</h3><p>可以通过figure环境对图像进行标题、标记和引用</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;mesh&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br></pre></td></tr></table></figure><p><code>\caption&#123;a nice plot&#125;</code>：此命令设置图形的标题。如果创建一个数字列表，则将在那里使用此标题。可将其放置在图形上方或下方。</p><p><code>\label&#123;fig:mesh1&#125;</code>：如果需要引用文档中的图像，请使用此命令设置标签。标签将为图像编号，并结合下一个命令引用它。</p><p><code>\ref&#123;fig:mesh1&#125;</code>：此代码将被与参考图对应的数字代替。</p><p>在latex文档中放置图像时，应该始终将它们放在figure环境或类似环境中，以便latex以适合文本其余部分的方式定位图像。</p><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex6.png" class="" title="hellolatex6"><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><code>itemize</code>标签产生，每个列表前有<code>\item</code></p><p>默认情况下，单个条目用黑点表示，即所谓的项目符号。条目中的文本可以是任意长度。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">  <span class="keyword">\item</span> The text in the entries may be of any length.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex7.png" class="" title="hellolatex7"><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p><code>enumerate</code>标签产生，每个列表前有<code>\item</code></p><p>它会自动生成标记该项目的编号。枚举标签由从 1 开始的序列号组成。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line">  <span class="keyword">\item</span> This is the first entry in our list</span><br><span class="line">  <span class="keyword">\item</span> The list numbers increase with each entry we add</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex8.png" class="" title="hellolatex8"><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>LATEX允许两种数学表达式的书写模式：内联(inline)模式和显示(display)模式。</p><p>内联(inline)模式：编写作为文本一部分的公式。</p><p>显示(display)模式：编写不属于文本或段落的表达式，因此放在单独的行上。</p><p>许多数学模式命令需要<code>amsmath</code>包。</p><h3 id="内联-inline-模式"><a href="#内联-inline-模式" class="headerlink" title="内联(inline)模式"></a>内联(inline)模式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In physics, the mass-energy equivalence is stated </span><br><span class="line">by the equation <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>, discovered in 1905 by Albert Einstein.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex9.png" class="" title="hellolatex9"><p>要将方程置于内联模式，请使用以下分隔符之一：</p><ul><li><code>\( ... \)</code> </li><li><code>$ ... $</code> </li><li><code>\begin&#123;math&#125; ... \end&#123;math&#125;</code></li></ul><h3 id="显示-display-模式"><a href="#显示-display-模式" class="headerlink" title="显示(display)模式"></a>显示(display)模式</h3><p>要在显示模式下打印方程，请使用以下分隔符之一：</p><ul><li><code>\[ ... \]</code></li><li><code>\begin&#123;displaymath&#125; ... \end&#123;displaymath&#125;</code></li><li><code>\begin&#123;equation&#125; ... \end&#123;equation&#125;</code></li><li><code>$$ ... $$</code>不建议使用，不一致的间距，并不得与一些数学工具很好地工作。</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%无编号-display%</span></span><br><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2 <span class="keyword">\]</span></span><br><span class="line">discovered in 1905 by Albert Einstein. </span><br><span class="line"></span><br><span class="line"><span class="comment">%有编号-display%</span></span><br><span class="line">In natural units (<span class="built_in">$</span>c = 1<span class="built_in">$</span>), the formula expresses the identity</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">E=m</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex10.png" class="" title="hellolatex10"><h3 id="基本数学符号案例"><a href="#基本数学符号案例" class="headerlink" title="基本数学符号案例"></a>基本数学符号案例</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Subscripts in math mode are written as <span class="built_in">$</span>a<span class="built_in">_</span>b<span class="built_in">$</span> and superscripts are written as <span class="built_in">$</span>a<span class="built_in">^</span>b<span class="built_in">$</span>. These can be combined an nested to write expressions such as</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> T<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1 i<span class="built_in">_</span>2 <span class="keyword">\dots</span> i<span class="built_in">_</span>p&#125;<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1 j<span class="built_in">_</span>2 <span class="keyword">\dots</span> j<span class="built_in">_</span>q&#125; = T(x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>p&#125;,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>q&#125;) <span class="keyword">\]</span></span><br><span class="line"> </span><br><span class="line">We write integrals using <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> and fractions using <span class="built_in">$</span><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="built_in">$</span>. Limits are placed on integrals using superscripts and subscripts:</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>1 <span class="keyword">\frac</span>&#123;dx&#125;&#123;e<span class="built_in">^</span>x&#125; =  <span class="keyword">\frac</span>&#123;e-1&#125;&#123;e&#125; <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">Lower case Greek letters are written as <span class="built_in">$</span><span class="keyword">\omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\delta</span><span class="built_in">$</span> etc. while upper case Greek letters are written as <span class="built_in">$</span><span class="keyword">\Omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\Delta</span><span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line">Mathematical operators are prefixed with a backslash as <span class="built_in">$</span><span class="keyword">\sin</span>(<span class="keyword">\beta</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\cos</span>(<span class="keyword">\alpha</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\log</span>(x)<span class="built_in">$</span> etc.</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex11.png" class="" title="hellolatex11"><h2 id="基本格式化"><a href="#基本格式化" class="headerlink" title="基本格式化"></a>基本格式化</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>声明摘要会将文字以特殊格式放置文档顶部。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;abstract&#125;</span><br><span class="line">This is a simple paragraph at the beginning of the </span><br><span class="line">document. A brief introduction about the main subject.</span><br><span class="line"><span class="keyword">\end</span>&#123;abstract&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex12.png" class="" title="hellolatex12"><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ul><li><code>\\</code> 换行</li><li><code>~\\</code> 不打断换行</li><li><code>\par</code> 新自然段</li></ul><p>可能需要声明包 <code>\usepackage&#123;parskip&#125;</code></p><h3 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h3><p>基本的深度级别</p><ul><li>-1 : <code>\part&#123;part&#125;</code></li><li>0 : <code>\chapter&#123;chapter&#125;</code></li><li>1 : <code>\section&#123;section&#125;</code></li><li>2 : <code>\subsection&#123;subsection&#125;</code></li><li>3 : <code>\subsubsection&#123;subsubsection&#125;</code></li><li>4 : <code>\paragraph&#123;paragraph&#125;</code></li><li>5 : <code>\subparagraph&#123;subparagraph&#125;</code></li></ul><p><code>\section&#123;&#125;</code> 标志着一个新部分的开始，在大括号内设置标题。节编号是自动的，可以通过<code>*</code>在节命令中来禁用自动变化，<code>\section*&#123;&#125;</code>。</p><p>类似的<code>\subsection&#123;&#125;</code>，实际上是<code>\subsubsection&#123;&#125;</code>。</p><p><code>\part</code> 和 <code>\chapter</code> 仅在报告和书籍文档类中可用。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">This is the first section.</span><br><span class="line"></span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;First Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex13.png" class="" title="hellolatex13"><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; c c c &#125;</span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span>  </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9    </span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex14.png" class="" title="hellolatex14"><h3 id="表边框"><a href="#表边框" class="headerlink" title="表边框"></a>表边框</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span> </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex15.png" class="" title="hellolatex15"><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"> <span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex16.png" class="" title="hellolatex16"><h3 id="表的标题、标签和参考"><a href="#表的标题、标签和参考" class="headerlink" title="表的标题、标签和参考"></a>表的标题、标签和参考</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Table <span class="keyword">\ref</span>&#123;table:data&#125; is an example of referenced <span class="keyword">\LaTeX</span>&#123;&#125; elements.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h!]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;Table to test captions and labels&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;table:data&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex17.png" class="" title="hellolatex17"><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><code>\tableofcontents</code> 创建目录</p><p>章节、小节和章节会自动包含在目录中。要手动添加条目，例如当您想要一个未编号的部分时，请使用\addcontentsline示例中所示的命令。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">\title</span>&#123;Sections and Chapters&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Gubert Farnsworth&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line">   </span><br><span class="line">This is the first section.</span><br><span class="line">      </span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line">       </span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;Unnumbered Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line">       </span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line">         </span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatex18.png" class="" title="hellolatex18"><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><code>HelloLatex.tex</code></li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"><span class="comment">%数学包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="comment">%段落换行包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;parskip&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">We have now added a title, author and date to our first <span class="keyword">\LaTeX</span>&#123;&#125; document!</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体%</span></span><br><span class="line">Some of the <span class="keyword">\textbf</span>&#123;greatest&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%下划线%</span></span><br><span class="line">discoveries in <span class="keyword">\underline</span>&#123;science&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体、斜体%</span></span><br><span class="line">were made by <span class="keyword">\textbf</span>&#123;<span class="keyword">\textit</span>&#123;accident&#125;&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%正常斜体%</span></span><br><span class="line">Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.</span><br><span class="line"></span><br><span class="line"><span class="comment">%斜体中标正常%</span></span><br><span class="line"><span class="keyword">\textit</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%粗体中斜体%</span></span><br><span class="line"><span class="keyword">\textbf</span>&#123;Some of the greatest <span class="keyword">\emph</span>&#123;discoveries&#125; </span><br><span class="line">in science were made by accident.&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%无序列表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">  <span class="keyword">\item</span> The text in the entries may be of any length.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%有序列表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line">  <span class="keyword">\item</span> This is the first entry in our list</span><br><span class="line">  <span class="keyword">\item</span> The list numbers increase with each entry we add</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%公式-inline%</span></span><br><span class="line">In physics, the mass-energy equivalence is stated </span><br><span class="line">by the equation <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>, discovered in 1905 by Albert Einstein.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%无编号-display%</span></span><br><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2 <span class="keyword">\]</span></span><br><span class="line">discovered in 1905 by Albert Einstein. </span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%有编号-display%</span></span><br><span class="line">In natural units (<span class="built_in">$</span>c = 1<span class="built_in">$</span>), the formula expresses the identity</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">E=m</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%基本数学符号案例%</span></span><br><span class="line">Subscripts in math mode are written as <span class="built_in">$</span>a<span class="built_in">_</span>b<span class="built_in">$</span> and superscripts are written as <span class="built_in">$</span>a<span class="built_in">^</span>b<span class="built_in">$</span>. These can be combined an nested to write expressions such as</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> T<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1 i<span class="built_in">_</span>2 <span class="keyword">\dots</span> i<span class="built_in">_</span>p&#125;<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1 j<span class="built_in">_</span>2 <span class="keyword">\dots</span> j<span class="built_in">_</span>q&#125; = T(x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,x<span class="built_in">^</span>&#123;i<span class="built_in">_</span>p&#125;,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>1&#125;,<span class="keyword">\dots</span>,e<span class="built_in">_</span>&#123;j<span class="built_in">_</span>q&#125;) <span class="keyword">\]</span></span><br><span class="line"> </span><br><span class="line">We write integrals using <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> and fractions using <span class="built_in">$</span><span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="built_in">$</span>. Limits are placed on integrals using superscripts and subscripts:</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>1 <span class="keyword">\frac</span>&#123;dx&#125;&#123;e<span class="built_in">^</span>x&#125; =  <span class="keyword">\frac</span>&#123;e-1&#125;&#123;e&#125; <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line">Lower case Greek letters are written as <span class="built_in">$</span><span class="keyword">\omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\delta</span><span class="built_in">$</span> etc. while upper case Greek letters are written as <span class="built_in">$</span><span class="keyword">\Omega</span><span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\Delta</span><span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line">Mathematical operators are prefixed with a backslash as <span class="built_in">$</span><span class="keyword">\sin</span>(<span class="keyword">\beta</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\cos</span>(<span class="keyword">\alpha</span>)<span class="built_in">$</span>, <span class="built_in">$</span><span class="keyword">\log</span>(x)<span class="built_in">$</span> etc.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%摘要%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;abstract&#125;</span><br><span class="line">This is a simple paragraph at the beginning of the </span><br><span class="line">document. A brief introduction about the main subject.</span><br><span class="line"><span class="keyword">\end</span>&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%测试章节%</span></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">This is the first section.</span><br><span class="line"></span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Second Section&#125;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;First Subsection&#125;</span><br><span class="line">Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;Unnumbered Section&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%简单工作表%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; c c c &#125;</span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span>  </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9    </span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表边框1%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> cell1 <span class="built_in">&amp;</span> cell2 <span class="built_in">&amp;</span> cell3 <span class="keyword">\\</span> </span><br><span class="line"> cell4 <span class="built_in">&amp;</span> cell5 <span class="built_in">&amp;</span> cell6 <span class="keyword">\\</span> </span><br><span class="line"> cell7 <span class="built_in">&amp;</span> cell8 <span class="built_in">&amp;</span> cell9 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表边框2%</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"> <span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%表的标题、标签和参考%</span></span><br><span class="line">Table <span class="keyword">\ref</span>&#123;table:data&#125; is an example of referenced <span class="keyword">\LaTeX</span>&#123;&#125; elements.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h!]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> Col1 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col2 <span class="built_in">&amp;</span> Col3 <span class="keyword">\\</span> [0.5ex] </span><br><span class="line"> <span class="keyword">\hline</span><span class="keyword">\hline</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 6 <span class="built_in">&amp;</span> 87837 <span class="built_in">&amp;</span> 787 <span class="keyword">\\</span> </span><br><span class="line"> 2 <span class="built_in">&amp;</span> 7 <span class="built_in">&amp;</span> 78 <span class="built_in">&amp;</span> 5415 <span class="keyword">\\</span></span><br><span class="line"> 3 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 778 <span class="built_in">&amp;</span> 7507 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 545 <span class="built_in">&amp;</span> 18744 <span class="built_in">&amp;</span> 7560 <span class="keyword">\\</span></span><br><span class="line"> 5 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 788 <span class="built_in">&amp;</span> 6344 <span class="keyword">\\</span> [1ex] </span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;Table to test captions and labels&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;table:data&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line">~<span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%目录%</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-1.png" class="" title="hellolatexfu1-1"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-2.png" class="" title="hellolatexfu1-2"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-3.png" class="" title="hellolatexfu1-3"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-4.png" class="" title="hellolatexfu1-4"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu1-5.png" class="" title="hellolatexfu1-5"><ul><li><code>HelloLatexPicture.tex</code></li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper, twoside]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"><span class="comment">%声明使用图片包%</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="comment">%图片存放路径%</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123; &#123;images/&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;Hello Latex Picure&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Hibisici Dai <span class="keyword">\thanks</span>&#123;funded by the SWPU&#125;&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line">The universe is immense and it seems to be homogeneous, in a large scale, everywhere we look at.</span><br><span class="line"></span><br><span class="line"><span class="comment">%图片名称%</span></span><br><span class="line"><span class="keyword">\includegraphics</span>&#123;test&#125;</span><br><span class="line"></span><br><span class="line">There&#x27;s a picture of a galaxy above.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\par</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;test&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]&#123;test&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;a nice plot&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig:mesh1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure <span class="keyword">\ref</span>&#123;fig:mesh1&#125;, the </span><br><span class="line">function grows near 0. Also, in the page <span class="keyword">\pageref</span>&#123;fig:mesh1&#125; </span><br><span class="line">is the same example.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu2-1.png" class="" title="hellolatexfu2-1"><img src="/2022/01/02/LaTex%E5%85%A5%E9%97%A8/hellolatexfu2-2.png" class="" title="hellolatexfu2-2">]]></content>
    
    
    <summary type="html">LaTex入门</summary>
    
    
    
    <category term="科研利器" scheme="http://hibiscidai.com/categories/%E7%A7%91%E7%A0%94%E5%88%A9%E5%99%A8/"/>
    
    
    <category term="软件" scheme="http://hibiscidai.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="科研利器" scheme="http://hibiscidai.com/tags/%E7%A7%91%E7%A0%94%E5%88%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记3</title>
    <link href="http://hibiscidai.com/2021/12/30/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://hibiscidai.com/2021/12/30/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</id>
    <published>2021-12-30T12:00:00.000Z</published>
    <updated>2022-04-10T13:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/12/30/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记3"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记3</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记3"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记3" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记3"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记3</h1><h1 id="第十二章-泛型与容器类"><a href="#第十二章-泛型与容器类" class="headerlink" title="第十二章 泛型与容器类"></a>第十二章 泛型与容器类</h1><p>泛型技术可以通过一种类型或方法操纵各种不同类型的对象，同时又提供了编译时的类型安全保证。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型其实质就是将数据的类型参数化。</p><p>编写的代码可以被很多类型不同的对象所重用，从而减少数据类型转换的潜在错误。</p><h3 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h3><p>用泛型的主要优点是能够在编译时而不是在运行时检测出错误。<br>泛型实际上是在定义类、接口或方法时通过为其增加”类型参数”来实现的。</p><p><code>类型参数-type parameters</code> ：泛型所操作的数据类型被指定为一个参数。</p><ul><li>泛型类的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名 &lt;T&gt;</span><br></pre></td></tr></table></figure><ul><li>泛型接口的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] interface 接口名 &lt;T&gt;</span><br></pre></td></tr></table></figure><ul><li>泛型方法的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] [<span class="keyword">static</span>] &lt;T&gt; 返回值类型方法名 (T参数)</span><br></pre></td></tr></table></figure><p>用泛型类创建的对象就是在类体内的每个类型参数T处分别用这个具体的实际类型替代。</p><p>泛型的实际参数必须是类类型。</p><p><code>泛型实例化</code>：利用泛型类创建的对象称为泛型对象。</p><p>泛型也称为参数多态</p><h3 id="泛型类及应用"><a href="#泛型类及应用" class="headerlink" title="泛型类及应用"></a>泛型类及应用</h3><p>在泛型实例化时，可以根据不同的需求给出类型参数T的具体类型。</p><p>调用泛型类的方法传递或返回数据类型时可以不用进行类型转换，而是直接用T作为类型来代替参数类型或返值的类型。</p><blockquote><p>在实例化泛型类的过程中，实际类型必须是引用类型，即必须是类类型，不能用如int、double或char等这样的基本类型来替换类型参数T。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_1</span> &lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> T obj;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(T obj)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">App12_1 &lt;String&gt; name = <span class="keyword">new</span> <span class="title class_">App12_1</span> &lt;String&gt;();</span><br><span class="line">App12_1 &lt;Integer&gt; age = <span class="keyword">new</span> <span class="title class_">App12_1</span> &lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">name.setObj(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> name.getObj();</span><br><span class="line">System.out.println(<span class="string">&quot;姓名：&quot;</span> + newName);</span><br><span class="line"></span><br><span class="line">age.setObj(<span class="number">25</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">newAge</span> <span class="operator">=</span> age.getObj();</span><br><span class="line">System.out.println(<span class="string">&quot;年龄：&quot;</span> + newAge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T可代表任意一种数据类型，并可用该类型来声明类成员变量、成员方法的参数或返回值等。</p><blockquote><p><code>自动包装</code>：应该使用包装类对象的地方却使用基本数据类型的数据时，编译器将自动把该数据包装为该基本类型对应的包装类的对象。<br>当一个泛型有多个类型参数时，每个类型参数在该泛型中都应该是唯一的。如不能定义形如Map＜K，K＞形式的泛型，但可以定义Map＜K，V＞形式的泛型。</p></blockquote><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>一个方法是否是泛型方法与其所在的类是否是泛型类没有关系。</p><p>要定义泛型方法，只需将泛型的类型参数 &lt; T &gt; 置于方法返回值类型前即可。在Java中任何方法（包括静态方法和构造方法）都可声明为泛型方法。泛型方法除了定义不同，调用时与普通方法一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(E[] list)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">System.out.print(list[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span> &#123;</span><br><span class="line">Integer[] num = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">String[] str = &#123;<span class="string">&quot;红&quot;</span>, <span class="string">&quot;橙&quot;</span>, <span class="string">&quot;黄&quot;</span>, <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;青&quot;</span>, <span class="string">&quot;蓝&quot;</span>, <span class="string">&quot;紫&quot;</span>&#125;;</span><br><span class="line">App12_2.display(num);</span><br><span class="line">App12_2.display(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可将实际类型放在尖括号内作为方法名的前缀。</p><p>泛型方法的返回值类型和至少一个参数类型应该是泛型，而且类型应该是一致的。<br>推荐使用返回值类型和参数类型一致的泛型方法。</p><p>一个static方法，无法访问泛型类的类型参数，所以如果static方法需要使用泛型能力，必须使其成为泛型方法。</p><p>当使用泛型类时，必须在创建泛型对象的时候指定类型参数的实际值，而调用泛型方法时，通常不必指明参数的类型。</p><p><code>Java编译器的类型参数推断</code>：它会根据调用方法时实参的类型，推断得出被调用方法类型参数的具体类型，并据此检查方法调用中类型的正确性。</p><p>泛型方法不需要把实际的类型传递给泛型方法。<br>泛型类必须把实际的类型参数传递给泛型类。</p><h3 id="限制泛型的可用类型"><a href="#限制泛型的可用类型" class="headerlink" title="限制泛型的可用类型"></a>限制泛型的可用类型</h3><p>定义泛型类时，默认可以使用任何类型来实例化一个泛型类对象，但Java语言也可以在用泛型类创建对象时对数据类型做出限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &lt;T <span class="keyword">extends</span> <span class="title class_">anyClass</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GneeralType</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; &#123;</span><br><span class="line">T obj;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GneralType</span><span class="params">(T obj)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">GeneralType &lt;Integer&gt; num = <span class="keyword">new</span> <span class="title class_">GeneralType</span>&lt;Integer&gt;(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;给出的参数是：&quot;</span> + num.getObj());</span><br><span class="line"></span><br><span class="line"><span class="comment">//下方代码报错，String不是Number或其子类</span></span><br><span class="line"><span class="comment">//GeneralType&lt;String&gt; s = new GeneralType&lt;String&gt;(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;给出的参数是：&quot; + s.getObj());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用泛型进行实例化时，若泛型的实际参数的类之间有父子关系时，参数化后得到的泛型类之间并不会具有同样的父子类关系，即子类泛型”并不是一种”父类泛型。</p></blockquote><h3 id="泛型的类型通配符和泛型数组的应用"><a href="#泛型的类型通配符和泛型数组的应用" class="headerlink" title="泛型的类型通配符和泛型数组的应用"></a>泛型的类型通配符和泛型数组的应用</h3><p>通配符的主要作用：</p><ul><li>用于创建可重新赋值但不可修改其内容的泛型对象；</li><li>用在方法的参数中，限制传入不想要的类型实参。</li></ul><p>一个程序中使用同一个泛型对象名去引用不同的泛型对象时，就需要使用通配符”?”创建泛型类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">泛型类名 &lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; o = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>“？extends T”表示是T或T的未知子类型或是实现接口T的类。</p><p>如果只使用了”?”通配符，则默认是”? extends Object”，所以”?”也被称为非受限通配。</p><p>用通配符”?”创建的对象只能获取或删除其中的信息，但不能对其加入新的信息。</p><p>直接用通配符 &lt; ? &gt; 创建泛型对象，有两个特点：</p><ul><li>具有通用性，即该泛型类的其他对象可以赋值给用通配符”?”创建的泛型对象，因为”?”等价于”? extends Object”，反之不可。</li><li>用通配符”?”创建的泛型对象，只能获取或删除其中的信息，但不可为其添加新的信息。</li></ul><p>上限通配：”? extends T”，T或T的一个未知子类。<br>下限通配：”? super T”，T或T的一个未知父类。</p><p>由于JVM只是在编译时对泛型进行安全检查，所以特别强调以下几点。</p><ul><li>不能使用泛型的类型参数T创建对象。如<code>T obj = new T()</code>是错误的。</li><li>在泛型中可以用类型参数T声明一个数组，但不能使用类型参数T创建数组对象。例如<code>T[] a = new T[个数]</code>是错误的。</li><li>不能在静态环境中使用泛型类的类型参数T。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T obj;<span class="comment">//非法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(T obj)</span> &#123; &#125;<span class="comment">//非法</span></span><br><span class="line"><span class="keyword">static</span> &#123;T obj2;&#125;<span class="comment">//非法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异常类不能是泛型的，即泛型类不能继承<code>java.lang.Throwable</code>类 。 </li></ul><h3 id="继承泛型类与实现泛型接口"><a href="#继承泛型类与实现泛型接口" class="headerlink" title="继承泛型类与实现泛型接口"></a>继承泛型类与实现泛型接口</h3><p>被定义为泛型的类或接口可被继承与实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendClass</span> &lt;T1&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> &lt;T1, T2, T3&gt; <span class="keyword">extends</span> <span class="title class_">ExtendClass</span> &lt;T1&gt; &#123; &#125; </span><br></pre></td></tr></table></figure><p>如果在SubClass类继承ExtendClass类时保留父类的类型参数，需要在继承时指明，如果没有指明，直接使用extends ExtendClass语句进行继承声明，则SubClass类中的T1、T2和T3都会自动变为Object，所以在一般情况下都将父类的类型参数保留。</p><p>在定义泛型接口时，泛型接口也可被实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Face</span> &lt;T1&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> &lt;T1, T2&gt; <span class="keyword">implements</span> <span class="title class_">Face</span> &lt;T1&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>容器类是Java以类库的形式供用户开发程序时可直接使用的各种数据结构。<br>数据结构就是以某种方式将数据组织在一起，并存储在计算机中。</p><h3 id="Java容器框架"><a href="#Java容器框架" class="headerlink" title="Java容器框架"></a>Java容器框架</h3><img src="/2021/12/30/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/%E5%AE%B9%E5%99%A8%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" class="" title="容器框架中的接口和实现接口的类的继承关系"><p>Java容器框架结构由两棵接口树构成：</p><p>第一棵树根节点为Collection接口，它定义了所有容器的基本操作，如添加、删除、遍历等。它的子接口Set、List等则提供了更加特殊的功能，其中Set的对象用于存储一组不重复的元素集合，而List的对象用于存储一个由元素构成的线性表。</p><p>第二棵树根节点为Map接口，它保持了”键”到”值”的映射，可以通过键来实现对值的快速访问。</p><h3 id="容器接口Collection"><a href="#容器接口Collection" class="headerlink" title="容器接口Collection"></a>容器接口Collection</h3><p>容器接口Collection通常不能直接使用，但该接口提供了添加元素、删除元素、管理数据的方法。</p><p>容器框架全部采用泛型实现，所以我们以泛型的形式给出相应的方法，即带类型参数。</p><ul><li>Collection &lt; E &gt; 接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">int size()</td><td style="text-align:center">返回容器中元素的个数</td></tr><tr><td style="text-align:center">boolean isEmpty()</td><td style="text-align:center">判断容器是否为空</td></tr><tr><td style="text-align:center">boolean contains(Object obj)</td><td style="text-align:center">判断容器是否包含元素obj</td></tr><tr><td style="text-align:center">boolean add(E element)</td><td style="text-align:center">向容器中添加元素element,添加成功返回true;若容器中已包含element,且不允许有重复元素,则返回false</td></tr><tr><td style="text-align:center">int hashCode()</td><td style="text-align:center">返回容器的哈希码值</td></tr><tr><td style="text-align:center">Object[] toArray()</td><td style="text-align:center">将容器转换为数组,返回的数组包含容器的所有元素</td></tr><tr><td style="text-align:center">boolean remove(Object obj)</td><td style="text-align:center">从容器中删除元素obj,删除成功返回true;若容器不包含obj,则返回false</td></tr><tr><td style="text-align:center">void clear()</td><td style="text-align:center">删除容器中的所有元素</td></tr><tr><td style="text-align:center">Iterator &lt; E &gt; iterator()</td><td style="text-align:center">返回容器的迭代器</td></tr><tr><td style="text-align:center">boolean equals(Object o)</td><td style="text-align:center">比较此collection与指定对象o是否相等</td></tr><tr><td style="text-align:center">void shuffle(List &lt; ? &gt; list)</td><td style="text-align:center">以随机方式重排list 中的元素,即洗牌</td></tr><tr><td style="text-align:center">boolean containsAll(Collection &lt; ? &gt; c)</td><td style="text-align:center">判断当前容器是否包含容器c中的所有元素</td></tr><tr><td style="text-align:center">boolean addAll(Collection &lt; ? extends E &gt; c)</td><td style="text-align:center">将容器c中的所有元素添加到当前容器中,集合并运算</td></tr><tr><td style="text-align:center">boolean removeAll(Collectio n&lt; ? &gt; c)</td><td style="text-align:center">在当前容器中删除包含在容器c中的所有元素,集合差运算</td></tr><tr><td style="text-align:center">boolean retainAll(Collection &lt; ? &gt; c)</td><td style="text-align:center">仅保留当前容器中也被容器c包含的元素,即删除当前容器中未被包含在容器c中的所有元素,集合交运算</td></tr></tbody></table></div><h3 id="列表接口List（可重复、可为空、有顺序）"><a href="#列表接口List（可重复、可为空、有顺序）" class="headerlink" title="列表接口List（可重复、可为空、有顺序）"></a>列表接口List（可重复、可为空、有顺序）</h3><p>列表接口List是Collection子接口，它是一种包含有序元素的线性表，其中的元素必须按顺序存放，且可重复，也可以是空值null。</p><p>元素之间的顺序关系可以由添加到列表的先后来决定，也可由元素值的大小来决定。</p><p>实现List接口的类主要有两个：<code>链表类LinkedList</code>和<code>数组列表类ArrayList</code>。它们都是线性表。</p><ul><li>List &lt; E &gt; 接口常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">E get(int index)</td><td style="text-align:center">返回列表中指定位置的元素</td></tr><tr><td style="text-align:center">E set(int index, E element)</td><td style="text-align:center">用元素element取代index位置的元素,返回被取代的元素</td></tr><tr><td style="text-align:center">int indexOf(Object o)</td><td style="text-align:center">返回元素o首次出现的序号，若0不存在返回-1</td></tr><tr><td style="text-align:center">int lastIndexOf(Object o)</td><td style="text-align:center">返回元素o最后出现的序号</td></tr><tr><td style="text-align:center">void add(int index, E element)</td><td style="text-align:center">在index位置插人元素element</td></tr><tr><td style="text-align:center">boolean add(E element)</td><td style="text-align:center">在列表的最后添加元素element</td></tr><tr><td style="text-align:center">E remove(int index)</td><td style="text-align:center">在列表中删除index位置的元素</td></tr><tr><td style="text-align:center">boolean addAll(Collection &lt; ? extends E &gt; c)</td><td style="text-align:center">在列表的最后添加容器c中的所有元素</td></tr><tr><td style="text-align:center">boolea addAll(int index, Collection &lt; ? extends E &gt; c) )</td><td style="text-align:center">在index位置按照容器c中元素的原有次序插入c中所有元素</td></tr><tr><td style="text-align:center">ListIterator &lt; E &gt; listIterator()</td><td style="text-align:center">返回列表中元素的列表迭代器</td></tr><tr><td style="text-align:center">ListIterator &lt; E &gt; listIterator(int index)</td><td style="text-align:center">返回从index位置开始的列表迭代器</td></tr></tbody></table></div><p>ArrayList：通过下标随机访问元素，但除了在末尾处之外，不在其他位置插入或删除元素<br>LinkedList：需要在线性表的任意位置上进行插入或删除操作。</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList链表类采用链表结构保存对象，使用循环双链表实现List。</p><p>这种结构向链表中任意位置插入、删除元素时不需要移动其他元素，链表的大小是可以动态增大或减小的，但不具有随机存取特性。</p><ul><li>LinkedList&lt; E &gt;类构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public LinkedList()</td><td style="text-align:center">创建空的链表</td></tr><tr><td style="text-align:center">public LinkedList(Collection &lt; ? extends E &gt; c)</td><td style="text-align:center">创建包含容器c中所有元素的链表</td></tr></tbody></table></div><ul><li>LinkedList&lt; E &gt;类常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void addFirst(E e)</td><td style="text-align:center">将元素e插入到列表的开头</td></tr><tr><td style="text-align:center">public void addLast(E e)</td><td style="text-align:center">将元素e添加到列表的末尾</td></tr><tr><td style="text-align:center">public E getFirst()</td><td style="text-align:center">返回列表中的第一个元素</td></tr><tr><td style="text-align:center">public E getLast()</td><td style="text-align:center">返回列表中的最后一个元素</td></tr><tr><td style="text-align:center">public E removeFirst()</td><td style="text-align:center">删除并返回列表中的第一个元素</td></tr><tr><td style="text-align:center">public E removeLast()</td><td style="text-align:center">删除并返回列表中的最后一个元素</td></tr></tbody></table></div><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList数组列表类使用一维数组实现List，该类实现的是可变数组，允许所有元素，包括null。具有随机存取特性，插入、删除元素时需要移动其他元素，当元素很多时插入、删除操作的速度较慢。</p><p>在向ArrayList中添加元素时，其容量会自动增大，但不能自动缩小，但可以使用trimToSize()方法将数组的容量减小到数组列表的大小。</p><ul><li>ArrayList&lt; E &gt;类构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public ArrayList()</td><td style="text-align:center">创建初始容量为10的空数组列表</td></tr><tr><td style="text-align:center">public ArrayList(int initialCapacity)</td><td style="text-align:center">创建初始容量为initialCapacity的空数组列表</td></tr><tr><td style="text-align:center">public ArrayList(Collection  &lt; ? extends E &gt; c)</td><td style="text-align:center">创建包含容器c所有元素的数组列表，元素次序与c相同</td></tr></tbody></table></div><ul><li>ArrayList&lt; E &gt;类常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void trimToSize()</td><td style="text-align:center">将ArrayList对象的容量缩小到该列表的当前大小</td></tr><tr><td style="text-align:center">public void forEach(Consumer &lt; ? super E &gt; action)</td><td style="text-align:center">将action对象执行遍历操作</td></tr></tbody></table></div><h3 id="容器遍历"><a href="#容器遍历" class="headerlink" title="容器遍历"></a>容器遍历</h3><p>对于容器中元素进行访问时，经常需要按照某种次序对容器中的每个元素访问且仅访问一次，这就是遍历，也称为迭代。遍历是指从容器中获得当前元素的后续元素。</p><h4 id="foreach循环语句"><a href="#foreach循环语句" class="headerlink" title="foreach循环语句"></a>foreach循环语句</h4><p>元素类型、循环变量的名字(用于存储连续的元素)、从中检索元素的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (type element : array) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="toArray-转换数组"><a href="#toArray-转换数组" class="headerlink" title="toArray()转换数组"></a>toArray()转换数组</h4><p>利用Collection接口中定义的toArray()方法将容器对象转换为数组，然后再利用循环语句对数组中的每个元素进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object[] e = c.toArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;e.length; i++) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> e[i];</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="size-get-方法"><a href="#size-get-方法" class="headerlink" title="size()/get()方法"></a>size()/get()方法</h4><p>利用size()和get()方法进行遍历。即先获取容器内元素的总个数，然后依次取出每个位置上的元素并访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;c.size(); i++) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.get(i);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代功能由可迭代接口Iterable和迭代器接口Iterator、ListIterator实现的，迭代器是一种允许对容器中元素进行遍历并有选择地删除元素的对象。</p><p>由于Collection接口声明继承Iterable接口，因此每个实现Collection接口的容器对象都可调用iterator()方法返回一个迭代器。</p><ul><li>Iterator ＜E＞接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public abstract boolean hasNext()</td><td style="text-align:center">判断是否还有后续元素，若有则返回true</td></tr><tr><td style="text-align:center">public abstract E next()</td><td style="text-align:center">返回后续元素</td></tr><tr><td style="text-align:center">public abstract void remove()</td><td style="text-align:center">删除迭代器当前指向的(即最后被迭代的)元素，即删除由最近一次next()或previous()方法调用返回的元素</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> it.next();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于容器中元素的遍历次序，接口Iterator支持对List对象从前向后的遍历，但其子接口ListIterator支持对List对象的双向遍历。</p><ul><li>ListIterator ＜E＞接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public abstract boolean hasPrevious()</td><td style="text-align:center">判断是否有前驱元素</td></tr><tr><td style="text-align:center">public abstract E prevoius()</td><td style="text-align:center">返回前驱元素</td></tr><tr><td style="text-align:center">public abstract void add(E e)</td><td style="text-align:center">将指定的元素插人列表中。若next()方法的返回值非空,该元素被插人到next()方法返回的元素之前;若previous()方法的返回值非空,该元素被插人到previous()方法返回的元素之后;若线性表没有元素，则直接将该元素加入其中</td></tr><tr><td style="text-align:center">public abstract void set(E e)</td><td style="text-align:center">用元素e替换列表的当前元素</td></tr><tr><td style="text-align:center">public abstract int nextIndex()</td><td style="text-align:center">返回基于next()调用的元素序号</td></tr><tr><td style="text-align:center">public abstract int prevoiusIndex()</td><td style="text-align:center">返回基于previous()调用的元素序号</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_8</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Integer&gt; al = <span class="keyword">new</span> <span class="title class_">ArryList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">al.add(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组列表的原始数据&quot;</span> + al);</span><br><span class="line"></span><br><span class="line">ListIterator&lt;Integer&gt; listIter = al.listIterator();<span class="comment">//序号0</span></span><br><span class="line">listIter.add(<span class="number">0</span>);<span class="comment">//序号0前添加0</span></span><br><span class="line">System.out.println(<span class="string">&quot;添加数据后数组列表&quot;</span> + al);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (listIter.hasNext()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> listIter.nextIndex();</span><br><span class="line">listIter.next();<span class="comment">//序号1</span></span><br><span class="line">listIter.set(<span class="number">9</span>);<span class="comment">//修改序号1</span></span><br><span class="line">System.out.println(<span class="string">&quot;修改数据后数组列表&quot;</span> + al);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listIter = al.listIterator(al.size());<span class="comment">//序号末尾</span></span><br><span class="line">System.out.print(<span class="string">&quot;反向遍历数组列表：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (listIter.hasPrevious()) &#123;</span><br><span class="line">System.out.print(listIter.previous() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合接口Set"><a href="#集合接口Set" class="headerlink" title="集合接口Set"></a>集合接口Set</h3><p>Set是一个不含重复元素的集合接口，它继承自Collection接口，并没有声明其他方法，它的方法都是从Collection接口继承来的。</p><p>Set集合中的对象不按特定的方式排序，只是简单地把对象加入集合中即可，但加入的对象一定不能重复。集合中元素的顺序与元素加入集合的顺序无关。</p><p>实现Set接口的两个主要类是哈希集合类HashSet及树集合类TreeSet。</p><h4 id="哈希结合类HashSet（无序、不可重复、可为空）"><a href="#哈希结合类HashSet（无序、不可重复、可为空）" class="headerlink" title="哈希结合类HashSet（无序、不可重复、可为空）"></a>哈希结合类HashSet（无序、不可重复、可为空）</h4><p>哈希集合对所包含元素的访问并不是像线性表一样使用下标，而是根据哈希码来存取集合中的元素。</p><p><code>哈希码</code>：哈希集合是在元素的存储位置和元素的值k之间建立一个特定的对应关系f，使每个元素与一个唯一的存储位置相对应。因而在查找时，只要根据元素的值k，计算f(k)的值即可，如果此元素在集合中，则必定在存储位置f(k)上，因此不需要与集合中的其他元素进行比较便可直接取得所查的元素。称这个对应关系f为哈希函数，按这种关系建立的表称为<code>哈希表</code>，也称<code>散列表</code>。</p><p>HashSet根据<code>哈希码</code>来确定元素在集合中的存储位置（即内存地址），因此可以根据哈希码来快速地找到集合中的元素。HashSet集合不保证迭代顺序，但允许元素值为null。</p><p>在比较两个加入哈希集合HashSet中的元素是否相同时，会先比较哈希码方法hashCode()的返回值是否相同，若相同则再使用equals()方法比较其存储位置（即内存地址），若两者都相同则视为相同的元素。</p><ul><li>HashSet ＜E＞集合类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public HashSet()</td><td style="text-align:center">创建默认初始容量是16，默认上座率为0.75的空哈希集合</td></tr><tr><td style="text-align:center">public HashSet(int initialCapacity)</td><td style="text-align:center">创建初始容量是initialCapacity，默认上座率为0.75的空哈希集合</td></tr><tr><td style="text-align:center">public HashSet(int initialCapacity, float loadFactor)</td><td style="text-align:center">创建初始容量是initialCapacity，默认上座率为loadFactor的空哈希集合</td></tr><tr><td style="text-align:center">public HashSet(Collection &lt; ? extends E &gt; c)</td><td style="text-align:center">创建包含容器c中所有元素，默认上座率为0.75的哈希集合</td></tr></tbody></table></div><blockquote><p>构造方法中的上座率也称装填因子，上座率的值为0.0~1.0表示集合的饱和度。当集合中的元素个数超过了容量与上座率的乘积，容量就会自动翻倍。</p></blockquote><ul><li>HashSet ＜E＞集合类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean add(E e)</td><td style="text-align:center">如果集合中尚未包含指定元素，则添加元素e并返回true；如果集合中已包含该元素,则该调用不更改集合并返回false</td></tr><tr><td style="text-align:center">public void clear()</td><td style="text-align:center">删除集合中的所有元素，集合为空</td></tr><tr><td style="text-align:center">public boolean contains(Object o)</td><td style="text-align:center">如果集合中包含元素o，则返回true</td></tr><tr><td style="text-align:center">public int size()</td><td style="text-align:center">返回集合中所包含元素的个数，即返回集合的容量</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet &lt;String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String a:args) &#123;</span><br><span class="line"><span class="keyword">if</span> (!hs.add(a)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;元素&quot;</span> + a + <span class="string">&quot;重复&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;集合容量为：&quot;</span> + hs.size() + <span class="string">&quot;，各元素为：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> hs.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树集合类TreeSet（有序、不可重复、可为空）"><a href="#树集合类TreeSet（有序、不可重复、可为空）" class="headerlink" title="树集合类TreeSet（有序、不可重复、可为空）"></a>树集合类TreeSet（有序、不可重复、可为空）</h4><p>树集合类TreeSet不仅实现了Set接口，还实现了java.util.SortedSet接口。<br>TreeSet的工作原理与HashSet相似，但TreeSet增加了一个额外步骤，以保证集合中的元素总是处于有序状态。</p><ul><li>TreeSet ＜E＞类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TreeSet()</td><td style="text-align:center">创建新的空树集合，其元素按自然顺序进行排序</td></tr><tr><td style="text-align:center">public TreeSet(Collection &lt; ? extends E &gt; c)</td><td style="text-align:center">创建包含容器c元素的新TreeSet，按其元素的自然顺序进行排序</td></tr></tbody></table></div><ul><li>TreeSet ＜E＞类新增的方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">新增的方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public E first()</td><td style="text-align:center">返回集合中的第一个(最低)元素</td></tr><tr><td style="text-align:center">public E last()</td><td style="text-align:center">返回集合中的最后一个(最高)元素</td></tr><tr><td style="text-align:center">public SortedSet &lt; E &gt; headSet(E toElement)</td><td style="text-align:center">返回一个新集合，新集合元素是toElement(不包含toElement)之前的所有元素</td></tr><tr><td style="text-align:center">public SortedSet &lt; E &gt; tailSet(E toElement)</td><td style="text-align:center">返回一个新集合，新集合元素包含fromElement及fromElement之后的所有元素</td></tr><tr><td style="text-align:center">public SortSet &lt; E &gt; subSet(E fromElement, E toElement)</td><td style="text-align:center">返回一个新集合，新集合包含从fromElement到toElement(不包含toElement)之间的所有元素</td></tr><tr><td style="text-align:center">public E lower(E e)</td><td style="text-align:center">返回严格小于给定元素e的最大元素，如果不存在这样的元素，则返回null</td></tr><tr><td style="text-align:center">public E higher(E e)</td><td style="text-align:center">返回严格大于给定元素e的最小元素，如果不存在这样的元素，则返回null</td></tr><tr><td style="text-align:center">public E floor(E e)</td><td style="text-align:center">返回小于或等于给定元素e的最大元素，如果不存在这样的元素，返回null</td></tr><tr><td style="text-align:center">public E ceiling(E e)</td><td style="text-align:center">返回大于或等于给定元素e的最小元素，如果不存在这样的元素，则返回null</td></tr></tbody></table></div><h4 id="映射接口Map"><a href="#映射接口Map" class="headerlink" title="映射接口Map"></a>映射接口Map</h4><p>Map中的元素都是成对出现的，它提供了键（key）到值（value）的映射。</p><p>Map中键可以是任意类型的对象。</p><p>Map中检索一个元素，必须提供相应的键，这样就可以通过键访问到其对应元素的值。Map中的每个键都是唯一的，且每个键最多只能映射到一个值。</p><p>Map没有继承Collection接口。</p><ul><li>Map ＜K，V＞接口的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">V put(K key, V value)</td><td style="text-align:center">以key为键，向集合中添加值为value的元素，其中key必须唯一，否则新添加的值会取代已有的值</td></tr><tr><td style="text-align:center">void putAll(Map &lt; ? extends K, ? extends V&gt; m)</td><td style="text-align:center">将映射m中的所有映射关系复制到调用此方法的映射中</td></tr><tr><td style="text-align:center">boolean containsKey(Object key)</td><td style="text-align:center">判断是否包含指定的键key</td></tr><tr><td style="text-align:center">boolean containsValue(Objext value)</td><td style="text-align:center">判断是否包含指定的值value</td></tr><tr><td style="text-align:center">V get (Object key)</td><td style="text-align:center">返回键key所映射的值，若key不存在则返回null</td></tr><tr><td style="text-align:center">Set &lt; K &gt; keySet()</td><td style="text-align:center">返回该映射中所有键对象形成的Set集合</td></tr><tr><td style="text-align:center">Collection &lt; V &gt; values()</td><td style="text-align:center">返回该映射中所有值对象形成Collection集合</td></tr><tr><td style="text-align:center">V remove(Object key)</td><td style="text-align:center">将键为key的条目，从Map对象中删除</td></tr><tr><td style="text-align:center">Set &lt; Map.Entry &lt; K, v &gt; &gt; entrySet()</td><td style="text-align:center">返回映射中的键-值对的集合</td></tr></tbody></table></div><p>映射接口Map常用的实现类有哈希映射HashMap和树映射TreeMap。</p><h5 id="HashMap（键、值可为空）"><a href="#HashMap（键、值可为空）" class="headerlink" title="HashMap（键、值可为空）"></a>HashMap（键、值可为空）</h5><p>HashMap映射是基于哈希表的Map接口的实现类，所以HashMap通过哈希码对其内部的映射关系进行快速查找，因此对于添加和删除映射关系效率较高，并且允许使用null值和null键，但必须保证键的唯一性。</p><ul><li>HashMap ＜ K, V ＞ 映射常用的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public HashMap()</td><td style="text-align:center">构造一个具有默认初始容量(16)和默认上座率(0.75)的空HashMap对象</td></tr><tr><td style="text-align:center">public HashMap(int initialCapacity)</td><td style="text-align:center">创建初始容量为initialCapacity 和默认上座率(0. 75)的空HashMap对象</td></tr><tr><td style="text-align:center">public HashMap(Map &lt; ? extends K, ? extends V &gt; m)</td><td style="text-align:center">创建一个映射关系与指定Map相同的新HashMap对象。具有默认上座率(0.75)和足以容纳指定Map中映射关系的初始容量</td></tr></tbody></table></div><h5 id="TreeMap（有序，键不可为空，值可为空）"><a href="#TreeMap（有序，键不可为空，值可为空）" class="headerlink" title="TreeMap（有序，键不可为空，值可为空）"></a>TreeMap（有序，键不可为空，值可为空）</h5><p>而树映射TreeMap中的映射关系存在一定的顺序，如果希望Map映射中的元素也存在一定的顺序，应该使用TreeMap类实现的Map映射，由于TreeMap类实现的Map映射中的映射关系是根据键对象按照一定的顺序排列的，因此不允许键对象是null。</p><ul><li>TreeMap ＜K，V＞映射的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public TreeMap()</td><td style="text-align:center">使用键的自然顺序创建一个新的空树映射</td></tr><tr><td style="text-align:center">public TreeMap(Map &lt; ? extends K, ? extends V &gt; m)</td><td style="text-align:center">创建一个与给定映射具有相同映射关系的新树映射，该映射根据其键的自然顺序进行排序</td></tr></tbody></table></div><ul><li>TreeMap ＜K, V ＞ 映射的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public K firstKey()</td><td style="text-align:center">返回映射中的第一个(最低)键</td></tr><tr><td style="text-align:center">public K lastKey()</td><td style="text-align:center">返回映射中的最后一个(最高)键</td></tr><tr><td style="text-align:center">public SortedMap &lt; K, V &gt; headMap(K toKey)</td><td style="text-align:center">返回键值小于toKey的那部分映射</td></tr><tr><td style="text-align:center">public SortedMap &lt; K, V&gt; tailMap(K fromKey)</td><td style="text-align:center">返回键值大于或等于fromKey的那部分映射</td></tr><tr><td style="text-align:center">public K lowerKey(K key)</td><td style="text-align:center">返回严格小于给定键key的最大键，如果不存在这样的键，则返回null</td></tr><tr><td style="text-align:center">public K floorKey(K key)</td><td style="text-align:center">返回小于或等于给定键key的最大键，如果不存在这样的键。则返回null</td></tr><tr><td style="text-align:center">public K higherKey(K key)</td><td style="text-align:center">返回严格大于给定键key的最小键，如果不存在这样的键，则返回null</td></tr><tr><td style="text-align:center">public K ceilingKey(K key)</td><td style="text-align:center">返回大于或等于给定键key的最小键，如果不存在这样的键，则返回null</td></tr></tbody></table></div><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>在定义类、接口或方法时若指定了“类型参数”，则分别称为泛型类、泛型接口或泛方法。</li><li>用泛型类创建的泛型对象就是在泛型类体内的每个类型参数T处分别用某个具体的实际类型替代，这个过程称为泛型实例化，利用泛型类创建的对象称为泛型对象。</li><li>在创建泛型类对象的过程中，实际类型必须是引用类型，而不能用基本类型。</li><li>泛型方法与其所在的类是否是泛型类没有关系。</li><li>在调用泛型方法时，可以将实际类型放在尖括号内作为方法名的前缀。</li><li>泛型方法的返回值类型和至少一个参数类型应该是泛型，而且类型应该是一致的。泛型方法广泛应用在方法返回值和参数均是容器类对象的情况。</li><li>泛型方法与泛型类之间的一个重要区别是：对于泛型方法，不需要把实际的类型传递给泛型方法；但泛型类却恰恰相反，即必须把实际的类型参数传递给泛型类。</li><li>虽然泛型的类型参数代表一种数据类型，但不能使用泛型的类型参数创建对象。</li><li>在泛型中可以用类型参数声明一个数组，但不能使用类型参数创建数组对象。</li><li>不能在静态环境中使用泛型类的类型参数。</li><li>异常类不能是泛型的，即在异常类中不能使用泛型的类型参数。</li><li>在定义泛型类或使用泛型类创建对象时，对泛型的类型做出限制称为泛型限制。</li><li>泛型类的通配符有三种形式：第1种是”?”，它等价于”? extends Object”，称为非受限通配；第2种是”? extends T”，表示T或T的一个未知子类型，称为上限通配；第3种是”? super T”，表示T或T的一个未知父类型，称为下限通配。</li><li>当方法中的多个参数之间或参数与返回值之间存在类型依赖关系时，则应选用泛型方法。如果方法中不存在类型之间的依赖关系，则应选用通配符。</li><li>容器是存储对象的数据结构的集合。容器框架中定义的所有接口和类都存储在java.util包中。</li><li>从容器的当前元素获取其后续元素进行访问的过程称为迭代，迭代也称为遍历。</li><li>List的对象用于存储一个由元素构成的线性表；Set的对象是存储一组不重复的元素集合；Map的对象保持了键到值的映射。</li><li>List是一种包含有序元素的线性表，其中的元素必须按顺序存放，且可重复，也可以是空值null。实现List接口的类主要有链表类LinkedList和数组列表类ArrayList。</li><li>LinkedList是实现List接口的链表类，采用双向链表结构保存元素，访问元素的时间取决于元素在表中所处的位置，但对链表的增长或缩小则没有任何额外的开销。</li><li>ArrayList是实现List接口的数组列表类，它使用一维数组实现List，支持元素的快速访问，但在数组的扩展或缩小时则需要额外的系统开销。</li><li>Set是一个不含重复元素的集合接口。实现Set接口的两个主要类是哈希集合类HashSet及树集合类TreeSet。</li><li>HashSet的工作原理是在哈希集合中元素的“值”与该元素的存储位置之间建立起一种映射关系，这种映射关系称为哈希函数或散列函数，由哈希函数计算出来的数值称为哈希码或散列索引。虽然HashSet中的元素是无序的，但由于HashSet特性还是可以快速地添加或访问其中的元素。</li><li>因为对不同元素计算出的哈希码可能相同，所以判断哈希集合中的元素是否相同时需要同时使用hashCode()方法和equals()方法。</li><li>TreeSet类对象中的元素总是有序的，所以当插入元素时需要一定的开销。</li><li>Map中的元素都是成对出现的，它提供了键（key）到值（value）的映射。</li><li>映射接口Map常用的实现类有HashMap和TreeMap。HashMap类与TreeMap类的关系如同HashSet与TreeSet的关系一样。</li><li>HashMap类是基于哈希表的Map接口的实现，允许使用null值和null键，但必须保证键的唯一性，HashMap是无序的。</li><li>TreeMap类中的映射关系存在一定的顺序，不允许键对象是null。TreeMap是有序的。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是泛型的类型参数？泛型的主要优点是什么？在什么情况下使用泛型方法？泛型类与泛型方法传递类型实参的主要区别是什么？</li><li>已知Integer是Number的子类，GeneralType＜Integer＞是GeneralType＜Number＞ 的 子 类 吗 ？ GeneralType＜Object＞ 是GeneralType＜T＞的父类吗。</li><li>在泛型中，类型通配符的主要作用是什么？</li><li>分别简述LinkedList与ArrayList、HashSet与TreeSet、HashMap与TreeMap有何异同。</li><li>将1~10的整数存放到一个线性表LinkedList的对象中，然后将其下标为4的元素从列表中删除。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D12_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">list.add(i, i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.get(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用ArrayList类创建一个对象，并向其添加若干个字符串型元素，然后随机选一个元素输出。</li><li>已知集合A={1，2，3，4}和B={1，3，5，7，9，11}，编程求A与B的交集、并集和差集。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D12_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet&lt;Integer&gt; A = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">A.add(<span class="number">1</span>);</span><br><span class="line">A.add(<span class="number">2</span>);</span><br><span class="line">A.add(<span class="number">3</span>);</span><br><span class="line">A.add(<span class="number">4</span>);</span><br><span class="line">HashSet&lt;Integer&gt; B = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">B.add(<span class="number">1</span>);</span><br><span class="line">B.add(<span class="number">3</span>);</span><br><span class="line">B.add(<span class="number">5</span>);</span><br><span class="line">B.add(<span class="number">7</span>);</span><br><span class="line">B.add(<span class="number">9</span>);</span><br><span class="line">B.add(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;Integer&gt; JiaoJi = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;(A);</span><br><span class="line">HashSet&lt;Integer&gt; BingJi = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;(A);</span><br><span class="line">HashSet&lt;Integer&gt; ChaJi = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;(A);</span><br><span class="line"></span><br><span class="line">JiaoJi.retainAll(B);</span><br><span class="line">BingJi.addAll(B);</span><br><span class="line">ChaJi.removeAll(B);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;A:&quot;</span> + A);</span><br><span class="line">System.out.println(<span class="string">&quot;B:&quot;</span> + B);</span><br><span class="line">System.out.println(<span class="string">&quot;JiaoJi:&quot;</span> + JiaoJi);</span><br><span class="line">System.out.println(<span class="string">&quot;BingJi:&quot;</span> + BingJi);</span><br><span class="line">System.out.println(<span class="string">&quot;ChaJi:&quot;</span> + ChaJi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用随机函数生成10个随机数，并将它们存入到一个HashSet对象中，然后利用迭代器输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D12_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet&lt;Integer&gt; A = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">A.add((<span class="type">int</span>)(Math.random()*<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(A);</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> A.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用随机函数生成10个随机数，并将它们有序地存入到一个TreeSet对象中，然后利用迭代器有序地输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D12_9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">TreeSet&lt;Integer&gt; A = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">A.add((<span class="type">int</span>)(Math.random()*<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(A);</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> A.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用HashMap类对象存储公司电话号码簿，其中包含公司的电话号码和公司名称，然后进行删除一个公司和查询一个公司的操作。</li></ul><h1 id="第十三章-注解、反射、内部类、匿名内部类、Lambda表达式"><a href="#第十三章-注解、反射、内部类、匿名内部类、Lambda表达式" class="headerlink" title="第十三章 注解、反射、内部类、匿名内部类、Lambda表达式"></a>第十三章 注解、反射、内部类、匿名内部类、Lambda表达式</h1><p><code>注解</code>是代码里的特殊标记，用来告知编译器要做什么事情；<br><code>反射</code>允许程序在运行状态时，可以对任意一个字节码（.class文件）获取它的所有信息；<br><code>内部类</code>是定义在类中的嵌套类；<br><code>匿名内部类</code>则是在定义类的同时就创建该类的一个对象；<br><code>Lambda表达式</code>可以被看作是使用精简语法的匿名内部类，编译器对待一个Lambda表达式如同它是从一个匿名内部类创建的对象。</p><h2 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h2><p>注解Annotation与类、接口、枚举在同一个层次。</p><p>它其实就是程序代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取并执行相应的处理。注解主要用于告知编译器要做什么事情，在程序中可对任何程序元素进行注解。注解可以声明在包、类、成员变量、成员方法、局部变量、方法参数等的前面，用来对这些程序元素进行说明、注释。</p><p>java.lang.annotation.Annotation是注解接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@注解名</span><br></pre></td></tr></table></figure><h3 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h3><h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><p>该注解用于表示某个程序元素（如类、方法等）已过时，不建议使用。</p><h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><p>该注解只用于方法，用来限定必须覆盖父类中的方法，主要作用是保证方法覆盖的正确性。</p><h4 id="SuppressWarinings"><a href="#SuppressWarinings" class="headerlink" title="@SuppressWarinings"></a>@SuppressWarinings</h4><p>抑制警告信息的出现，即不允许出现警告信息。<br>该注解可以用于类型、构造方法、成员方法、成员变量、参数以及局部变量等 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarinings(&quot;警告参数&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarinings(value=&quot;警告参数&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>@SuppressWarnings中的警告参数</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">警告参数</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">deprecation</td><td style="text-align:center">忽略使用了不建议使用的程序元素时所产生的警告</td></tr><tr><td style="text-align:center">unchecked</td><td style="text-align:center">忽略未经检查的类型转换所产生的警告</td></tr><tr><td style="text-align:center">boxing</td><td style="text-align:center">忽略装箱/拆箱操作所产生的警告</td></tr><tr><td style="text-align:center">fallthrough</td><td style="text-align:center">忽略switch语句中没有使用break时所产生的警告</td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">忽略在源文件路径、类路径中有不存在的路径时所产生的警告</td></tr><tr><td style="text-align:center">serial</td><td style="text-align:center">忽略实现Serializable接口但没有定义serialVersionUID常量时所产生的警告</td></tr><tr><td style="text-align:center">unused</td><td style="text-align:center">忽略程序元素已被定义但从未使用所产生的警告</td></tr><tr><td style="text-align:center">rawtypes</td><td style="text-align:center">忽略因使用泛型但未限制类型时所产生的警告</td></tr><tr><td style="text-align:center">finally</td><td style="text-align:center">忽略finally子句不能正常完成时所产生的警告</td></tr><tr><td style="text-align:center">all</td><td style="text-align:center">忽略所有警告</td></tr></tbody></table></div><h4 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h4><p>用于抑制堆污染（将一个不带泛型的对象赋值给带泛型的对象，将导致泛型对象污染）警告。</p><p>抑制堆污染警告三种方式：</p><ul><li>使用<code>@SafeVarargs</code>注解修饰引发该警告的方法，该方式是专门抑制堆污染警告而提供的，也是推荐使用的方式</li><li>使用<code>@SuppressWarnings(&quot;unchecked&quot;)</code>注解修饰</li><li>编译时使用<code>-Xlint：varargs</code>选项</li></ul><h4 id="FunctionalInterfase"><a href="#FunctionalInterfase" class="headerlink" title="@FunctionalInterfase"></a>@FunctionalInterfase</h4><p>指定某个接口必须是函数式接口，如果一个接口中只有一个抽象方法，则该接口称为函数式接口。@FunctionalInterfase注解只能用于修饰函数式接口，不能用于修饰程序的其他元素。<br>函数式接口是为Lambda表达式准备的，所以允许使用Lambda表达式来创建函数式接口的实例。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解也称元数据注解，是对注解进行标注的注解。</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>限制注解的使用范围，即指定该注解可用于哪些程序元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=&quot;作用范围&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>枚举<code>java.lang.annotation.ElementType</code>中表示范围的主要枚举值</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">作用范围</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">CONSTRUCTOR</td><td style="text-align:center">只能用在构造方法的声明中</td></tr><tr><td style="text-align:center">FIELD</td><td style="text-align:center">只能用在成员变量声明上</td></tr><tr><td style="text-align:center">LOCAL_VARIABLE</td><td style="text-align:center">只能用在局部变量声明上</td></tr><tr><td style="text-align:center">METHOD</td><td style="text-align:center">只能用在方法声明上</td></tr><tr><td style="text-align:center">PACKAGE</td><td style="text-align:center">只能用在包的声明上</td></tr><tr><td style="text-align:center">PARAMETER</td><td style="text-align:center">只能用在参数的声明上</td></tr><tr><td style="text-align:center">TYPE</td><td style="text-align:center">只能用在类、接口或枚举类型的声明上</td></tr><tr><td style="text-align:center">ANNOTATION_TYPE</td><td style="text-align:center">只能用在注解声明上</td></tr></tbody></table></div><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>说明注解的保存范围，保存范围使用枚举类型<code>java.lang.annotation.RetentionPolicy</code>来指定其保留策略值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(value=&quot;保存策略值&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>枚举java.lang.annotation.RetentionPolicy中的注解保留策略值</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">保存策略值</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">SOURCE</td><td style="text-align:center">注解只存在于源代码文件(.java)中，在编译后不会保存在类文件(.class)中</td></tr><tr><td style="text-align:center">CLASS</td><td style="text-align:center">在编译时将注解保存在字节码文件中，即编译器把注解记录在. class文件中。当运行Java程序时，JVM不会加载此注解信息。若没指定范围，则此为默认值</td></tr><tr><td style="text-align:center">RUNTIME</td><td style="text-align:center">编译器把注解记录在. class文件中。当运行Java 程序时，JVM会加载注解信息，并可以通过反射获取注解信息</td></tr></tbody></table></div><h4 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h4><p>指定被修饰的注解可被javadoc.exe工具提取成文档。</p><p>定义类时使用@Document注解进行修饰，则所有使用该注解修饰的程序元素的API文档中将包含该注解说明。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>描述一个父类的注解可以被子类所继承。</p><p>如果一个注解需要被其子类所继承，则在声明时直接使用@Inherited注解就行。</p><h4 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h4><p>开发重复注解。</p><p>允许使用多个相同类型的注解来修饰同一程序元素，只要在定义注解时使用@Repeatable元注解来进行修饰。</p><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p>在使用类型的地方指定注解，可以注解方法的返回值、方法内this的类型等。</p><p>类型注解可以用在任何用到类型的地方。除了在定义类、接口、方法和成员变量等常见的程序元素时可以使用类型注解外，还可以在创建对象、方法参数、类型转换、使用throws声明抛出异常、使用implements实现接口等位置使用类型注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE_USE)</span></span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="meta">@interface</span> 注解名 &#123;</span><br><span class="line">数据类型 成员变量名() [<span class="keyword">default</span> 初始值];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> info &#123;</span><br><span class="line">String <span class="title function_">author</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的成员由未实现的方法组成，其中的成员变量以无参数方法的形式来声明，即变量名后面必须有圆括号”()”，名称和返回值数据类型定义了该成员变量的名字和类型。</p><p>注解中的成员将在使用时进行实现，也可以在声明时使用default关键字来指定变量的初始值。</p><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>Java中有许多对象在运行时都会出现两种类型：<code>编译时类型</code>和<code>运行时类型</code>。</p><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class类的对象表示正在运行的Java程序中的类或接口，也就是任何一个类被加载时，即将类的.class文件（字节码文件）读入内存的同时，都自动为之创建一个java.lang.Class对象。</p><ul><li>Class类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Package getPackage()</td><td style="text-align:center">返回Class对象所对应类的存放路径</td></tr><tr><td style="text-align:center">public static Class &lt; ? &gt; forName(String className)</td><td style="text-align:center">返回名称为className的类或接口的Class对象</td></tr><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回Class对象所对应类的”包.类名”形式的全名</td></tr><tr><td style="text-align:center">public Class &lt; ? super T &gt; getSuperclass()</td><td style="text-align:center">返回Class对象所对应类的父类的Class对象</td></tr><tr><td style="text-align:center">public Class &lt; ? &gt;[] getInterfaces()</td><td style="text-align:center">返回Class对象所对应类所实现的所有接口</td></tr><tr><td style="text-align:center">public Annotation[] getAnnotations()</td><td style="text-align:center">以数组的形式返回该程序元素上的所有注解</td></tr><tr><td style="text-align:center">public Constructor &lt; T &gt; getConstructor(Class &lt; ? &gt; … parameterTypes)</td><td style="text-align:center">返回Class对象所对应类的指定参数列表的public构造方法</td></tr><tr><td style="text-align:center">public Constructor &lt; ? &gt;[] getConstructors()</td><td style="text-align:center">返回Class对象所对应类的所有publie构造方法</td></tr><tr><td style="text-align:center">public Constructor &lt; T &gt; getDeclaredConstructor(Class &lt; ? &gt; … parameterTypes)</td><td style="text-align:center">返回Class对象所对应类的指定参数列表的构造方法。与访问权限无关</td></tr><tr><td style="text-align:center">public Constructor &lt; ? &gt;[] getDeclaredConstructor</td><td style="text-align:center">返回Class对象所对应类的所有构造方法，与访问权限无关</td></tr><tr><td style="text-align:center">public Field getField(String name)</td><td style="text-align:center">返回Class对象所对应类的名为name的public成员变量</td></tr><tr><td style="text-align:center">public Field[] getFields()</td><td style="text-align:center">返回Class对象所对应类的所有public成员变量</td></tr><tr><td style="text-align:center">public Field[] getDeclaredFields()</td><td style="text-align:center">返回Class对象所对应类的所有成员变量，与访问权限无关</td></tr><tr><td style="text-align:center">public Method getMethod(String name, Class &lt; ? &gt; … parameterTypes )</td><td style="text-align:center">返回Class对象所对应的指定参数列表的public方法</td></tr><tr><td style="text-align:center">public Method[] getMethods()</td><td style="text-align:center">返回Class对象所对应类的所有public成员方法</td></tr><tr><td style="text-align:center">public Method[] getDeclaredMethods()</td><td style="text-align:center">返回Class对象所对应类的所有成员方法，与访问权限无关</td></tr></tbody></table></div><blockquote><p>通过getFields()和getMethods()方法获得权限为public成员变量和成员方法时，还包括从父类继承得到的成员变量和成员方法；<br>而通过getDeclaredFields()和getDeclaredMethods()方法只是获得在本类中定义的所有成员变量和成员方法。</p></blockquote><p>被载入JVM的类都有一个唯一标识就是该类的全名，即包括包名和类名。</p><p>在Java中程序获得Class对象有如下3种方式</p><ul><li>使用Class类的静态方法forName</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cObj</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p>forName()方法声明抛出<code>ClassNotFoundException</code>异常，因此调用该方法时必须捕获或抛出该异常。</p><ul><li>用类名调用该类的class属性来获得该类对应的Class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class &lt; Cylinder &gt; cObj = Cylinder.class;</span><br></pre></td></tr></table></figure><ul><li>用对象调用getClass()方法来获得该类对应的Class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cObj</span> <span class="operator">=</span> per.getClass();</span><br></pre></td></tr></table></figure><blockquote><p>通过类的class属性获得该类所对应的Class对象，会使代码更安全，程序性能更好，因此大部分情况下建议使用第二种方式。但如果只获得一个字符串，例如获得String类对应的Class对象，则不能使用String.class方式，而是使用Class.forName(“java.lang.String”)。</p></blockquote><h3 id="反射包reflect中的常用类"><a href="#反射包reflect中的常用类" class="headerlink" title="反射包reflect中的常用类"></a>反射包reflect中的常用类</h3><p>反射机制中除了上面介绍的java.lang包中的Class类之外，还需要java.lang.reflet包中的Constructor类、Method类、Field类和Parameter类。</p><p>Executable抽象类派生了Constructor和Method两个子类。</p><h4 id="Executable抽象类"><a href="#Executable抽象类" class="headerlink" title="Executable抽象类"></a>Executable抽象类</h4><ul><li>java.lang.reflect.Executable类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Parameter[] getParameters</td><td style="text-align:center">返回所有形参，存人数组Parameter[]中</td></tr><tr><td style="text-align:center">public int getParameterCount()</td><td style="text-align:center">返回参数的个数</td></tr><tr><td style="text-align:center">public abstract Class &lt; ? &gt; [] getParameterTypes()</td><td style="text-align:center">按声明顺序以Class数组的形式返回各参数的类型</td></tr><tr><td style="text-align:center">public abstract int getModifiers()</td><td style="text-align:center">返回整数表示的修饰符public、protected.private、final、static、abstract等关键字所对应的常量</td></tr><tr><td style="text-align:center">public boolean isVarArgs()</td><td style="text-align:center">判断是否包含数量可变的参数</td></tr></tbody></table></div><blockquote><p>getModifiers()方法返回的是以整数表示的修饰符。此时引入Modifier类，通过调用Modifier.toString（int mod）方法返回修饰符常量所应的字符串。</p></blockquote><h4 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h4><p>java.lang.reflect.Constructor＜T＞类是java.lang.reflect.Executable类的直接子类，用于表示类的构造方法。通过Class对象的getConstructors()方法可以获得当前运行时类的构造方法。</p><ul><li>java.lang.reflect.Constructor ＜T＞类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回构造方法的名字</td></tr><tr><td style="text-align:center">public T newInstance(Object… initargs)</td><td style="text-align:center">通过该构造方法利用指定参数列表创建一个该类的对象，如果未设置参数则表示采用默认无参的构造方法</td></tr><tr><td style="text-align:center">public void setAccessible(boolean flag)</td><td style="text-align:center">如果该构造方法的权限为private，默认不允许通过反射利用new Instance()方法创建对象。如果先执行该方法，并将入口参数设置为true, 则允许创建</td></tr></tbody></table></div><blockquote><p>通过Class对象的getConstructors()方法可以获得当前运行时类的构造方法。</p></blockquote><h4 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h4><p>java.lang.reflect.Method类是java.lang.reflect.Executable类的直接子类。<br>封装成员方法的信息，调用Class对象的getMethod()方法或getMethods()方法可以获得当前运行时类的指定方法或所有方法。</p><ul><li>java.lang.reflect.Method类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回方法的名称</td></tr><tr><td style="text-align:center">public Class &lt; ? &gt; getReturnType()</td><td style="text-align:center">以Class对象的形式返回当前方法的返回值类型</td></tr><tr><td style="text-align:center">public Object invoke(Object obj,Object… args)</td><td style="text-align:center">利用给定参数列表执行指定对象obj中的该方法</td></tr></tbody></table></div><h4 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h4><p>java.lang.reflect.Field类用于封装成员变量信息，调用Class对象的getField()方法或getFields()可以获得当前运行时类的指定成员变量或所有成员变量。</p><ul><li>java.lang.reflect.Field类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回成员变量的名称</td></tr><tr><td style="text-align:center">Xxx getXxx()</td><td style="text-align:center">返回成员变量的值,其中Xxx代表基本类型，如果成员变量是引用类型,则直接使用get(Object obj)方法</td></tr><tr><td style="text-align:center">void setXxx(Object obj,Xxx val)</td><td style="text-align:center">设置成员变量的值,其中Xxx代表基本类型，如果成员变量是引用类型，则直接使用set(Object obj,Object val)方法</td></tr><tr><td style="text-align:center">public Class &lt; ? &gt; getType()</td><td style="text-align:center">返回当前成员变量的类型</td></tr></tbody></table></div><h4 id="Parameter类"><a href="#Parameter类" class="headerlink" title="Parameter类"></a>Parameter类</h4><p>java.lang.reflect.Parameter类是参数类，每个Parameter对象代表方法的一个参数。</p><ul><li>java.lang.reflect.Parameter类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">get int getModifiers()</td><td style="text-align:center">返回参数的修饰符</td></tr><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回参数的形参名</td></tr><tr><td style="text-align:center">public Type getParameterizedType()</td><td style="text-align:center">返回带泛型的形参类型</td></tr><tr><td style="text-align:center">public Class &lt; ? &gt; getType()</td><td style="text-align:center">返回形参类型</td></tr><tr><td style="text-align:center">public boolean isVarArgs()</td><td style="text-align:center">判断该参数是否为可变参数</td></tr><tr><td style="text-align:center">public boolean isNamePresent()</td><td style="text-align:center">判断. class文件中是否包含方法的形参名信息</td></tr></tbody></table></div><h3 id="反射的应用"><a href="#反射的应用" class="headerlink" title="反射的应用"></a>反射的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String prof, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我的专业:&quot;</span> + prof + <span class="string">&quot;;入学成绩：&quot;</span> + score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;,年龄&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App13_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Class &lt;Person&gt; pc = Person.class;<span class="comment">//获取类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> pc.getConstructor(String.class, <span class="type">int</span>.class);<span class="comment">//构造方法</span></span><br><span class="line">System.out.print(<span class="string">&quot;构造方法名：&quot;</span> + con.getName());</span><br><span class="line"></span><br><span class="line">Class[] pt = con.getParameterTypes();<span class="comment">//构造方法参数类型</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;pt.length; i++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;,参数：&quot;</span> + pt[i].getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Field[] fls = pc.getDeclaredFields();<span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">for</span> (Field f:fls) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">System.out.print(<span class="string">&quot;\n成员变量修饰符:&quot;</span> + Modifier.toString(mod));</span><br><span class="line"><span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> f.getType();</span><br><span class="line">System.out.print(<span class="string">&quot;;名称&quot;</span> + f.getName());</span><br><span class="line">System.out.print(<span class="string">&quot;;类型&quot;</span> + type.getName());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">Method[] mds = pc.getMethods();<span class="comment">//获取成员方法</span></span><br><span class="line"><span class="keyword">for</span> (Method m:mds) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;方法:&quot;</span> + m.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;,参数个数:&quot;</span> + m.getParameterCount());</span><br><span class="line"></span><br><span class="line">Parameter[] pars = m.getParameters();</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (Parameter p:pars) &#123;</span><br><span class="line"><span class="keyword">if</span> (p.isNamePresent()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;----第&quot;</span> + (index++) + <span class="string">&quot;个参数的信息----&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;参数名：&quot;</span> + p.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;参数类型：&quot;</span> + p.getType());</span><br><span class="line">System.out.println(<span class="string">&quot;泛型类型：&quot;</span> + p.getParameterizedType());</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">构造方法名：Person,参数：java.lang.String,参数：int</span><br><span class="line">成员变量修饰符:private;名称name;类型java.lang.String</span><br><span class="line">成员变量修饰符:private;名称age;类型int</span><br><span class="line">方法:toString,参数个数:0</span><br><span class="line">方法:info,参数个数:2</span><br><span class="line">方法:wait,参数个数:1</span><br><span class="line">方法:wait,参数个数:2</span><br><span class="line">方法:wait,参数个数:0</span><br><span class="line">方法:equals,参数个数:1</span><br><span class="line">方法:hashCode,参数个数:0</span><br><span class="line">方法:getClass,参数个数:0</span><br><span class="line">方法:notify,参数个数:0</span><br><span class="line">方法:notifyAll,参数个数:0</span><br></pre></td></tr></table></figure><h2 id="内部类与匿名内部类"><a href="#内部类与匿名内部类" class="headerlink" title="内部类与匿名内部类"></a>内部类与匿名内部类</h2><p><code>内部类</code>（inner class）是定义在类中的类，其主要作用是将逻辑上相关的类放到一起；<br><code>匿名内部类</code>（anonymous inner class）是一种特殊的内部类，它没有类名，在定义类或实现接口的同时，就生成该类的一个对象，由于不会在其他地方用到该类，所以不用取名字，因而被称为匿名内部类。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类是包含在类中的类，所以内部类也称为<code>嵌套类</code>，包含内部类的类称为<code>外部类</code>。</p><p>其实内部类可以看作是外部类的一个成员，所以内部类也称为<code>成员类</code>。</p><blockquote><p>内部类在编译完成之后，所产生的文件名称为”外部类名$内部类名.class”<br>“Out.class Out$Student.class”</p></blockquote><p>在内部类对象中保存了一个对外部类对象的引用，当在内部类的成员方法中访问某一变量时，如果在该方法和内部类中都没有定义过这个变量，调用就会被传递给内部类中保存的那个对外部类对象的引用。</p><img src="/2021/12/30/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/%E5%9C%A8this.%E5%8F%98%E9%87%8F%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%A0%E9%80%92%E7%BB%99Out.this.%E5%8F%98%E9%87%8F.png" class="" title="在this.变量不存在的情况下传递给Out.this.变量"><ul><li>内部类可以声明为private或protected。</li><li>内部类的前面用final修饰，则表明该内部类不能被继承。</li><li>内部类可以定义为abstract，但需要被其他的内部类继承或实现。</li><li>内部类名不能与包含它的外部类名相同。</li><li>内部类也可以是一个接口，该接口必须由另一个内部类来实现。</li><li>内部类不但可以在类中定义，也可以在程序块之内定义。例如，在方法中或循环体内部都可以定义内部类。但是方法中定义的内部类只能访问方法中的final类型的局部变量。</li><li>内部类既可以访问外部类的成员变量，包括静态和实例成员变量，也可以访问内部类所在方法的局部变量。</li><li>内部类如果被声明为static，则静态内部类将自动转化为”顶层类”（toplevel class），即它没有父类，而且不能引用外部类的成员或其他内部类中的成员。非静态内部类不能声明静态成员，只有静态内部类才能声明静态成员。</li></ul><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>某个类的对象只使用一次，则可以将类的定义与对象的创建在一步内完成，即在定义类的同时就创建该类的一个对象，以这种方式定义的类不用取名字，所以称为匿名内部类（anonymous inner class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">TypeName</span>() &#123;<span class="comment">//()内不能有参数</span></span><br><span class="line">匿名类的类体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类可以继承一个类或实现一个接口，其中TypeName是匿名内部类所继承的类或实现的接口。</p><p>实现一个接口，则该类是Object类的直接子类。匿名内部类继承一个类或实现一个接口不需要使用extends或implements关键字。</p><p>在创建匿名内部类时，其实是调用其父类的无参构造方法来实现的。</p><p>所以匿名内部类既是一个内部类也是一个子类，不可能用匿名内部类声明对象。</p><blockquote><p>匿名内部类名前不能有修饰符，也不能定义构造方法，因为它没有名字，也正是这个原因，在创建对象时也不能带参数。</p></blockquote><ul><li>匿名内部类返回的是一个对象的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TypeName</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeName</span>() &#123;</span><br><span class="line">匿名内部类的类体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以将创建的匿名内部类对象作为方法调用的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">someMethod(<span class="keyword">new</span> <span class="title class_">TypeName</span>() &#123;</span><br><span class="line">匿名内部类的类体</span><br><span class="line">&#125;</span><br><span class="line">); </span><br></pre></td></tr></table></figure><ul><li>弥补内部类里没有定义到的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APP13_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Inner</span>() &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">name = n;</span><br><span class="line">System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">).setName(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>匿名内部类在编译完成之后，所产生的文件名称为”外部类名$编号.class”，其中编号为1，2，…，n，每个编号为i的文件对应于第i个匿名内部类。<br>“App13_4.class”、”App13_4$Inner.class”、”App13_4$1.class”</p></blockquote><ul><li>匿名内部类必须是继承一个父类或实现一个接口，但不能使用extends或implements关键字。</li><li>匿名内部类总是使用它父类的无参构造方法来创建一个实例。如果匿名内部类实现一个接口，调用的构造方法是Object（）。</li><li>匿名内部类可以定义自己的方法，也可以继承父类的方法或覆盖父类的方法。</li><li>匿名内部类必须实现父类或接口中的所有抽象方法。</li><li>使用匿名内部类时，必然是在某个类中直接使用匿名内部类创建对象，所以匿名内部类一定是内部类，匿名内部类可以访问外部类的成员变量和方法。</li><li>匿名内部类中不能声明static成员变量和static成员方法。</li></ul><p>利用接口创建匿名内部类对象并实现接口中抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IShape</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shape</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyType</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outShape</span><span class="params">(IShape s)</span> &#123;</span><br><span class="line">s.shape();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App13_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyType</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyType</span>();</span><br><span class="line">a.outShape(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">IShape</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shape</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我可以是任何形状&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数接口和Lambda表达式"><a href="#函数接口和Lambda表达式" class="headerlink" title="函数接口和Lambda表达式"></a>函数接口和Lambda表达式</h2><p>Lambda表达式指的是应用在只含有一个抽象方法的接口环境下的一种简化定义形式，可用于解决匿名内部类的定义复杂问题。</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口（Functional Interface，FI）是指只包含一个抽象方法的接口，因此也称为单抽象方法接口。<br>每一个Lambda表达式都对应一个函数式接口，可以将Lambda表达式看作是实现函数式接口的匿名内部类的一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口只能有一个抽象方法需要被实现，但有如下特殊情况的除外：</p><ul><li>函数式接口中可以有Object类中覆盖的方法，也就是equals()、toString()、hashcode()等方法。</li><li>函数式接口中只能声明一个抽象方法，但是静态方法和默认方法（即用default修饰的方法）不属于抽象方法，因此可以在函数式接口中定义静态方法和默认方法。</li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是可以传递给方法的一段代码。<br>可以是一条语句，也可以是一个代码块，因不需要方法名，所以说Lambda表达式是一种匿名方法，即没有方法名的方法。<br>任何Lambda表达式必定有对应的函数式接口。<br>可以使用Lambda表达式创建一个与匿名内部类等价的对象，看做使用精简语法的匿名内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(类型<span class="number">1</span> 参数<span class="number">1</span>, 类型<span class="number">2</span> 参数<span class="number">2</span>, ...)-&gt;&#123;方法体&#125;</span><br></pre></td></tr></table></figure><ul><li>参数列表中的参数都是匿名方法的形参，即输入参数。</li><li><code>-＞</code>是Lambda运算符</li><li>方法体可以是单一的表达式或由多条语句组成的语句组。</li><li>如果Lambda表达式需要返回值，且方法体中只有一条省略了return关键字的语句，则Lambda表达式会自动返回该条语句的结果值。</li><li>如果Lambda表达式没有参数，可以只给出圆括号。</li><li>如果Lambda表达式只有一个参数，并且没有给出显式的数据类型，则圆括号可以省略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IntFun</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="title function_">dis</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App13_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">IntFun</span> <span class="variable">fun</span> <span class="operator">=</span> (i)-&gt;(<span class="keyword">return</span> <span class="number">2</span> * i);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IntFun fun = i-&gt;2*i;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IntFun fun = (</span></span><br><span class="line"><span class="comment">new IntFun() &#123;</span></span><br><span class="line"><span class="comment">public double dis(int i) &#123;</span></span><br><span class="line"><span class="comment">return 2*i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span> fun.dis(<span class="number">3</span>);</span><br><span class="line">System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lambda表达式只适用于包含一个抽象方法的接口，对于包含有多个抽象方法的接口，编译器则无法编译Lambda表达式。<br>如果是单参数又无须写出参数类型时，圆括号()也可省略。若方法有返回值，且方法体只有一条return语句，则Lambda表达式中的return关键字也可省略。</p></blockquote><p>Lambda表达式所实现的匿名方法则是在函数式接口中声明的。<br>Lambda表达式可以作为表达式、方法参数和方法返回值。</p><h3 id="Lambda表达式作为方法的参数"><a href="#Lambda表达式作为方法的参数" class="headerlink" title="Lambda表达式作为方法的参数"></a>Lambda表达式作为方法的参数</h3><p>接受Lambda表达式的参数必须是与该Lambda表达式兼容的函数式接口类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringFunc</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">func</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App12_9</span> &#123;</span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">sop</span><span class="params">(StringFunc sf, String s)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sf.func(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String outStr, inStr = <span class="string">&quot;Lambda 表达式 good&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;原有字符串：&quot;</span> + inStr);</span><br><span class="line"></span><br><span class="line">outStr = sop((str)-&gt;str.toUpperCase(), inStr);</span><br><span class="line">System.out.println(<span class="string">&quot;转换为大写字符后：&quot;</span> + outStr);</span><br><span class="line"></span><br><span class="line">outStr = sop(</span><br><span class="line">(str)-&gt;&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">result += str.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">, inStr);</span><br><span class="line">System.out.println(<span class="string">&quot;去掉空格后的字符串：&quot;</span> + outStr);</span><br><span class="line"></span><br><span class="line"><span class="type">StringFunc</span> <span class="variable">reverse</span> <span class="operator">=</span> (str)-&gt;&#123;</span><br><span class="line"><span class="type">Stirng</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=str.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            result += str.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;反序后的字符串：&quot;</span> + outStr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>java.util.function</code>包中定义了大量函数式接口，如功能型接口<code>Function＜T，R＞</code>和<code>BiFunction＜T，U，R＞</code>、断言型接口<code>Predicate＜T＞</code>、供给型接口<code>Supplier＜T＞</code>和消费型接口<code>Consumer＜T＞</code>等，它们使编写Lambda表达式更加容易。</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>双冒号<code>::</code>运算符用于方法引用。<br>方法都只带有一个函数式接口对象作为其参数。Lambda表达式可能仅仅调用一个已经存在的方法，如果传递的表达式有实现的方法，可以使用方法引用来代替Lambda表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用对象名引用实例方法</span></span><br><span class="line">对象名::实例方法名</span><br><span class="line"></span><br><span class="line"><span class="comment">//用类名引用静态方法</span></span><br><span class="line">类名::静态方法名</span><br><span class="line"></span><br><span class="line"><span class="comment">//用类名引用实例方法</span></span><br><span class="line">类名::实例方法名</span><br><span class="line"></span><br><span class="line"><span class="comment">//用类名引用构造方法</span></span><br><span class="line">类名::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><blockquote><p>方法名后边不能括号，右边只能有一个new字符。<br>有重载方法时，JVM会根据参数的个数与类型来判断并调用相应的方法。同Lambda表达式类似，方法引用也不会单独存在，总是会转换为函数式接口的实例。<br>方法引用是Lambda表达式的一种特例。<br>方法引用的唯一用途就是支持Lambda表达式的简写。</p></blockquote><h3 id="实例方法名引用"><a href="#实例方法名引用" class="headerlink" title="实例方法名引用"></a>实例方法名引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类方式</span></span><br><span class="line">Consumer&lt;Stirng&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Stirng&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accpet</span><span class="params">(String str)</span> &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line">Consumer&lt;Stirng&gt; con = str -&gt; System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Consumer&lt;Stirng&gt; con = System.out::println;</span><br></pre></td></tr></table></figure><h3 id="静态方法名引用"><a href="#静态方法名引用" class="headerlink" title="静态方法名引用"></a>静态方法名引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IShow</span>&lt; P, R &gt; &#123;</span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">info</span><span class="params">(P p)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App13_10</span> &#123;</span><br><span class="line">IShow&lt;Integer, String&gt; ip = String::valueOf;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ip.info(<span class="number">888</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类名实例方法名引用"><a href="#类名实例方法名引用" class="headerlink" title="类名实例方法名引用"></a>类名实例方法名引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1.compareTo(str2);</span><br><span class="line"></span><br><span class="line">str1::compareTo</span><br><span class="line"></span><br><span class="line">(str1, str2)-&gt;str1.compareTo(str2);</span><br></pre></td></tr></table></figure><h3 id="类名new引用"><a href="#类名new引用" class="headerlink" title="类名new引用"></a>类名new引用</h3><p>构造方法的引用赋值给与构造方法具有相同方法头的任何函数式接口对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IShow</span> &lt; T &gt; &#123;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">create</span><span class="params">(String s, <span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">Person() &#123;</span><br><span class="line">name = <span class="string">&quot;刘洋&quot;</span>;</span><br><span class="line">age = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">reuturn <span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;, 年龄：&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App13_11</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">IShow &lt;Person&gt; na = Person :: <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> na.create(<span class="string">&quot;java&quot;</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//调用Person(String,name),自动匹配</span></span><br><span class="line"></span><br><span class="line">System.out.println(p.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法引用就相当于为方法定义了别名，已经存在的方法相当于提供了对函数式接口中抽象方法的实现。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>注解（annotation）也?元数据，所谓元数据就是用来描述数据的数据。</li><li>注解的语法格式是“@注解名”。根据注解的作用可以将注解分为基本注解、元数据注解（或称元注解）与自定义注解三种。</li><li>反射机制允许Java程序在运行时动态获得所需类的内部信息及动态调用对象方法的功能。</li><li>在Java程序中获得Class对象有三种方式：一是使用Class类的静态方法forName()；二是用类名调用该类的class属性来获得该类对应的Class对象，即”类名.class”；三是用对象调用getClass（）方法来获得该类对应的Class对象，即”对象.getClass()”。</li><li>内部类是定义在类中的类；而匿名内部类是一种特殊的内部类，它没有类名，在定义类的同时，就生成该类的一个对象，由于不会在其他地方用到该类，所以不用命名。</li><li>匿名内部类不能同时继承一个类又实现一个接口，也不能实现多个接口。</li><li>匿名内部类的好处是可利用内部类创建不具名称的对象，并利用它访问到类里的成员。</li><li>函数式接口是指只包含一个抽象方法的接口。</li><li>Lambda表达式可以被看作是使用精简语法的匿名内部类。</li><li>Lambda表达式适用于只包含一个抽象方法的函数式接口。</li><li>用Lambda表达式简化匿名内部类的方法就是去掉接口名和方法名等冗余信息，只保留方法的参数和方法体。</li><li>方法引用其实就是Lambda表达式的另外一种表现形式。</li><li>方法引用就相当于为方法定义了别名。</li><li>如果传递的表达式有实现的方法，则可以使用方法引用来代替Lambda表达式。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是注解？根据注解的作用，注解分几种？</li><li>编写一个Java程序，使用JDK的基本注解，对覆盖方法使用@Override，再对另一方法使用@Deprecated。</li><li>反射的作用是什么？</li><li>编写具有反射功能的Java程序时，可使用哪三种方式获取指定类的Class对象？</li><li>内部类的类型有几种？分别在什么情况下使用？它们所起的作用有哪些？</li><li>内部类与外部类的使用有何不同？</li><li>怎样创建匿名内部类对象？</li><li>什么是Lambda表达式？Lambda表达式的语法是什么样？</li><li>什么是函数式接口？为什么Lambda表达式只适用于函数式接口？</li><li>Lambda表达式与匿名内部类有什么样的关系？函数式接口为什么重要？</li><li>Java定义了哪四种方法引用方式？对方法引用有什么要求？</li></ul>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记3</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记2</title>
    <link href="http://hibiscidai.com/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://hibiscidai.com/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2021-12-25T12:00:00.000Z</published>
    <updated>2022-05-11T05:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记2"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记2</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记2"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记2" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记2"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记2</h1><h1 id="第六章-类与对象"><a href="#第六章-类与对象" class="headerlink" title="第六章 类与对象"></a>第六章 类与对象</h1><p>面向对象的编程思想是力图使在计算机语言中对事物的描述与现实世界中该事物的本来面目尽可能地一致。</p><h2 id="类的基本概念"><a href="#类的基本概念" class="headerlink" title="类的基本概念"></a>类的基本概念</h2><p><code>类</code>是对某一类事物的描述，是抽象的、概念上的定义。<br><code>对象</code>是实际存在的属该类事物的具体个体，因而也成为实例（instance）。</p><p>数据成员：data member<br>域：field<br>函数成员：function member<br>方法：method<br>函数：function<br>面向对象程序设计：Object Oriented Programming,OOP<br>封装：encapsulate</p><blockquote><p>数据成员称为域变量、属性、成员变量。<br>函数成员称为成员方法、方法。</p></blockquote><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>类是将数据和方法封装在一起的一种数据结构，数据表示类的属性，方法表示类的行为，定义类实际上是定义类的属性与方法。</p><h3 id="类的一般结构"><a href="#类的一般结构" class="headerlink" title="类的一般结构"></a>类的一般结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[类修饰符] class 类名称 &#123;</span><br><span class="line">[修饰符] 数据类型 成员变量名称;<span class="comment">//声明成员变量</span></span><br><span class="line"></span><br><span class="line">[修饰符] 返回值的数据类型 方法名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ... , 参数n) &#123;<span class="comment">//声明成员方法</span></span><br><span class="line">语句序列;</span><br><span class="line"><span class="keyword">return</span> [表达式];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类修饰符分为公共访问控制符、抽象类说明符、最终类说明符合缺省访问控制符。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类修饰符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">将一个类声明为公众类，可以被任何对象访问</td></tr><tr><td style="text-align:center">abstract</td><td style="text-align:center">将一个类声明为抽象类，没有实现方法，需要子类提供方法的实现，所以不能创建该类的实例</td></tr><tr><td style="text-align:center">final</td><td style="text-align:center">将一个类声明为最终类即非继承类，表示它不能被其他类所继承</td></tr><tr><td style="text-align:center">缺省</td><td style="text-align:center">缺省修饰符时，则表示只有在相同包中的对象才能使用这样的类</td></tr></tbody></table></div><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 变量类型 变量名[ = 初值];</span><br></pre></td></tr></table></figure><p>成员变量的修饰符有访问控制符、静态修饰符、最新修饰符、过渡修饰符和易失修饰符</p><div class="table-container"><table><thead><tr><th style="text-align:center">成员变量修饰符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">公众访问控制符。指定该变量为公共的，它可以被任何对象的方法访问</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">私有访问控制符。指定该变量只允许自己类的方法访问，其他任何类(包括子类)中的方法均不能访问此变量</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">保护访问控制符。指定该变量只可以被它自己的类及其子类或同一包中的其他类访问，在子类中可以覆盖此变量</td></tr><tr><td style="text-align:center">缺省</td><td style="text-align:center">缺省访问控制符时，则表示在同一个包中的类可以访问此成员变量，而其他包中的类不能访问该成员变量</td></tr><tr><td style="text-align:center">final</td><td style="text-align:center">最终修饰符。指定此变量的值不能改变</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态修饰符。指定该变量被所有对象共享，即所有的实例都可使用该变量</td></tr><tr><td style="text-align:center">transient</td><td style="text-align:center">过渡修饰符。指定该变量是一个系统保留、暂无特别作用的临时变量</td></tr><tr><td style="text-align:center">volatile</td><td style="text-align:center">易失修饰符。指定该变量可以同时被几个线程控制和修改</td></tr></tbody></table></div><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 返回值的数据类型 方法名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ..., 参数n) &#123;</span><br><span class="line">语句序列;<span class="comment">//方法的主体</span></span><br><span class="line"><span class="keyword">return</span> [表达式];<span class="comment">//方法的主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义修饰符是可选项。<br>方法修饰符较多，包括访问控制符、静态修饰符、抽象修饰符、最终修饰符、同步修饰符和本地修饰符。</p><div class="table-container"><table><thead><tr><th style="text-align:center">成员方法修饰符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">公共访问控制符。指定该方法为公共的，他可以被任何对象的方法访问</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">私有访问控制符。指定该方法只允许自己类的方法访问，其他任何类(包括子类)中的方法均不能访问此方法</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">保护访问控制符。指定该方法只可以被它的类及其子类或同一包中的其他类访问</td></tr><tr><td style="text-align:center">缺省</td><td style="text-align:center">缺省访问控制符时，则表示在同一个包中的类可以访问此成员方法，而其他包中的类不能访问该成员方法</td></tr><tr><td style="text-align:center">final</td><td style="text-align:center">最终修饰符。指定该方法不能被覆盖</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态修饰符。指定不需要实例化一个对象就可以调用的方法</td></tr><tr><td style="text-align:center">abstract</td><td style="text-align:center">抽象修饰符。指定该方法只声明方法头，而没有方法体，抽象方法需在子类中被实现</td></tr><tr><td style="text-align:center">synchronized</td><td style="text-align:center">同步修饰符。在多线程程序中，该修饰符用于对同步资源加锁，以防止其他线程访问，运行结束后解锁</td></tr><tr><td style="text-align:center">native</td><td style="text-align:center">本地修饰符。指定此方法的方法体是用其他语言(如C语言)在程序外部编写的</td></tr></tbody></table></div><h3 id="成员变量与局部变量的区别"><a href="#成员变量与局部变量的区别" class="headerlink" title="成员变量与局部变量的区别"></a>成员变量与局部变量的区别</h3><p>类中定义的变量是成员变量，二方法中定义的变量是局部变量。</p><ul><li>从语法形式上看，成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public、private、static 等修饰符所修饰，而局部变量则不能被访问控制修饰符及 static 所修饰；成员变量和局部变量都可以被 final 所修饰。</li><li>从变量在内存中的存储方式上看，成员变量是对象的一部分，而对象是存在于堆内存的，而局部变量是存在于栈内存的。</li><li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而产生，随着方法调用的结束而自动消失。</li><li>成员变量如果没有被赋初值，则会自动以类型的默认值赋值（有一种情况例外，被final 修饰但没有被static修饰的成员变量必须显式地赋值)；而局部变量则不会自动赋值，必须显式地赋值后才能使用。</li></ul><h2 id="对象的创建与使用"><a href="#对象的创建与使用" class="headerlink" title="对象的创建与使用"></a>对象的创建与使用</h2><p>对象的声明周期：创建 -&gt; 使用 -&gt; 销毁</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cylinder volu;</span><br><span class="line">volu = <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Cylinder</span> <span class="variable">volu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br></pre></td></tr></table></figure><p>一个方法内部的变量必须进行初始化，否则编译无法通过。</p><div class="table-container"><table><thead><tr><th style="text-align:center">成员变量的类型</th><th style="text-align:center">初始值</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">flaot</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">0.0D</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">\u0000 (表示为空)</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">所有引用类型</td><td style="text-align:center">null</td></tr></tbody></table></div><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.对象成员</span><br></pre></td></tr></table></figure><blockquote><p>如果Java程序中有多个类，经编译之后便会产生与类相等数目的.class文件。</p></blockquote><p>如果再类声明的内部使用这些成员，则可直接使用成员名称，而不需要调用对象名称。</p><h3 id="在类定义内调用方法"><a href="#在类定义内调用方法" class="headerlink" title="在类定义内调用方法"></a>在类定义内调用方法</h3><p>类定义的内部方法与方法之间也可以相互调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员名</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.area() * <span class="built_in">this</span>.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h2><h3 id="以变量为参数调用方法"><a href="#以变量为参数调用方法" class="headerlink" title="以变量为参数调用方法"></a>以变量为参数调用方法</h3><p>调用方法传参放在括号中，可以使数值型、字符串型、引用类型。</p><h3 id="以数组作为参数或返回值的方法调用"><a href="#以数组作为参数或返回值的方法调用" class="headerlink" title="以数组作为参数或返回值的方法调用"></a>以数组作为参数或返回值的方法调用</h3><blockquote><p>基本数据类型传递的是该数据的值本身；引用数据类型传递的是独享的引用变量。</p></blockquote><h3 id="方法中的可变参数"><a href="#方法中的可变参数" class="headerlink" title="方法中的可变参数"></a>方法中的可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 方法名 (固定参数列表, 数据类型 ... 可变参数名) &#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果方法中有多个参数，可变参数必须位于最后一项，及可变参数只能出现在参数列表的最后。<br>可变参数符号”…“要位于数据类型和数组名之间，其前后有无空格都可以。<br>调用可变参数的方法时，编译器为该可变参数隐含创建一个数组，在方法体中以数组的形式访问可变参数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APP6_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span> x, String ... arg)</span> &#123;</span><br><span class="line">System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;arg.length; i++) &#123;</span><br><span class="line">System.out.print(arg[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">display(<span class="number">5</span>);</span><br><span class="line">display(<span class="number">6</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">display(<span class="number">7</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;DD&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span> a b</span><br><span class="line"><span class="number">7</span> AA BB CC DD</span><br></pre></td></tr></table></figure><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>当一个对象被创建之后，在调用改对象的方法时，也可以不定义对象的引用变量，而直接调用这个对象的方法，这样的对象成为匿名对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cylinder</span> <span class="variable">volu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br><span class="line">volu.setCylinder(<span class="number">2.5</span>, <span class="number">5</span>, <span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cylinder</span>().setCylinder(<span class="number">2.5</span>, <span class="number">5</span>, <span class="number">3.14</span>);</span><br><span class="line"><span class="comment">//方法执行完成后，该对象成为垃圾被回收</span></span><br></pre></td></tr></table></figure><p>匿名对象使用情况：</p><ol><li>如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。</li><li>将匿名对象作为实参传递给一个方法调用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publci <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getSomeOne</span><span class="params">(MyClass c)</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getSomeOne(<span class="keyword">new</span> <span class="title class_">MyClass</span>());</span><br></pre></td></tr></table></figure><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>类是把事物的数据与相关的功能封装在一起，形成的一种特殊结构，用以表达现实世界的一种抽象概念。</li><li>同一个Java 程序内，若定义了多个类，则最多只能有一个类声明为 public，在这种情况下，文件名称必须与声明成 public 的类名称相同。</li><li>Java 语言把数据成员称为成员变量，把函数成员称为成员方法，成员方法简称为方法。</li><li>封装是指把变量和方法包装在一个类内，以限定成员的访问，从而达到保护数据的一种技术。</li><li>由类所创建的对象称为实例。</li><li>创建属于某类的对象，可以通过下面两个步骤来完成：①声明指向”由类所创建的对象”的变量；②利用 new 运算符创建新的对象，并用步骤①所创建的变量来指向它。</li><li>要访问对象里的某个成员变量时,可以通过”对象名.成员变量名”的形式来达到；若要调用封装在类内的方法时,则可以使用“对象名.方法名(）”的语法形式来完成。</li><li>如果要强调”对象本身的成员”，可以在成员名前加上”this”关键宇。即”this. 成员名”，此时的 this 即代表调用该成员的对象。</li><li>若方法本身没有返回值，则必须在方法定义的前面加上关键宇 void。</li><li>在类外部可访问到类内部的公共成员。</li><li>方法的参数可以是任意类型的数据，其返回值也可是任意类型。</li><li>具有可变参数的方法所接收参数的个数可以不是固定的，而是根据需要传递参数的个数。方法中接收不固定个数的参数称为可变参数。其”可变参数名”就是接收可变实参的数组名，数组的长度由可变实参的个数决定。</li><li>当一个对象被创建之后，在调用该对象的方法时，不定义对象的引用变量，而直接调用这个对象的方法，这样的对象称为匿名对象。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>类与对象的区别是什么？</li><li>如何定义一个类？类的结构是怎样的？</li><li>定义一个类时所使用的修饰符有哪几个？每个修饰符的作用是什么？是否可以混用？</li><li>成员变量的修饰符有哪些？各修饰符的功能是什么？是否可以混用？</li><li>成员方法的修饰符有哪些？各修饰符的功能是什么？是否可以混用？</li><li>成员变量与局部变量的区别有哪些？</li><li>创建一个对象使用什么运算符？对象实体与对象引用有何不同？</li><li>对象的成员如何表示？</li><li>在成员变量或成员方法前加上关键宇this 表示什么含义？</li><li>什么是方法的返回值？返回值在类的方法里的作用是什么？</li><li>在方法调用中，使用对象作为参数进行传递时，是”传值”还是”传址”？对象作参数起到什么作用？</li><li>什么叫匿名对象？一般在什么情况下使用匿名对象？</li><li>以m行n列二维数组为参数进行方法调用，分别计算二维数组各列元素之和，返回并输出所计算的结果。</li></ul><h1 id="第七章-Java语言类的特性"><a href="#第七章-Java语言类的特性" class="headerlink" title="第七章 Java语言类的特性"></a>第七章 Java语言类的特性</h1><h2 id="类的私有成员与公共成员"><a href="#类的私有成员与公共成员" class="headerlink" title="类的私有成员与公共成员"></a>类的私有成员与公共成员</h2><h3 id="私有成员"><a href="#私有成员" class="headerlink" title="私有成员"></a>私有成员</h3><p>在类的成员声明前面加上修饰符private，就无法从类的外部访问到类的内部成员，只能被该类自身访问和修改，不能被任何其他类（包括该类的子类）获取或引用，</p><h3 id="公共成员"><a href="#公共成员" class="headerlink" title="公共成员"></a>公共成员</h3><p>在类的成员声明前面加上修饰符public，则表示该成员你可以被所有其他的类所访问。</p><h3 id="缺省访问控制符"><a href="#缺省访问控制符" class="headerlink" title="缺省访问控制符"></a>缺省访问控制符</h3><p>若在类成员的前面不加任何访问控制符，则该成员具有缺省的访问控制特性，该成员只能被同一个包（类库）中的类所访问和调用，如果一个子类与父类位于不同的包中，子类也不能访问父类中的缺省访问控制成员，其他包中任何类都不能缺省访问控制成员。</p><p>如果一个类没有访问控制符，只能被同一个包中的类访问和引用，而不可以被其他包中的类所使用。</p><h2 id="方法的重载-overloading"><a href="#方法的重载-overloading" class="headerlink" title="方法的重载(overloading)"></a>方法的重载(overloading)</h2><p>同一个类内具有相同名称的多个方法，这多个同名方法如果参数个数不同，或者是参数个数相同但类型不同，或参数的顺序不同则这些同名的方法就具有不同的功能。</p><blockquote><p>Java不允许参数个数或参数类型完全相同，而只有返回值类型不同的重载。</p></blockquote><h2 id="构造方法-constructor"><a href="#构造方法-constructor" class="headerlink" title="构造方法(constructor)"></a>构造方法(constructor)</h2><h3 id="构造方法的作用与定义"><a href="#构造方法的作用与定义" class="headerlink" title="构造方法的作用与定义"></a>构造方法的作用与定义</h3><ul><li>构造方法是在对象被创建时初始化对象成员的方法。</li><li>名称必须要与它所在的类名完全相同。</li><li>构造方法没有返回值。不能用void来修饰。</li><li>创建对象时会自动调用它。</li><li>不能被显式直接调用，而是用new来调用。</li><li>创建一个类的对象的同时，会自动调用该类的构造方法为新对象初始化。</li></ul><h3 id="默认的构造方法"><a href="#默认的构造方法" class="headerlink" title="默认的构造方法"></a>默认的构造方法</h3><p>如果省略构造方法，Java编译器会自动为该类生成一个默认的构造方法（default constructor），一旦用户为该类定义了构造方法，系统就不再提供默认的构造方法。</p><h3 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h3><p>当一个类有多个构造方法时，这多个构造反方可以重载。</p><h3 id="从一个构造方法内调用另一个构造方法"><a href="#从一个构造方法内调用另一个构造方法" class="headerlink" title="从一个构造方法内调用另一个构造方法"></a>从一个构造方法内调用另一个构造方法</h3><ul><li>在一个构造方法内调用另一个构造方法时，必须使用 <code>this()</code> 语句来调用，否则编译时将出现错误。</li><li><code>this()</code> 语句必须写在构造方法内的第一行位置。</li></ul><h3 id="公共的构造方法与私有的构造方法"><a href="#公共的构造方法与私有的构造方法" class="headerlink" title="公共的构造方法与私有的构造方法"></a>公共的构造方法与私有的构造方法</h3><p>构造方法一般为公共的，因为在创建对象时，是在类的外部被自动调用。</p><p>如果构造方法被声明为private，则无法在该构造方法所在的类以外的地方调用，但在该类的内部还是可以被调用的。</p><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>被 static 修饰的成员称为静态成员，也称为类成员，而不用 static 修饰的成员称为实例成员。</p><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>没有被static修饰的成员。</p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>被static修饰的成员变量，也称为 类变量。</p><p>静态变量是属于类的变量而不是属于任何一个类的具体对象。</p><p>静态变量是一个公共的存储单元，不是保存在某个对象实例的内存空间，而是保存在类的内存空间的公共存储单元中。</p><p>类的任何一个对象访问它，取到的都是一个相同的数值。<br>类的任何一个对象去修改它，都是在对同一个内存单元做操作。</p><p>静态变量不需要实例化就可以使用。也可以通过对象来访问静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.静态变量名;<span class="comment">//建议访问方式</span></span><br><span class="line">对象名.静态变量名;</span><br></pre></td></tr></table></figure><blockquote><p>静态变量必须独立于方法之外，必须在函数外声明。<br>可以节省内存。</p></blockquote><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>用static修饰符修饰的方法。</p><ul><li>非static的方法是属于某个对象的方法，在创建这个对象时，对象的方法在内存中拥有属于自己专用的代码段。而static 的方法是属于整个类的，它在内存中的代码段将被所有的对象所共用，而不被任何一个对象所专用。</li><li>由于static 方法是属于整个类的，所以它不能直接操纵和处理属于某个对象的成员，而只能处理属于整个类的成员，即 static 方法只能访问 static 成员变量或调用 static 成员方法，或者说在静态方法中不能直接访问实例变量与实例方法。静态方法中虽不能直接访问非静态的成员，但可以通过创建对象的方法间接地访问非静态成员。</li><li>在静态方法中不能使用 this 或super。</li><li>调用静态方法时，可以使用类名直接调用，也可以用某一个具体的对象名来调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.静态方法名();</span><br><span class="line">对象名.静态方法名();</span><br></pre></td></tr></table></figure><p>静态方法可以在不产生对象的情况下直接以类名来调用。</p><blockquote><p>main程序入口方法的理解：由于 Java 虚拟机需要在类外调用main()方法，所以该方法的访问权限必领是public；又因为 Java 虚拟机运行时系统在开始执行一个程序前，并没有创建main()方法所在类的一个实例对象，所以它只能通过类名来调用 main()方法作为程序的人口，即调用main()方法的是类名，而不是由类所创建的对象，因而该方法必须是static 的。</p></blockquote><h3 id="静态初始化器"><a href="#静态初始化器" class="headerlink" title="静态初始化器"></a>静态初始化器</h3><p>关键字static修饰的一对花括号”{}”括起来的语句组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;<span class="comment">//类初始化器</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于初始化工作。</p><ul><li>构造方法是对每个新创建的对象进行初始化，而静态初始化器是对类自身进行初始化。</li><li>构造方法是在用new运算符创建新对象时由系统自动执行，而静态初始化器一般不能由程序调用，它是在所属的类被加载入内存时由系统调用执行的。</li><li>用new运算符创建多少个新对象，构造方法就被调用多少次，但静态初始化器则在类被加载入内存时只执行一次，与创建多少个对象无关。</li><li>不同于构造方法，静态初始化器不是方法，因而没有方法名、返回值和参数。</li></ul><blockquote><p>多个静态初始化器，则在类的初始化时会依次执行。</p></blockquote><h2 id="对象的应用"><a href="#对象的应用" class="headerlink" title="对象的应用"></a>对象的应用</h2><h3 id="对象的赋值与比较"><a href="#对象的赋值与比较" class="headerlink" title="对象的赋值与比较"></a>对象的赋值与比较</h3><p>当参数是基本数据类型时，是传值方式调用，而当参数是引用变量时，则是传址方式调用。</p><p><code>==</code> 比较的是对象的引用地址是否相同。</p><h3 id="引用变量作为方法的返回值"><a href="#引用变量作为方法的返回值" class="headerlink" title="引用变量作为方法的返回值"></a>引用变量作为方法的返回值</h3><h3 id="类类型的数组"><a href="#类类型的数组" class="headerlink" title="类类型的数组"></a>类类型的数组</h3><ul><li>声明类类型的数组变量，并用new运算符分配内存空间给数组；</li><li>用new创建新的对象，分配内存空间给它，并让数组元素指向它。</li></ul><h3 id="以对象数组为参数进行方法调用"><a href="#以对象数组为参数进行方法调用" class="headerlink" title="以对象数组为参数进行方法调用"></a>以对象数组为参数进行方法调用</h3><h2 id="Java语言的垃圾回收"><a href="#Java语言的垃圾回收" class="headerlink" title="Java语言的垃圾回收"></a>Java语言的垃圾回收</h2><p>在Java 程序的生命周期中，Java 运行环境提供丁一个系统的垃圾回收器线程，负责自动回收那些没有被引用的对象所占用的内存，这种清除无用对象进行内存回收的过程就叫作垃圾回收(garbase-collection）。垃圾回收是Java 语言提供的一种自动内存回收功能，可以让程序员减轻许多内存管理的负担，也减少程序员犯错的机会。<br>一个对象被创建时。JVM 会为该对象分配一定的内存、调用该对象的构造方法并开始跟踪该对象。当该对象停止使用时，JVM 将通过垃圾回收器回收该对象所占用的内存。<br>那么Java 是如何知道一个对象是无用的呢？这是因为系统中的任何对象都有一个引用计数器，一个对象被引用1次，则该对象的引用计数器为 1,被引用2次，则引用计数器为 2相反，若对一个对象减少1 次引用，则该对象的引用计数器就诚 1，依次类推，当一个对象的引用计数器诚到0时，说明该对象可以回收。</p><h3 id="垃圾回收的两个好处"><a href="#垃圾回收的两个好处" class="headerlink" title="垃圾回收的两个好处"></a>垃圾回收的两个好处</h3><ul><li>（1）把程序员从复杂的内存追踪、监测、释放等工作中解放出来。</li><li>（2）防止了系统内存被非法释放，从而使系统更加稳定。</li></ul><h3 id="垃圾回收的三个特点"><a href="#垃圾回收的三个特点" class="headerlink" title="垃圾回收的三个特点"></a>垃圾回收的三个特点</h3><ul><li>（1）只有当一个对象不被任何引用类型的变量使用时，它占用的内存才可能被垃圾回<br>收器回收。</li></ul><p>如下面的程序段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strl</span> <span class="operator">=</span> <span class="string">&quot;This is a string&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> strl;</span><br><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span> (<span class="string">&quot;This is another string&quot;</span>);</span><br></pre></td></tr></table></figure><p>当程序执行到第 3行时，”This is a string”对象仍然被str2 引用，因此，此时不能被垃圾回收器回收。当程序执行完第4行，str2引用了一个新的字符串对象，此时”This is string”对象不在被任何引用类型的变量(str1 和 str2)引用，因此，此时该对象可以被当作垃圾回收。</p><ul><li>（2）不能通过程序强迫垃圾回收器立即执行。</li></ul><p>垃圾回收器负责释放没有引用与之关联的对象所占用的内存，但是回收的时间对程序员是透明的，在任何时候，程序员都不能通过程序强迫垃圾回收器立即执行，但可以通过调用<code>System.gc()</code>或者<code>Runtime.sc()</code>方法提示垃圾回器进行内存回收操作，不过这也不能保证调用该方法后，垃圾回收器立即执行。</p><ul><li>（3）当拉圾回收器将要释放无用对象占用的内存时，先调用该对象的 finalize()方法。</li></ul><p>在Java 语言中对象的回收是由系统进行的，但有一些任务需要在回收时进行，如清理一些非内存资源、关闭打开的文件等。这可通过覆盖对象中的<code>finalize()</code>方法来实现，因为系统在回收时会自动调用对象的<code>finalize()</code>方法。</p><p><code>finalize()</code>方法的形式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">Finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span><br></pre></td></tr></table></figure></p><p>由于只有当拉圾回收器将要释放该对象的内存时，才会执行该对象的<code>finalize()</code>方法，如果在小程序或应用程序退出之前，垃圾回收器始终没有执行释放内存的操作，那么垃圾回收器将不会调用无用对象的 finalize()方法。换句话说，以下情况是完全可能的：一个小程序或应用程序只占用了少量的内存，没有造成严重的内存需求，于是垃圾回收器没有释放这些对象的内存就退出了。显然，如果程序员为某个对象定义了 finalize()方法，JVM 可能不会调用它，因为垃圾回收器不曾释放过这个对象的内存，调用 System.gc(）也不会起作用，因为它仅仅是给JVM一个建议而不是命令。当一个对象将要退出生命周期时，可以通过finalize()方法来释放对象所占的其他相关资源，但是，JVM有很大的可能不调用对象的finalize()方法，因此很难保证使用该方法来释放资源是安全有效的。</p><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>用修饰符 private 修饰的类成员称为类的私有成员(private member)。私有成员无法从该类的外部访问到，而只能被该类自身访问和修改，而不能被任何其他类(包括该类的子类)获取或引用；如果在类的成员声明的前面加上修饰符public，则该成员为公共成员，表示该成员可以被所有其他的类所访问。</li><li>所谓重载是指在同一个类内定义相同名称的多个方法。这些同名的方法或者参数的个数不同或者参数的个数相同但类型不同,这些同名的方法便可以具有不同的功能。</li><li>构造方法可视为一种特殊的方法，它的主要功能是帮助创建的对象赋初值。</li><li>构造方法的名称必须与其所属的类名称相同，且不能有返回值。</li><li>从某一构造方法内调用另一构造方法，必须通过 this()语句来调用。</li><li>构造方法有公共(public) 与私有 (private)之分，公共构造方法可以在程序的任何地方被调用，所以新创建的对象均可自动调用它，而私有构造方法则无法在该构造方法所在的类以外的地方被调用。</li><li>如果一个类没有定义构造方法，则 Java 编译系统会自动为其生成默认的构造方法。默认的构造方法是没有任何参数，方法体内也没有任何语句的构造方法。</li><li>实例变量与实例方法、静态变量与静态方法是不同的成员变量与成员方法。</li><li>基本类型的变量是指由 int.double 等关键字所声明而得到的变量，而由类声明而得到的变量称为类类型的变量，它是属于引用类型变量的一种。</li><li>对象也可以用数组来存放，但必须有下面两个步骤：①声明类类型的数组变量，并用new 运算符分配内存空间给数组；②用new 运算符产生新的对象，并分配内存空间给它，并让数组元素指向它。</li><li>Java 语言具有垃圾自动回收的功能。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>一个类的公共成员与私有成员有何区别？</li><li>什么是方法的重载？</li><li>一个类的构造方法的作用足什么？若一个类没有声明构造方法。该程序能正殖执行吗？为什么？</li><li>构造方法有哪些特性？</li><li>在在一个构造方法内可以调用另一个构造方法吗？如果可以，如何调用？</li><li>静态变量与实例变量有哪些不同？</li><li>静态方法与实例方法有哪些不同？</li><li>在一个静态方法内调用一个非静态成员为什么是非法的？</li><li>对象的相等与指向它们的引用相等有什么不同？</li><li>什么是静态初始化器？其作用是什么？静态初始化器由谁在何时执行？它与构造方法有何不同？</li><li>Java语言中怎样清除没有被引用的对象？能否控制 Java 系统中垃圾的回收时间？</li></ul><h1 id="第八章-继承、抽象类、接口和枚举"><a href="#第八章-继承、抽象类、接口和枚举" class="headerlink" title="第八章 继承、抽象类、接口和枚举"></a>第八章 继承、抽象类、接口和枚举</h1><p>类的继承是使用已有的类作为基础派生出新的类。<br>抽象类与接口都是类概念的扩展</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>父类/超类(superclass)：被继承的类；<br>子类(subclass)：由继承而得到的类。</p><blockquote><p>一个类只能有一个直接父类。所有类都是直接或间接继承该类</p></blockquote><h3 id="子类的创建"><a href="#子类的创建" class="headerlink" title="子类的创建"></a>子类的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SpuerClass</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类每个对象也是其父类的对象，任何可以使用父类实例的地方，都可以使用子类实例。</p><h4 id="子类的构建方法"><a href="#子类的构建方法" class="headerlink" title="子类的构建方法"></a>子类的构建方法</h4><p>执行子类的构造方法之前会先调用父类中没有参数的构造方法。</p><p>extends关键字可将父类中的非私有成员继承给子类。</p><h4 id="调用父类中特定的构造方法"><a href="#调用父类中特定的构造方法" class="headerlink" title="调用父类中特定的构造方法"></a>调用父类中特定的构造方法</h4><p>在子类的构造方法中通过<code>super()</code>语句来调用父类特定的构造方法。（该语句必须写在第一行）</p><h3 id="在子类中访问父类的成员"><a href="#在子类中访问父类的成员" class="headerlink" title="在子类中访问父类的成员"></a>在子类中访问父类的成员</h3><p>子类中使用super不但可以访问父类的构造方法，还可以访问父类的成员变量和成员方法，但super不能访问在子类中添加的成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.变量名();</span><br><span class="line"><span class="built_in">super</span>.方法名();</span><br></pre></td></tr></table></figure><p>父类<code>protected</code> 成员，子类可以访问。<br>父类<code>private</code> 成员，子类不可继承</p><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>java多态<code>polymorphism</code></p><p>在子类中定义名称、参数个数与类型均与父类中完全相同的方法，用以重写父类中同名方法的功能。</p><h4 id="覆盖父类的方法"><a href="#覆盖父类的方法" class="headerlink" title="覆盖父类的方法"></a>覆盖父类的方法</h4><p>子类不能覆盖父类中声明为final或static的方法。</p><p>在子类中覆盖父类的方法时，可以扩大父类中的方法权限，但不可以缩小父类方法权限。</p><h4 id="用父类的对象访问子类的成员"><a href="#用父类的对象访问子类的成员" class="headerlink" title="用父类的对象访问子类的成员"></a>用父类的对象访问子类的成员</h4><p>只有覆盖情况发生才可以使用。</p><p>向上转型：父类引用指向子类对象。<br>向下转型：子类引用指向父类对象，需要显示声明强转。</p><h3 id="不可被继承的成员与最终类"><a href="#不可被继承的成员与最终类" class="headerlink" title="不可被继承的成员与最终类"></a>不可被继承的成员与最终类</h3><p>final来修饰成员变量/类，不可以被修改/继承。</p><p>final成员变量和final局部变量都是只读量，只能被赋值一次，创建时候赋值或者构造方法赋值。<br>static+final，指定为常量，只能在定义时候赋值。</p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p><code>java.lang.Object</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">Object常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean equals(Obect obj)</td><td style="text-align:center">判断两个对象变量所指向的是否为同一个对象</td></tr><tr><td style="text-align:center">public String toString()</td><td style="text-align:center">将调用toString()方法的对象转换成字符串</td></tr><tr><td style="text-align:center">public final Class getClass()</td><td style="text-align:center">返回运行时对象所属的类</td></tr><tr><td style="text-align:center">protected Object clone()</td><td style="text-align:center">返回调用该方法的对象的一个副本</td></tr></tbody></table></div><h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><blockquote><p>对于字符串的操作，Java程序在执行时会维护一个字符串池(String poll)，对于一些可共享的字符串对象，会现在字符串池中查找是否有相同的字符串内容(字符相同)，如果有就直接返回，而不是直接创建一个新的字符串对象，以减少内存的占用。</p></blockquote><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><h4 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h4><p>返回运行时的对象所属的类。</p><h4 id="对象运算符instanceof"><a href="#对象运算符instanceof" class="headerlink" title="对象运算符instanceof"></a>对象运算符instanceof</h4><p>测试一个指定对象是否是指定类或它的子类的实例，返回true/false</p><p><code>getName()</code> 得到this类名字符串<br><code>getSuperclass()</code> 得到父类</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类(abstract)：专门的类作为父类</p><p>抽象类不能用new运算符来创建实例对象的类</p><h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名 &#123;</span><br><span class="line">声明成员变量;</span><br><span class="line">返回值的数据类型 方法名(参数表) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">abstract</span> 返回值的数据类型 方法名(参数表);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法声明中static和abstract不能同时用。<br>abstract不能和final合用。<br>abstract不能与private、static、final或native并列修饰同一个方法。</p><p>抽象类不一定有抽象方法，但有抽象方法的类一定要声明为抽象类。</p><p>抽象类可以定义构造方法，但需要用protected修饰，只能被子类构造调用。<br>如果抽象类没有定义构造方法，则系统为其添加默认的构造方法。</p><h3 id="抽象类的应用"><a href="#抽象类的应用" class="headerlink" title="抽象类的应用"></a>抽象类的应用</h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>interface</p><p>接口本身也具有数据成员、抽象放、默认方法和静态方法。</p><p>接口的数据成员都是静态的且必须初始化，数据成员都是静态常量。<br>接口中除了声明抽象方法外，还可以定义静态方法和默认方法，但是不能定义一般方法。</p><h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] interface 接口名称 [extends 父接口名列表] &#123;</span><br><span class="line">[<span class="keyword">public</span>] [<span class="keyword">static</span>] [<span class="keyword">final</span>] 数据类型 常量名 = 常量;<span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">public</span>] [<span class="keyword">abstract</span>] 返回值的数据类型 方法名(参数表);<span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">public</span>] <span class="keyword">static</span> 返回值的数据类型 方法名(参数表) &#123;<span class="comment">//静态方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">public</span>] <span class="keyword">default</span> 返回值的数据类型 方法名(参数表) &#123;<span class="comment">//静态方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口与一般的类一样，本身也具有数据成员与成员方法，但数据成员必须是静态的且一定要赋初值，且此值不能再被修改，若省略数据成员的修饰符，系统默认为public static final；对抽象方法,若方法名前即使省略修饰符，系统仍然默认为public abstract；接口中的静态方法是用public static修饰的；而默认方法是用public default修饰的。</p><ul><li>接口中的“抽象方法”只需做声明，不用定义其处理数据的方法体；</li><li>数据成员都是静态的且必须赋初值，即数据成员必须是静态常量；</li><li>接口中的成员都是公共的，所以在定义接口时若省略了public修饰符,在实现抽象方法时,则不能省略该修饰符；</li><li>接口实际上就是一种特殊的抽象类。 </li></ul><h3 id="接口的实现与引用"><a href="#接口的实现与引用" class="headerlink" title="接口的实现与引用"></a>接口的实现与引用</h3><p><code>implement</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名称 implements 接口名表 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果实现某接口的类不是abstract的抽象类，则在类的定义部分必须实现指定接口的所有抽象方法，即非抽象类中不能存在抽象方法。</li><li>一个类在实现某接口的抽象方法时,必须使用完全相同的方法头，否则只是在定义一个新方法,而不是实现已有的抽象方法。</li><li>接口中抽象方法的访问控制修饰符都已指定为public，所以类在实现方法时，必须显式地使用public修饰符，否则将被系统警告为缩小了接口中定义的方法的访问控制范围。</li><li>与类一样，每个接口都被编译成独立的扩展名为.class的字节码文件。</li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>一个接口可以有一个以上的父接口，它们之间用逗号分隔，形成父接口列表。<br>新接口将继承所有父接口中的常量、抽象方法和默认方法，但不能继承父接口中的静态方法，也不能被实现类所继承。</p><h3 id="利用接口实现类的多重继承"><a href="#利用接口实现类的多重继承" class="headerlink" title="利用接口实现类的多重继承"></a>利用接口实现类的多重继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">B</span>, C &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口中静态方法和默认方法"><a href="#接口中静态方法和默认方法" class="headerlink" title="接口中静态方法和默认方法"></a>接口中静态方法和默认方法</h3><p>接口中的静态方法不能被子接口继承，也不能被实现类继承。默认方法可以。<br>默认方法虽然有方法体，但是必须通过对象来调用，不能通过接口调用。</p><h3 id="解决接口多重继承中名字冲突问题"><a href="#解决接口多重继承中名字冲突问题" class="headerlink" title="解决接口多重继承中名字冲突问题"></a>解决接口多重继承中名字冲突问题</h3><p>如果子接口中定义了与父接口同名的常量或者相同名称的方法，则父接口中的常量被隐藏，方法被覆盖。</p><p>发生冲突：</p><ul><li>同名方法新实现。</li><li>委托声明 <code>接口名.super.默认方法名()</code></li></ul><blockquote><p>在多个父接口的实现类中解决同名默认方法的名字冲突问题，有两种办法：一种是提供同名方法的一个新实现；另一种是委托一个父接口的默认方法。<br>如果两个父接口中有一个提供的不是默认方法，而是抽象方法，则只需要在接口的实现类中提供同名方法的一个新实现即可。<br>如果两个父接口中的同名方法都是抽象方法，则不会发生名字冲突，实现接口的类可以实现该同名方法即可，或者不实现该方法而将自己也声明为抽象类。<br>如果一个类继承一个父类并实现了一个接口，而从父类和接口中继承了同名的方法，此时采用“类比接口优先”的原则，即只继承父类的方法，而忽略来自接口的默认方法。</p></blockquote><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>有些数据的取值被限定在几个确定的值之间，可以被一一列举出来。</p><p>对于类似这种当一个变量有几种固定取值时，将其声明为枚举类型。</p><h3 id="枚举类型的定义"><a href="#枚举类型的定义" class="headerlink" title="枚举类型的定义"></a>枚举类型的定义</h3><p>枚举是一种特殊的类，也称为枚举类，是一种引用类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 枚举类型名 &#123;<span class="comment">//修饰符可以使public/private/internal</span></span><br><span class="line">枚举成员</span><br><span class="line">方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类型名：作为枚举名使用；表示枚举成员的数据类型。</p><p>枚举成员：一一列出的枚举常量，任何两个枚举成员之间不能重名，用逗号分割。</p><blockquote><p>enum、class、interface地位相同。</p></blockquote><ul><li>枚举可以实现一个或多个接口，使用enum关键字声明的枚举默认继承了java.lang.Enum类，而不是继承java.lang.Object类，因此枚举不能显式地继承其他父类。</li><li>使用enum定义非抽象的枚举类时默认使用final修饰，因此枚举类不能派生子类。</li><li>创建枚举类型的对象时不能使用new运算符，而是直接将枚举成员赋值给枚举对象。</li><li>因为枚举是类，所以它可以有自己的构造方法和其他方法。但构造方法只能用private访问修饰符, 如果省略，则默认使用private修饰符，如果强制使用访问修饰符，则只能使用private。</li><li>枚举的所有枚举成员必须在枚举体的第一行显式列出，否则该枚举不能产生枚举成员。枚举成员默认使用public static final进行修饰。</li><li>可以通过<code>==</code>和<code>!=</code>比较两个枚举是否相等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">EAST, SOUTH, WEST, NORTH;<span class="comment">//默认使用public static final 修饰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有枚举类型都包含values()和valueOf()两个预定义方法。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static enumtype[] values()</td><td style="text-align:center">返回枚举类型的数组,该数组包含枚举的所有枚举成员，并按它们的声明顺序存储</td></tr><tr><td style="text-align:center">public static enumtype valueOf(String str)</td><td style="text-align:center">返回名称为str的枚举成员</td></tr></tbody></table></div><p>所有枚举对象都继承自抽象类<code>java.lang.Enum&lt;E&gt;</code>，该类定义了枚举公用的方法以方便用户使用。<code>java.lang.Enum&lt;E&gt;</code>实现了<code>java.lang.Comparable&lt;E&gt;</code>和<code>java.lang.Serializable</code> 两个接口，所以枚举类型时可以使用比较器和遍历操作的。<br>| Eunm &lt; E &gt;常用方法 | 功能说明 |<br>| :-: | :-: |<br>| public final int compareTo(E o) | 返回当前枚举成员与参数枚举成员o在定义时顺序的比较结果 |<br>| public final String name() | 返回枚举常量的名称 |<br>| public final int ordinal() | 返回枚举成员在枚举中的序号(枚举成员的序号从0开始) |<br>| publie final boolean equals(Object other) | 比较两个枚举引用的对象是否相等 |<br>| public String toString() | 返回枚举成员的名称 |<br>| public static &lt; TextendsEnum &lt; T &gt; &gt; T valueOf(Class&lt; T &gt; enumType, String name) | 返回指定枚举类型和指定名称的枚举成员 |</p><h3 id="不包含方法的枚举"><a href="#不包含方法的枚举" class="headerlink" title="不包含方法的枚举"></a>不包含方法的枚举</h3><p>当访问枚举类型的成员时，直接使用枚举名嗲用枚举成员即可，<code>枚举名.枚举成员</code></p><p><code>枚举名.valueOf()</code> 形式调用获取枚举类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">EAST, SOUTH, WEST, NORTH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D8_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Direction</span> <span class="variable">dir</span> <span class="operator">=</span> Direction.EAST;</span><br><span class="line"><span class="type">Direction</span> <span class="variable">dir1</span> <span class="operator">=</span> Direction.valueOf(<span class="string">&quot;NORTH&quot;</span>);</span><br><span class="line">System.out.pritln(dir);</span><br><span class="line">System.out.pritln(dir1);</span><br><span class="line"><span class="keyword">for</span> (Direction d : Direction.values()) &#123;</span><br><span class="line">System.out.pritln(d.ordoal() + <span class="string">&quot; &quot;</span> + d.name());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EAST</span><br><span class="line">NORTH</span><br><span class="line">0 EAST</span><br><span class="line">1 SOUTH</span><br><span class="line">2 WEST</span><br><span class="line">3 NORTH</span><br></pre></td></tr></table></figure><h3 id="包含属性和方法的枚举"><a href="#包含属性和方法的枚举" class="headerlink" title="包含属性和方法的枚举"></a>包含属性和方法的枚举</h3><p>枚举的构造方法只是在构造枚举成员时候被调用。每一个枚举成员都是枚举的一个对象，因此创建每个枚举成员时都需要调用该构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direciton</span> &#123;</span><br><span class="line">EAST(<span class="string">&quot;东&quot;</span>), SOUTH(<span class="string">&quot;南&quot;</span>), WEST(<span class="string">&quot;西&quot;</span>), NORTH(<span class="string">&quot;北&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Direction</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D8_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Direction</span> <span class="variable">dir</span> <span class="operator">=</span> Enum.valueOf(Direction.class, <span class="string">&quot;NORTH&quot;</span>);</span><br><span class="line">System.out.pritln(dir);</span><br><span class="line"><span class="keyword">for</span> (Direction d : Direction.values()) &#123;</span><br><span class="line">System.out.pritln(d.name() + <span class="string">&quot; &quot;</span> +d.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">北</span><br><span class="line">EAST 东</span><br><span class="line">SOUTH 南</span><br><span class="line">WEST 西</span><br><span class="line">NORTH 北</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h3><p>Java语言提供的一种区别类名空间的机制，是类的组织方式。</p><h3 id="使用package语句创建包"><a href="#使用package语句创建包" class="headerlink" title="使用package语句创建包"></a>使用package语句创建包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名<span class="number">1</span>[.包名<span class="number">2</span>[.包名<span class="number">3</span>]...];</span><br></pre></td></tr></table></figure><p>包层次的根文件夹是由环境变量ClassPath来确定的。<br>默认包的路径是当前文件夹，即无名包(unnamed package)</p><h3 id="Java语言中的常用包"><a href="#Java语言中的常用包" class="headerlink" title="Java语言中的常用包"></a>Java语言中的常用包</h3><p><code>API</code> ：应用程序接口（Application Programming Interface）</p><ul><li>java.lang：语言包；</li><li>java.io：输入输出流的文件包；</li><li>java.util：实用包；</li><li>java.net：网络功能包；</li><li>java.sql：数据库连接包；</li><li>java.text：文本包。</li></ul><h4 id="语言包java-lang"><a href="#语言包java-lang" class="headerlink" title="语言包java.lang"></a>语言包java.lang</h4><ul><li>Object类;</li><li>数据类型包装类( The Data Type Wrapper ) ;</li><li>字符串类( String) ;</li><li>数学类( Math) ;</li><li>系统和运行时类( System、Runtime ) ;</li><li>类操作类( Class ) ;</li><li>错误和异常处理类( Throwable, Exception和Error ) ;</li><li>线程类( Thread ) ;</li><li>过程类( Process )。</li></ul><h4 id="输入输出流的文件包java-io"><a href="#输入输出流的文件包java-io" class="headerlink" title="输入输出流的文件包java.io"></a>输入输出流的文件包java.io</h4><ul><li>基本输入输出流类；</li><li>文件输入输出流类；</li><li>过滤输入输出流类；</li><li>管道输入输出流类；</li><li>随机输入输出流类。</li></ul><h4 id="实用包java-util"><a href="#实用包java-util" class="headerlink" title="实用包java.util"></a>实用包java.util</h4><ul><li>数据输入类(Scanner) ;</li><li>日期类(Date、Calendar等) ;</li><li>链表类(LinkedList) ;</li><li>向量类(Vector) ;</li><li>哈希表类(Hashtable) ;</li><li>栈类(Stack) ;</li><li>树类(TreeSet)。</li></ul><h4 id="网络功能包java-net"><a href="#网络功能包java-net" class="headerlink" title="网络功能包java.net"></a>网络功能包java.net</h4><ul><li>访问网络资源类(URL) ;</li><li>套接字类(Socket) ;</li><li>服务器端套接字类(ServerSocket) ;</li><li>数据报打包类(DatagramPacket) ;</li><li>数据报通信类(DatagramSocket)。</li></ul><h4 id="数据库连接包java-sql"><a href="#数据库连接包java-sql" class="headerlink" title="数据库连接包java.sql"></a>数据库连接包java.sql</h4><p>实现JDBC(Java DataBase Conection)java数据库链接的类库。</p><h4 id="文本包java-text"><a href="#文本包java-text" class="headerlink" title="文本包java.text"></a>文本包java.text</h4><p>Java文本包java.text中的Format、DataFormat、SimpleDateFormat等类提供各种文本或日期格式。</p><h3 id="Java语言中几个常用的类"><a href="#Java语言中几个常用的类" class="headerlink" title="Java语言中几个常用的类"></a>Java语言中几个常用的类</h3><h4 id="Date类-java-util"><a href="#Date类-java-util" class="headerlink" title="Date类(java.util)"></a>Date类(java.util)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Date构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Date()</td><td style="text-align:center">用系统日期时间数据创建Date对象</td></tr><tr><td style="text-align:center">public Date(long date)</td><td style="text-align:center">用长整型数date创建Date对象,date表示从1970年1月1日00:00:00时开始到该日期时刻的微秒数</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Date常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public long getTime()</td><td style="text-align:center">返回从1970年1月1日00:00:00时开始到目前的微秒数</td></tr><tr><td style="text-align:center">public boolean after(Date when)</td><td style="text-align:center">日期比较,日期在when之后返回true,否则返回false</td></tr><tr><td style="text-align:center">public boolean before(Date when)</td><td style="text-align:center">日期比较,日期在when之前返回true,否则返回false</td></tr></tbody></table></div><p>Date对象表示时间的默认顺序是：星期、月、日、小时、分、秒、年。如果希望按年、月、日、时、分、秒、星期的顺序显示其时间，这时可以使用java.text.DateFormat类的子类java.text.SimpleDateFormat来实现日期的格式化。</p><p>SimpleDateFormat类有一个常用的构造方法：<code>public SimpleDateFormat(String pattern)</code>。该构造方法可以用参数pattern指定格式创建一个对象，该对象调用<code>format(Date date)</code>方法来格式化时间对象date。需要注意的是，pattern中应当含有如下一些有效的字符序列:</p><ul><li>y或yy表示用2位数字输出的年份，yyyy表示用4位数字输出年份；</li><li>M或MM表示用2位数字或文本输出月份，若要用汉字输出月份，pattern中应连续包含至少3个M；</li><li>d或dd表示用2位数字输出日；</li><li>H或HH表示用2位数字输出小时；</li><li>m或mm表示用2位数字输出分；</li><li>s或ss表示用2位数字输出秒；</li><li>E表示用字符串输出星期；</li><li>a表示输出上、下午。</li></ul><h4 id="Calender类-java-util"><a href="#Calender类-java-util" class="headerlink" title="Calender类(java.util)"></a>Calender类(java.util)</h4><p>描述日期时间的抽象类。</p><p>Calendar类通常用于需要将日期值分解的情况，Calendar类中声明了YEAR等多个常量，分别表示年、月、日等日期中的单个部分值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Calender类中常用的常量</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">public static final int YEAR</td><td style="text-align:center">表示对象日期的年</td></tr><tr><td style="text-align:center">public static final int MONTH</td><td style="text-align:center">表示对象日期的月,0 ~ 11分别表示1 ~ 12月</td></tr><tr><td style="text-align:center">public static final int DAY_OF_MONTH</td><td style="text-align:center">表示对象日期的日</td></tr><tr><td style="text-align:center">public static final int DATE</td><td style="text-align:center">与public static final int DAY_OF_MONTH意义相同</td></tr><tr><td style="text-align:center">public static final int DAY_OF_YEAR</td><td style="text-align:center">表示对象日期是该年的第几天</td></tr><tr><td style="text-align:center">public static final int WEEK_OF_YEAR</td><td style="text-align:center">表示对象日期是该年的第几周</td></tr><tr><td style="text-align:center">public static final int HOUR</td><td style="text-align:center">表示对象日期的时</td></tr><tr><td style="text-align:center">public static final int MINUTE</td><td style="text-align:center">表示对象日期的分</td></tr><tr><td style="text-align:center">public static final int SECOND</td><td style="text-align:center">表示对象日期的秒</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Calender类常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int get(int field)</td><td style="text-align:center">返回对象属性field 的值,属性是上表描述的静态常量</td></tr><tr><td style="text-align:center">public void set(int field,int value)</td><td style="text-align:center">设置对象属性field的值为value</td></tr><tr><td style="text-align:center">public boolean after(Object when)</td><td style="text-align:center">日期比较,日期在when之后返回true,否则返回false</td></tr><tr><td style="text-align:center">public boolean before(Object when)</td><td style="text-align:center">日期比较,日期在when之前返回true,否则返回false</td></tr><tr><td style="text-align:center">public static Calendar getInstance()</td><td style="text-align:center">获取Calendar对象</td></tr><tr><td style="text-align:center">public final Date getTime()</td><td style="text-align:center">由Calendar对象创建Date对象</td></tr><tr><td style="text-align:center">public long getTimeInMillis()</td><td style="text-align:center">返回从1970年1月1日00:00:00时开始到目前的微秒数</td></tr><tr><td style="text-align:center">public void setTimeInMillis(long millis)</td><td style="text-align:center">以长整型数millis设置对象日期,millis表示从1970年1月1日00:00:00时开始到该日期时刻的微秒数</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//创建日历对象</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> now.get(Calendar.MONTH);<span class="comment">//获得日历对象的月份值</span></span><br></pre></td></tr></table></figure><p>也可利用now对象调用相应的set（）方法将日历翻到任何一个时间。</p><h4 id="Random类-java-util"><a href="#Random类-java-util" class="headerlink" title="Random类(java.util)"></a>Random类(java.util)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Random类构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Random()</td><td style="text-align:center">用系统时间作为种子创建Random对象</td></tr><tr><td style="text-align:center">public Random(long seed)</td><td style="text-align:center">用seed作为种子创建Random对象</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Random类常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int nextInt()</td><td style="text-align:center">返回一个整型随机数</td></tr><tr><td style="text-align:center">public int nextInt(int n)</td><td style="text-align:center">返回一个大小为0~n的整型随机数</td></tr><tr><td style="text-align:center">public long nextLong()</td><td style="text-align:center">返回一个长整型随机数</td></tr><tr><td style="text-align:center">public float nextFloat()</td><td style="text-align:center">返回一个0.0~1.0的单精度随机数</td></tr><tr><td style="text-align:center">public double nextDouble()</td><td style="text-align:center">返回一个0.0~1.0的双精度随机数</td></tr></tbody></table></div><h4 id="Math类-java-lang"><a href="#Math类-java-lang" class="headerlink" title="Math类(java.lang)"></a>Math类(java.lang)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Calender类中常用的常量</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">public static final double PI</td><td style="text-align:center">圆周率π=3.141592653589793</td></tr><tr><td style="text-align:center">public static final double E</td><td style="text-align:center">自然对数率e=2.718281828459045</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Calender类中常用方法</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">public static double abs(double a)</td><td style="text-align:center">返回数a的绝对值</td></tr><tr><td style="text-align:center">public static double sin(double a)</td><td style="text-align:center">返回a的正弦值,a的单位为弧度</td></tr><tr><td style="text-align:center">public statice double cos(double a)</td><td style="text-align:center">返回a的余弦值,a的单位为弧度</td></tr><tr><td style="text-align:center">public static double tan(double a)</td><td style="text-align:center">返回a的正切值,a的单位为弧度</td></tr><tr><td style="text-align:center">public static double asin(double a)</td><td style="text-align:center">返回a的反正弦值</td></tr><tr><td style="text-align:center">public static double acos(double a)</td><td style="text-align:center">返回a的反余弦值</td></tr><tr><td style="text-align:center">public static double atan(double a)</td><td style="text-align:center">返回a的反正切值</td></tr><tr><td style="text-align:center">public static double sqrt(double a)</td><td style="text-align:center">返回数a的平方根,a必须是正数</td></tr><tr><td style="text-align:center">public static double ceil(double a)</td><td style="text-align:center">返回大于或等于a的最小实型整数值</td></tr><tr><td style="text-align:center">public static double floor(double a)</td><td style="text-align:center">返回小于或等于a的最大实型整数值</td></tr><tr><td style="text-align:center">public static double random()</td><td style="text-align:center">返回取值在[0.0,1.0)区间的随机数</td></tr><tr><td style="text-align:center">public static double pow(double a, double b)</td><td style="text-align:center">返回以a为底,以b为指数的幂值</td></tr></tbody></table></div><h3 id="利用import语句引用Java定义的包"><a href="#利用import语句引用Java定义的包" class="headerlink" title="利用import语句引用Java定义的包"></a>利用import语句引用Java定义的包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>包名<span class="number">1</span>[.包名<span class="number">2</span>[.包名<span class="number">3</span>…]].类名|∗</span><br></pre></td></tr></table></figure><p>Java编译器为所有程序自动隐含地导入java.lang包</p><blockquote><p>使用*只能表示本层次的所有类，不包括子层次下的类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span> <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span> <span class="keyword">extends</span> <span class="title class_">java</span>.util.Date &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java程序结构"><a href="#Java程序结构" class="headerlink" title="Java程序结构"></a>Java程序结构</h3><ul><li>package，声明包，0或1个；</li><li>import，导入包，0或多个；</li><li>public class，声明公有类，0个或1个，文件名与该类名相同；</li><li>class，声明类，0或多个；</li><li>interface，声明接口，0或多个。</li></ul><h2 id="本章小结-2"><a href="#本章小结-2" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>通过extends关键字，可将父类的非私有成员（成员变量和成员方法）继承给子类。</li><li>父类有多个构造方法时，如果要调用特定的构造方法，则可在子类的构造方法中，通过super（）语句来调用。</li><li>Java程序在执行子类的构造方法之前，如果没有用super()语句来调用父类中特定的构造方法，则会先调用父类中没有参数的构造方法。其目的是为了帮助继承自父类的成员做初始化操作。</li><li>在构造方法内调用同一类内的其他构造方法使用this()语句，而从子类的构造方法调用其父类的构造方法则使用super()语句。</li><li>this())除了可以用来调用同一类的构造方法之外，如果同一类内的成员变量与局部变量的名称相同时，也可以利用“this.成员变量名”来调用同一类内的成员变量。</li><li>this()与super()的相似之处：（1）当构造方法有重载时，两者均会根据所给予的参数的类型与个数，正确地选择执行相对应的构造方法；（2）两者均必须编写在构造方法内的第一行，也就是因为这个原因，this()与super()无法同时存在于同一个构造方法内。</li><li>除了利用super()来调用父类的构造方法外，还利用“super.成员名”的形式来调用父类中的成员变量或成员方法。</li><li>把成员声明成protected最大的好处是可同时兼顾到成员的安全与便利性，因为它只能供父类、子类及同一包中的类来访问，而其他类则无法更改或读取它。</li><li>重载是指在同一个类内，定义名称相同但参数个数或类型不同的多个方法。Java系统可根据参数的个数或类型，调用相对应的方法。</li><li>覆盖是在子类当中，定义名称、参数个数与类型均与父类相同的方法，用以覆盖父类中方法的功能。</li><li>如果父类的方法不希望子类的方法来覆盖它，可以在父类的方法之前加上final关键字，这样该方法就不会被覆盖。</li><li>final关键字的另一作用是把它放在成员变量前面，这样该变量就变成一个常量，因而便无法在程序中的任何地方再做修改。</li><li>无论是自定义的类，还是Java内置的类，所有的类均继承自Object类。</li><li>Java语言的抽象类是专门用来当作父类的，所以抽象类不能直接用来创建对象。抽象类的目的是要用户根据它的格式来修改并创建新的类。</li><li>抽象类中的方法可分为两种：一种是一般的方法；另一种是以关键字abstract开头的抽象方法。抽象方法是没有定义方法体的方法，是要保留给由抽象类派生出的子类来定义。</li><li>接口的结构和抽象类非常相似，它也具有数据成员、抽象方法、默认方法和静态方法，但它与抽象类有两点不同：（1）接口的数据成员都是静态的且必须初始化；（2）接口中的抽象方法必须全部声明为public abstract。</li><li>Java语言并不允许类的多重继承，但利用接口可实现多重继承。</li><li>接口与一般类一样，均可通过扩展技术来派生出新的接口。原来的接口称为基本接口或父接口；派生出的接口称为派生接口或子接口。通过这种机制，子接口不仅可以拥有父接口的成员，同时也可以添加新的成员以满足实际问题的需要。</li><li>枚举是一种特殊的类，所以它是一种引用类型。</li><li>枚举类型名有两层含义：一是作为枚举名使用；二是表示枚举成员的数据类型。正因为如此，枚举成员也称为枚举实例或枚举对象。</li><li>Java语言的package是存放类与接口的地方，因此我们把package译为“类库”。它是在使用多个类或接口时，避免名称重复而采用的一种措施。</li><li>在源文件内若没有指明package，则Java把它视为“没有名称的package”。</li><li>如果多个类分别属于不同的package，若某个类要访问到其他类的成员时，必须做下列修改：①若某个类需要被访问时，则必须把这个类声明为public的；②若要访问不同package内某个public类的成员时，在程序代码内必须明确地指明“被访问package的名称.类名称”。</li><li>在类之前加上public修饰符是为了让其他包里的类也可以访问该类里的成员。如果省略了类的修饰符，则只能让同一个包里的类来访问。</li><li>导入包里的某个类，其格式为“import包名.类名”。</li><li>String类放置在java.lang类库内。在java.lang类库里所有的类均会自动加载，因此当使用到String类时，无须利用import命令来加载它。</li></ul><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>子类将继承父类的所有成员吗？为什么？</li><li>在子类中可以调用父类的构造方法吗？若可以，如何调用？</li><li>在调用子类的构造方法之前，若没有指定调用父类的特定构 造方法，则会先自动调用父类中没有参数的构造方法，其目的是什么？</li><li>在子类中可以访问父类的成员吗？若可以，用什么方式访 问？</li><li>用父类对象变量可以访问子类的成员方法吗？若可以，则只限于什么情况？</li><li>什么是多态机制？Java语言中是如何实现多态的？</li><li>方法的覆盖与方法的重载有何不同？</li><li>this和super分别有什么特殊的含义？</li><li>什么是最终类与最终方法？它们的作用是什么？</li><li>什么是抽象类与抽象方法？使用时应注意哪些问题？</li><li>什么是接口？为什么要定义接口？</li><li>如何定义接口？接口与抽象类有哪些异同？</li><li>在多个父接口的实现类中，多个接口中的方法名冲突问题有几种形式？如何解决？</li><li>编程题。定义一个表示一周七天的枚举，并在主方法 main()中遍历枚举所有成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeekDaysList</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(DaysOfTheWeek day:DaysOfTheWeek.values())</span><br><span class="line">System.out.println(day);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">DaysOfTheWeek</span></span><br><span class="line">&#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,STAURDAY,SUNDAY;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">super</span>.toString();</span><br><span class="line"><span class="keyword">return</span> s.substring(<span class="number">0</span>,<span class="number">1</span>) + s.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>什么是包？它的作用是什么？如何创建包？如何引用包中的类？</li></ul><h1 id="第九章-异常处理"><a href="#第九章-异常处理" class="headerlink" title="第九章 异常处理"></a>第九章 异常处理</h1><h2 id="异常处理的基本概念"><a href="#异常处理的基本概念" class="headerlink" title="异常处理的基本概念"></a>异常处理的基本概念</h2><p>异常(exception)是指在程序运行中由代码产生的一种错误。</p><h3 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h3><p>错误分为<code>语法错误</code>、<code>语义错误</code>、<code>逻辑错误</code>。</p><p><code>语法错误</code>：语法错是由于违反程序设计语言的语法规则而产生的错误，如标识符未声明、表达式中运算符与操作数类型不兼容、括号不匹配、语句末尾缺少分号等。语法错误是由语言的编译系统负责检测和报告。</p><p><code>语义错误</code>：如果程序在语法上正确，但在语义上存在错误，如输入数据格式错、除数为0错、给变量赋值超出其允许范围等，这类错误称为语义错。还有一些语义错误不能被程序事先处理，如待打开的文件不存在、网络连接中断等，这类错误的发生不由程序本身所控制，因此必须进行异常处理。</p><p><code>逻辑错误</code>：如果程序编译通过，也可运行，但运行结果与预期结果不符，如由于循环条件不正确而没有结果、循环次数不对等因素导致的计算结果不正确等，这类错误称为逻辑错。</p><p>虽然程序有三种性质的错误，但Java系统中根据错误严重程度的不同，而将程序运行时出的错分为两类：<code>错误</code>和<code>异常</code>。</p><p><code>错误</code>是指程序在执行过程中所遇到的硬件或操作系统的错误，如内存溢出、虚拟机错等。</p><p><code>异常</code>是指在硬件和操作系统正常时，程序遇到的运行错。</p><h3 id="Java语言的异常处理机制"><a href="#Java语言的异常处理机制" class="headerlink" title="Java语言的异常处理机制"></a>Java语言的异常处理机制</h3><p>Java语言提供的异常处理机制是通过面向对象的方法来处理异常的。</p><p>异常抛出后，运行系统从生成异常对象的代码开始，沿方法的调用栈逐层回溯查找，直到找到包含相应异常处理的方法，并把异常对象提交给该方法为止，这个过程称为<code>捕获异常</code>。</p><blockquote><p>每当Java程序运行过程中发生一个可识别的运行错误时，即该错误有一个异常类与之对应时，系统都会产生一个相应的该异常类的对象。</p></blockquote><h2 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h2><p>由于Java语言中定义了很多异常类，而每个异常类都代表一种运行错误，所以说，Java语言的异常类是处理运行时错误的特殊类，类中包含了该运行错误的信息和处理错误的方法等内容。</p><p>Throwable继承类有java.lang.Error和java.lang.Exception</p><p>即Error类及子类的对象是由Java虚拟机生成并抛出给系统，这种错误有<code>内存溢出错</code>、<code>栈溢出错</code>、<code>动态链接错</code>等。</p><ul><li>异常类的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Exception</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Exception</span><span class="params">(String s)</span>;</span><br></pre></td></tr></table></figure><ul><li>异常类的常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>;<span class="comment">//返回描述当前Excrption类信息的字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStackTrace</span><span class="params">()</span>;<span class="comment">//该方法没有返回值，它的功能是完成一个输出操作，在当前的标准输出设备（一般是屏幕显示器）上输出当前异常对象的堆栈使用轨迹，即程序先后调用并执行了哪些对象或类的哪些方法，使得运行过程中产生了这个异常对象。</span></span><br></pre></td></tr></table></figure><img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/%E5%BC%82%E5%B8%B8%E7%B1%BB%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" class="" title="异常类的层次结构"><blockquote><p>RuntimeException可以不编写异常处理的程序代码，依然可以成功编译，因为它是在程序运行时才有可能产生，如除数为0异常、数组下标越界异常、空指针异常等。这类异常应通过程序调试尽量避免而不是使用try-catch-finally语句去捕获它。<br>除RuntimeException之外，其他则是非运行时异常，这种异常经常是在程序运行过程中由环境原因造成的异常，如输入输出异常、网络地址不能打开、文件未找到等。这类异常必须在程序中使用try-catch-finally语句去捕获它并进行相应的处理，否则编译不能通过。</p></blockquote><p>程序对错误与异常的处理方式有三种：一是程序不能处理的错误；二是程序应避免而可以不去捕获的运行时异常；三是必须捕获的非运行时异常。</p><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><p>在Java语言中，异常处理是通过<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>五个关键字来实现的。</p><p>try-catch-finally语句来捕获和处理一个或多个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">要检查的语句序列</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 形参对象名) &#123;</span><br><span class="line">异常发生时的处理语句序列</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">一定会运行的语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多异常处理是通过在一个try块后面定义若干个catch块来实现的，每个catch块用来接收和处理一种特定的异常对象。</p><blockquote><p>一般地，将处理较具体、较常见异常的catch块应放在前面。<br>当catch块中含有System.exit(0)语句时，则不执行finally块中的语句，程序直接终止；当catch块中含有return语句时则执行完finally块中的语句后再终止程序。</p></blockquote><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>系统自动抛出的异常<br>指定方法抛出异常</p><h3 id="抛出异常的方法"><a href="#抛出异常的方法" class="headerlink" title="抛出异常的方法"></a>抛出异常的方法</h3><p>方式一：在方法体内使用throw语句抛出异常对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> 由异常类所产生的对象;</span><br></pre></td></tr></table></figure><p>方式二：在方法头部添加throws子句表示方法将抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]返回值类型方法名([参数列表])<span class="keyword">throws</span>异常类列表</span><br></pre></td></tr></table></figure><h3 id="处理异常的方法"><a href="#处理异常的方法" class="headerlink" title="处理异常的方法"></a>处理异常的方法</h3><p>由一个方法抛出异常后，该方法内又没有处理异常的语句，则系统就会将异常向上传递，由调用它的方法来处理这些异常，若上层调用方法中仍没有处理异常的语句，则可以再往上追溯到更上层，这样可以一层一层地向上追溯，一直可追溯到main()方法，这时JVM肯定要处理的，这样编译就可以通过了。也就是说，如果某个方法声明抛出异常，则调用它的方法必须捕获并处理异常，否则会出现错误。</p><h3 id="由方法抛出异常交系统处理"><a href="#由方法抛出异常交系统处理" class="headerlink" title="由方法抛出异常交系统处理"></a>由方法抛出异常交系统处理</h3><p>对于程序需要处理的异常，一般编写try-catch-finally语句捕获并处理，而对于程序中无法处理必须交由系统处理的异常，由于系统直接调用的是主方法main()，所以可以在主方法头使用throws子句声明抛出异常交由系统处理。如下面的程序，编译能通过，运行也没问题。</p><p>针对IOException类的异常处理，编写的方式也有三种：</p><ul><li>直接由主方法main()抛出异常，让Java默认的异常处理机制来处理，即若在主方法main()内没有使用try-catch语句捕获异常 ， 则 必 须 在 声 明 主 方 法 main()头 部 的 后 面 加 上 throws IOException子句；</li><li>在程序代码内编写try-catch语句来捕获由系统抛出的异常，如此则不用指定main()throws IOException抛出异常了；</li><li>既在main()方法头的后面使用throws IOException抛出异常，也可以在程序中使用try-catch语句来捕获由系统抛出的异常。</li></ul><h2 id="自动关闭资源的try语句"><a href="#自动关闭资源的try语句" class="headerlink" title="自动关闭资源的try语句"></a>自动关闭资源的try语句</h2><p><code>try-with-resources</code>语句，也称为自动资源管理语句。</p><p>自动关闭资源的try语句相当于包含了隐式的finally语句块，该finally语句块会自动调用res.close()方法关闭前面所访问的资源。<br>如果在try-with-resources语句中含有catch和finally子句，则catch和finally子句将会在try-with-resources语句中打开的资源被关闭之后得到调用。</p><blockquote><p>java.io.Closeable接口继承AutoCloseable接口，这两个接口被所有的I/O流类实现。因此，在使用I/O流时，可以使用try-with-resources语句。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APP9_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Path.get(<span class="string">&quot;chapter9\\t.txt&quot;</span>))) &#123;</span><br><span class="line"><span class="keyword">while</span>(in.hasNext()) &#123;</span><br><span class="line">System.out.println(in.nextLine());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p>（1）用户自定义的异常类必须是Throwable类的直接或间接子类。<br>（2）为用户自定义的异常类定义属性和方法，或覆盖父类的属性和方法，使这些属性和方法能够体现该类所对应的错误信息。习惯上是在自定义异常类中加入两个构造方法，分别是没有参数的构造方法和含有字符串型参数的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircelException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line">CircleException(<span class="type">double</span> r) &#123;</span><br><span class="line">radius = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;半径 r = &quot;</span> + radius + <span class="string">&quot;不是一个正数&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> r)</span> <span class="keyword">throws</span> CircelException &#123;</span><br><span class="line"><span class="keyword">if</span>(r &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CircelException</span>(r);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">radius = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;圆面积 = &quot;</span> + <span class="number">3.14</span> * radius * radius);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App9_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">cir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cir.setRadius(-<span class="number">2.0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CircleException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;自定义异常:&quot;</span> + e.toString() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cir.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对异常处理的两种方式：</p><ul><li>在方法内使用try-catch语句来处理方法本身所产生的异常。</li><li>如果不想再当前方法中使用try-catch语句来处理异常，可以在方法声明的头部使用throws语句或者在方法内部使用throw语句将它送往上一层调用机构去处理。</li></ul><h2 id="本章小结-3"><a href="#本章小结-3" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>异常类可分为两大类，分别为java.lang.Exception与java.lang.Error类。</li><li>程序代码没有编写处理异常时，Java语言的默认异常处理机制是：(1)抛出异常；(2)停止程序的执行。</li><li>当异常发生时，有两种处理方式：(1)交由Java语言默认的异常处理机制做处理；(2)自行编写try-catch-finally语句块来捕获异常。</li><li>try语句块若有异常发生时，程序的运行便会中断，抛出”由异常类所产生的对象”，并按下列步骤来运行：<br>（1）抛出的对象如果属catch()括号内所欲捕获的异常类，catch会捕获此异常，然后进到catch语句块内继续运行；<br>（2）无论try语句块是否捕获到异常，或者捕获到的异常是否与catch()括号里的异常类相匹配，最后一定会运行finally语句块里的程序代码；<br>（3）finally块运行结束后，程序转到try-catch-finally语句之后的语句继续运行。</li><li>RuntimeException不编写异常处理的程序代码，仍然可以编译成功，它是在程序运行时才有可能发生；而IOException一定要进行捕获处理才可以，它通常用来处理与输入输出有关的操作。</li><li>catch()括号内只接收由Throwable类的子类所产生的对象，其他的类均不接收。</li><li>抛出异常有下列两种方式：（1）系统自动抛出异常；（2）指定方法抛出异常。</li><li>方法中没有使用try-catch语句来处理异常，可在方法声明的头部使用throws语句或在方法内部使用throw语句将它送往上一层调用机构去处理。即如果一个方法可能会抛出异常，则可将处理此异常的try-catch-finally语句写在调用此方法的程序块内。</li><li>自动关闭资源语句try-with-resources，只能关闭实现了java.lang.AutoCloseable接口的资源。</li></ul><h2 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是异常？简述Java语言的异常处理机制。</li><li>Throwable类的两个直接子类Error和Exception的功能各是什么？用户可以捕获到的异常是哪个类的异常？</li><li>Exception类有何作用？Exception类的每个子类对象代表了什么？</li><li>什么是运行时异常？什么是非运行时异常？</li><li>抛出异常有哪两种方式？</li><li>在捕获异常时，为什么要在catch()括号内有一个变量e？</li><li>在异常处理机制中，用catch()括号内的变量e接收异常类对象的步骤有哪些？</li><li>在什么情况下，方法的头部必须列出可能抛出的异常？</li><li>若try语句结构中有多个catch()子句，这些子句的排列顺序与程序执行效果是否有关？为什么？</li><li>什么是抛出异常？系统定义的异常如何抛出？用户自定义的异常又如何抛出？</li><li>自动关闭资源语句，为什么只能关闭实现java.lang.AutoCloseable接口的资源？</li><li>系统定义的异常与用户自定义的异常有何不同？如何使用这两类异常？</li></ul><h1 id="第十章-Java语言的输入输出与文件处理"><a href="#第十章-Java语言的输入输出与文件处理" class="headerlink" title="第十章 Java语言的输入输出与文件处理"></a>第十章 Java语言的输入输出与文件处理</h1><h2 id="Java语言的输入和输出"><a href="#Java语言的输入和输出" class="headerlink" title="Java语言的输入和输出"></a>Java语言的输入和输出</h2><h3 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h3><p>流(stream)是指计算机各部件之间的数据流动。<br>按照传输方向：输入流、输出流。<br>按照流的内容：字节流（8byte）、字符流（16Unicode）。</p><h4 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h4><p><code>数据流(datastream)</code>：把不同类型的输入输出源（键盘、屏幕、文件、网络等）抽象为流，而其中输入或输出的数据。</p><p><code>输入流(input stream)</code>：将数据从外设或外存（如键盘、鼠标、文件等）传递到应用程序的流称为输入流。</p><p><code>输出流(output stream)</code>：将数据从应用程序传递到外设或外存（如屏幕、打印机、文件等）的流称为输出流。</p><img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/%E8%BE%93%E5%85%A5%E6%B5%81%E4%B8%8E%E8%BE%93%E5%87%BA%E6%B5%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="输入流与输出流示意图"><blockquote><p>流式输入输出的最大特点是数据的获取和发送是沿着数据序列顺序进行，每一个数据都必须等待排在它前面的数据读入或送出之后才能被读写，每次读写操作处理的都是序列中剩余的未读写数据中的第一个，而不能随意选择输入输出的位置。</p></blockquote><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><p>为了提高数据的传输效率，通常使用<code>缓冲流（bufferedstream）</code>，即为一个流配有一个<code>缓冲区（buffer）</code>，这个缓冲区就是专门用于传送数据的一块内存。</p><p>当向一个缓冲流写入数据时，系统将数据发送到缓冲区，而不是直接发送到外部设备。</p><p>缓冲流提高了内存与外部设备之间的数据传输效率。</p><h3 id="输入输出流类库"><a href="#输入输出流类库" class="headerlink" title="输入输出流类库"></a>输入输出流类库</h3><p>根据输入输出数据类型的不同，输入输出流按处理数据的类型分为两种：一种是<code>字节流（byte stream）</code>；另一种是<code>字符流（character stream）</code>。</p><p>字节流：字节流每次读写8位二进制数，由于它只能将数据以二进制的原始方式读写，而不能分解、重组和理解这些数据，所以可以使之变换、恢复到原来的有意义的状态，因此字节流又被称为二进制字节流（binary byte stream）或位流（bits stream）。</p><p>字符流：而字符流一次读写16位二进制数，并将其作为一个字符而不是二进制位来处理。</p><p>在java.io包中有四个基本类：InputStream、OutputStream及Reader、Writer类，它们分别处理字节流和字符流。</p><img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%85%B3%E7%B3%BB.png" class="" title="输入输出流关系"><img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="" title="输入输出流的类层次结构图"><p>其中InputStream、OutputStream、Reader与Writer是抽象类，用于数据流的输入输出；File是文件类，用于对磁盘文件与文件夹的管理；RandomAccessFile是随机访问文件类，用于实现对磁盘文件的随机读写操作。</p><p>在流的输入输出操作中InputStream和OutputStream流类通常用来处理”位流”（<code>bit stream</code>）即字节流，这种流通常被用来读写诸如图片、音频、视频之类的二进制数据，也就是二进制文件，但也可以处理文本文件；而Reader与Writer类则是用来处理”字符流”（<code>character stream</code>），也就是文本文件。</p><h2 id="使用InputStream和OutputStream流类"><a href="#使用InputStream和OutputStream流类" class="headerlink" title="使用InputStream和OutputStream流类"></a>使用InputStream和OutputStream流类</h2><p>InputStream和OutputStream流类是Java语言中用来处理以位（bit）为单位的流，它除了可用来处理二进制文件（binary file）的数据之外，也可用来处理文本文件。</p><h3 id="基本的输入输出流类"><a href="#基本的输入输出流类" class="headerlink" title="基本的输入输出流类"></a>基本的输入输出流类</h3><h4 id="InputStream流类"><a href="#InputStream流类" class="headerlink" title="InputStream流类"></a>InputStream流类</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public in read()</td><td style="text-align:center">从输入流中的当前位置读入一个字节(8b)的二进制数据，然后以此数据为低位字节，配上8个全0的高位字节合成一个16位的整型量(0~255)返回给调用此方法的语句，若输人流中的当前位置没有数据，则返回-1</td></tr><tr><td style="text-align:center">public int read(byte[] b)</td><td style="text-align:center">从输人流中的当前位置连续读入多个字节保存在数组b中，同时返回所读到的字节数</td></tr><tr><td style="text-align:center">public int read(byte[] b, int off, int len)</td><td style="text-align:center">从输入流中的当前位置连续读入len个字节，从数组b的第off+1个元素位置处开始存放，同时返回所读到的字节数</td></tr><tr><td style="text-align:center">public int available()</td><td style="text-align:center">返回输入流中可以读取的字节数</td></tr><tr><td style="text-align:center">public long skip(long n)</td><td style="text-align:center">使位置指针从当前位置向后跳过n个字节</td></tr><tr><td style="text-align:center">public void mark(int readlimit)</td><td style="text-align:center">在当前位置处做一个标记，并且在输人流中读取readlimit个字节数后该标记失效</td></tr><tr><td style="text-align:center">public void reset()</td><td style="text-align:center">将位置指针返回到标记的位置</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭输人流与外设的连接并释放所占用的系统资源</td></tr></tbody></table></div><blockquote><p>当Java程序需要从外设如键盘、磁盘文件等读入数据时，应该创建一个适当类型的输入流对象来完成与该外设的连接 。由于InputStream是抽象类 ，所以程序中创建的输入流对象一 般是InputStream某个子类的对象，通过调用该对象继承的read()方法就可实现对相应外设的输入操作。</p></blockquote><h4 id="OutputStream流类"><a href="#OutputStream流类" class="headerlink" title="OutputStream流类"></a>OutputStream流类</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void write(int b)</td><td style="text-align:center">将参数b的低位字节写人到输出流</td></tr><tr><td style="text-align:center">public void write(byte[] b)</td><td style="text-align:center">将字节数组b中的全部字节按顺序写人到输出流</td></tr><tr><td style="text-align:center">public void write(byte[] b, int off, int len)</td><td style="text-align:center">将字节数组b中第off+1个元素开始的len个数据，顺序地写人到输出流</td></tr><tr><td style="text-align:center">public void flush()</td><td style="text-align:center">强制清空缓冲区并执行向外设写操作</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭输出流与外设的连接并释放所占用的系统资源</td></tr></tbody></table></div><blockquote><p>当Java程序需要向外设如屏幕、磁盘文件等输出数据时，应该创建一个适当类型的输出流的对象来完成与该外设的连接。</p></blockquote><h3 id="输入输出流的应用"><a href="#输入输出流的应用" class="headerlink" title="输入输出流的应用"></a>输入输出流的应用</h3><h4 id="文件输入输出流"><a href="#文件输入输出流" class="headerlink" title="文件输入输出流"></a>文件输入输出流</h4><p><code>FileInputStream</code>和<code>FileOutputStream</code>分别是<code>InputStream</code>和<code>OutputStream</code>的直接子类，这两个子类主要是负责完成对本地磁盘文件的顺序输入与输出操作的流。</p><ul><li>FileInputStream类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileInputStream(String name)</td><td style="text-align:center">以名为name的文件为数据源建立文件输入流</td></tr><tr><td style="text-align:center">public FileInputStream(File file)</td><td style="text-align:center">以文件对象file为数据源建立文件输入流</td></tr><tr><td style="text-align:center">public FileInputStream(FileDescriptor fdObj)</td><td style="text-align:center">以文件描述符对象fdObj为输人端建立一个文件输人流</td></tr></tbody></table></div><ul><li>FileOutputStream类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileOutputStream(String name)</td><td style="text-align:center">以指定名字的文件为接收端建立文件输出流</td></tr><tr><td style="text-align:center">public FileOutputStream(String name, boolean append)</td><td style="text-align:center">以指定名字的文件为接收端建立文件输出流，并指定写人方式，append为true 时输出字节被写到文件的末尾</td></tr><tr><td style="text-align:center">public FileOutputStream(File file)</td><td style="text-align:center">以文件对象file为接收端建立文件输出流</td></tr><tr><td style="text-align:center">public FileOutputStream(FileDescriptor fdObj)</td><td style="text-align:center">以文件描述符对象fdObj建立一个文件输出流</td></tr></tbody></table></div><p><code>FileDescriptor</code>是java.io包中定义的另一个类，该类不能实例化，该类中有三个静态成员：in、out和err，分别对应于标准输入流、标准输出流和标准错误流，利用它们可以在标准输入流和标准输出流上建立文件输入输出流，实现键盘输入或屏幕输出操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建文本文文件myfile.txt，从键盘输入一串字符，然后再读取该文件并将文本文件内容显示在屏幕上。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App10_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileDescriptor.in);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/myfil.txt&quot;</span>);</span><br><span class="line">            )&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一串字符，并以 # 结束&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ((ch = (<span class="type">char</span>)fin.read()) != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">fout.write(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件没有找到!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/myfile.txt&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileDescriptor.out);</span><br><span class="line">)&#123;</span><br><span class="line"><span class="keyword">while</span> (fin.avilable() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">data = fin.rad();</span><br><span class="line">fout.writ(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileInputStream和FileOutputStream实现二进制图像复制</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APP10_2</span> &#123;</span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test_copy.jpg&quot;</span>);</span><br><span class="line">) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小 = &quot;</span> + fi.available());</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[fi.available()];</span><br><span class="line">fi.read(b);</span><br><span class="line">fo.write(b);</span><br><span class="line">System.out.println(<span class="string">&quot;文件已经被复制&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序输入流"><a href="#顺序输入流" class="headerlink" title="顺序输入流"></a>顺序输入流</h4><p>顺序输入流类SequenceInputStream是InputStream的直接子类，其功能是将多个输入流顺序连接在一起，形成单一的输入数据流，没有对应的输出数据流存在。<br>在进行输入时，顺序输入流依次打开每个输入流并读取数据，在读取完毕后将该流关闭，然后自动切换到下一个输入流。也就是说，由多个输入流构成的顺序输入流，当从一个流中读取数据遇到EOF时，SequenceInputStream将自动转向下一个输入流，直到构成SequenceInputStream类的最后一个输入流读取到EOF时为止。</p><ul><li>SequenceInputStream类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public SequenceInputStream(Enumeration e)</td><td style="text-align:center">创建一个串行输入流，链接枚举对象e中的所有输入流</td></tr><tr><td style="text-align:center">public SequenceInputStream(InputStream s1, InputStream s2)</td><td style="text-align:center">创建一个串行输入流，链接输入流s1和s2</td></tr></tbody></table></div><ul><li>SequenceInputStream类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int available()</td><td style="text-align:center">返回流中的可读取的字节数</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭输入流</td></tr><tr><td style="text-align:center">public int read()</td><td style="text-align:center">从输入流中读取字节，遇到EOF就转向下一输入流</td></tr><tr><td style="text-align:center">public int read(byte[] b, int off, int len)</td><td style="text-align:center">将len个数据读到一个字节数组从off开始的位置</td></tr></tbody></table></div><h4 id="管道输入输出流"><a href="#管道输入输出流" class="headerlink" title="管道输入输出流"></a>管道输入输出流</h4><p>管道字节输入流PipedInputStream和管道字节输出流PipedOutputStream类提供了利用管道方式进行数据输入输出管理的类。</p><p>管道流用来将一个程序或线程的输出连接到另外一个程序或线程作为输入，使得相连线程能够通过PipedInputStream和PipedOutputStream流进行数据交换，从而可以实现程序内部线程间的通信或不同程序间的通信。</p><p>PipedInputStream是一个通信管道的接收端，它必须与一个作为发送端的PipedOutputStream对象相连；PipedOutputStream是一个通信管道的发送端，它必须与一个作为接收端的PipedInputStream对象相连。</p><ul><li>构造方法</li></ul><p>PipedInputStream(PipedOutputStream src)，创建一个管道字节输入流，并将其连接到src指定的管道字节输出流。<br>PipedOutputStream(PipedInputStream src)，创建一个管道字节输出流，并将其连接到src的管道字节输入流。</p><ul><li>PipedInputStream常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int available()</td><td style="text-align:center">返回可以读取的字节数</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭管道输入流并释放系统资源</td></tr><tr><td style="text-align:center">public int read()</td><td style="text-align:center">从管道输入流中读取下一字节数据</td></tr><tr><td style="text-align:center">public int read(byte[] b, int off, int len)</td><td style="text-align:center">从管道输入流读取len字节数据到数组</td></tr><tr><td style="text-align:center">protected coid receive(int b)</td><td style="text-align:center">从管道中接受1字节数据</td></tr><tr><td style="text-align:center">public void connect(PipedOutputStream src)</td><td style="text-align:center">连接到指定输出流，管道输入流将从该输出流接受数据</td></tr></tbody></table></div><ul><li>PipedOutputStream常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭管道输出流并释放系统资源</td></tr><tr><td style="text-align:center">public void connect(PipedInputStream snk)</td><td style="text-align:center">连接到指定输入流，管道输出流将从该输入流读取数据</td></tr><tr><td style="text-align:center">public void write(int b)</td><td style="text-align:center">写指定字节数据到管道输出流</td></tr><tr><td style="text-align:center">public void wirte(byte[] b, int off, int len)</td><td style="text-align:center">从数组off偏移处写len字节数据到管道输出流</td></tr><tr><td style="text-align:center">public void flush()</td><td style="text-align:center">刷新输出流并使缓冲区数据全部写出</td></tr></tbody></table></div><h4 id="过滤输入输出流"><a href="#过滤输入输出流" class="headerlink" title="过滤输入输出流"></a>过滤输入输出流</h4><p>过滤字节输入流类FilterInputStream和过滤字节输出流类FilterOutputStream，分别实现了在数据的读、写操作的同时进行数据处理，它们是InputStream和OutputStream类的直接子类 。</p><p>FilterInputStream和FilterOutputStream也是两个抽象类，它们又分别派生出数据输入流类DataInputStream和数据输出流类DataOutputStream等子类。可以按照基本数据理性进行数据读写。</p><p>过滤字节输入输出流的主要特点是，过滤字节输入输出流是建立在基本输入输出流之上，并在输入输出数据的同时能对所传输的数据做指定类型或格式的转换，即可实现对二进制字节数据的理解和编码转换。</p><img src="/2021/12/25/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/%E6%B5%81%E7%9A%84%E4%B8%B2%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="流的串接示意图"><p>FileInputStream类的对象是1字节输入流，每次输入1字节。与DataInputStream类的对象串接后每次可直接读取一个int(4字节)型数据。</p><ul><li>构造方法</li></ul><p>DataInputStream(InputStream in)，建立一个新的数据输入流，从指定的输入流in读数据。<br>DataOutputStream(OutputStream out)，建立一个新的数据输出流，向指定的输出流out写数据。</p><ul><li>DataInputStream常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean readBoolean()</td><td style="text-align:center">从流中读1字节,若字节值非0返回true,否则返回false</td></tr><tr><td style="text-align:center">public byte readByte()</td><td style="text-align:center">从流中读1字节,返回该字节值</td></tr><tr><td style="text-align:center">public char readChar()</td><td style="text-align:center">从流中读取a、b2字节,形成Unicode字符(char)((a&lt;&lt;8)  &#124; (b &amp;.0xff))</td></tr><tr><td style="text-align:center">public short readShort()</td><td style="text-align:center">从流中读人2字节的short值并返回</td></tr><tr><td style="text-align:center">public int readInt()</td><td style="text-align:center">从流中读人4字节的int值并返回</td></tr><tr><td style="text-align:center">public float readFloat()</td><td style="text-align:center">从流中读人4字节的float值并返回</td></tr><tr><td style="text-align:center">public long readLong()</td><td style="text-align:center">从流中读入8字节的long值并返回</td></tr><tr><td style="text-align:center">public double readDouble()</td><td style="text-align:center">从流中读人8字节的double值并返回</td></tr></tbody></table></div><ul><li>DataOutputStream常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean writeBoolean(boollean v)</td><td style="text-align:center">若v的值为true,则向流中写人(字节)1,否则写入(字节)0</td></tr><tr><td style="text-align:center">public byte writeByte(int v)</td><td style="text-align:center">向流中写人1字节。写人v的最低1字节,其他字节丢弃</td></tr><tr><td style="text-align:center">public char writeChar(int v)</td><td style="text-align:center">向流中写人v的最低2字节,其他字节丢弃</td></tr><tr><td style="text-align:center">public short writeShort(int v)</td><td style="text-align:center">向流中写人v的最低2字节,其他字节丢弃</td></tr><tr><td style="text-align:center">public int writeInt(int v)</td><td style="text-align:center">向流中写人参数v的4字节</td></tr><tr><td style="text-align:center">public float writeFloat(float v)</td><td style="text-align:center">向流中写入参数v的4字节</td></tr><tr><td style="text-align:center">public long writeLong(long v)</td><td style="text-align:center">向流中写人参数v的8字节</td></tr><tr><td style="text-align:center">public double writeDouble(double v)</td><td style="text-align:center">向流中写人参数v的8字节</td></tr></tbody></table></div><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><p>当Java程序与外设进行数据交换时，需要先创建一个输入或输出流类的对象，完成与外设的连接。<br>当程序对标准输入输出设备进行操作时，则不需要如此。</p><p>为了方便程序对键盘输入和屏幕输出进行操作，Java系统事先在System类中定义了静态流对象System.in和System.out和System.err 。<br>System.in对应于输入流，通常指键盘输入设备 ；<br>System.out对应于输出流，指显示器等信息输出设备；<br>System.err对应于标准错误输出设备，使得程序的运行错误可以有固定的输出位置，通常该对象对应于显示器。</p><ul><li>标准输入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;按任一键继续&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">test</span> <span class="operator">=</span> (<span class="type">char</span>)System.in.read();</span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>标准输出</li></ul><p>PrintStream类是过滤字节输出流类FilterOutputStream的一个子类，其中定义了向屏幕输送不同类型数据的方法print()和println()。这两个方法的区别是前者输出数据后不换行，后者换行。System.out对应的输出流通常指显示器、打印机或磁盘文件等信息输出设备。</p><ul><li>标准错误输出</li></ul><p>由PrintStream类派生的错误流。err使用与out同样的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据流的应用</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App10_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] artg)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入字符：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> System.in.read(b);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;输入的是：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">System.out.print(b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;count-<span class="number">2</span>; i++) &#123;</span><br><span class="line">System.out.print((<span class="type">char</span>)b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;输入的字符个数为&quot;</span> + count);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">InClass</span> <span class="operator">=</span> System.in.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">OutClass</span> <span class="operator">=</span> System.out.getClass();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;in所在的类是：&quot;</span> + InClass.toString());</span><br><span class="line">System.out.println(<span class="string">&quot;out所在的类是：&quot;</span> + OutClass.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入字符：abc↙</span><br><span class="line">输入的是：</span><br><span class="line">97 98 99 13 10</span><br><span class="line">a b c</span><br><span class="line">输入的字符个数为5</span><br><span class="line">in所在的类是：class java.io.BufferedInputStream</span><br><span class="line">out所在的类是：class java.io.PrintStream</span><br></pre></td></tr></table></figure><h2 id="使用Reader和Writer流类"><a href="#使用Reader和Writer流类" class="headerlink" title="使用Reader和Writer流类"></a>使用Reader和Writer流类</h2><p>而Reader和Write类则是用来处理“字符流”的，也就是文本文件。为抽象类。</p><ul><li>Reader类常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int read()</td><td style="text-align:center">从输人流中读一个字符</td></tr><tr><td style="text-align:center">public int read(char[] cbuf)</td><td style="text-align:center">从输入流中读最多cbuf.length个字符,存人字符数组cbuf中</td></tr><tr><td style="text-align:center">public int read(char[] cbuf, int off, int len)</td><td style="text-align:center">从输入流中读最多len个字符,存入字符数组cbuffer中,从off开始的位置</td></tr><tr><td style="text-align:center">public long skip(long n)</td><td style="text-align:center">从输人流中最多向后跳n个字符</td></tr><tr><td style="text-align:center">public boolean ready()</td><td style="text-align:center">判断流是否做好读的准备</td></tr><tr><td style="text-align:center">public void mark(int readAheadLimit)</td><td style="text-align:center">标记输人流的当前位置</td></tr><tr><td style="text-align:center">public boolean markSupported()</td><td style="text-align:center">测试输人流是否支持mark</td></tr><tr><td style="text-align:center">public void reset()</td><td style="text-align:center">重定位输人流</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭输人流</td></tr></tbody></table></div><ul><li>Writer类常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void write(int c)</td><td style="text-align:center">将单一字符c输出到流中</td></tr><tr><td style="text-align:center">public void wirte(String str)</td><td style="text-align:center">将字符串str输出到流中</td></tr><tr><td style="text-align:center">public void write(char[] cbuf)</td><td style="text-align:center">将字符数组cbuf输出到流</td></tr><tr><td style="text-align:center">public void write(char[] cbuf, int off, int len)</td><td style="text-align:center">将字符数组按指定的格式输出(off表示索引,len表示写入的字符数)到流中</td></tr><tr><td style="text-align:center">public void flush()</td><td style="text-align:center">将缓冲区中的数据写到文件中</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭输出流</td></tr></tbody></table></div><h3 id="使用FileReader类读取文件"><a href="#使用FileReader类读取文件" class="headerlink" title="使用FileReader类读取文件"></a>使用FileReader类读取文件</h3><p>Reader -&gt; InputStreamReader -&gt; FileReader</p><ul><li>构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileReadeer(String name)</td><td style="text-align:center">根据文件名称创建一个可读取的输入流对象</td></tr></tbody></table></div><ul><li>使用案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App10_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> fr.read();</span><br><span class="line"><span class="type">String</span> <span class="variable">srt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(c, <span class="number">0</span>, num);</span><br><span class="line">System.out.println(<span class="string">&quot;读取的字符个数为：&quot;</span> + num + <span class="string">&quot;,其内容如下：&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用FileWriter类写入文件"><a href="#使用FileWriter类写入文件" class="headerlink" title="使用FileWriter类写入文件"></a>使用FileWriter类写入文件</h3><p>Writer -&gt; OutputStreamWriter -&gt; FileWriter</p><ul><li>构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public FileWriter(String filename)</td><td style="text-align:center">根据所给文件名创建一个可供写入字符数据的输出流对象，原先的文件会被覆盖</td></tr><tr><td style="text-align:center">public FileWriter(String filename, boolean a)</td><td style="text-align:center">同上，但如果a设置为true，则会将数据追加在原先文件的后边</td></tr></tbody></table></div><ul><li>使用案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App10_6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">FileWirter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:\\test.txt&quot;</span>);</span><br><span class="line"><span class="type">char</span>[] c = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;欢迎使用Java!&quot;</span>;</span><br><span class="line">fw.write(c);</span><br><span class="line">fw.wirte(str);</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用BufferedReader类读取文件"><a href="#使用BufferedReader类读取文件" class="headerlink" title="使用BufferedReader类读取文件"></a>使用BufferedReader类读取文件</h3><p>使用BufferedReader类来读取缓冲区中的数据之前，必须先创建FileReader类对象，再以该对象为参数来创建BufferedReader类的对象，然后才可以利用此对象来读取缓冲区中的数据。</p><ul><li>构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public BufferReader(Reader in)</td><td style="text-align:center">创建缓冲区字符输入流</td></tr><tr><td style="text-align:center">public BufferReader(Reader in, int size)</td><td style="text-align:center">创建缓冲区字符输入流，并设置缓冲区大小</td></tr></tbody></table></div><ul><li>常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int read()</td><td style="text-align:center">读取单一字符</td></tr><tr><td style="text-align:center">public int read(char[] cbuf)</td><td style="text-align:center">从流中读取字符并写入到字符数组cbuf中</td></tr><tr><td style="text-align:center">public int read(char[] cbuf, int off, int len)</td><td style="text-align:center">从流中读取字符存放到字符数组cbuf中(off表示数组下标，len表示读取的字符数)</td></tr><tr><td style="text-align:center">public long skip(long n)</td><td style="text-align:center">跳过n个字符不读取</td></tr><tr><td style="text-align:center">public String readLine()</td><td style="text-align:center">读取一行字符串</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭流</td></tr></tbody></table></div><ul><li>使用案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App10_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String thisLine;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferReader</span>(fr);</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">while</span> ((thisLine = bfr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">Sytem.out.println(thisLine);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;共读取了&quot;</span> + count + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;错误!&quot;</span> + ioe);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用BufferedWriter类写入文件"><a href="#使用BufferedWriter类写入文件" class="headerlink" title="使用BufferedWriter类写入文件"></a>使用BufferedWriter类写入文件</h3><p>缓冲字符输出流类BufferedWriter继承自Writer类，BufferedWriter类是用来将数据写入到缓冲区中。</p><p>缓冲区内的数据最后必须要用flush()方法将缓冲区清空，也就是将缓冲区中的数据全部写到文件内。</p><ul><li>构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public BufferWriter(Writer out)</td><td style="text-align:center">创建缓冲区字符输出流</td></tr><tr><td style="text-align:center">public BufferWriter(Writer out, int size)</td><td style="text-align:center">创建缓冲区字符输出流，并设置缓冲区大小</td></tr></tbody></table></div><ul><li>常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void write(int c)</td><td style="text-align:center">将单一字符写入缓冲区中</td></tr><tr><td style="text-align:center">public void write(char[] cbuf, int off, int len)</td><td style="text-align:center">将字符数组cbuf按指定的格式写入到输出缓冲区中(off表示数组下标，len表示写入的字符数)</td></tr><tr><td style="text-align:center">public void write(String str, int off, int len)</td><td style="text-align:center">写入字符串(off表示下标，len表示写入的字符数)</td></tr><tr><td style="text-align:center">public void newLine()</td><td style="text-align:center">写入回车换行字符</td></tr><tr><td style="text-align:center">public void flush()</td><td style="text-align:center">将缓冲区中的数据写到文件中</td></tr><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭流</td></tr></tbody></table></div><ul><li>使用案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件复制</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App10_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:/tset.txt&quot;</span>));</span><br><span class="line"><span class="type">BufferWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/test_copy.txt&quot;</span>));</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">while</span> ((str=in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">out.writer(str);</span><br><span class="line">out.newLine();</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;错误!&quot;</span> + ioe);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件的管理与随机访问"><a href="#文件的管理与随机访问" class="headerlink" title="文件的管理与随机访问"></a>文件的管理与随机访问</h2><h3 id="Java语言对文件与文件夹的管理"><a href="#Java语言对文件与文件夹的管理" class="headerlink" title="Java语言对文件与文件夹的管理"></a>Java语言对文件与文件夹的管理</h3><p>在java.io包中定义了一个File类专门用来管理磁盘文件和文件夹，而不负责数据的输入输出。</p><h4 id="创建File类的对象"><a href="#创建File类的对象" class="headerlink" title="创建File类的对象"></a>创建File类的对象</h4><ul><li>构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public File(String path)</td><td style="text-align:center">用Path参数创建File对象对应的磁盘文件夹或文件夹名及其路径</td></tr><tr><td style="text-align:center">public File(String path, String name)</td><td style="text-align:center">以path为路径，以name为文件或文件夹名创建File对象</td></tr><tr><td style="text-align:center">public File(File dir, String name)</td><td style="text-align:center">用一个已经存在代表某磁盘文件夹的File对象dir作为文件夹，以name作为文件或文件夹名来创建File对象</td></tr></tbody></table></div><blockquote><p>path参数可以是绝对路径，如“d:\java\myfile\sample.java”，也可相对路径，如“myfile\sample.java”, path参数还可以是磁盘上的某个文件夹。<br>由于不同的操作系统使用的文件夹分隔符不同，如Windows操作系统使用反斜线“\”，UNIX操作系统使用正斜线“/”。<br>File类的一个静态变量File.separator代表不同操作系统下通用路径。＂d:＂+File.separator+＂java＂+File.separator+＂myfile＂</p></blockquote><h4 id="获取文件或文件夹属性"><a href="#获取文件或文件夹属性" class="headerlink" title="获取文件或文件夹属性"></a>获取文件或文件夹属性</h4><ul><li>获取文件或文件夹属性常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean exists()</td><td style="text-align:center">判断文件或文件夹是否存在</td></tr><tr><td style="text-align:center">public boolean isFile()</td><td style="text-align:center">判断对象是否代表有效文件</td></tr><tr><td style="text-align:center">public boolean isDirectory()</td><td style="text-align:center">判断对象是否代表有效文件夹</td></tr><tr><td style="text-align:center">public String getName()</td><td style="text-align:center">返回文件名或文件夹名</td></tr><tr><td style="text-align:center">public String getPath()</td><td style="text-align:center">返回文件或文件夹的路径</td></tr><tr><td style="text-align:center">public long length()</td><td style="text-align:center">返回文件的字节数</td></tr><tr><td style="text-align:center">public boolean canRead()</td><td style="text-align:center">判断文件是否可读</td></tr><tr><td style="text-align:center">public boolean canWrite()</td><td style="text-align:center">判断文件是否可写</td></tr><tr><td style="text-align:center">public String[] list()</td><td style="text-align:center">将文件夹中所有文件名保存在字符串数组中返回</td></tr><tr><td style="text-align:center">public boolean equals(File f)</td><td style="text-align:center">比较两个文件或文件夹是否相同</td></tr></tbody></table></div><h4 id="文件或文件夹操作"><a href="#文件或文件夹操作" class="headerlink" title="文件或文件夹操作"></a>文件或文件夹操作</h4><ul><li>文件或文件夹操作的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public boolean renameTo(File newFile)</td><td style="text-align:center">将文件重命名成newFile对应的文件名</td></tr><tr><td style="text-align:center">public boolean delete()</td><td style="text-align:center">将当前文件删除，若删除成功返回true，否则返回false</td></tr><tr><td style="text-align:center">public boolean mkdir()</td><td style="text-align:center">创建当前文件夹的子文件夹，若成功返回ture，否则返回false</td></tr></tbody></table></div><h3 id="对文件的随机访问"><a href="#对文件的随机访问" class="headerlink" title="对文件的随机访问"></a>对文件的随机访问</h3><p>随机访问文件类RandomAccessFile，它可以实现对文件的随机读写。</p><p>RandomAccessFile是有关文件处理中功能齐全、文件访问方法众多的类。RandomAccessFile类用于进行随意位置、任意类型的文件访问，并且在文件的读取方式中支持文件的任意读取而不只是顺序读取。</p><ul><li>RandomAccessFile构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public RandomAccessFile(String name, String mode)</td><td style="text-align:center">以name来指定随机文件流对象所对应的文件名,以mode表示对文件的访问模式</td></tr><tr><td style="text-align:center">public RandomAccessFile(File file, String mode)</td><td style="text-align:center">以file来指定随机文件流对象所对应的文件名，以mode表示对文件的访问模式</td></tr></tbody></table></div><p>r：只读方式打开文件。<br>rw：读写方式打开文件。</p><ul><li>RandomAccessFile中用于读取操作的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void close()</td><td style="text-align:center">关闭随机访问文件流并释放系统资源</td></tr><tr><td style="text-align:center">public final FileDescriptorgetFD()</td><td style="text-align:center">获取文件描述符</td></tr><tr><td style="text-align:center">public long getFilePointer()</td><td style="text-align:center">返回文件指针的当前位置</td></tr><tr><td style="text-align:center">public long length()</td><td style="text-align:center">返回文件长度</td></tr><tr><td style="text-align:center">public int skipBytes(int n)</td><td style="text-align:center">跳过输人流中n个字符,并返回跳过实际的字节数</td></tr><tr><td style="text-align:center">public int read()</td><td style="text-align:center">从文件输入流中读取一个字节的数据</td></tr><tr><td style="text-align:center">public int read(byte[] b, int off. int len)</td><td style="text-align:center">从文件输人流的当前指针位置开始读取长度为len字节的数据存放到字节数组b中,存放的偏移位置为off。若遇文件结束符，则返回值为-1</td></tr><tr><td style="text-align:center">public final void readFully(byte[] b)</td><td style="text-align:center">从文件输入流的当前指针位置开始读取b.length字节的数据存放到字节数组b中。若遇文件结束符，则抛出EOFException类异常</td></tr><tr><td style="text-align:center">public final void readFully(byte[] b, int off, int len)</td><td style="text-align:center">从文件输入流的当前指针位置开始读取长度为len字节的数据存放到字节数组b中,存放的偏移位置为off。若遇文件结束符,则抛出EOFException类异常</td></tr><tr><td style="text-align:center">public final boolean readBoolean()</td><td style="text-align:center">读取文件中的逻辑值</td></tr><tr><td style="text-align:center">public final byte readByte()</td><td style="text-align:center">从文件中读取带符号的字节值</td></tr><tr><td style="text-align:center">public final char readChar()</td><td style="text-align:center">从文件中读取一个Unicode字符</td></tr><tr><td style="text-align:center">public final String readLine()</td><td style="text-align:center">从文本文件中读取一行</td></tr><tr><td style="text-align:center">public void seek(long pos)</td><td style="text-align:center">设置文件指针位置</td></tr></tbody></table></div><ul><li>RandomAccessFile类用于写入操作的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public void write(int b)</td><td style="text-align:center">在文件指针的当前位置写人一个int型数据b</td></tr><tr><td style="text-align:center">public void writeBoolean(boolean v)</td><td style="text-align:center">在文件指针的当前位置写人一个boolean型数据v</td></tr><tr><td style="text-align:center">public void writeByte(int v)</td><td style="text-align:center">在文件指针的当前位置写人一个字节值，只写v的最低1字节，其他字节丢弃</td></tr><tr><td style="text-align:center">public void writeBytes(String s)</td><td style="text-align:center">以字节形式写一个字符串到文件</td></tr><tr><td style="text-align:center">public void writeChar(int v)</td><td style="text-align:center">在文件指针的当前位置写入v的最低2字节，其他丢弃</td></tr><tr><td style="text-align:center">public void writeChars(String s)</td><td style="text-align:center">以字符形式写一个字符串到文件</td></tr><tr><td style="text-align:center">public void writeDouble(double v)</td><td style="text-align:center">在文件当前指针位置写人8字节数据v</td></tr><tr><td style="text-align:center">public void writeFloat(float v)</td><td style="text-align:center">在文件当前指针位置写人4字节数据v</td></tr><tr><td style="text-align:center">public void writeInt(int v)</td><td style="text-align:center">把整型数作为4字节写人文件</td></tr><tr><td style="text-align:center">public void writeLong(long v)</td><td style="text-align:center">把长整型数作为8字节写人文件</td></tr><tr><td style="text-align:center">public void writeShort(int v)</td><td style="text-align:center">在文件指针的当前位置写人2字节，只写v的最低2字节，其他字节丢弃</td></tr><tr><td style="text-align:center">public void writeUTF(String str)</td><td style="text-align:center">作为UTF格式向文件写入一个字符串</td></tr></tbody></table></div><h2 id="本章小结-4"><a href="#本章小结-4" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>Java语言是以流的方式来处理输入输出的，其好处是：无论是什么形式的输入输出，只要针对流做处理就可以了。</li><li>Java语言中的流是由字符或位组合而成的，可以通过它来读写数据，甚至可以通过它连接数据源，并可以将数据以字符或位组合的形式保存。</li><li>以数据的读取或写入而言，流可分为输入流与输出流两种。</li><li>可以通过InputStream、OutputStream、Reader与Writer类来处理流的输入输出。</li><li>InputStream与OutputStream类及其子类既可用于处理二进制文件也可用于处理文本文件，但主要以处理二进制位流的字节文件为主。</li><li>Reader与Writer类是用来处理文本文件的读取和写入操作，通常是以它们的派生类来创建实体对象，再利用它们来处理文本文件读写操作。</li><li>BufferedWriter类中的newLine()方法可写入回车换行字符，而且与操作系统无关，使用它可确保程序可跨平台运行。</li><li>文件流类File的对象对应系统的磁盘文件或文件夹。</li><li>随机访问文件类RandomAccessFile，可以实现对文件的随机读写。</li><li>在关闭流对象时，若流对象是在try语句块之前定义的，则流对象的关闭最好是放在finally语句块中；但若流对象是在try语句块中定义，那么关闭流对象的语句可放在try语句块的最后面。</li></ul><h2 id="课后习题-4"><a href="#课后习题-4" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是数据的输入与输出？</li><li>什么是流？Java语言中分为哪两种流？这两种流有何差异？</li><li>InputStream、OutputStream、Reader和Writer四个类在功能上有何异同？</li><li>利用基本输入输出流实现从键盘上读入一个字符，然后显示在屏幕上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D10_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>顺序流与管道流的区别是什么？</li><li>Java语言中定义的三个标准输入输出流是什么？它们对应什么设备？</li><li>利用文件输出流创建一个文件file1.txt，写入字符”文件已被成功创建!”，然后用记事本打开该文件，看一下是否正确写入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D10_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;c:&quot;</span> + File.separator + <span class="string">&quot;file1.txt&quot;</span>));</span><br><span class="line">) &#123;</span><br><span class="line">writer.write(<span class="string">&quot;文件已被成功创建!&quot;</span>);</span><br><span class="line">writer.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用文件输入流打开10.7题中创建的文件file1.txt，读出其内容并显示在屏幕上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D10_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c:&quot;</span> + File.separator + <span class="string">&quot;file1.txt&quot;</span>));</span><br><span class="line">) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用文件输入输出流打开10.7题创建的文件file1.txt，然后在文件的末尾追加一行字符串”又添加了一行文字!”。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D10_9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;c:&quot;</span> + File.separator + <span class="string">&quot;file1.txt&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">) &#123;</span><br><span class="line">writer.newLine();</span><br><span class="line">writer.write(<span class="string">&quot;又添加了一行文字!&quot;</span>);</span><br><span class="line">writer.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>产生15个20~9999的随机整数，然后利用BufferedWriter类将其写入文件file2.txt中之后再读取该文件中的数据并将它们按升序排序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D10_10</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] input = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line"><span class="type">Random</span> <span class="variable">rad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;随机生成数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;</span><br><span class="line">input[i] = rad.nextInt(<span class="number">9979</span>) + <span class="number">20</span>;</span><br><span class="line">System.out.print(input[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;c:&quot;</span> + File.separator + <span class="string">&quot;file2.txt&quot;</span>));</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;</span><br><span class="line">bw.write(String.valueOf(input[i]));               </span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;随机数组写入文件。&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c:&quot;</span> + File.separator + <span class="string">&quot;file2.txt&quot;</span>));</span><br><span class="line">) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;从文件中读出数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;</span><br><span class="line">output[i] = Integer.parseInt(br.readLine());</span><br><span class="line">                System.out.print(output[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(output);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;</span><br><span class="line">        System.out.print(output[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java语言中使用什么类来对文件与文件夹进行管理？</li></ul><h1 id="第十一章-多线程"><a href="#第十一章-多线程" class="headerlink" title="第十一章 多线程"></a>第十一章 多线程</h1><p>多任务（multitasking）<br>分时（timesharing）</p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>多线程(multithread)是指在同一个进程中同时存在几个执行体，按几条不同的执行路径同时工作的情况。<br>多线程编程的含义就是可将一个程序任务分成几个可以同时并发执行的子任务。</p><h3 id="程序、进程、多任务与多线程"><a href="#程序、进程、多任务与多线程" class="headerlink" title="程序、进程、多任务与多线程"></a>程序、进程、多任务与多线程</h3><h4 id="程序-program"><a href="#程序-program" class="headerlink" title="程序-program"></a>程序-program</h4><p>程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><h4 id="进程-porcess"><a href="#进程-porcess" class="headerlink" title="进程-porcess"></a>进程-porcess</h4><p>进程是程序的一次执行过程，是系统运行程序的基本单位。</p><p>系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p><p>每个进程还占有某些系统资源，如CPU时间、内存空间、文件、输入输出设备的使用权等。</p><p>每个进程之间是独立的，除非利用某些通信管道来进行通信，或是通过操作系统产生交互作用，否则基本上各进程不知道（不需要，也不应该知道）彼此的存在。</p><h4 id="多任务-multi-task"><a href="#多任务-multi-task" class="headerlink" title="多任务-multi task"></a>多任务-multi task</h4><p>多任务是指在一个系统中可以同时运行多个进程，即有多个独立运行的任务，每一个任务对应一个进程。</p><p>所谓同时运行的进程，其实是指由操作系统将系统资源分配给各个进程，每个进程在CPU上交替运行。</p><h4 id="多线程-thread"><a href="#多线程-thread" class="headerlink" title="多线程-thread"></a>多线程-thread</h4><p>对于完全不相关的程序而言，在同时执行时，彼此的进程也不会做数据交换的工作，而可以完全独立地运行。</p><p>进程只是资源分配的单位，线程是处理器调度的基本单位。</p><p>一个进程包含一个以上线程，一个进程中的线程只能使用该进程的资源和环境。</p><p>线程不能独立存在，必须存在于进程中。</p><p>线程也被称为负担轻的进程（light-weight process）</p><p><strong>CPU在同一时间段内执行一个程序中的多个程序段来完成工作。</strong></p><p><strong>多线程就是同时执行一个以上的线程，执行一个线程不必等待另一个线程执行完后才进行，所有线程都可以发生在同一时刻。但操作系统并没有将多个线程看作多个独立的应用去实现线程的调度和管理以及资源分配。</strong></p><blockquote><p>多任务是针对操作系统而言的，表示操作系统可以同时运行多个应用程序。<br>多线程是针对一个进程而言的，表示在一个进程内部可以同时执行多个线程。</p></blockquote><h3 id="线程的状态与生命周期"><a href="#线程的状态与生命周期" class="headerlink" title="线程的状态与生命周期"></a>线程的状态与生命周期</h3><h4 id="新建状态-newbron"><a href="#新建状态-newbron" class="headerlink" title="新建状态-newbron"></a>新建状态-newbron</h4><p>线程对象已经被分配了内存空间和其他资源，并已被初始化，但是该线程尚未被调度。此时的线程可以被调度，变成就绪状态。</p><h4 id="就绪状态-runnable"><a href="#就绪状态-runnable" class="headerlink" title="就绪状态-runnable"></a>就绪状态-runnable</h4><p>就绪状态也称为可运行状态。</p><p>处于新建状态的线程被启动后，将进入线程队列排队等待CPU资源，此时它已具备了运行的条件，也就是处于就绪状态。</p><p>原来处于阻塞状态的线程被解除阻塞后也将进入就绪状态。</p><h4 id="执行状态-running"><a href="#执行状态-running" class="headerlink" title="执行状态-running"></a>执行状态-running</h4><p>每一个Thread类及其子类的对象都有一个重要的run()方法，该方法定义了这一类线程的操作和功能。当线程对象被调度执行时，它将自动调用本对象的run()方法，从该方法的第一条语句开始执行，一直到执行完毕。</p><p>处于执行状态的线程在下列情况下将让出CPU的控制权：</p><ul><li>线程执行完毕</li><li>有比当前线程优先级更高的线程处于就绪状态</li><li>线程主动睡眠一段时间</li><li>线程在等待某一资源</li></ul><h4 id="阻塞状态-blocked"><a href="#阻塞状态-blocked" class="headerlink" title="阻塞状态-blocked"></a>阻塞状态-blocked</h4><p>一个正在执行的线程如果在某些特殊情况下，将让出CPU并暂时中止自己的执行，线程处于这种不可执行的状态被称为阻塞状态。</p><p>下边两种情况可以使得一个线程进入阻塞状态：</p><ul><li>调用sleep()或yield()方法</li><li>二是为等待一个条件变量，线程调用wait()方法；</li><li>三是该线程与另一线程join()在一起。</li></ul><p>一个线程被阻塞时它不能进入排队队列，只有当引起阻塞的原因被消除时，线程才可以转入就绪状态，重新进到线程队列中排队等待CPU资源，以便从原来的暂停处继续执行。<br>处于阻塞状态的线程通常需要由某些事件才能唤醒，至于由什么事件唤醒该线程，则取决于其阻塞的原因。<br>处于睡眠状态的线程必须被阻塞一段固定的时间，当睡眠时间结束时就变成就绪状态；因等待资源或信息而被阻塞的线程则需要由一个外来事件唤醒。</p><h4 id="消亡状态-dead"><a href="#消亡状态-dead" class="headerlink" title="消亡状态-dead"></a>消亡状态-dead</h4><p>处于消亡状态的线程不具有继续执行的能力。</p><p>线程消亡的原因：</p><ul><li>正常运行的线程完成了它的全部工作，即执行完了run()方法的最后一条语句并退出；</li><li>当进程因故停止运行时，该进程中的所有线程将被强行终止。</li></ul><p>当线程处于消亡状态、并且没有该线程对象的引用时，垃圾回收器会从内存中删除该线程对象。</p><h3 id="线程的优先级与调度"><a href="#线程的优先级与调度" class="headerlink" title="线程的优先级与调度"></a>线程的优先级与调度</h3><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>在多线程系统中，每个线程都被赋予一个执行优先级。优先级决定了线程被CPU执行的优先顺序。</p><p>Java语言中线程的优先级从低到高以整数1~10表示，共分为10级。<br><code>MIN_PRIORITY</code>：最小优先级，1。<br><code>MAX_PRIORITY</code>：最高优先级，10。<br><code>NORM_PRIORITY</code>：普通优先级，5。</p><p>对应一个新建的线程，系统会遵循如下的原则为其指定优先级。<br>（1）新建线程将继承创建它的父线程的优先级。父线程是指执行创建新线程对象语句所在的线程，它可能是程序的主线程，也可能是某一个用户自定义的线程。<br>（2）一般情况下，主线程具有普通优先级。</p><p><code>setPriority()</code>方法可以设置改变线程的优先级。</p><h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><p>调度就是指在各个线程之间分配CPU资源。<br>线程调度有两种模型：分时模型和抢占模型。</p><p><code>分时模型</code>：</p><p>CPU资源是按照时间片来分配的，获得CPU资源的线程只能在指定的时间片内执行，一旦时间片使用完毕，就必须把CPU让给另一个处于就绪状态的线程，线程本身不会让出CPU。</p><p><code>强占模型</code>：</p><p>当前活动的线程一旦获得执行权，将一直执行下去，直到执行完或由于某种原因主动放弃执行权。<br>高优先级的线程应该不时地主动进入”睡眠”状态。</p><h2 id="Java的Thread线程类与Runnable接口"><a href="#Java的Thread线程类与Runnable接口" class="headerlink" title="Java的Thread线程类与Runnable接口"></a>Java的Thread线程类与Runnable接口</h2><p>实现多线程的方法有两种：继承java.lang包中的Thread类；用户在定义自己的类中实现Runnable接口。</p><h3 id="利用Thread类的子类来创建线程"><a href="#利用Thread类的子类来创建线程" class="headerlink" title="利用Thread类的子类来创建线程"></a>利用Thread类的子类来创建线程</h3><ul><li>Thread类的构造方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public Thread()</td><td style="text-align:center">创建一个线程对象,此线程对象的名称是”Thread-n”的形式，其中n是一个整数。使用这个构造方法,必须创建Thread类的一个子类并覆盖其run()方法</td></tr><tr><td style="text-align:center">public Thread(String name)</td><td style="text-align:center">创建一个线程对象,参数name指定了线程的名称</td></tr><tr><td style="text-align:center">public Thread(Runnable target)</td><td style="text-align:center">创建一个线程对象,此线程对象的名称是”Thread-n”的形式,其中n是一个整数。参数target的run()方法将被线程对象调用,作为其执行代码</td></tr><tr><td style="text-align:center">public Thread(Runnable target, String name)</td><td style="text-align:center">功能同上,参数target的run()方法将被线程对象调用,作为其执行代码。参数name指定了新创建线程的名称</td></tr></tbody></table></div><ul><li>Thread类的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">构造方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static Thread currentThread()</td><td style="text-align:center">返回当前正在执行的线程对象</td></tr><tr><td style="text-align:center">public final String getName()</td><td style="text-align:center">返回线程的名称</td></tr><tr><td style="text-align:center">public void start()</td><td style="text-align:center">使该线程由新建状态变为就绪状态。如果该线程已经是就绪状态,则产生IllegalStateException异常</td></tr><tr><td style="text-align:center">public void run()</td><td style="text-align:center">线程应执行的任务</td></tr><tr><td style="text-align:center">public final boolean isAlive()</td><td style="text-align:center">如果线程处于就绪、阻塞或运行状态,则返回true；如果线程处于新建且没有启动的状态，或已经结束，则返回false</td></tr><tr><td style="text-align:center">public void interrupt()</td><td style="text-align:center">当线程处于就绪状态或执行状态时,给该线程设置中断标志；一个正在执行的线程让睡眠线程调用该方法,则可导致睡眠线程发生InterruptedException异常而唤醒自己,从而进入就绪状态</td></tr><tr><td style="text-align:center">public static boolean isInterrupted()</td><td style="text-align:center">判断该线程是否被中断,若是返回true，否则返回false</td></tr><tr><td style="text-align:center">public final void join()</td><td style="text-align:center">暂停当前线程的执行,等待调用该方法的线程结束后再继续执行本线程</td></tr><tr><td style="text-align:center">public final int getPriority()</td><td style="text-align:center">返回线程的优先级</td></tr><tr><td style="text-align:center">public final void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级。如果当前线程不能修改这个线程,则产生SecurityException异常。如果参数不在所要求的优先级范围内,则产生llegalArgumentException异常</td></tr><tr><td style="text-align:center">public static void sleep(long millis)</td><td style="text-align:center">为当前执行的线程指定睡眠时间。参数millis是线程睡眠的毫秒数。如果这个线程已经被别的线程中断,则产生InterruptedException异常</td></tr><tr><td style="text-align:center">public static void yield()</td><td style="text-align:center">暂停当前线程的执行,但该线程仍处于就绪状态,不转为阻塞状态。该方法只给同优先级线程以执行的机会</td></tr></tbody></table></div><p>要在Thread的子类里激活线程，必须做好以下两件事情：</p><ul><li>此类必须是继承自Thread类；</li><li>线程所要执行的代码必须写在run()方法内。</li></ul><p>run()方法是线程执行的起点，必须通过定义run()方法来为线程提供代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 类名 <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">类里的成员变量;</span><br><span class="line">类里的成员方法;</span><br><span class="line">修饰符 run() &#123;</span><br><span class="line">线程的代码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>run()方法规定了线程要执行的任务，但一般不是直接调用run()方法，而是通过线程的start()方法来启动线程。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Thread类的子类来创建线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String who;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String str)</span> &#123;</span><br><span class="line">who = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep((<span class="type">int</span>)(<span class="number">1000</span>*Math.random()));</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">System.out.println(who + <span class="string">&quot;正在运行!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;你&quot;</span>);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">she</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;她&quot;</span>);</span><br><span class="line">you.start();</span><br><span class="line">she.start();</span><br><span class="line">System.out.println(<span class="string">&quot;主方法main()运行结束!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主方法main()运行结束!</span><br><span class="line">你正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">你正在运行!</span><br></pre></td></tr></table></figure><blockquote><p>main()方法本身也是一个线程，</p></blockquote><h3 id="用Runnable接口来创建线程"><a href="#用Runnable接口来创建线程" class="headerlink" title="用Runnable接口来创建线程"></a>用Runnable接口来创建线程</h3><p>Runnable接口是Java语言中实现线程的接口，定义在java.lang包中，其中只提供了一个抽象方法run()的声明。</p><p>但是Runnable接口并没有任何对线程的支持，还必须创建Thread类的实例，这一点通过Thread(Runnable target)类的构造方法来实现。</p><p>除了利用Thread类的子类创建线程外，另一种就是直接利用Runnable接口和线程的构造方法Thread(Runnable target)来创建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Runnable接口来创建线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String who;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String str)</span> &#123;</span><br><span class="line">who = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep((<span class="type">int</span>)(<span class="number">1000</span>*Math.random()));<span class="comment">//sleep要声明Thread</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">System.out.println(who + <span class="string">&quot;正在运行!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(who + <span class="string">&quot;正在运行!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;你&quot;</span>);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">she</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;她&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(you);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(she);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;你&quot;</span>);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">she</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;她&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(you);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(she);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">you.join();</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t2.start();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">she.join();</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;主方法main()运行结束!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当某一线程调用<code>join()</code>方法时，则其他线程会等到该线程结束后才开始执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">你正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">你正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">她正在运行!</span><br><span class="line">主方法main()运行结束!</span><br></pre></td></tr></table></figure><blockquote><p>直接继承Thread类的优点是编写简单，可以直接操纵线程；缺点是若继承Thread类，就不能再继承其他类。<br>使用Runnable接口的特点是：可以将Thread类与所要处理的任务的类分开，形成清晰的模型；还可以从其他类继承，从而实现多重继承的功能。</p></blockquote><ul><li>获取线程中的名字</li></ul><p>若直接使用继承Thread类的子类：在类中this即指当前线程；<br>若是使用实现Runnable接口的类：要在此类中获得当前线程的引用，必须使用Thread.currentThread()方法。</p><p>当可运行对象包含线程对象时，即线程对象是可运行对象的成员时，则在run()方法中可以通过调用Thread.currentThread()方法来获得正在运行的线程的引用。<br>当可运行对象不包含线程对象时，在可运行对象run()方法中需要使用语句Thread.currentThread().getName()来返回当前正在运行线程的名字。</p><h3 id="线程间的数据共享"><a href="#线程间的数据共享" class="headerlink" title="线程间的数据共享"></a>线程间的数据共享</h3><p>同一进程的多个线程间可以共享相同的内存单元，并可利用这些共享单元来实现数据交换、实时通信和必要的同步操作。</p><p>对于同一可运行对象的多个线程，可运行对象的成员变量自然就是这些线程共享的数据单元。</p><p>使用Runnable接口可以轻松实现多个线程共享相同数据，只要用同一可运行对象作为参数创建多个线程就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Thread子类程序来模拟航班售票系统，实现3个售票窗口发售某次航班的10张机票，一个售票窗口用一个线程来表示。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrheadSale</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>.getNmae()+<span class="string">&quot; 售机票第&quot;</span> + tickets-- + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ThreadSale</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadSale</span>();</span><br><span class="line"><span class="type">ThreadSale</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadSale</span>();</span><br><span class="line"><span class="type">ThreadSale</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadSale</span>();</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 售机票第10号</span><br><span class="line">Thread-0 售机票第9号</span><br><span class="line">Thread-2 售机票第10号</span><br><span class="line">Thread-2 售机票第9号</span><br><span class="line">Thread-2 售机票第8号</span><br><span class="line">Thread-2 售机票第7号</span><br><span class="line">Thread-2 售机票第6号</span><br><span class="line">Thread-2 售机票第5号</span><br><span class="line">Thread-0 售机票第8号</span><br><span class="line">Thread-1 售机票第10号</span><br><span class="line">Thread-2 售机票第4号</span><br><span class="line">Thread-0 售机票第7号</span><br><span class="line">Thread-0 售机票第6号</span><br><span class="line">Thread-0 售机票第5号</span><br><span class="line">Thread-2 售机票第3号</span><br><span class="line">Thread-1 售机票第9号</span><br><span class="line">Thread-0 售机票第4号</span><br><span class="line">Thread-0 售机票第3号</span><br><span class="line">Thread-0 售机票第2号</span><br><span class="line">Thread-0 售机票第1号</span><br><span class="line">Thread-2 售机票第2号</span><br><span class="line">Thread-1 售机票第8号</span><br><span class="line">Thread-1 售机票第7号</span><br><span class="line">Thread-1 售机票第6号</span><br><span class="line">Thread-2 售机票第1号</span><br><span class="line">Thread-1 售机票第5号</span><br><span class="line">Thread-1 售机票第4号</span><br><span class="line">Thread-1 售机票第3号</span><br><span class="line">Thread-1 售机票第2号</span><br><span class="line">Thread-1 售机票第1号</span><br></pre></td></tr></table></figure><p>创建了三个售票口对象分开分线程卖票，tickets并不共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Runnable接口程序来模拟航班售票系统，利用同一可运行对象实现3个售票窗口发售某次航班的10张机票，一个售票窗口用一个线程来表示。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSale</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 售机票第&quot;</span> + tickets-- + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ThreadSale</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadSale</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;第1售票窗口&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;第2售票窗口&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;第3售票窗口&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第1售票窗口售机票第10号</span><br><span class="line">第3售票窗口售机票第9号</span><br><span class="line">第2售票窗口售机票第8号</span><br><span class="line">第1售票窗口售机票第7号</span><br><span class="line">第3售票窗口售机票第6号</span><br><span class="line">第3售票窗口售机票第3号</span><br><span class="line">第3售票窗口售机票第2号</span><br><span class="line">第2售票窗口售机票第5号</span><br><span class="line">第1售票窗口售机票第4号</span><br><span class="line">第3售票窗口售机票第1号</span><br></pre></td></tr></table></figure><p>即每个线程调用的是同一个ThreadSale对象中的run()方法，访问的是同一个对象中的变量tickets，这种情况下变量tickets才是共享的资源。</p><p>Runnable接口适合处理多线程访问同一资源的情况，并且可以避免由于Java语言的单继承性带来的局限。</p><h2 id="多线程的同步控制"><a href="#多线程的同步控制" class="headerlink" title="多线程的同步控制"></a>多线程的同步控制</h2><p>当一个线程对共享的数据进行操作时，应使之成为一个”原子操作”，即在没有完成相关操作之前，<br>不允许其他线程打断它，否则就会破坏数据的完整性，必然会得到错误的处理结果，这就是线程的同步。</p><p><code>线程间互斥</code>：所以说被多个线程共享的数据在同一时刻只允许一个线程处于操作之中。</p><p>线程执行过程中，在执行有关的若干个动作时，没有能够保证独占相关的资源，而是在对该资源进行处理时又被其他线程的操作打断或干扰而引起的。</p><p><code>线程同步</code>：必须保证线程在一个完整的操作所有动作的执行过程中，都占有相关资源而不被打断，这就是线程同步的概念。</p><p><code>临界资源</code>、<code>同步资源</code>：多线程共享的资源或数据。<br><code>临界代码</code>、<code>临界区</code>：每个线程中访问临界资源的那一段代码。<br><code>临界资源</code>：在一个时刻只能被一个线程访问的资源<br><code>临界区</code>：访问临界资源的那段代码</p><p>在Java语言中每个对象都有一个”互斥锁”与之相连。当线程A获得了一个对象的互斥锁后，线程B若也想获得该对象的互斥锁，就必须等待线程A完成规定的操作并释放出互斥锁后，才能获得该对象的互斥锁，并执行线程B中的操作。</p><p>为了保证互斥，Java语言使用synchronized关键字来标识同步的资源，这里的资源可以是一种类型的数据，也就是对象，也可以是一个方法，还可以是一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步语句</span></span><br><span class="line">Synchronized(对象) &#123;</span><br><span class="line">临界代码段</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> 返回类型 方法名() &#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法2</span></span><br><span class="line"><span class="keyword">public</span> 返回类型 方法名() &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized的功能是：首先判断对象或方法的互斥锁是否在，若在就获得互斥锁，然后就可以执行紧随其后的临界代码段或方法体；如果对象或方法的互斥锁不在（已被其他线程拿走），就进入等待状态，直到获得互斥锁。</p><p>（1）synchronized锁定的通常是临界代码。由于所有锁定同一个临界代码的线程之间在synchronized代码块上是互斥的，也就是说，这些线程的synchronized代码块之间是串行执行的，不再是互相交替穿插并发执行，因而保证了synchronized代码块操作的原子性。<br>（2）synchronized代码块中的代码数量越少越好，包含的范围越小越好，否则就会失去多线程并发执行的很多优势。<br>（3）若两个或多个线程锁定的不是同一个对象，则它们的synchronized代码块可以互相交替穿插并发执行。<br>（4）所有的非synchronized代码块或方法，都可自由调用。如线程A获得了对象的互斥锁，调用对象的synchronized代码块，其他线程仍然可以自由调用该对象的所有非synchronized方法和代码。<br>（5）任何时刻，一个对象的互斥锁只能被一个线程所拥有。<br>（6）只有当一个线程执行完它所调用对象的所有synchronized代码块或方法时，该线程才会释放这个对象的互斥锁。<br>（7）临界代码中的共享变量应定义为private型。否则，其他类的方法可能直接访问和操作该共享变量，这样synchronized的保护就失去了意义。<br>（8）由于(7)的原因，只能用临界代码中的方法访问共享变量。故锁定的对象通常是this，即通常格式都是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;…&#125;</span><br></pre></td></tr></table></figure><p>（9）一定要保证，所有对临界代码中共享变量的访问与操作均在synchronized代码块中进行。<br>（10）对于一个static型的方法，即类方法，要么整个方法是synchronized，要么整个方法不是synchronized。<br>（11）如果synchronized用在类声明中，则表示该类中的所有方法都是synchronized的。</p><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><p>java.lang.Object类的wait()、notify()和notifyAll()等方法为线程间的通信提供了有效手段。</p><ul><li>Object类中用于线程间通信的常用方法</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void wait()</td><td style="text-align:center">如果一个正在执行同步代码(synehronized)的线程A执行了wait()调用(在对象x上)，该线程暂停执行而进入对象x的等待队列，并释放已获得的对象x的互斥锁。线程A要一直等到其他线程在对象x上调用notify( )或notifyAll()方法，才能够在重新获得对象x的互斥锁后继续执行(从wait()语句后继续执行)</td></tr><tr><td style="text-align:center">public void notify()</td><td style="text-align:center">唤醒正在等待该对象互斥锁的第一个线程</td></tr><tr><td style="text-align:center">public void notifyAll()</td><td style="text-align:center">唤醒正在等待该对象互斥锁的所有线程，具有最高优先级的线程首先被唤醒并执行</td></tr></tbody></table></div><blockquote><p>wait()、notify()和notifyAll()只能在同步代码块里调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个线程模拟存票、售票古城，但要求每存入一张票，就售出一张票，售出后，再存入，直至售完为止。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tickets</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> size;<span class="comment">//总票数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//票号</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">available</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否有票可售</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tickets</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> &#123;<span class="comment">//同步方法存票</span></span><br><span class="line"><span class="keyword">if</span>(available) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;存入第【&quot;</span> + (++number) + <span class="string">&quot;】号票&quot;</span>);</span><br><span class="line">available = <span class="literal">true</span>;</span><br><span class="line">notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法取票</span></span><br><span class="line"><span class="keyword">if</span>(available) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;售出第【&quot;</span> + (++number) + <span class="string">&quot;】号票&quot;</span>);</span><br><span class="line">available = <span class="literal">false</span>;</span><br><span class="line">notify();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (number == size) &#123;<span class="comment">//售完最后一张票后，设置一个结束标志</span></span><br><span class="line">number = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//存票</span></span><br><span class="line"><span class="type">Tickets</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Tickets t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(t.number &lt; t.size) &#123;</span><br><span class="line">t.put();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//售票</span></span><br><span class="line"><span class="type">Tickets</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Tickets t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(t.number &lt;= t.size) &#123;</span><br><span class="line">t.sell();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App11_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Tickets</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tickets</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Producer</span>(t).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Consumer</span>(t).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本章小结-5"><a href="#本章小结-5" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>线程(thread)是指程序的运行流程。多线程机制可以同时运行多个程序块，使程序运行的效率变得更高，也可以克服传统程序语言所无法设计的问题。</li><li>多任务与多线程是两个不同的概念。多任务是针对操作系统而言的，表示操作系统可以同时运行多个应用程序；而多线程是针对一个程序而言的，表示在一个程序内部可以同时执行多个线程。</li><li>创建线程有两种方法：一种是继承java.lang包中的Thread类；另一种是用户在定义自己的类中实现Runnable接口。</li><li>run()方法给出了线程要执行的任务。若是派生自Thread类，必须把线程的程序代码编写在run()方法内，实现覆盖操作；若是实现Runnable接口，必须在实现Runnable接口的类中定义run()方法。</li><li>如果在类中要激活线程，必须先做好下列两件事情：①此类必须是派生自Thread类或实现Runnable接口，使自己成为它的子类；②线程的任务必须写在run()方法内。</li><li>每一个线程，在其创建和消亡之前，均会处于下列五种状态之一：新建状态、就绪状态、运行状态、阻塞状态和消亡状态。</li><li>阻塞状态的线程一般情况下可由下列情况所产生：(1)该线程调用对象的wait()方法；(2)该线程本身调用了sleep()方法；(3)该线程和另一个线程join()在一起；(4)有优先级更高的线程处于就绪状态。</li><li>解除阻塞的原因有：(1)如果线程是由调用对象的wait()方法所阻塞的，则该对象的notify()方法被调用时可解除阻塞；(2)线程进入睡眠(sleep)状态，但指定的睡眠时间到了。</li><li>Thread类中的sleep()方法可以用来控制线程睡眠时间，睡眠时间的长短全由sleep()方法中的参数而定，单位为1/1000s。</li><li>线程在运行时，因不需要外部的数据或方法，就不必关心其他线程的状态或行为，这样的线程称为独立、不同步的或是异步执行的。</li><li>被多个线程共享的数据在同一时刻只允许一个线程处于操作之中，这就是同步控制。</li><li>当一个线程对共享的数据进行操作时，在没有完成相关操作之前，应使之成为一个”原子操作”，即不允许其他线程打断它，否则可能会破坏数据的完整性，而得到错误的处理结果。</li><li>synchronized锁定的是一个具体对象，通常是临界区对象。所有锁定同一个对象的线程之间，在synchronized代码块上是互斥的，也就是说，这些线程的synchronized代码块之间是串行执行的，不再是互相交替穿插并发执行，因而保证了synchronized代码块操作的原子性。</li><li>由于所有锁定同一个对象的线程之间，在synchronized代码块上是互斥的，这些线程的synchronized代码块之间是串行执行的，故synchronized代码块中的代码数量越少越好，包含的范围越小越好，否则多线程就会失去很多并发执行的优势。</li><li>任何时刻，一个对象的互斥锁只能被一个线程所拥有。</li><li>只有当一个线程执行完它所调用对象的所有synchronized代码块或方法时，该线程才会自动释放这个对象的互斥锁。</li><li>一定要保证，所有对临界区共享变量的访问与操作均在synchronized代码块中进行。</li></ul><h2 id="课后习题-5"><a href="#课后习题-5" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>简述线程的基本概念。程序、进程、线程的关系是什么？</li><li>什么是多线程？为什么程序的多线程功能是必要的？</li><li>多线程与多任务的差异是什么？</li><li>线程有哪些基本状态？这些状态是如何定义的？</li><li>Java程序实现多线程有哪两个途径？</li><li>在什么情况下，必须以类实现Runnable接口来创建线程？</li><li>什么是线程的同步？程序中为什么要实现线程的同步？是如何实现同步的？</li><li>假设某家银行可接受顾客的存款，每进行一次存款，便可计算出存款的总额。现有两名顾客，每人分三次，每次存入100元钱。试编程来模拟顾客的存款操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Bank</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;存入&quot;</span> + number + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.money += number;</span><br><span class="line">System.out.println(<span class="string">&quot;银行剩余&quot;</span> + <span class="built_in">this</span>.money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (number &lt;= <span class="built_in">this</span>.money) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;取出&quot;</span> + number + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.money -= number;</span><br><span class="line">            System.out.println(<span class="string">&quot;银行剩余&quot;</span> + <span class="built_in">this</span>.money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="type">Bank</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(String name, Bank b)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;顾客&quot;</span> + name);</span><br><span class="line">b.put(<span class="number">100</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D11_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Bank</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;No1&quot;</span>, b).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;No2&quot;</span>, b).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记2</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA程序设计基础-第6版陈国君2006-学习笔记1</title>
    <link href="http://hibiscidai.com/2021/12/20/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://hibiscidai.com/2021/12/20/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2021-12-20T12:00:00.000Z</published>
    <updated>2022-05-10T14:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/12/20/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-%E7%AC%AC6%E7%89%88%E9%99%88%E5%9B%BD%E5%90%9B2006-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.png" class="" title="JAVA程序设计基础-第6版陈国君2006-学习笔记1"><p>JAVA程序设计基础-第6版陈国君2006-学习笔记1</p><span id="more"></span><p>[TOC]</p><h1 id="JAVA程序设计基础-第6版陈国君2006-学习笔记1"><a href="#JAVA程序设计基础-第6版陈国君2006-学习笔记1" class="headerlink" title="JAVA程序设计基础-第6版陈国君2006-学习笔记1"></a>JAVA程序设计基础-第6版陈国君2006-学习笔记1</h1><p>书本1-5章内容，介绍程序设计基础。</p><h1 id="第一章-Java语言概述"><a href="#第一章-Java语言概述" class="headerlink" title="第一章 Java语言概述"></a>第一章 Java语言概述</h1><h2 id="Java语言的诞生与发展"><a href="#Java语言的诞生与发展" class="headerlink" title="Java语言的诞生与发展"></a>Java语言的诞生与发展</h2><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><ul><li>简单易学<br>抛弃C++中指针(pointer)、联合体(unions)、结构体(structs)</li><li>面向对象<br>继承、封装、多态</li><li>平台无关性<br>依靠虚拟机JVM在目标代码级实现平台无关性</li><li>分布式<br>数据分组和操作分布</li><li>可靠性</li><li>安全性</li><li>支持多线程</li><li>支持网络编程</li><li>编译与解释并存</li></ul><h2 id="Java语言规范"><a href="#Java语言规范" class="headerlink" title="Java语言规范"></a>Java语言规范</h2><p><code>API</code>：应用程序接口（Application Program Interface，API）<br><code>Java SE</code>：Java平台标准版（Java Platfrom Standard Edition）<br><code>Java ME</code>：Java平台精简版（Java Platfrom Micro Edition）<br><code>Java EE</code>：Java平台企业版（Java Platfrom Enterprise Edition）</p><h2 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h2><p><code>.java文件</code>==》<code>编译器</code>—&gt;<code>.class字节码文件</code>==》<code>解释器</code></p><p>编译（compile）和解释（interpret）</p><p>通过编译器（compiler），Java程序会被转换为与平台无关（platform-independent）的机器码</p><p>字节码是Java虚拟机（Java Virtual Machine，JVM）的指令组</p><h2 id="Java程序的种类和结构"><a href="#Java程序的种类和结构" class="headerlink" title="Java程序的种类和结构"></a>Java程序的种类和结构</h2><h3 id="应用程序（Application）"><a href="#应用程序（Application）" class="headerlink" title="应用程序（Application）"></a>应用程序（Application）</h3><p>从命令行运行的程序，它可以在Java平台上独立运行。</p><h3 id="小程序（Applet）"><a href="#小程序（Applet）" class="headerlink" title="小程序（Applet）"></a>小程序（Applet）</h3><p>嵌在HTML（超文本标记语言）文档中的Java程序。</p><blockquote><p>小程序主类继承自系统类JApplet</p></blockquote><h3 id="Java语言结构"><a href="#Java语言结构" class="headerlink" title="Java语言结构"></a>Java语言结构</h3><ul><li>package语句（0个或1个）</li><li>import语句（0个或多个）</li><li>类定义（1个或多个）</li></ul><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>Java 程序比较特殊，它必经过编译的过程，然后再利用解释的方式来执行。即首先要将源程序(.java 文件)通过编译器将其转换成与平台无关的字节码文件(.class文件)，然后再通过解释器来解释执行字节码文件。</li><li>字节码(byte codles）最大的好处是可跨平台执行，可让程序”编写一次，到处运行(Write once, run anywhere)”的梦想成真。</li><li>Java 程序可分为两种：一种是 Application，称为 Java 应用程序；另一种是 Applet，称为Java 小程序。Java 应用程序是指可以在 Java 平台上独立运行的一种程序；而 Java 小程序则是内嵌在 HTML文件里，需要在浏览器的支持下才能运行。</li><li>无论是应用程序还是小程序都必须有一个主类，主类是程序执行的人口点，应用程序的主类是包含有main()方法的类，但应用程序的主类并不一定要求是 public 类；小程序的主类是一个继承自系统类 JApplet 的子类，且该类必须是 public 类。</li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>Java 语言有哪些特点？</li></ul><p>简单易学、面向对象、平台无关性、分布式、可靠性、安全性、支持多线程、支持网络编程、编译与解释并存</p><ul><li>什么是Java 虚拟机？</li></ul><p>可以运行Java字节码的假想计算机，JVM实际上是一个字节码解释器。</p><ul><li>什么是字节码？采用字节码的最大好处是什么？</li></ul><p>字节码是JVM的指令组，和CPU上微指令码相似。</p><p>Java程序编译成字节码后文件尺寸较小，便于网络传输。<br>字节码可以跨平台运行。</p><ul><li>什么是平台无关性？Java语言是怎样实现平台无关性的？</li></ul><p>字节码无论使用那种操作系统，都可以在含有JVM的平台上运行。</p><p>Java语言源码为.java文件，通过编译器编译后，Java程序会被转换成与平台无关的机器码（字节码）class文件。</p><ul><li>Java 语言程序有几种？每种程序的结构包含哪几个方面？</li></ul><p>两种，应用程序和小程序。</p><p>package语句、import语句、类定义</p><ul><li>什么是Java程序的主类？应用程序与小程序的主类有何不同？</li></ul><p>一个程序中可以有多个类，但是只能有一个类是主类。在Java应用程序中，这个主类是指包含<code>main()</code>方法的类。主类是Java程序执行的入口点。</p><p>在Java小程序里，这个主类是一个继承自系统类JApplet的子类。<br>应用程序的主类不一定要求是public类，但小程序的主类一定要求是public类。</p><h1 id="第二章-JAVA语言开发环境"><a href="#第二章-JAVA语言开发环境" class="headerlink" title="第二章 JAVA语言开发环境"></a>第二章 JAVA语言开发环境</h1><h2 id="Java开发工具"><a href="#Java开发工具" class="headerlink" title="Java开发工具"></a>Java开发工具</h2><p>JDK，Java开发工具（Java SE Development Kits）<br>JRE，Java运行环境（Java Runtime Environment）<br>JDK由Java API、Java运行环境和一组建立、测试工具的Java实用程序等组成<br>API（Application Programming Interface）,Java API包括一些重要的语言结构以及基本图形、网络和文件I/O等。</p><ul><li>JDK的bin目录：</li></ul><p><code>javac.exe</code>：Java编译器，将Java源代码文件转换成字节码文件；<br><code>java.exe</code>：Java解释器，执行Java程序的字节码文件；<br><code>appletviewer.exe</code>：小程序浏览器，执行嵌入在HTML文件中的Java小程序的Java浏览器；<br><code>javadoc.exe</code>：根据Java源代码及注释语句生成Java程序的HTML格式的帮助文档；<br><code>jdb.exe</code>：Java调试器，可以逐行执行程序、设置断电和检查变量；<br><code>jar.exe</code>：创建扩展名为<code>.jar</code>（Java Archive，Java归档）的压缩文件，与Zip压缩文件格式相同；<br><code>jmod.exe</code>：创建扩展名为<code>.jmod</code>的压缩文件。</p><h3 id="JDK的下载与安装"><a href="#JDK的下载与安装" class="headerlink" title="JDK的下载与安装"></a>JDK的下载与安装</h3><ul><li>下载JDK</li></ul><p><code>jdk-10_windows-x64_bin.exe</code></p><ul><li>安装JDK</li></ul><p>JDK目录6个</p><p><code>bin</code>：该文件存放javac.exe、java.exe、jmod.exe、jar.exe等命令程序；<br><code>conf</code>：该文件夹存放一些可供开发者编辑的Java系统配置文件；<br><code>include</code>：该文件夹存放支持本地代码编程与C程序相关的头文件；<br><code>jmods</code>：该文件夹存放预编译的Java模块，相当于JDK9之前的.jar文件；<br><code>legal</code>：该文件夹存放有关Java每个模块的版权声明和许可协议等；<br><code>lib</code>：该文件存放Java类库。</p><h3 id="设置JDK"><a href="#设置JDK" class="headerlink" title="设置JDK"></a>设置JDK</h3><p>Ptah，设置供操作系统去寻找可执行文件（如.exe、.com、.bat等），对Java而言即Java的安装路径。<br>ClassPath，JVM执行Java程序时搜索类(.class)文件的路径(类所在的文件夹)的顺序，以最先找到的为准。</p><h2 id="JDK帮助文档下载与安装"><a href="#JDK帮助文档下载与安装" class="headerlink" title="JDK帮助文档下载与安装"></a>JDK帮助文档下载与安装</h2><h2 id="JDK的使用"><a href="#JDK的使用" class="headerlink" title="JDK的使用"></a>JDK的使用</h2><blockquote><p>源文件名是由操作系统管理的，所以在使用javac命令编译源文件时，文件名是不区分大小写的。</p></blockquote><h2 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>JDK的帮助文档（Java docs）与Java开发工具（Java Development Kit）JDK同样是编写Java程序的必备工具。他们均可在Oracle公司的网站免费获得。</li><li>JDK的核心是Java API，所谓API就是指Java所提供的公开发人员使用的标准类库。</li><li>在使用Java语言编译与运行程序之前，必须先设置熊环境变量Path，Path环境变量的作用是设置供操作系统去寻找可执行文件的路径的顺序；在Java10中不用设置类路径ClassPath，Java程序完全可以正常编译与运行。</li><li>Java应用程序源文件的命名规则；首先源文件的扩展名必须是.java；如果源文件中有多个类，则最多只能有一个public类，如果有，那么源文件的名字必须与这个public类的名字相同（文件名字符的大小写可以与public类名的大小写不同）；如果源文件没有public类，那么源文件的名字由用户任意命名。但需要注意的是：包含有main()方法的类是应用程序的主类，主类无论是否是public类，但执行时必须输入主类名，即<code>java主类名</code>，因为主类main()方法是程序执行的起始点。</li><li>mian()在Java应用程序里是一个相当特殊的方法，它一定要声明成public，使得在类的其他地方能调用到它，且main()方法没有返回值，所以在它之前要加上void关键字。</li><li>System.out 是指标准输出，其后所跟的字符串println是由print与line所组成，其意义是将它后面括号中的内容输出到标准输出设备——显示器上。</li><li>由于Java程序是由类所组成的，所以在完整的Java程序里，至少必须有一个类。</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>什么是JDK？什么是JRE？JDK与JRE的关系是什么？</li></ul><p>JDK，Java开发工具（Java SE Development Kits）<br>JRE，Java运行环境（Java Runtime Environment）<br>JDK = Java API + JRE + 一组建立、测试工具的Java实用程序</p><ul><li>Java开发工具JDK10安装后，在安装文件夹下生成几个子文件夹？这些子文件夹中包含的内容有哪些？</li></ul><p>6个<br><code>bin</code>：该文件存放javac.exe、java.exe、jmod.exe、jar.exe等命令程序；<br><code>conf</code>：该文件夹存放一些可供开发者编辑的Java系统配置文件；<br><code>include</code>：该文件夹存放支持本地代码编程与C程序相关的头文件；<br><code>jmods</code>：该文件夹存放预编译的Java模块，相当于JDK9之前的.jar文件；<br><code>legal</code>：该文件夹存放有关Java每个模块的版权声明和许可协议等；<br><code>lib</code>：该文件存放Java类库。</p><ul><li>环境变量Path和ClassPath的作用是什么？如果设置Path环境变量？</li></ul><p>Ptah，设置供操作系统去寻找可执行文件（如.exe、.com、.bat等），对Java而言即Java的安装路径。<br>ClassPath，JVM执行Java程序时搜索类(.class)文件的路径(类所在的文件夹)的顺序，以最先找到的为准。</p><ul><li>编写Java程序有哪些注意事项？</li></ul><p>1）源文件扩展名必须是.java；<br>2）如果源文件中有多个类，则最多只能有一个public类，如果有，那么源文件的名字必须与这个public类的名字相同（文件名字符的大小写可以与public类名的大小写不同）；<br>3）如果源文件没有public类，那么源文件的名字由用户任意命名。</p><ul><li><p>Java应用程序源文件的命名有什么规定？</p></li><li><p>Java应用程序的主类是什么样的类？</p></li></ul><p>包含有main()方法的类是Java应用程序的主类，主类无论是否是public类，执行程序必须输入主类名。</p><ul><li>如何在命令行方式下编译与运行Java应用程序？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac hello.java</span><br><span class="line">java hello</span><br></pre></td></tr></table></figure><h1 id="第三章-Java语言基础"><a href="#第三章-Java语言基础" class="headerlink" title="第三章 Java语言基础"></a>第三章 Java语言基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>将数据指定给变量，就是将数据存储到对应的内存空间；<br>调用变量，就是将对应的内存空间中的数据取出来。</p><p>计算机语言将数据按其性质进行分类，每一类成为一种数据类型（data type）。数据类型定义了数据的性质、取值范围、存储方式以及对数据所能进行的运算和操作。</p><p>Java语言中的数据类型分为两大类：一类是基本数据类型（primitve types），在内存中存放给的是数据值本身；另一类是引用数据类型（reference types），简称引用类型，也称为对象引用，复合数据类型。其在内存中存放的是指向该数据的地址，不是数据值本身，它往往由多个基本数据类型组成。</p><p>每种基本数据类型的数据所占内存和大小是固定的，与软硬件环境无关。</p><p>基本数据类型：整型、浮点型、逻辑型、字符型<br>引用数据类型：类、数组、接口</p><p>4类8种基本类型，4整型、2浮点型、1布尔型、1字符型</p><ul><li>整形：byte，short，int，long</li><li>浮点型：float，double</li><li>布尔型：boolean</li><li>字符型：char</li></ul><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li>十进制：用多个0~9的数字表示，如123和-100，其首位不能为0。</li><li>八进制：以0开头，后跟多个0~7的数字，如0123。</li><li>十六进制：以0x或0X开头，后跟多个0~9的数字或a~f的小写字母或A~F的大写字母，a~f或A~F均表示值10~15，如0X123E。</li></ul><p>字节型（byte）、短整型（short）、整型（int）、长整型（long）</p><p>每种整形的数据都是带符号位的。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">数据位</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">byte(字节型)</td><td style="text-align:center">8</td><td style="text-align:center">-128~127，即 $ -2^{7} $ ~ $ 2^{7} -1 $</td></tr><tr><td style="text-align:center">short(短整型)</td><td style="text-align:center">16</td><td style="text-align:center">-32768~32767,即 $ -2^{15} $ ~ $ 2^{15} -1 $</td></tr><tr><td style="text-align:center">int(整型)</td><td style="text-align:center">32</td><td style="text-align:center">-2147483648 ~ 2147483647,即 $ -2^{31} $ ~ $ 2^{31} -1 $</td></tr><tr><td style="text-align:center">long(长整型)</td><td style="text-align:center">64</td><td style="text-align:center">-9223372036854775808 ~ 9223372036854775807,即 $ -2^{63} $ ~ $ 2^{63} -1 $</td></tr></tbody></table></div><blockquote><p>一个整数隐含为整型(int型)。当要将一个整数强制表示为长整数时，需在后边加字母l或者L。所以若声明long型变量的值超过int型的取值范围时，如果数的后边不加l或L，系统会认是int型出错。</p></blockquote><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Java语言用浮点型表示数学中的实数（浮点数），也就是既有整数部分又有小数部分的数。</p><ul><li>浮点数表示方式</li></ul><p>标准计数法：由证书部分、小数点和小数部分构成，如3.0,3.1415等。<br>科学计数法：由十进制证书、小数点、小数和指数部分构成，指数部分由字母E或者e跟上带正负号的整数表示，如123.45可以表示为1.2345E+2。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">数据位</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">float(单精度浮点)</td><td style="text-align:center">32</td><td style="text-align:center">负数范围：-3.402823E+38 ~ -1.4E-45 <br> 正数范围：1.4E-45 ~ 3.4028235E+38</td></tr><tr><td style="text-align:center">double(双精度浮点)</td><td style="text-align:center">64</td><td style="text-align:center">负数范围：-1.7976931348623157E+308 ~ -4.9E-324 <br> 正数范围：4.9E-324 ~ 1.7976931348623157E+308</td></tr></tbody></table></div><h3 id="布尔型-逻辑型"><a href="#布尔型-逻辑型" class="headerlink" title="布尔型(逻辑型)"></a>布尔型(逻辑型)</h3><p>true<br>false</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>Java语言中的字符采用的是Unicode字符集编码方案，在内存中战2字节，是16位无符号的整数，一共有65536个。Unicode字符是用 \u0000 到 \uFFF 之间的十六进制数值来表示。Unicode字符前128个字符刚好是ASCII表。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Java语言的基本数据类型</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">关键字</th><th style="text-align:center">占用字节数</th><th style="text-align:center">默认数值</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">布尔型</td><td style="text-align:center">boolean</td><td style="text-align:center">1</td><td style="text-align:center">false</td><td style="text-align:center">true,falses</td></tr><tr><td style="text-align:center">字节型</td><td style="text-align:center">byte</td><td style="text-align:center">1/8位</td><td style="text-align:center">0</td><td style="text-align:center">-126~127</td></tr><tr><td style="text-align:center">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2/16位</td><td style="text-align:center">0</td><td style="text-align:center">-32768~32767</td></tr><tr><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">4/32位</td><td style="text-align:center">0</td><td style="text-align:center">-2147483648~2147483647</td></tr><tr><td style="text-align:center">长整型</td><td style="text-align:center">long</td><td style="text-align:center">8/64位</td><td style="text-align:center">0L</td><td style="text-align:center">-9223372036854775808 ~ 92233720368547775807</td></tr><tr><td style="text-align:center">单精度浮点数</td><td style="text-align:center">folat</td><td style="text-align:center">4/32位</td><td style="text-align:center">0.0F</td><td style="text-align:center">负数范围：-3.402823E+38 ~ -1.4E-45 <br> 正数范围：1.4E-45 ~ 3.4028235E+38</td></tr><tr><td style="text-align:center">双精度浮点数</td><td style="text-align:center">double</td><td style="text-align:center">8/64位</td><td style="text-align:center">0.0D</td><td style="text-align:center">负数范围：-1.7976931348623157E+308 ~ -4.9E-324 <br> 正数范围：4.9E-324 ~ 1.7976931348623157E+308</td></tr><tr><td style="text-align:center">字符型</td><td style="text-align:center">char</td><td style="text-align:center">2/16位</td><td style="text-align:center">\u0000</td><td style="text-align:center">\u0000 ~ \uffff</td></tr></tbody></table></div><ul><li>数值型常量的特殊值代码</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">所在类</th><th style="text-align:center">最小值代码</th><th style="text-align:center">最大值代码</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">java.lang.Byte</td><td style="text-align:center">Byte.MIN_VALUE</td><td style="text-align:center">Byte.MAX_VALUE</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">java.lang.Short</td><td style="text-align:center">Short.MIN_VALUE</td><td style="text-align:center">Short.MAX_VALUE</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">java.lang.Integer</td><td style="text-align:center">Integer.MIN_VALUE</td><td style="text-align:center">Integer.MAX_VALUE</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">java.lang.Long</td><td style="text-align:center">Long.MIN_VALUE</td><td style="text-align:center">Long.MAX_VALUE</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">java.lang.Float</td><td style="text-align:center">Float.MIN_VALUE</td><td style="text-align:center">Float.MAX_VALUE</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">java.lang.Double</td><td style="text-align:center">Double.MIN_VALUE</td><td style="text-align:center">Double.MAX_VALUE</td></tr></tbody></table></div><p>最小负数获取：double min = -Double.MAX_VALUE</p><h2 id="关键字与标识符"><a href="#关键字与标识符" class="headerlink" title="关键字与标识符"></a>关键字与标识符</h2><h3 id="关键字-keyword"><a href="#关键字-keyword" class="headerlink" title="关键字(keyword)"></a>关键字(keyword)</h3><p>关键字是Java语言中被赋予特定含义的一些单词，他们再程序中有着不同的用途，因此Java语言不允许用户对关键字赋予其他的含义。</p><ul><li>Java语言定义的关键字</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">abstract</th><th style="text-align:center">assert</th><th style="text-align:center">boolean</th><th style="text-align:center">break</th><th style="text-align:center">byte</th><th style="text-align:center">case</th></tr></thead><tbody><tr><td style="text-align:center">catch</td><td style="text-align:center">char</td><td style="text-align:center">class</td><td style="text-align:center">continue</td><td style="text-align:center">defalut</td><td style="text-align:center">do</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">else</td><td style="text-align:center">enum</td><td style="text-align:center">extends</td><td style="text-align:center">false</td><td style="text-align:center">final</td></tr><tr><td style="text-align:center">finally</td><td style="text-align:center">float</td><td style="text-align:center">for</td><td style="text-align:center">if</td><td style="text-align:center">implements</td><td style="text-align:center">import</td></tr><tr><td style="text-align:center">instanceof</td><td style="text-align:center">int</td><td style="text-align:center">interface</td><td style="text-align:center">long</td><td style="text-align:center">native</td><td style="text-align:center">new</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">package</td><td style="text-align:center">private</td><td style="text-align:center">protected</td><td style="text-align:center">public</td><td style="text-align:center">return</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">static</td><td style="text-align:center">super</td><td style="text-align:center">switch</td><td style="text-align:center">synchronized</td><td style="text-align:center">this</td></tr><tr><td style="text-align:center">throw</td><td style="text-align:center">throws</td><td style="text-align:center">transient</td><td style="text-align:center">true</td><td style="text-align:center">try</td><td style="text-align:center">void</td></tr><tr><td style="text-align:center">volatile</td><td style="text-align:center">while</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="标识符-identifier"><a href="#标识符-identifier" class="headerlink" title="标识符(identifier)"></a>标识符(identifier)</h3><p>标识符是用来表示变量名、类名、方法名、数组名和文件名的有效字符序列。<br>任何一个变量、常量、方法、对象和类都需需要有名字，这些名字就是标识符。</p><ul><li>标志符可以由字母、数字和下画线( _ )、美元符号( $ )等组合组成；</li><li>标识符必须以字母、下画线或美元符号开头，不能以数字开头。</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量存储的是在程序中不能被修改的固定值，即常量是在程序运行的整个过程中保持其不改变的量。</p><h3 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h3><h3 id="浮点型常量"><a href="#浮点型常量" class="headerlink" title="浮点型常量"></a>浮点型常量</h3><h3 id="布尔型常量"><a href="#布尔型常量" class="headerlink" title="布尔型常量"></a>布尔型常量</h3><h3 id="字符型常量"><a href="#字符型常量" class="headerlink" title="字符型常量"></a>字符型常量</h3><ul><li>转义符<br>是一些有特殊含义、很难用一般方式来表达的字符，如回车、换行。<br>所有的转义符都用反斜线（ \ ）开头，后边跟着一个字符来表示某个特定的转义符</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">转义符</th><th style="text-align:center">所代表的含义</th></tr></thead><tbody><tr><td style="text-align:center">\f</td><td style="text-align:center">换页(from feed)，走纸到下一页</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格(backspace)，后退一格</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行(new line)，将光标移到下一行的开始</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车(carriage return)，将光标移到当前行的行首，但不移到下一行</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">横向跳格(tab)，将光标移到下一个制表符位置</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">反斜线字符(backslash)，输出一个反斜杠</td></tr><tr><td style="text-align:center">\’</td><td style="text-align:center">单引号字符(single quote)，输出一个单引号</td></tr><tr><td style="text-align:center">\’’</td><td style="text-align:center">双引号字符(double quote)，输出一个双引号</td></tr><tr><td style="text-align:center">\uxxxx</td><td style="text-align:center">1~4位十六进制数(xxxx)所表示的Unicode字符</td></tr><tr><td style="text-align:center">\ddd</td><td style="text-align:center">1~3位八进制数(ddd)所表示的Unicode字符，范围为八进制的000~377</td></tr></tbody></table></div><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>字符串常量是用双引号括起的一串若干字符（可以是0个）</p><h3 id="常量的声明"><a href="#常量的声明" class="headerlink" title="常量的声明"></a>常量的声明</h3><p>常量声明用final关键字，通常写在最前边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14f</span>;</span><br></pre></td></tr></table></figure><ul><li>使用常量的好处<br>增加可读性。从常量名可知常量的含义。<br>增强可维护性。若程序中多处使用常量时，当要对它们进行修改时，只需要在声明语句中修改一处即可。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量在程序运行中是可以改变的，使用变量必须先声明再使用。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>程序在使用任何变量之前首先应该在该变量和内存单元之间建立联系。</p><p>变量四要素：名字、类型、值、作用域。</p><ul><li>变量声明格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型 变量名[ = 初值][, 变量名[= 初值] ...];</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br></pre></td></tr></table></figure><ul><li>变量初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"><span class="comment">//声明xy并为y赋值</span></span><br><span class="line"><span class="type">int</span> x,y = <span class="number">8</span>;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">c = <span class="string">&#x27;\u0031&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="数值型不同类型数据的转换"><a href="#数值型不同类型数据的转换" class="headerlink" title="数值型不同类型数据的转换"></a>数值型不同类型数据的转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>自动类型转换的条件：</p><ul><li>转换前的数据类型与转换后的类型兼容</li><li>转换后数据类型的表示范围比转换前数据类型的表示范围大</li></ul><p>转换优先关系<br>byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double</p><ul><li>扩大转换(augmented conversion)</li></ul><p>类型转换只限该语句本身，并不会影响原先变量的类型定义，而且通过自动类型的转换，可以保证数据的精确度，它不会因为类型转换而损失数据的内容。<br>Java会自动将较小的表示范围转换成较大的表示范围后，在做运算。</p><h4 id="强制类型转换-显性转换-explicit-cast"><a href="#强制类型转换-显性转换-explicit-cast" class="headerlink" title="强制类型转换(显性转换[explicit cast])"></a>强制类型转换(显性转换[explicit cast])</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(欲转换的数据类型) 变量名</span><br></pre></td></tr></table></figure><ul><li>缩小转换(narrowing conversion)</li></ul><p>将一个大于变量可以表示范围的值赋值给这个变量。</p><p>若将一个大于变量可表示</p><h3 id="字符串型数据与整型数据相互转换"><a href="#字符串型数据与整型数据相互转换" class="headerlink" title="字符串型数据与整型数据相互转换"></a>字符串型数据与整型数据相互转换</h3><h4 id="字符串转换成数值型数据"><a href="#字符串转换成数值型数据" class="headerlink" title="字符串转换成数值型数据"></a>字符串转换成数值型数据</h4><div class="table-container"><table><thead><tr><th style="text-align:center">转换的方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">Byte.parseByte(String s)</td><td style="text-align:center">将数字字符串转换为字节型数据</td></tr><tr><td style="text-align:center">Short.parseShort(String s)</td><td style="text-align:center">将数字字符串转换为短整型数据</td></tr><tr><td style="text-align:center">Integer.parseInteger(String s)</td><td style="text-align:center">将数字字符串转换为整型数据</td></tr><tr><td style="text-align:center">Long.parseLong(String s)</td><td style="text-align:center">将数字字符串转换为长整型数据</td></tr><tr><td style="text-align:center">Float.parseFloat(String s)</td><td style="text-align:center">将数字字符串转换为浮点型数据</td></tr><tr><td style="text-align:center">Double.parseDouble(String s)</td><td style="text-align:center">将数字字符串转换为双精度型数据</td></tr><tr><td style="text-align:center">Boolean.parseBoolean(String s)</td><td style="text-align:center">将数字字符串转换为布尔型数据</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">myNumber</span> <span class="operator">=</span> <span class="string">&quot;1234.567&quot;</span></span><br><span class="line"><span class="type">float</span> <span class="variable">myFloat</span> <span class="operator">=</span> Float.parseFloat(myNumber);</span><br></pre></td></tr></table></figure><h4 id="数值型数据转换为字符串"><a href="#数值型数据转换为字符串" class="headerlink" title="数值型数据转换为字符串"></a>数值型数据转换为字符串</h4><p>字符串用“+”号实现链接操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">myInt</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">myString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + myInt;</span><br></pre></td></tr></table></figure><h2 id="由键盘输入数据"><a href="#由键盘输入数据" class="headerlink" title="由键盘输入数据"></a>由键盘输入数据</h2><h3 id="输入字符串"><a href="#输入字符串" class="headerlink" title="输入字符串"></a>输入字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//APP3_3.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App3_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">BufferedReader buf;</span><br><span class="line">String str;</span><br><span class="line">buf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">System.out.print(<span class="string">&quot;请输入字符串:&quot;</span>);</span><br><span class="line">str = buf.readLine();</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的字符串是：&quot;</span> + str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入数值"><a href="#输入数值" class="headerlink" title="输入数值"></a>输入数值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//APP3_4.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App3_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">float</span> num;</span><br><span class="line">String str;</span><br><span class="line">BufferedReader buf;</span><br><span class="line">buf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">str = buf.readLine();</span><br><span class="line">num = Float.parseFloat(str);</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的数为：&quot;</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入多个数据"><a href="#输入多个数据" class="headerlink" title="输入多个数据"></a>输入多个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App3_6.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App3_6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> num1;</span><br><span class="line"><span class="type">double</span> num2;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">num1 = reader.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入二个数：&quot;</span>);</span><br><span class="line">num2 = reader.nextDouble();</span><br><span class="line">System.out.println(num1 + <span class="string">&quot;*&quot;</span> + num2 + <span class="string">&quot; = &quot;</span> +((<span class="type">float</span>)num1 * num2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用Scanner类，使用next()和nextLine()方法接受从键盘输入字符串类型数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App3_7.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App3_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String s1, s2;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一个数据:&quot;</span>);</span><br><span class="line">s1 = reader.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;请输入第二个数据:&quot;</span>);</span><br><span class="line">s2 = reader.next();</span><br><span class="line">System.out.println(<span class="string">&quot;输入的是&quot;</span> + s1 + <span class="string">&quot;和&quot;</span> + s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>next()方法一定要读取到有效字符后才可以结束输入，对输入有效字符前遇到的空格、Tab或Enter等，会自动去掉，只有在输入有效字符之后，next()方法才将其后输入的空格键、Tab键或Enter键视为分隔符或者结束符。<br>nextLine()的结束符只是Enter键，返回Enter之前所有的字符。</p></blockquote><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ul><li><strong>按照操作数目来分</strong>：</li></ul><ul><li>一元运算符：<code>++</code></li><li>二元运算符：<code>+</code>、<code>&gt;</code></li><li>三元运算符：<code>?:</code></li></ul><ul><li><strong>按照运算功能来分</strong>：</li></ul><ul><li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code></li><li>关系运算符：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></li><li>逻辑运算符：<code>!</code>、<code>&amp;&amp;</code>、<code>||</code>、<code>&amp;</code>、<code>|</code></li><li>位运算符：<code>&gt;&gt;</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;&gt;</code>、<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code></li><li>赋值运算符：<code>=</code>、<code>+=</code>、<code>/=</code></li><li>条件运算符：<code>? :</code></li><li>其他运算符：分量运算符<code>.</code>、下标运算符<code>[]</code>、实例运算符<code>instanceof</code>、内存分配运算符 <code>new</code>、强制类型转换运算符<code>(类型)</code>、方法调用运算符<code>()</code></li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><h4 id="二元算术运算符"><a href="#二元算术运算符" class="headerlink" title="二元算术运算符"></a>二元算术运算符</h4><ul><li>— * / %</li></ul><blockquote><p>如果浮表达式中有一个或者一个以上的双精度操作数，则按双精度运算，结果是双精度浮点数，如37.2%10=7.2。</p></blockquote><h4 id="一元算术运算符"><a href="#一元算术运算符" class="headerlink" title="一元算术运算符"></a>一元算术运算符</h4><ul><li><code>+</code></li></ul><p>取原数</p><ul><li><code>-</code></li></ul><p>取相反数</p><ul><li><code>++</code></li></ul><p>＋1</p><ul><li><code>--</code></li></ul><p>-1</p><blockquote><p>++a/—a：操作数先++或—，然后将结果应用于表达式；<br>a++/a—：操作数参与其他运算，最后进行++或—。<br>++/—运算符不能用于表达式，智能用于简单变量。</p></blockquote><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><code>&gt;</code><br><code>&gt;=</code><br><code>&gt;</code><br><code>&lt;=</code><br><code>==</code><br><code>!=</code></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th><th style="text-align:center">运算规则</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">逻辑与</td><td style="text-align:center">a &amp; b</td><td style="text-align:center">两个操作数均为true时，结果才为true</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">逻辑或</td><td style="text-align:center">a &#124; b</td><td style="text-align:center">两个操作数均为false时，结果才为false</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">逻辑非(取反)</td><td style="text-align:center">a ! b</td><td style="text-align:center">将操作数取反</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">异或</td><td style="text-align:center">a ^ b</td><td style="text-align:center">两个操作数同真或者同假时，结果才为false</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">简洁与</td><td style="text-align:center">a &amp;&amp; b</td><td style="text-align:center">两个操作数均为true时，结果才为true</td></tr><tr><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">简洁或</td><td style="text-align:center">a &#124;&#124; b</td><td style="text-align:center">两个操作数均为false时，结果才为false</td></tr></tbody></table></div><blockquote><p>非简洁运算，必须在计算完成运算符左右两个表达式之后，才取结果值；<br>简洁运算，只需要计算运算符左边的表达式而不计算右边的表达式。</p></blockquote><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符使对操作数以二进制比特位为单位进行的操作和运算</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th><th style="text-align:center">运算规则</th></tr></thead><tbody><tr><td style="text-align:center">~</td><td style="text-align:center">按位取反</td><td style="text-align:center">~a</td><td style="text-align:center">将a按位取反</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td><td style="text-align:center">a&amp;b</td><td style="text-align:center">将a和b按比特位相与</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">按位或</td><td style="text-align:center">a &#124; b</td><td style="text-align:center">将a和b按比特位异或</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td><td style="text-align:center">a^b</td><td style="text-align:center">将a和b按比特位相异或</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td><td style="text-align:center">a&gt;&gt;b</td><td style="text-align:center">将a各个比特位向右移b位</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td><td style="text-align:center">a&lt;&lt;b</td><td style="text-align:center">将a各个比特位向左移b位</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">0填充右移</td><td style="text-align:center">a&gt;&gt;&gt;b</td><td style="text-align:center">将a各个比特位向左移b位,左边的空位一律填0</td></tr></tbody></table></div><ul><li>按位运算</li></ul><p>整数、字符型数据操作</p><ul><li>移位运算</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><h4 id="赋值运算符-1"><a href="#赋值运算符-1" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量或对象 = 表达式;</span><br><span class="line">a = b = c =<span class="number">8</span>;</span><br></pre></td></tr></table></figure><h4 id="扩展赋值运算符"><a href="#扩展赋值运算符" class="headerlink" title="扩展赋值运算符"></a>扩展赋值运算符</h4><p>在赋值符”=”前加上其他运算符，即构成扩展赋值运算符。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td style="text-align:center">a+=b</td><td style="text-align:center">a=a+b</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">a-=b</td><td style="text-align:center">a=a-b</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">a*=b</td><td style="text-align:center">a=a*b</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">a/=b</td><td style="text-align:center">a=a/b</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">a%=b</td><td style="text-align:center">a=a%b</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:center">a&amp;=b</td><td style="text-align:center">a=a&amp;b</td></tr><tr><td style="text-align:center">&#124;=</td><td style="text-align:center">a&#124;=b</td><td style="text-align:center">a=a&#124;b</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:center">a^=b</td><td style="text-align:center">a=a^b</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:center">a&gt;&gt;=b</td><td style="text-align:center">a=a&gt;&gt;b</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:center">a&lt;&lt;=b</td><td style="text-align:center">a=a&lt;&lt;b</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;=</td><td style="text-align:center">a&gt;&gt;&gt;=b</td><td style="text-align:center">a=a&gt;&gt;&gt;b</td></tr></tbody></table></div><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>,b = <span class="number">2</span>,max;</span><br><span class="line">max = a &gt; b ? a : b;</span><br><span class="line"><span class="comment">//输出结果为max=2</span></span><br><span class="line">System.out.println(<span class="string">&quot;max=&quot;</span> + max);</span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>“+”符号位字符串运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100.0f</span>;</span><br><span class="line"><span class="comment">//系统自动将a转换为字符串</span></span><br><span class="line">print(<span class="string">&quot;The value of a is&quot;</span> + a + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">s1 += a;</span><br></pre></td></tr></table></figure><h3 id="表达式及运算符的优先级、结合性"><a href="#表达式及运算符的优先级、结合性" class="headerlink" title="表达式及运算符的优先级、结合性"></a>表达式及运算符的优先级、结合性</h3><p>在对一个表达式进行运算时，要按运算符的优先顺序从高向低进行。</p><p>一元 &gt; 算术 &gt; 关系/逻辑 &gt; 赋值</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">. [] ()</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">++ — ! ~ +(加号) -(负号) instanceof</td><td style="text-align:center">右→左</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">new(类型)</td><td style="text-align:center">右→左</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">* / %</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">+ -(二元)</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">&lt; &gt; &lt;= &gt;=</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">== !=</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">&amp;</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">^</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">&#124;</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">?:</td><td style="text-align:center">左→右</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">= += -= *= \/= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^=</td><td style="text-align:center">=</td><td>右→左</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &gt;= b &amp;&amp; c &lt; d || e == f</span><br><span class="line">((a &lt;= b) &amp;&amp; (c &lt; d)) || (e == f)</span><br></pre></td></tr></table></figure><h2 id="本章小结-2"><a href="#本章小结-2" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>Java 语言的数据类型可分为基本数据类型和引用数据类型两种。</li><li>常量是在程序运行的整个过程中保持其值不政变的量；变量是其值在程序运行中可以改变的量。</li><li>Java 语言变量的名称可以由英文字母、数字或下面线等组成。但要注意，名称中不能有空格，且第一个字符不能是数字，还有不能是 Java 语言的关键宇。此外，Java 语言的变量名是区分大小写的。</li><li>使用变量的原则是”先声明后使用”，即变量在使用前必须先声明。</li><li>变量的赋值有以下三种方法：在声明的时候赋值、声明后再赋值、在程序中的任何位置声明并赋值。</li><li>Java 语言提供了数值类型量的最大值、最小值的代码。最大值的代码是<code>MAX.VALUE</code>,最小值是 <code>MIN_VALUE</code>。如果要使用某个数值类型量的最大值或最小值，只要在这些代码的前面，加上它们所属的类全名即可。</li><li>布尔(boolean)类型的变量，只有true(真)和false(假)两种。</li><li>Unicode(标准码)为每个字符制定了一个唯一的数值，因此在任何的语言、平台、程序都可以放心地使用。</li><li>数据类型的转换可分为两种：自动类型转换和强制类型转换。</li><li>由键盘输人数据时，Java 语言的输人格式是固定的1其中，对于数据输入方式 1，不管输入的是文字还是数宇，Java 皆视为字符串，因此若是要由键盘输人数值型数据则必须再经过类型转换；付于数据输人方式2，则是使用 Scanner 类的对象调用相应的<code>nextXXX()</code>方法直接读取由键盘输人的相应类型的数据。</li><li>表达式是由操作数与运算符所组成的。括号<code>()</code>是用来处理表达式的优先级的，也是 Java 语言的运算符。</li><li>当表达式中各数值型操作数的类型不匹配时，有如下处理方法：①占用较少字节的数据类型会转换成占用较多字节的数据类型；②有short 和int 类型，则用int 类型；③字节类型会转换成short 类型；④int 类型转换成 float 类型：⑤若某个操作数的类型为double,则另一个也会转换成 double 类型；⑤布尔型不能转换成其他的类型。</li><li>Java 语言的运算符是有优先级和结合性的。运算符的优先级决定了表达式中不同运算执行的先后顺序，而结合性决定了并列的多个同级运算符的先后执行顺序。</li></ul><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>java语言定义了哪几种基本数据类型？</li></ul><p>4类8种基本类型，4整型、2浮点型、1布尔型、1字符型</p><ul><li>整形：byte，short，int，long</li><li>浮点型：float，double</li><li>布尔型：boolean</li><li>字符型：char</li></ul><ul><li>表示整数类型数据的关键字有那几个？他们各占用几个字节？</li></ul><p>byte(1)，short(2)，int(4)，long(8)</p><ul><li>单精度浮点数(float)和双精度浮点数(double)的区别是什么？</li></ul><p>double(4字节)，双精度浮点数，负数范围：-1.7976931348623157E+308 ~ -4.9E-324，正数范围：4.9E-324 ~ 1.7976931348623157E+308</p><p>float(8字节)，单精度浮点数，负数范围：-3.402823E+38 ~ -1.4E-45，正数范围：1.4E-45 ~ 3.4028235E+38 </p><ul><li>字符型常量与字符串常量的主要区别是什么？</li></ul><p>字符型常量是用一对单引号括起来的单个字符，如`a`、`9`。<br>字符串常量是用双引号括起来的一串若干字符。字符串中可以包括转移符，但标志符字符串开始和结束的双引号必须在源代码的同一行上。</p><ul><li>简述Java 语言对定义标识符的规定。</li></ul><p>标识符是用来表示变量名、类名、方法名、数组名和文件名的有效字符序列。<br>任何一个变量、常量、方法、对象和类都需需要有名字，这些名字就是标识符。</p><ul><li>标志符可以由字母、数字和下画线( _ )、美元符号( $ )等组合组成；</li><li>标识符必须以字母、下画线或美元符号开头，不能以数字开头。</li></ul><ul><li>Java 语言来用何种编码方案？有何特点？</li></ul><p>Java语言中的字符采用的是Unicode字符集编码方案，在内存中战2字节，是16位无符号的整数，一共有65536个。Unicode字符是用”\u0000”到”\uFFF”之间的十六进制数值来表示。Unicode字符前128个字符刚好是ASCII表。</p><ul><li>什么是强制类型转换？在什么情況下需要用强制类型转换？</li></ul><p>将较长的数据转为较短的数据。<br>若将一个大于变量可表示范围的值赋值给这个变量时，这种转换称为缩小变换。由于缩小转换在转换过程中可能会因此损失数据的精度，需要做强制类型转换。</p><ul><li>自动类型转换的前提是什么？转换时从”短”到”长”的优光级顺序是怎样的？</li></ul><p>转换前后数据类型兼容，转换后数据类型表示范围比转换前大。<br>byte-&gt;short-&gt;char-&gt;int-&gt;long-&gt;float-&gt;double</p><ul><li>数字字符串转换为数值型数据时，所使用的方法有哪些？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(String s);</span><br></pre></td></tr></table></figure><ul><li>写出由键盘输入数据的两种基本格式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line">String str;</span><br><span class="line">BufferedReader buf;</span><br><span class="line">buf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">str = buf.readLine();</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">double</span> num;</span><br><span class="line">num = reder.nextDouble();</span><br></pre></td></tr></table></figure><ul><li>编写程序，从键盘上输入一个浮点数，然后將该浮点数的整数部分输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_3_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;程序功能：编写程序，从键盘上输入一个浮点数，然后將该浮点数的整数部分输出。&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个浮点数：&quot;</span>);</span><br><span class="line"><span class="type">float</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0f</span>;</span><br><span class="line">num = sc.nextFloat();</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的浮点数是：&quot;</span> + num + <span class="string">&quot;整数部分为：&quot;</span> + (<span class="type">int</span>)num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写程序，从键盘上输入两个整数，然后计算它们相除后得到的结果并输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_3_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;程序功能：从键盘上输入两个整数，然后计算它们相除后得到的结果并输出。&quot;</span>);</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">a = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">b = sc.nextInt();</span><br><span class="line">System.out.println(a + <span class="string">&quot; \\ &quot;</span> + b + <span class="string">&quot; = &quot;</span> + (<span class="type">float</span>)a/b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写程序，从键盘上输入圆柱体的底半径r和高h，然后计算其体积并输。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_3_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;程序功能：从键盘上输入圆柱体的底半径r和高h，然后计算其体积并输。&quot;</span>);</span><br><span class="line"><span class="type">float</span> r, h;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入圆柱体底半径r：&quot;</span>);</span><br><span class="line">r = sc.nextFloat();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入圆柱体高h：&quot;</span>);</span><br><span class="line">h = sc.nextFloat();</span><br><span class="line">System.out.println(<span class="string">&quot;半径 r = &quot;</span> + r + <span class="string">&quot;, 高 h = &quot;</span> + h + <span class="string">&quot;, 体积 = &quot;</span> + Math.PI*r*r*h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 语言有哪些算术运算符、关系运算符、逻辑运算符、位运算符和赋值运算符？</li></ul><p>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code><br>关系运算符：<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code><br>逻辑运算符：<code>&amp;</code>、<code>|</code>、<code>!</code>、<code>^</code>、<code>&amp;&amp;</code>、<code>||</code><br>位运算符：<code>~</code>、<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>&gt;&gt;</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;&gt;</code><br>赋值运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;&gt;=</code></p><ul><li>逻辑运算符中的逻辑与、逻辑或和简洁与、简洁或的区别是什么？</li></ul><p>非简洁运算：必须计算完运算符左右两个表达式之后，才取结果。<br>简洁运算：只需要计算运算符左边的表达式而不用计算右边的表达式。</p><ul><li>逻辑运算符与位运算符的区别是什么？</li></ul><p>逻辑运算时操作数与运算结果都是逻辑型量的运算。<br>位运算符是对操作数以二进制比特位为单位进行的操作和运算。</p><ul><li>什么是运算符的优先级和结合性？</li></ul><p>在对一个表达式进行运算时，要按运算符的优先顺序从高向低进行。</p><ul><li>写出下列表达式的值，设x=3，y=17，yn=true。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_3_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">yn</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; = &quot;</span> + );</span><br><span class="line">System.out.println(<span class="string">&quot;运行后：&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y = &quot;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)<code>x + y * x--</code></p><p>54<br>运行后：<br>x=2<br>y=17</p><p>(2)<code>- x * y + y</code></p><p>-34</p><p>(3)<code>x &lt; y &amp;&amp; yn</code></p><p>true</p><p>(4)<code>x &gt; y || !yn</code></p><p>false</p><p>(5)<code>y != ++ x ? x : y</code></p><p>4</p><p>运行后：<br>x=4<br>y=17</p><p>(6)<code>y++ / --x</code></p><p>8<br>运行后：<br>x=2<br>y=18</p><h1 id="第四章-流程控制"><a href="#第四章-流程控制" class="headerlink" title="第四章 流程控制"></a>第四章 流程控制</h1><p>流程控制语句就是用来控制程序中个语句执行顺序的语句，是程序中基本缺又非常更关键的部分。</p><p>三种基本流程结构：顺序结构、分支结构（选择结构）、循环结构。</p><h2 id="语句与复合语句"><a href="#语句与复合语句" class="headerlink" title="语句与复合语句"></a>语句与复合语句</h2><p>语句：指示计算机完成某种特定运算及操作的命令，一条语句执行完后再执行另一条语句。</p><p>复合语句（语句块）：指由一对花括号括起来的若干简单语句。符合语句定义变量的作用域（scope）。</p><blockquote><p>不允许两个嵌套的符合语句内声明同名的变量。</p></blockquote><h3 id="注释-comment"><a href="#注释-comment" class="headerlink" title="注释(comment)"></a>注释(comment)</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释(comment on one line)</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单行或多行注释</span></span><br><span class="line"><span class="comment">(comment on one or more lines) */</span></span><br></pre></td></tr></table></figure><h4 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h4><p>主要用于描述类、数据和方法。使用JDK提供的<code>javadoc.exe</code>命令生成扩展名为<code>.html</code>的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双路条件选择</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句序列<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单路条件选择</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多重条件选择</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">语句序列<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">语句序列n;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句序列 n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>条件表达式必须为bolean，不能为0、1。</p></blockquote><h3 id="switch选择语句"><a href="#switch选择语句" class="headerlink" title="switch选择语句"></a>switch选择语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">语句序列<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="keyword">case</span> 常量表达式n:</span><br><span class="line">语句序列n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句序列n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>条件表达式为整型、字符型。同时与各个case常量表达式类型一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">days=<span class="number">28</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">days=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">days=<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先判断表达式的值，若为真，则执行循环体，循环体执行完之后，再转到条件表达式重新计算表达式的值并判断条件表达式的真假；直到当计算出的条件表达式的值为假时，才跳出循环体执行while语句后面的语句，循环终止。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始=&gt;start: 开始</span><br><span class="line">结束=&gt;end: 结束</span><br><span class="line">循环体=&gt;operation: 循环体</span><br><span class="line">条件表达式=&gt;condition: 条件表达式</span><br><span class="line"></span><br><span class="line">开始-&gt;条件表达式(yes)-&gt;循环体-&gt;条件表达式</span><br><span class="line">条件表达式(no)-&gt;结束</span><br></pre></td></tr></table></figure><ul><li>计算斐波那契</li></ul><p>Fibonacci序列的通项公式为：</p><script type="math/tex; mode=display">f_i = 0</script><script type="math/tex; mode=display">f_2 = 1</script><script type="math/tex; mode=display">f_n = f_{n-1} + f_{n-2} , n>=3</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D4_5.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D4_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">1</span>, k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= MAX) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span> + i + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">i = i + j;</span><br><span class="line">j = i + j;</span><br><span class="line">k = k + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断菲波那切数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D4_6.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D4_6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (input &gt; j) &#123;</span><br><span class="line">i = i + j;</span><br><span class="line">j = i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == input) &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot; 是Fibonacci数。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot; 不是Fibonacci数。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><blockquote><p>无条件执行一遍循环体，再来判断条件表达式的值，若表达式的值为真，则再执行循环体，否则跳出do-while循环，执行下面语句。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始=&gt;start: 开始</span><br><span class="line">结束=&gt;end: 结束</span><br><span class="line">循环体=&gt;operation: 循环体</span><br><span class="line">条件表达式=&gt;condition: 条件表达式</span><br><span class="line"></span><br><span class="line">开始-&gt;循环体-&gt;条件表达式(yes)-&gt;循环体</span><br><span class="line">条件表达式(no)-&gt;结束</span><br></pre></td></tr></table></figure><ul><li>输入一个正整数n，计算1+2+3+…+n结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D4_7.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D4_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个正整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= input);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;1+2+3+...+&quot;</span> + input +<span class="string">&quot;=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>辗转相除法求两数最大公约数</li></ul><p>假设有不全为0的整数a和b，他们的最大公约数记为<code>gcd(a,b)</code>，即同时能整除a和b的公因数中的最大者。按照欧几里得(Euclid)的辗转相除算法，<code>gcd(a,b)</code>具有如下性质：</p><p>①gcd(a,b) = gcd(b,a)<br>②gcd(a,b) = gcd(-a,b)<br>③gcd(a,0) = | a |<br>④gcd(a,b) = gcd(b,a % b),0 &lt;= a % b &lt; b</p><p>只要反复运行性质④，最终可以得到第二个参数a % b = 0，第一个参数就是最大公约数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D4_8.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D4_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;gcd(&quot;</span> + a + <span class="string">&quot;, &quot;</span> + b + <span class="string">&quot;) = &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">num = a % b;</span><br><span class="line">a = b;</span><br><span class="line">b = num;</span><br><span class="line">&#125; <span class="keyword">while</span> (num != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.print(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>; 条件表达式; 表达式<span class="number">2</span>) &#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先计算表达式1，完成必要初始化工作 ；判断条件表达式的值，若为假，退出循环，若为真，执行循环体，执行完循环体后再返回表达式2，计算并修改循环条件，这样一轮循环就结束了。第二轮循环从计算并判断条件表达式开始，若表达式的值仍未真，则继续循环，否则，跳出整个for语句执行下面的句子。如果三个条件都为孔，表示无限循环，需要在循环体中写另外的语句跳转来终止循环。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">开始=&gt;start: 开始</span><br><span class="line">表达式1=&gt;operation: 表达式1</span><br><span class="line">条件表达式=&gt;condition: 条件表达式</span><br><span class="line">循环体=&gt;operation: 循环体</span><br><span class="line">表达式2=&gt;operation: 表达式2</span><br><span class="line">结束=&gt;end: 结束</span><br><span class="line"></span><br><span class="line">开始-&gt;表达式1-&gt;条件表达式(yes)-&gt;循环体-&gt;表达式2-&gt;条件表达式</span><br><span class="line">开始-&gt;表达式1-&gt;条件表达式(no)-&gt;结束</span><br></pre></td></tr></table></figure><h3 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h3><p>二重循环、三重循环</p><h2 id="循环中的跳转语句"><a href="#循环中的跳转语句" class="headerlink" title="循环中的跳转语句"></a>循环中的跳转语句</h2><blockquote><p>不支持无条件goto</p></blockquote><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>终止某个case<br>从某一个循环中立即结束</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>终止当前一轮循环，直接进入下一轮循环</p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><h2 id="本章小结-3"><a href="#本章小结-3" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>Java 程序都是由语向组成的，语向可以是以分号<code>;</code>结尾的简单语向，也可以是用<br>对花括号<code>&#123;&#125;</code>括起来的复合语句。</li><li>Java语言的注释方式有三种：①以<code>//</code>开始，直到该行结束；②以<code>/*</code> 和 <code>* /</code>括起來的文字；③利用 JDK 提供的<code>javadoc.exe</code>命今所生成的扩展名为<code>.htmal</code>的文档注释。</li><li>Java 语言的流程控制方式是结构化程序设计中规定的三种基本流程结构：顺序结构、分支结构(或称选择结构）、循环结构。</li><li>选择结构包括 if、ifelse 和 switch 三种语句，在程序中使用选择结构，就像处在十字路口一样，根据不同的选择，程序的运行会有不同的方向与结果。</li><li>需要重复执行某项功能时，循环结构是最好的选择，这时用户可以根据程序的要求或个人的使用习惯，选择使用 Java 语言所提供的 for、while 或 do-while 循环来完成。</li><li>在循环里也可以声明变量，但所声明的变量只是局部变量，只要退出循环，这个变量就不存在了。</li><li>break 语句可以让程序强行跳离 switch 语句或循环语句，然后转去执行 switch 语句或循环语句的下一条语向，如果 break 语向出现在嵌套的循环中的内循环，则break 语句只会跳离内层循环。</li><li>continue 语句可以让程序强行跳到循环的开始处去执行下一轮循环，当程序运行到continue 语句时，会停止运行本轮循环体中剩余的语向，而转到循环的开始处继续运行。</li><li>return 语句用来使程序从方法中返回。</li></ul><h2 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>将学生的学习成绩按不同的分数段分为优、良、中、及和不及格五个等级，从键盘上输入一个0~100的成绩，输出相应的等级。要求用switch语句实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_1.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个成绩：&quot;</span>);</span><br><span class="line"><span class="type">float</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0f</span>;</span><br><span class="line">input = sc.nextFloat();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> (<span class="type">int</span>)input/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(score)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;优&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设学生的学习成绩按如下的分数段评定为四个等级：85~100为A；70~84为B；60-69为C；0~50 为D。从键盘上输入一个0~100的成绩，要求用switch语句根据成绩，评定并输出相应的等级。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_2.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个成绩：&quot;</span>);</span><br><span class="line"><span class="type">float</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0f</span>;</span><br><span class="line">input = sc.nextFloat();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> (<span class="type">int</span>)input/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(score)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> :</span><br><span class="line"><span class="keyword">if</span> (input/<span class="number">10</span> &lt;= <span class="number">8.4</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个Java 应用程序，从能键盘输入一个1~100之间的整数，然后判断该数是否可以被3整除又可被7整除的数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_3.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个0~100的整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">input = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">mod3</span> <span class="operator">=</span> input%<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">mod7</span> <span class="operator">=</span> input%<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mod3+mod7 == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot; 能被3整除又可被7整除。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot; 不能被3整除又可被7整除。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个Java应用程序，在键盘上输入数n，计算并输出1!+2!+..+n!的结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_4.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">input = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=input; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++) &#123;</span><br><span class="line">        total *= j;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;1!+2!+..+&quot;</span> + input + <span class="string">&quot;! = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在键盘上输入数n，编程计算 <script type="math/tex">sum = 1- \frac{1}{2!} + \frac{1}{3!} - ... (-1)^{n-1} \frac{1}{n!}</script></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_5.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">input = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=input; i++) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++) &#123;</span><br><span class="line">        total *= j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sum += sign*(<span class="number">1</span>/total);</span><br><span class="line">        sign *= -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;1!-1/(2!)+..(-1)^(&quot;</span> + input + <span class="string">&quot;-1)*1/(&quot;</span> + input + <span class="string">&quot;!) = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>水仙花数足指其个位、十位和百位三个数字的立方和等于这个三位数本身，求所有的水仙花数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_6.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">100</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i/<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> (i-bai*<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i-bai*<span class="number">100</span>-shi*<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从键盘输入一个整数，判断该数是否是完全数。完全数是指其所有因数(包括1但不包括共自身）的和等于该数自身的数。例如，28=1+2+4+7+14 就是一个完全数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_7.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">input = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;input; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (input%i == <span class="number">0</span>) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum == input) &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot;是完全数。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(input + <span class="string">&quot;不是完全数。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>计算并输出一个整数各位数字之和。例如，5423的各位数字之和为5+4+2+3。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_8.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">input = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=input; i!=<span class="number">0</span>; i/=<span class="number">10</span>) &#123;</span><br><span class="line">sum += i%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(input + <span class="string">&quot;各位数字之和 = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从键盘上输入一个浮点数，然后将该浮点数的整数部分和小数部分分别输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_9.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个浮点数：&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">0d</span>;</span><br><span class="line">input = sc.nextDouble();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> (<span class="type">int</span>)input;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> input - (<span class="type">double</span>)num1;</span><br><span class="line"></span><br><span class="line">System.out.println(input + <span class="string">&quot;整数部分为：&quot;</span> + num1);</span><br><span class="line">System.out.println(input + <span class="string">&quot;小数部分为：&quot;</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设有一长为3000m 的绝子，每天減去一半，问需几天时间，绳子的长度会短于 5m?</li></ul><p>10天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_10.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">3000</span>; i&gt;<span class="number">5</span>; i/=<span class="number">2</span>) &#123;</span><br><span class="line">sum ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编程输出如下数字图案：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 3 6 10 15</span><br><span class="line">2 5 9 14</span><br><span class="line">4 8 13</span><br><span class="line">7 12</span><br><span class="line">11</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_4_11.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_4_11</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>, n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;<span class="comment">//5行</span></span><br><span class="line">System.out.print((a+=(b++)) + <span class="string">&quot;\t&quot;</span>);<span class="comment">//单行第一个数字</span></span><br><span class="line"></span><br><span class="line">m = a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">5</span>; j&gt;i; j--) &#123;<span class="comment">//单行第一个数字外其他数字</span></span><br><span class="line">System.out.print((m+=(++n)) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n = i+<span class="number">1</span>;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五章-数组与字符串"><a href="#第五章-数组与字符串" class="headerlink" title="第五章 数组与字符串"></a>第五章 数组与字符串</h1><h2 id="数组的基本概念"><a href="#数组的基本概念" class="headerlink" title="数组的基本概念"></a>数组的基本概念</h2><p><strong> 数组是若干个相同数据类型的元素按一定顺序排列的集合 </strong></p><h2 id="JAVA内存"><a href="#JAVA内存" class="headerlink" title="JAVA内存"></a>JAVA内存</h2><p>栈内存：在方法中定义的一些基本类型和对象的引用变量都在方法中。</p><p>堆内存：存放由new运算符创建的数组或者对象，在堆中分配的内存，由Java虚拟的垃圾回收期来自动管理。</p><blockquote><p>引用变量实际上保存的是数组或对象在堆内存中的首地址。<br>null空指针表示该引用不指向任何对象，当堆中的对象不被任何引用，就会被垃圾回收机制回收。</p></blockquote><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="一维数组的定义"><a href="#一维数组的定义" class="headerlink" title="一维数组的定义"></a>一维数组的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名;<span class="comment">//声明一维数组</span></span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[个数];<span class="comment">//分配内存给数组</span></span><br><span class="line"></span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[个数];</span><br></pre></td></tr></table></figure><blockquote><p>数组定义时候并不为数组元素分配内存，但是必须在分配内存后才可以使用。如果声明元素个数就会分配内存供使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] x;<span class="comment">//声明名称为x的int型数组</span></span><br><span class="line">x = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//x数组中包含有10个元素，并为这10个元素分配内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] x = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><blockquote><p>数组每个元素默认值：整数0，实数0.0，字符串为”\0”，boolean型为false，引用型为null。</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public static int binarySearch(X[] a, X key)</td><td style="text-align:center">X是任意数据类型。返回key在升序数组a中首次出现的下标，若a中不包含key，则返回负值。</td></tr><tr><td style="text-align:center">public static void sort(X[] a)</td><td style="text-align:center">X是任意数据类型。对数组a升序排序后仍存放在a中。</td></tr><tr><td style="text-align:center">public static void sort(X[] a, int formIndex, int toIndex)</td><td style="text-align:center">对任意类型的数组a中从formIndex到toIndex-1的元素进行升序排序，其结果仍存放在a数组中</td></tr><tr><td style="text-align:center">public static X[] copyOf(X[] original, int newLength)</td><td style="text-align:center">截取任意类型数组original中长度为newLength的数组元素复制给调用数组</td></tr><tr><td style="text-align:center">public static boolean equals(X[] a, X[] a2)</td><td style="text-align:center">判断同类型的两个数组a和a2中对应元素是否相等，若相等返回true，否则返回false</td></tr></tbody></table></div><h3 id="一维数组元素的访问"><a href="#一维数组元素的访问" class="headerlink" title="一维数组元素的访问"></a>一维数组元素的访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组名[下标]</span><br><span class="line"></span><br><span class="line">x.length 代表数组元素个数</span><br></pre></td></tr></table></figure><h3 id="一维数组的初始化及应用"><a href="#一维数组的初始化及应用" class="headerlink" title="一维数组的初始化及应用"></a>一维数组的初始化及应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;初值<span class="number">0</span>, 初值<span class="number">1</span>, ... , 初值n&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="foreach语句与数组"><a href="#foreach语句与数组" class="headerlink" title="foreach语句与数组"></a>foreach语句与数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (type element : array) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> element : arr) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据类型[][] 数组名;</span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[行数][列数];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] a;<span class="comment">//声明二维整型数组a</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];<span class="comment">//分配一块内存空间，3行4列的整型数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><blockquote><p>Java的二维数组不一定是规则矩形。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] x = <span class="keyword">new</span> <span class="title class_">int</span>[n][];<span class="comment">//不规则矩形二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">x[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] x = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//创建一个2X3形式的二维数组，在内存中为2X3矩形</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x.length;<span class="comment">//计算数组x的行数</span></span><br><span class="line">x[<span class="number">0</span>].length;<span class="comment">//计算数组x的第1行元素的个数</span></span><br><span class="line">x[<span class="number">2</span>].length;<span class="comment">//计算数组x的第3行元素的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] myArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];<span class="comment">//只指定数组的高层维数</span></span><br><span class="line"><span class="type">int</span>[][] myArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">3</span>];<span class="comment">//指定数组的高层维数和低层维数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] myArray = <span class="keyword">new</span> <span class="title class_">int</span>[][<span class="number">5</span>];<span class="comment">//错误申请方式</span></span><br><span class="line"><span class="type">int</span>[][] myArray = <span class="keyword">new</span> <span class="title class_">int</span>[][];<span class="comment">//错误申请方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据类型[][] 数组名= &#123; &#123;第<span class="number">1</span>行初值&#125;,</span><br><span class="line">&#123;第<span class="number">2</span>行初值&#125;,</span><br><span class="line">&#123; ... &#125;,</span><br><span class="line">&#123;第n+<span class="number">1</span>行初值&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] a = &#123; &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;,</span><br><span class="line">&#123;<span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="三维以上的多维数组"><a href="#三维以上的多维数组" class="headerlink" title="三维以上的多维数组"></a>三维以上的多维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][][] a;<span class="comment">//三维</span></span><br><span class="line"><span class="type">int</span>[][][][] a;<span class="comment">//四维</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>创建之后不会再修改和变动的字符串变量：String<br>创建之后允许再做修改的字符串变量：StringBuilder</p><h3 id="字符串变量的创建"><a href="#字符串变量的创建" class="headerlink" title="字符串变量的创建"></a>字符串变量的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String 变量名；</span><br><span class="line">变量名 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s;<span class="comment">//声明字符串引用变量s，s在栈内存中为null</span></span><br><span class="line">s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);<span class="comment">//在堆内存中分配空间，将s指向该字符串首地址</span></span><br></pre></td></tr></table></figure><blockquote><p>如果字符串与其他类型变量进行”+”运算，系统自动将其他类型的数据转换为字符串类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">str1 = str1 + <span class="string">&quot;Good&quot;</span>;</span><br><span class="line"><span class="comment">//str1已经修改了引用类型，虽然指向的内存地址是同一个，但是对象已经不是同一个了。</span></span><br></pre></td></tr></table></figure><h3 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h3><div class="table-container"><table><thead><tr><th style="text-align:center">常用方法</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">public int length()</td><td style="text-align:center">返回字符串的长度</td></tr><tr><td style="text-align:center">public boolean equals(Object anObject)</td><td style="text-align:center">将给定字符串与当前字符串相比较，若两字符串相等，则返回true，否则返回fasle</td></tr><tr><td style="text-align:center">public String substring(int beginIndex)</td><td style="text-align:center">返回字符串中从beginIndex开始到字符串末尾的子串</td></tr><tr><td style="text-align:center">public String substring(int beginIndex, int endIndex)</td><td style="text-align:center">返回beginIndex从开始到beginIndex-1的子串</td></tr><tr><td style="text-align:center">public cahr charAt(int index)</td><td style="text-align:center">返回index指定位置的字符</td></tr><tr><td style="text-align:center">public int indexOf(String str)</td><td style="text-align:center">返回str在字符串中第一次出现的位置</td></tr><tr><td style="text-align:center">public int compareTo(String anotherString)</td><td style="text-align:center">若调用该方法的字符串大于参数字符串，返回大于0的值；若相等返回0；若小于参数字符串则返回小于0的值</td></tr><tr><td style="text-align:center">public String replace(char oldChar,char newChar)</td><td style="text-align:center">以newChar字符替换字符串中所有oldChar字符</td></tr><tr><td style="text-align:center">public String trim()</td><td style="text-align:center">去掉字符串的首尾空格</td></tr><tr><td style="text-align:center">public String toLowerCase()</td><td style="text-align:center">将字符串中所有字符都转换为小写字符</td></tr><tr><td style="text-align:center">public String toUpperCase()</td><td style="text-align:center">将字符串中所有字符都转换为大写字符</td></tr></tbody></table></div><h2 id="本章小结-4"><a href="#本章小结-4" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>数组是由若干个相同类型的变量按一定顺序排列所组成的数据结构，它们用一个共同的名字来表示。数组的元素可以是基本类型或引用类型。数组根据存放元素的复杂程度，分为一维及多维数组。</li><li>要使用 Java 语言的数组，必须经过两个步骤：①声明数组；②分配内存给数组。</li><li>在Java 语言中要取得数组的长度，即数组元素的个数，可以利用数组的.length属性来完成。</li><li>如果想直接在声明时就给数组赋初值，则只要在数组的声明格式后面加上元素的初值即可。</li><li>Java 语言允许二维数组中每行的元素个数不相同。</li><li>在二维数组中，若要想获得整个数组的行数，或者是某行元素的个数时，也可以利用.length 属性来取得。</li><li>字符串可以分为两大类：一类是创建之后不会再做修改和变动的字符申变量；另一类是创建之后允许再做修改的字符串变量。</li><li>字符串常量与字符常量不同，字符常量是用单引号(‘)括起来的单个字符，而字符串常量是用双引号(“)括起来的字符序列。</li></ul><h2 id="课后习题-4"><a href="#课后习题-4" class="headerlink" title="课后习题"></a>课后习题</h2><ul><li>从键盘输入n个数，输出这些数中大于其平均值的数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_1.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数n：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] input = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入n个数：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">input[i] = sc.nextDouble();</span><br><span class="line">sum += input[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">ave</span> <span class="operator">=</span> sum/n;</span><br><span class="line">System.out.println(<span class="string">&quot;这n个数的平均数值为：&quot;</span> + ave);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (input[i] &gt; ave) &#123;</span><br><span class="line">System.out.print(input[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;这些数大于平均值。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从键盘输入n个数，求这n个数中的最大数与最小数并输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_2.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数n(n&gt;=3)：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] input = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入n个数：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">input[i] = sc.nextDouble();</span><br><span class="line">sum += input[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> min, max;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (input[<span class="number">0</span>] &gt;= input[<span class="number">1</span>]) &#123;</span><br><span class="line">min = input[<span class="number">1</span>];</span><br><span class="line">max = input[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">min = input[<span class="number">0</span>];</span><br><span class="line">max = input[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (input[i] &lt; min) &#123;</span><br><span class="line">min = input[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (input[i] &gt; max) &#123;</span><br><span class="line">max = input[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span> + max + <span class="string">&quot;, 最小值：&quot;</span> + min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求一个3阶方阵的对角线上各元素之和。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_3.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span>[][] array = &#123;   &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;,</span><br><span class="line">&#123;<span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;,</span><br><span class="line">&#123;<span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">sum += array[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>找出 4×5 矩阵中值最小和最大元素，并分别输出其值及所在的行号和列号。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_4.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span>[][] array = &#123;   &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="number">110</span>, <span class="number">120</span>, <span class="number">130</span>, <span class="number">140</span>, <span class="number">150</span>&#125;,</span><br><span class="line">&#123;<span class="number">160</span>, <span class="number">170</span>, <span class="number">180</span>, <span class="number">190</span>, <span class="number">200</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] hang = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];<span class="comment">//0存最小值的行，1存最大值的行。</span></span><br><span class="line"><span class="type">int</span>[] lie = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];<span class="comment">//0存最小值的列，1存最大值的列。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> min, max;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (array[<span class="number">0</span>][<span class="number">0</span>] &gt;= array[<span class="number">0</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">min = array[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">hang[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">lie[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">max = array[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">hang[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">lie[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">max = array[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">hang[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">lie[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">min = array[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">hang[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">lie[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (array[i][j] &lt; min) &#123;</span><br><span class="line">                    min = array[i][j];</span><br><span class="line">                    hang[<span class="number">0</span>] = i;</span><br><span class="line">lie[<span class="number">0</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (array[i][j] &gt; max) &#123;</span><br><span class="line">                    max = array[i][j];</span><br><span class="line">                    hang[<span class="number">1</span>] = i;</span><br><span class="line">lie[<span class="number">1</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;最大值：&quot;</span> + (hang[<span class="number">1</span>]+<span class="number">1</span>) + <span class="string">&quot;行，&quot;</span> + (lie[<span class="number">1</span>]+<span class="number">1</span>) + <span class="string">&quot;列:&quot;</span> + max + <span class="string">&quot;, 最小值：&quot;</span> + (hang[<span class="number">0</span>]+<span class="number">1</span>) + <span class="string">&quot;行，&quot;</span> + (lie[<span class="number">0</span>]+<span class="number">1</span>) + <span class="string">&quot;列:&quot;</span> + min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>产生0~100的8个随机整数，并利用冒泡排序法将其升序排序后输出(冒泡排序算法：每次进行相邻两数的比较，若次序不对，则交换两数的次序)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_5.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">num[i] = (<span class="type">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">System.out.print(num[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;<span class="number">8</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[i] &gt; num[j]) &#123;</span><br><span class="line"><span class="type">int</span><span class="variable">temp</span> <span class="operator">=</span> num[i];</span><br><span class="line">num[i] = num[j];</span><br><span class="line">num[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">System.out.print(num[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有15个红球和 15 个绿球排成一圈，从第1个球开始数，当数到第 13 个球时就拿出此球，然后再从下一个球开始数，当再数到第13个球时又取出此球，如此循环进行，直到仅剩15 个球为止，问怎样排才能使每次取出的球都是红球？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_6.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_6</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Java 应用程序，比较命令行中给出的两个宇符串是否相等，并输出比较的结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_7.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_7</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String str1, satr2;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string1: &quot;</span>);</span><br><span class="line">str1 = reader.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string2: &quot;</span>);</span><br><span class="line">str2 = reader.nextLine();</span><br><span class="line"><span class="type">int</span> cmp;</span><br><span class="line">cmp = str1.compareTo(str2);</span><br><span class="line">System.out.println(<span class="string">&quot;Result = &quot;</span> + cmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从键盘上输入一个字符串和子串开始的位置与长度，截取该字符串的子串并输出结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_8.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_8</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String str;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string: &quot;</span>);</span><br><span class="line">str = reader.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sLocation, length;</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter start location: &quot;</span>);</span><br><span class="line">sLocation = reader.nextInt();</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter length: &quot;</span>);</span><br><span class="line">length = reader.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((sLocation + length - <span class="number">1</span>) &gt; str.length())</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;Error!Retry!\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter length: &quot;</span>);</span><br><span class="line">length = reader.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, n = str.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">sub = str.substring(sLocation-<span class="number">1</span>, sLocation+length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;The new string: &quot;</span> + sub);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从键盘上输入一个字符串和一个字符，从该字符串中删除给定的字符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_9.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String str;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string: &quot;</span>);</span><br><span class="line">str = reader.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, n = str.length();</span><br><span class="line">String ch;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;Please enter char: &quot;</span>);</span><br><span class="line">ch = reader.nextLine();</span><br><span class="line">str = str.replace(ch, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;New string: &quot;</span> + str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编程统计用户从键盘输入的字符串中所包含的字母、数宇和其他字符的个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_10.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String str;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string: &quot;</span>);</span><br><span class="line">str = reader.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, n = str.length();</span><br><span class="line"><span class="type">int</span> letterCount=<span class="number">0</span>, numCount=<span class="number">0</span>, otherCount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ch = str.charAt(i);</span><br><span class="line"><span class="keyword">if</span>((ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)||(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">letterCount++;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">numCount++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">otherCount++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Letter=&quot;</span>+letterCount+<span class="string">&quot;Number=&quot;</span>+numCount+<span class="string">&quot;    Others=&quot;</span>+(otherCount-letterCount));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将用户从键盘输入的每行数据都显示输出，直到输入”exit” 字符串，程序运行结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D_5_11.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D_5_11</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String str;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string: &quot;</span>);</span><br><span class="line">str = reader.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="string">&quot;exit&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> str.compareTo(sub);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cmp!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;String: &quot;</span> + str);</span><br><span class="line">System.out.print(<span class="string">&quot;Please enter string: &quot;</span>);</span><br><span class="line">str = reader.nextLine();</span><br><span class="line">cmp = str.compareTo(sub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;End!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JAVA程序设计基础-第6版陈国君2006-学习笔记1</summary>
    
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="http://hibiscidai.com/tags/JAVA/"/>
    
    <category term="JAVA基础" scheme="http://hibiscidai.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>非线性测井解释模型求解问题-以西门度公式为例</title>
    <link href="http://hibiscidai.com/2021/10/30/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%B5%8B%E4%BA%95%E8%A7%A3%E9%87%8A%E6%A8%A1%E5%9E%8B%E6%B1%82%E8%A7%A3%E9%97%AE%E9%A2%98-%E4%BB%A5%E8%A5%BF%E9%97%A8%E5%BA%A6%E5%85%AC%E5%BC%8F%E4%B8%BA%E4%BE%8B/"/>
    <id>http://hibiscidai.com/2021/10/30/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%B5%8B%E4%BA%95%E8%A7%A3%E9%87%8A%E6%A8%A1%E5%9E%8B%E6%B1%82%E8%A7%A3%E9%97%AE%E9%A2%98-%E4%BB%A5%E8%A5%BF%E9%97%A8%E5%BA%A6%E5%85%AC%E5%BC%8F%E4%B8%BA%E4%BE%8B/</id>
    <published>2021-10-30T01:00:00.000Z</published>
    <updated>2021-11-01T05:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/10/30/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%B5%8B%E4%BA%95%E8%A7%A3%E9%87%8A%E6%A8%A1%E5%9E%8B%E6%B1%82%E8%A7%A3%E9%97%AE%E9%A2%98-%E4%BB%A5%E8%A5%BF%E9%97%A8%E5%BA%A6%E5%85%AC%E5%BC%8F%E4%B8%BA%E4%BE%8B/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%B5%8B%E4%BA%95%E8%A7%A3%E9%87%8A%E6%A8%A1%E5%9E%8B%E6%B1%82%E8%A7%A3%E9%97%AE%E9%A2%98-%E4%BB%A5%E8%A5%BF%E9%97%A8%E5%BA%A6%E5%85%AC%E5%BC%8F%E4%B8%BA%E4%BE%8B.png" class="" title="非线性测井解释模型求解问题-以西门度公式为例"><p>非线性测井解释模型求解问题-以西门度公式为例</p><span id="more"></span><h1 id="非线性测井解释模型求解问题-以西门度公式为例"><a href="#非线性测井解释模型求解问题-以西门度公式为例" class="headerlink" title="非线性测井解释模型求解问题-以西门度公式为例"></a>非线性测井解释模型求解问题-以西门度公式为例</h1><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>对于含水饱和度等非线性方程求解问题，无法适用基础运算进行，因此在计算时可采用逐次搜索法求解的近似解。</p><p>即采用某采样间隔进行逐点计算，当相邻两点方程求解答案结果相乘小于零则可以认为方程求解结果为该两点之间的值，答案精度取决于步长，程序运行时间也取决于步长。</p><h1 id="西门度公式"><a href="#西门度公式" class="headerlink" title="西门度公式"></a>西门度公式</h1><script type="math/tex; mode=display">\frac{1}{R_t} = \frac{V^c_{sh}}{R_{sh}} * S^{n/2}_w + \frac{\Phi^{m}}{a * R_w * (1-V^c_{sh})} * S^n_w</script><p>要求解<script type="math/tex">S_w</script>，解方程组可得</p><script type="math/tex; mode=display">\frac{R_t * \Phi^{m}}{a * R_w * (1-V^c_{sh})} * S^n_w + \frac{R_t * V^c_{sh}}{R_{sh}} * S^{n/2}_w = 1</script><p>可以看做如下方程</p><script type="math/tex; mode=display">F(x)=A*x^n+B*x^{n/2}+C</script><script type="math/tex; mode=display">A = \frac{R_t * \Phi^{m}}{a * R_w * (1-V^c_{sh})}</script><script type="math/tex; mode=display">B = \frac{R_t * V^c_{sh}}{R_{sh}}</script><script type="math/tex; mode=display">C=-1</script><p>那么求解西门度方程的问题就变成了非线性方程 <script type="math/tex">F(x)=0</script> 的解(0≤x≤1)</p><p>当 <script type="math/tex">F(x)*F(x+1)<=0</script> 说明方程解为[x,x+1]</p><blockquote><p>为节省运算内存，可以只关注F(x)和F(x+1)结果的正负值(-1,1)来进行F(x)*F(x+1)判断</p></blockquote><h1 id="程序输入"><a href="#程序输入" class="headerlink" title="程序输入"></a>程序输入</h1><ul><li><p>输入曲线<br><code>VSH</code>：泥质含量曲线，%；<br><code>RT</code>：电阻率曲线，Ω·m；<br><code>POR</code>：<script type="math/tex">\Phi</script>，孔隙度曲线，%；</p></li><li><p>输入参数<br><code>RSH2</code>：西门度公式 泥质电阻率，Ω·m，(10)；<br><code>SOA2</code>：西门度公式 地层参数A，无量纲，(0.8578)；<br><code>SOM2</code>：西门度公式 胶结指数M，无量纲，(1.358)；<br><code>SON2</code>：西门度公式 饱和度指数N，无量纲，(3.502)；<br><code>SRW2</code>：西门度公式 地层水电阻率Rw，Ω·m，(0.035)；<br><code>SOC2</code>：西门度公式 泥质含量幂乘指数，无量纲(1)；<br><code>SW2D</code>：搜索区间步长；</p></li><li><p>程序内部参数<br><code>SWFT</code>：程序循环体判断结束标志符；<br><code>SW2A</code>：<script type="math/tex">\frac{R_t * \Phi^{m}}{a*b*R_w (1-V_{sh})}</script>，<script type="math/tex">F(x)</script> 参数A；<br><code>SW2B</code>：<script type="math/tex">\frac{R_t * V^c_{sh}}{R_{sh}}</script>，<script type="math/tex">F(x)</script> 参数B；</p></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">     </span><br><span class="line"><span class="comment">C     SW默认值      </span></span><br><span class="line">      SW=-<span class="number">9999.99</span></span><br><span class="line"><span class="comment">C     SW起始值</span></span><br><span class="line">      SWQ=SW2D</span><br><span class="line">      </span><br><span class="line"><span class="comment">C     FX 参数A</span></span><br><span class="line">      SW2A=<span class="keyword">REAL</span>(RT*((POR/<span class="number">100</span>)**SOM2)/SOA2/SRW2/(<span class="number">1</span>-(VSH/<span class="number">100</span>)**SOC2))</span><br><span class="line"><span class="comment">C     FX 参数A</span></span><br><span class="line">      SW2B=<span class="keyword">REAL</span>(RT*((VSH/<span class="number">100</span>)**SOC2)/RSH2)</span><br><span class="line"></span><br><span class="line"><span class="comment">C     F（Xn）</span></span><br><span class="line">      FX1=<span class="keyword">REAL</span>(SW2A*(SWQ**SON2)+SW2B*(SWQ**(SON2/<span class="number">2</span>))-<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">WRITE</span>(*,*)<span class="string">&#x27;FX1=&#x27;</span>,FX1</span><br><span class="line"><span class="comment">C     F（Xn）判断变量，节省计算内存</span></span><br><span class="line">      FX11=<span class="number">0</span></span><br><span class="line">      <span class="keyword">IF</span>(FX1.GE<span class="number">.0</span>) <span class="keyword">THEN</span></span><br><span class="line">      FX11=<span class="number">1</span></span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">      FX11=-<span class="number">1</span></span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">C     F（Xn+1）      </span></span><br><span class="line">      FX2=<span class="keyword">REAL</span>(SW2A*((SWQ+SW2D)**SON2)+SW2B*((SWQ+SW2D)**(SON2/<span class="number">2</span>))-<span class="number">1</span>)</span><br><span class="line"><span class="comment">C     F（Xn+1）判断变量，节省计算内存</span></span><br><span class="line">      FX22=<span class="number">0</span></span><br><span class="line">      <span class="keyword">IF</span>(FX2.GE<span class="number">.0</span>) <span class="keyword">THEN</span></span><br><span class="line">      FX22=<span class="number">1</span></span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">      FX22=-<span class="number">1</span></span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">C     临界判断变量，当SWFT&lt;0证明为取值区间</span></span><br><span class="line">      SWFT=<span class="keyword">REAL</span>(FX11*FX22)</span><br><span class="line"></span><br><span class="line"><span class="comment">C     执行循环体，按步长挪动区间</span></span><br><span class="line">      <span class="keyword">DO</span> <span class="keyword">WHILE</span>(SWFT.GT<span class="number">.0</span>) </span><br><span class="line">      SWQ=SWQ+SW2D</span><br><span class="line">      </span><br><span class="line">      FX11=<span class="number">0</span></span><br><span class="line">      FX1=<span class="keyword">REAL</span>(SW2A*(SWQ**SON2)+SW2B*(SWQ**(SON2/<span class="number">2</span>))-<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">WRITE</span>(*,*)<span class="string">&#x27;FX1=&#x27;</span>,FX1</span><br><span class="line">      <span class="keyword">IF</span>(FX1.GE<span class="number">.0</span>) <span class="keyword">THEN</span></span><br><span class="line">      FX11=<span class="number">1</span></span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">      FX11=-<span class="number">1</span></span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span></span><br><span class="line">      </span><br><span class="line">      FX22=<span class="number">0</span></span><br><span class="line">     FX2=<span class="keyword">REAL</span>(SW2A*((SWQ+SW2D)**SON2)+SW2B*((SWQ+SW2D)**(SON2/<span class="number">2</span>))-<span class="number">1</span>)</span><br><span class="line">     <span class="built_in">WRITE</span>(*,*)<span class="string">&#x27;FX2=&#x27;</span>,FX2</span><br><span class="line">      <span class="keyword">IF</span>(FX2.GE<span class="number">.0</span>) <span class="keyword">THEN</span></span><br><span class="line">      FX22=<span class="number">1</span></span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">      FX22=-<span class="number">1</span></span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span></span><br><span class="line">   </span><br><span class="line">      SWFT=<span class="keyword">REAL</span>(FX11*FX22)</span><br><span class="line"><span class="comment">C      WRITE(*,*)&#x27;SWFT=&#x27;,SWFT</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">C     SW范围是0-1</span></span><br><span class="line">      <span class="keyword">IF</span>(SWQ.GT<span class="number">.1</span>) <span class="keyword">exit</span></span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">DO</span></span><br><span class="line">      </span><br><span class="line">      SW=<span class="keyword">REAL</span>(SWQ*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">非线性测井解释模型求解问题-以西门度公式为例</summary>
    
    
    
    <category term="测井计算" scheme="http://hibiscidai.com/categories/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/tags/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    <category term="测井计算" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E4%BA%95%E8%AE%A1%E7%AE%97/"/>
    
    <category term="饱和度方程" scheme="http://hibiscidai.com/tags/%E9%A5%B1%E5%92%8C%E5%BA%A6%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>岩石毛管压力</title>
    <link href="http://hibiscidai.com/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/"/>
    <id>http://hibiscidai.com/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/</id>
    <published>2021-04-19T01:00:00.000Z</published>
    <updated>2021-04-19T06:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B.png" class="" title="岩石毛管压力"><p>岩石毛管压力</p><span id="more"></span><h1 id="岩石毛管压力"><a href="#岩石毛管压力" class="headerlink" title="岩石毛管压力"></a>岩石毛管压力</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p>GB/T 29171-2012 岩石毛管压力曲线的测定<br>SY/T 6738-2008 岩心毛管压力测量仪器通用技术条件<br>《岩石物理学》第三版[美] Djebbar Tiab，[美] Erle C.Donaldson 著，周灿灿，胡法龙，李潮流 等 译</p></blockquote><h1 id="毛管压力"><a href="#毛管压力" class="headerlink" title="毛管压力"></a>毛管压力</h1><p>毛管中两种非混相流体在稳定弯曲界面两侧形成的平衡压力差。弯曲界面是其中一相流体有限润湿毛管壁的结果。<br>将润湿相和非润湿相之间的压力差成为毛管压力：</p><script type="math/tex; mode=display">p_c = p_{nw} - p_w</script><p>$ p_{nw}  $：非润湿相流体压力；<br>$ p_w $：润湿相流体压力，通常为水相。</p><p>岩石孔隙中油水界面的曲率半径是关于润湿性、油水饱和度、孔隙几何形态、孔壁矿物组成和体系饱和过程的函数。因此，从一个孔隙到另一孔隙，其曲率半径和接触角是变化的，毛管压力是岩石样品的宏观平均性质。</p><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E4%B8%8D%E5%90%8C%E6%B6%A6%E6%B9%BF%E4%BD%93%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="" title="不同润湿体系示意图"><p>a:非混相流体接触。水润湿固体表面；油是非润湿相且滞留在润湿相流体界面膜上，非润湿相中压力&gt;润湿相，结果流体界面呈凸型。<br>b:油水对固体表面的润湿程度相等，每相流体中压力相等。两相流体间界面垂直于固体表面而且毛管压力为0。<br>c:水相压力大于油相压力时，界面曲率指向油相且毛管压力为正。</p><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E4%B8%8D%E5%90%8C%E6%B6%A6%E6%B9%BF%E6%80%A7%E6%AF%9B%E7%AE%A1%E7%9A%84%E5%BC%AF%E6%B6%B2%E9%9D%A2.jpg" class="" title="不同润湿性毛管的弯液面"><h1 id="压汞法"><a href="#压汞法" class="headerlink" title="压汞法"></a>压汞法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>汞对绝大多数岩石都是<code>非润湿相</code>，如果对汞施加的压力大于或等于孔隙喉道的毛管压力，汞就克服<br>毛管阻力进人孔隙。根据进汞的孔隙体积分数和对应压力，就能得到毛管压力与岩样含汞饱和度的关系曲线，称之为压汞法毛管压力曲线。<br>由于汞的表面张力和润湿接触角比较稳定，常用注人型的压汞仪测得的毛管压力曲线换算孔隙大<br>小及分布。假设孔隙系统是由粗细不同的圆柱形毛管束构成，则毛管压力与孔径间的关系如下所示。</p><script type="math/tex; mode=display">P_c = \frac{2\delta cos\theta}{r_c}</script><p>$ P_c $：毛管压力（绝对压力）的数值，MPa;<br>$ \delta $：表面张力的数值，N/m；<br>$ \theta $：润湿接触角，°；<br>$ r_c $：毛管半径数值，μm。</p><script type="math/tex; mode=display">P_c = \frac{0.735}{r_c}</script><h2 id="麻皮效应"><a href="#麻皮效应" class="headerlink" title="麻皮效应"></a>麻皮效应</h2><p>在做压汞试验的最初进汞阶段中，进汞量的增加是由于非润湿相汞在岩样粗糙表面的坑凹处的贴合而引起的虚假侵入体积。随着压力的逐渐增大，坑凹被汞占满，此时汞还并没有真正进人孔喉系统，压力也没有达到排驱压力。但在仪器进汞量中，如把这一部分的空腔体积累计到总孔喉系统的进汞量中，会造成进汞饱和度数值偏大，这一现象称为麻皮效应。麻皮效应所产生的附加饱和度应当进行校正。<br>麻皮效应的确定方法是首先确定排驱压力，过排驱压力点，作X轴的平行线，该平行线与毛<br>管压力曲线相交点所对应的汞饱和度即为麻皮效应值。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>1.进退汞曲线<br>2.最大进汞饱和度——求取束缚水饱和度<br>3.孔候半径分布频率<br>4.排驱压力——最大毛管半径<br>5.饱和度中值压力——中值半径</p><h1 id="离心机法"><a href="#离心机法" class="headerlink" title="离心机法"></a>离心机法</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>将饱和润湿(非润湿)相流体的岩样，装人充满非润湿(润湿)相流体的离心机样盒中，使其在一系列<br>选定的角速度下旋转、由于岩样内外流体密度不同、使得两种流体所受的离心力不同，借助两相流体的离心压力差，克服岩样的毛管压力，使非润湿(润湿)相流体进人岩样，排驱出其中的润湿(非润<br>湿)相流体。离心机的转速越高,则两相流体的离心压力差越大，因而随着离心机转速的增大，孔隙中润湿(非润湿)相流体不断被排驱出来。测量一系列稳定转速下润湿(非润湿)相流体的累积排出体积，即可获得岩样的离心法毛管压力曲线。</p><blockquote><p>本方法适用于孔隙度大于或等于10%、空气渗透率大于5mD的岩样,其他岩心可参照执行。</p></blockquote><p>不同转速下两相流体压力差等于毛管压力。</p><script type="math/tex; mode=display">p_{ci} = 1.097 × 10^{-9} \Delta\rho L (R_e - \frac{L}{2}) n^2</script><p>$ p_{ci} $：岩样驱替毛管压力的数值，MPa；<br>$ \Delta\rho$：两相流体密度差的数值，g/cm^3；<br>$ L $：岩样长度，cm；<br>$ R_e$：岩样的外旋转半径，cm；<br>$ n $：离心机转速，r/min；</p><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E7%A6%BB%E5%BF%83%E6%B3%95%E7%BB%98%E5%9B%BE.jpg" class="" title="离心法绘图"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E7%A6%BB%E5%BF%83%E6%B3%95%E7%BB%98%E5%9B%BE2.png" class="" title="离心法绘图2"><h2 id="仪器"><a href="#仪器" class="headerlink" title="仪器"></a>仪器</h2><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E7%A6%BB%E5%BF%83%E6%B3%95%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="离心法工作原理示意图"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%B2%A9%E6%A0%B7%E7%9B%92%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="岩样盒结构示意图"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%B2%A9%E6%A0%B7%E7%9B%92%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE2.jpg" class="" title="岩样盒结构示意图2"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%B7%A5%E4%BD%9C%E8%BD%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="" title="工作转盘示意图"><h2 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h2><p>1.孔隙度<br>2.孔喉半径<br>3.残余油</p><h1 id="半渗透隔板"><a href="#半渗透隔板" class="headerlink" title="半渗透隔板"></a>半渗透隔板</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>在小于突破压力下，只有润湿相能通过半渗透隔板，将岩心放在隔板上，利用抽真空或加压方法在岩样两端建立驱替压差，把润湿相液体从孔隙中驱替出来所需的压力就等于这些孔隙的毛管压力。驱替过程中毛管压力平衡时可以得到岩样中相应的润湿相饱和度，用一系列毛管压力和润湿相饱和度值做图就可得到隔板法毛管压力曲线。</p><p>毛管压力公式是从单根等直径毛管的基础上推导出来的，然而岩石的孔隙是由大小不内部彼此联系的孔隙组成。另外，由于与流体接触的矿物成分复杂，所以岩石内部从占到另一点的孔隙表面的润湿性也是多变的。就导致以流体饱和度、平均岩石润湿性为函数的毛管压力也是变化的。<br>油藏原先饱和水，后来水被运移来的原油驱替。油积聚在地质构造中，为水所圈闭，因此才形成了油藏。这个过程可通过岩心进行油(气)驱水得以再现。非润湿相(油或气)驱替润湿相(水)达到平衡时所需的压力就是排水毛管压力，它是关于含水饱和度的函数。<br>当黏土与淡水接触时容易发生膨胀或运移，充满岩心中的盐水(NaCl、 CaCl2 或KCl)可以保持黏土矿物稳定性。饱和后的岩心放在也被水饱和的多孔隔板上。 多孔隔板上的孔隙比岩心样品小(隔板的渗透率至少比岩心低10倍)，多孔隔板的孔院应该小到足够防此驱替液渗透，直到岩心的含水饱和度达到束缚水饱和时为止。</p><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%8D%8A%E6%B8%97%E9%80%8F%E9%9A%94%E6%9D%BF%E4%BB%AA%E5%99%A8%E7%BB%98%E5%9B%BE.jpg" class="" title="半渗透隔板仪器绘图"><p>渗透板为饱和水，岩心饱和油。如果水先润湿孔隙表面，那么水从岩心中被驱出来之前，即可以得到门限压力($p_{ct}$)。如果岩心被油先润湿，油是驱替液，那么油会自吸进入岩心驱替水，这是毛管压力为0。</p><p>渗透板为饱和油，岩心将饱和水。如果岩心被水优先润湿，那么水会自吸进岩心，从而驱替油条件下的含水饱和度$S<em>{wor}$至残余油饱和度$S</em>{or}=1-S_{wor}$，5.9-2。如果岩心被油先润湿，其将遵循图5.10-2。</p><h2 id="仪器-1"><a href="#仪器-1" class="headerlink" title="仪器"></a>仪器</h2><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%B8%B8%E6%B8%A9%E5%B8%B8%E5%8E%8B%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B%E4%BB%AA.png" class="" title="常温常压毛管压力仪"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E9%AB%98%E6%B8%A9%E9%AB%98%E5%8E%8B%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B%E4%BB%AA.png" class="" title="高温高压毛管压力仪"><img src="/2021/04/19/%E5%B2%A9%E7%9F%B3%E6%AF%9B%E7%AE%A1%E5%8E%8B%E5%8A%9B/%E5%BA%94%E7%94%A8%E5%8E%8B%E5%8A%9B%E8%AE%A1%E6%B5%8B%E9%87%8F.jpg" class="" title="应用压力计测量"><h2 id="用途-2"><a href="#用途-2" class="headerlink" title="用途"></a>用途</h2><p>1.确定束缚水饱和度<br>2.门限压力<br>3.孔喉半径</p>]]></content>
    
    
    <summary type="html">岩石毛管压力</summary>
    
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/categories/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    
    <category term="岩石物理" scheme="http://hibiscidai.com/tags/%E5%B2%A9%E7%9F%B3%E7%89%A9%E7%90%86/"/>
    
    <category term="岩心" scheme="http://hibiscidai.com/tags/%E5%B2%A9%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序4-基础语法三</title>
    <link href="http://hibiscidai.com/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/"/>
    <id>http://hibiscidai.com/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2021-04-15T13:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89.png" class="" title="微信小程序4-基础语法三"><p>微信小程序4-基础语法三</p><span id="more"></span><h1 id="微信小程序4-基础语法三"><a href="#微信小程序4-基础语法三" class="headerlink" title="微信小程序4-基础语法三"></a>微信小程序4-基础语法三</h1><h1 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h1><p>接近于Ajax提交模型</p><p>两大重要事件</p><ul><li><p><code>bindsubmit</code></p></li><li><p><code>bindreset</code></p></li></ul><h2 id="表单操作案例1"><a href="#表单操作案例1" class="headerlink" title="表单操作案例1"></a>表单操作案例1</h2><p><code>form.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;formSubmit&quot;</span> <span class="attr">bindreset</span>=<span class="string">&quot;formReset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;please&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>form.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">formSubmit</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">formReset</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/%E8%A1%A8%E5%8D%95%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B1.png" class="" title="表单操作案例1"><p>点击后可以通过事件获取表单内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.detail.value</span><br><span class="line">&#123;input:&quot;hibiscidai&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><p><code>form-control.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;formSubmit&quot;</span> <span class="attr">bindreset</span>=<span class="string">&quot;formReset&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>shanghai<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>chendgu<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox1&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;cities&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;item.value&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;please&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">password</span> <span class="attr">confirm-type</span>=<span class="string">&quot;search&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--用于for循环--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--滚动选择--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;selector&quot;</span> <span class="attr">range</span>=<span class="string">&quot;&#123;&#123;array1&#125;&#125;&quot;</span> <span class="attr">bindchange</span>=<span class="string">&quot;pickerChange&quot;</span>&gt;</span></span><br><span class="line">    国别</span><br><span class="line">    ，选择了&#123;&#123;pickerValue&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--多列选择--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;multiSelector&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">range</span>=<span class="string">&quot;&#123;&#123;multiArray&#125;&#125;&quot;</span> <span class="attr">bindchange</span>=<span class="string">&quot;mulitChange&quot;</span>&gt;</span></span><br><span class="line">    多列选择</span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--时间选择--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">    时间</span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--日期选择--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">    日期</span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--省市选择--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;region&quot;</span>&gt;</span></span><br><span class="line">    省市</span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--单选按钮--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">bindchange</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span>22<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--滑动选择器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slider</span> <span class="attr">bindchange</span>=<span class="string">&quot;&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--开关结构--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">switch</span> <span class="attr">bindchange</span>=<span class="string">&quot;switchChange&quot;</span>&gt;</span></span><br><span class="line">    按钮开关</span><br><span class="line">  <span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">switch</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    复选开关</span><br><span class="line">  <span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--多行输入框，原生--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>form-control.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/form-control/form-control.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">cities</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;ch&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;usa&quot;</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;英国&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;en&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*滚动选择*/</span></span><br><span class="line">    <span class="attr">array1</span>: [</span><br><span class="line">      <span class="string">&quot;美国&quot;</span>, <span class="string">&quot;中国&quot;</span>, <span class="string">&quot;英国&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">pickerValue</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*多列选择*/</span></span><br><span class="line">    <span class="attr">multiArray</span>: [</span><br><span class="line">      [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aa&quot;</span>],</span><br><span class="line">      [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bb&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">pickerChange</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="comment">//selector模式选择器变化时候可以通过event读取列表int</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">    <span class="comment">//对应输出所在数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">array1</span>[event.<span class="property">detail</span>.<span class="property">value</span>])</span><br><span class="line">    <span class="comment">//前台显示选择的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">pickerValue</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">array1</span>[event.<span class="property">detail</span>.<span class="property">value</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mulitChange</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="comment">//mulit模式选择器变化时候可以通过event读取列表int</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//按钮开关事件</span></span><br><span class="line">  <span class="attr">switchChange</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="comment">//通过event读取true,false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6.png" class="" title="表单控件"><img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6.gif" class="" title="表单控件"><h1 id="导航组件navigator跳转"><a href="#导航组件navigator跳转" class="headerlink" title="导航组件navigator跳转"></a>导航组件navigator跳转</h1><p>主要用于直接在wxml的跳转</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">target</td><td style="text-align:center">string</td><td style="text-align:center">self</td><td style="text-align:center">否</td><td style="text-align:center">在哪个目标上发生跳转，默认当前小程序</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当前小程序内的跳转链接</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">open-type</td><td style="text-align:center">string</td><td style="text-align:center">navigate</td><td style="text-align:center">否</td><td style="text-align:center">跳转方式</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">delta</td><td style="text-align:center">number</td><td style="text-align:center">1</td><td style="text-align:center">否</td><td style="text-align:center">当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">app-id</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，要打开的小程序 appId</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，打开的页面路径，如果为空则打开首页</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">extra-data</td><td style="text-align:center">object</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，需要传递给目标小程序的数据，目标小程序可在 <code>App.onLaunch()</code>，<code>App.onShow()</code> 中获取到这份数据。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">详情</a></td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">version</td><td style="text-align:center">string</td><td style="text-align:center">release</td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，要打开的小程序版本</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">hover-class</td><td style="text-align:center">string</td><td style="text-align:center">navigator-hover</td><td style="text-align:center">否</td><td style="text-align:center">指定点击时的样式类，当<code>hover-class=&quot;none&quot;</code>时，没有点击态效果</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">hover-stop-propagation</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">指定是否阻止本节点的祖先节点出现点击态</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td style="text-align:center">hover-start-time</td><td style="text-align:center">number</td><td style="text-align:center">50</td><td style="text-align:center">否</td><td style="text-align:center">按住后多久出现点击态，单位毫秒</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">hover-stay-time</td><td style="text-align:center">number</td><td style="text-align:center">600</td><td style="text-align:center">否</td><td style="text-align:center">手指松开后点击态保留时间，单位毫秒</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindsuccess</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序成功</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">bindfail</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序失败</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td style="text-align:center">bindcomplete</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序完成</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr></tbody></table></div><ul><li>target 的合法值</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">说明</th><th style="text-align:left">最低版本</th></tr></thead><tbody><tr><td style="text-align:left">self</td><td style="text-align:left">当前小程序</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">miniProgram</td><td style="text-align:left">其它小程序</td></tr></tbody></table></div><ul><li>open-type属性值</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">navigate</td><td style="text-align:center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">wx.navigateTo</a> 或 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html">wx.navigateToMiniProgram</a> 的功能</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">redirect</td><td style="text-align:center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">wx.redirectTo</a> 的功能</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">switchTab</td><td style="text-align:center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html">wx.switchTab</a> 的功能</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">reLaunch</td><td style="text-align:center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> 的功能</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td style="text-align:center">navigateBack</td><td style="text-align:center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> 的功能</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td style="text-align:center">exit</td><td style="text-align:center">退出小程序，<code>target=&quot;miniProgram&quot;</code>时生效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr></tbody></table></div><h1 id="tabbar跳转"><a href="#tabbar跳转" class="headerlink" title="tabbar跳转"></a>tabbar跳转</h1><ul><li>app.json配置</li><li>通过微信接口进行跳转</li></ul><blockquote><p>tabbar跳转与navigator跳转不可同时作用在一个对象上。<br>使用url跳转不可以，只有使用switchTab 的open-type才可以</p></blockquote><p>只有tabbar里声明的界面才有下边的按钮</p><p><code>navigator.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>navigator<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/audio/audio&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>audio-navigate跳转<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/audio/audio&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>audio-switchTab跳转<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>app.json</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;selectedColor&quot;</span>: <span class="string">&quot;#1AAD19&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderStyle&quot;</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/navigator/navigator&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;images/icon_1.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/icon_11.png&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/audio/audio&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">&quot;日志&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;images/icon_2.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;images/icon_22.png&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/navigator%E8%B7%B3%E8%BD%AC.gif" class="" title="navigator跳转"><h1 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h1><ul><li>原生控件</li></ul><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">mode</td><td style="text-align:center">string</td><td style="text-align:center">normal</td><td style="text-align:center">否</td><td style="text-align:center">应用模式，只在初始化时有效，不能动态变更</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td style="text-align:center">resolution</td><td style="text-align:center">string</td><td style="text-align:center">medium</td><td style="text-align:center">否</td><td style="text-align:center">分辨率，不支持动态修改</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.0</a></td></tr><tr><td style="text-align:center">device-position</td><td style="text-align:center">string</td><td style="text-align:center">back</td><td style="text-align:center">否</td><td style="text-align:center">摄像头朝向</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">flash</td><td style="text-align:center">string</td><td style="text-align:center">auto</td><td style="text-align:center">否</td><td style="text-align:center">闪光灯，值为auto, on, off</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">frame-size</td><td style="text-align:center">string</td><td style="text-align:center">medium</td><td style="text-align:center">否</td><td style="text-align:center">指定期望的相机帧数据尺寸</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.0</a></td></tr><tr><td style="text-align:center">bindstop</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">摄像头在非正常终止时触发，如退出后台等情况</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">binderror</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">用户不允许使用摄像头时触发</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindinitdone</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">相机初始化完成时触发，<code>e.detail = &#123;maxZoom&#125;</code></td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.0</a></td></tr><tr><td style="text-align:center">bindscancode</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">在扫码识别成功时触发，仅在 mode=”scanCode” 时生效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr></tbody></table></div><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><code>camera.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>carema-demo<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">camera</span> <span class="attr">mode</span>=<span class="string">&quot;normal&quot;</span> <span class="attr">device-position</span>=<span class="string">&quot;front&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;paishe&quot;</span>&gt;</span>拍摄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>camera.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="attr">paishe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = wx.<span class="title function_">createCameraContext</span>()</span><br><span class="line">    ctx.<span class="title function_">takePhoto</span>(&#123;</span><br><span class="line">      <span class="attr">quality</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h1 id="人型验证拍照"><a href="#人型验证拍照" class="headerlink" title="人型验证拍照"></a>人型验证拍照</h1><p><code>caremacase.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>caremacase<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">camera</span> <span class="attr">device-position</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flash</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;camera-clasa&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">&quot;maintext&quot;</span>&gt;</span>photo<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">class</span>=<span class="string">&quot;image1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/photo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">class</span>=<span class="string">&quot;image2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/button.png&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;getphoto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>caremacase.wxss</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.camera-clasa</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.maintext</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">85%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>caremacase.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 点击红色按钮拍照</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getphoto</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//创建一个拍摄对象</span></span><br><span class="line">    <span class="keyword">const</span> ctx = wx.<span class="title function_">createCameraContext</span>()</span><br><span class="line">    <span class="comment">//执行拍照,抓取摄像头</span></span><br><span class="line">    ctx.<span class="title function_">takePhoto</span>(&#123;</span><br><span class="line">      <span class="attr">quality</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设定到缓存中</span></span><br><span class="line">        wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">          <span class="attr">data</span>: res.<span class="property">tempImagePath</span>,</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&#x27;photodate&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//跳转页面</span></span><br><span class="line">        wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;/pages/caremacase/photo&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><code>photo.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;photo&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>photo.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;photodate&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//赋值方式</span></span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;<span class="comment">//不声明写this认为是内部的操作</span></span><br><span class="line">          <span class="attr">photo</span>: res.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><img src="/2021/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F4-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%89/%E4%BA%BA%E5%9E%8B%E9%AA%8C%E8%AF%81%E6%8B%8D%E7%85%A7.gif" class="" title="人型验证拍照"><p><code>.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>.wxss</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">微信小程序4-基础语法三</summary>
    
    
    
    <category term="微信小程序" scheme="http://hibiscidai.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="微信小程序" scheme="http://hibiscidai.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序3-基础语法二</title>
    <link href="http://hibiscidai.com/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/"/>
    <id>http://hibiscidai.com/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-04-05T08:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C.png" class="" title="微信小程序3-基础语法二"><p>微信小程序3-基础语法二</p><span id="more"></span><h1 id="微信小程序3-基础语法二"><a href="#微信小程序3-基础语法二" class="headerlink" title="微信小程序3-基础语法二"></a>微信小程序3-基础语法二</h1><h1 id="媒体组件"><a href="#媒体组件" class="headerlink" title="媒体组件"></a>媒体组件</h1><h2 id="audio-音频"><a href="#audio-音频" class="headerlink" title="audio 音频"></a>audio 音频</h2><ul><li>可以播放在线音频资源</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">audio 组件的唯一标识符</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">要播放音频的资源地址</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否循环播放</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">controls</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否显示默认控件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">poster</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">默认控件上的音频封面的图片资源地址，如果 controls 属性值为 false 则设置 poster 无效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">string</td><td style="text-align:center">未知音频</td><td style="text-align:center">否</td><td style="text-align:center">默认控件上的音频名字，如果 controls 属性值为 false 则设置 name 无效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">author</td><td style="text-align:center">string</td><td style="text-align:center">未知作者</td><td style="text-align:center">否</td><td style="text-align:center">默认控件上的作者名字，如果 controls 属性值为 false 则设置 author 无效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">binderror</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当发生错误时触发 error 事件，detail = {errMsg:MediaError.code}</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindplay</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当开始/继续播放时触发play事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindpause</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当暂停播放时触发 pause 事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindtimeupdate</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当播放进度改变时触发 timeupdate 事件，detail = {currentTime, duration}</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindended</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当播放到末尾时触发 ended 事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table></div><h3 id="自定义audio"><a href="#自定义audio" class="headerlink" title="自定义audio"></a>自定义audio</h3><img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E8%87%AA%E5%AE%9A%E4%B9%89audio.png" class="" title="自定义audio"><h3 id="升级版AudioContext"><a href="#升级版AudioContext" class="headerlink" title="升级版AudioContext"></a>升级版AudioContext</h3><ul><li>支撑<code>wx.createInnerAudioContext</code>，从内部代码完成播放操作，是audio的升级版本</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><code>audio.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">audio</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio1&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;http://downsc.chinaz.net/Files/DownLoad/sound1/201906/11582.mp3&#x27;</span> <span class="attr">loop</span>=<span class="string">&#x27;&#123;&#123;true&#125;&#125;&#x27;</span> <span class="attr">controls</span>=<span class="string">&#x27;&#123;&#123;true&#125;&#125;&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;测试歌曲&#x27;</span> <span class="attr">author</span>=<span class="string">&#x27;测试作者&#x27;</span> <span class="attr">poster</span>=<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcbu01.alicdn.com%2Fimg%2Fibank%2F2014%2F238%2F842%2F1884248832_732482532.jpg&amp;refer=http%3A%2F%2Fcbu01.alicdn.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1619792347&amp;t=b6755c795463e0a403456ea496338ced&quot;</span> <span class="attr">binderror</span>=<span class="string">&quot;audioErr&quot;</span> <span class="attr">bindplay</span>=<span class="string">&quot;audioPlay1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">audio2</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio2&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;audioItem.src&#125;&#125;&#x27;</span> <span class="attr">loop</span> <span class="attr">controls</span> <span class="attr">name</span>=<span class="string">&#x27;&#123;&#123;audioItem.name&#125;&#125;&#x27;</span> <span class="attr">author</span>=<span class="string">&#x27;&#123;&#123;audioItem.author&#125;&#125;&#x27;</span> <span class="attr">poster</span>=<span class="string">&quot;&#123;&#123;audioItem.poster&#125;&#125;&quot;</span> <span class="attr">binderror</span>=<span class="string">&quot;audioErr&quot;</span> <span class="attr">bindplay</span>=<span class="string">&quot;audioPlay2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">audio3-自定义</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio3&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;audioItem.src&#125;&#125;&#x27;</span> <span class="attr">loop</span> <span class="attr">controls</span> <span class="attr">name</span>=<span class="string">&#x27;&#123;&#123;audioItem.name&#125;&#125;&#x27;</span> <span class="attr">author</span>=<span class="string">&#x27;&#123;&#123;audioItem.author&#125;&#125;&#x27;</span> <span class="attr">poster</span>=<span class="string">&quot;&#123;&#123;audioItem.poster&#125;&#125;&quot;</span> <span class="attr">binderror</span>=<span class="string">&quot;audioErr&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;audioPlay3&#x27;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;audioPause&#x27;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;audio14&#x27;</span>&gt;</span>设置当前播放时间为14秒<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;audioStart&#x27;</span>&gt;</span>回到开头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>audio.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/audio/audio.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">audioItem</span>: &#123;</span><br><span class="line">      <span class="attr">src</span>: <span class="string">&quot;http://downsc.chinaz.net/Files/DownLoad/sound1/201906/11582.mp3&quot;</span>,</span><br><span class="line">      <span class="attr">poster</span>: <span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcbu01.alicdn.com%2Fimg%2Fibank%2F2014%2F238%2F842%2F1884248832_732482532.jpg&amp;refer=http%3A%2F%2Fcbu01.alicdn.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1619792347&amp;t=b6755c795463e0a403456ea496338ced&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;测试歌曲&quot;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&quot;测试作者&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audioErr</span>: <span class="keyword">function</span> (<span class="params">errMsg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(errMsg)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audioPlay1</span>: <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始播放&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audioPlay2</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始播放&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audioPlay3</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始播放&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> inneAudioCtx = wx.<span class="title function_">createInnerAudioContext</span>()</span><br><span class="line">    inneAudioCtx.<span class="property">autoplay</span> = <span class="literal">true</span></span><br><span class="line">    inneAudioCtx.<span class="property">src</span> = <span class="string">&#x27;http://downsc.chinaz.net/Files/DownLoad/sound1/201906/11582.mp3&#x27;</span></span><br><span class="line">    <span class="comment">//播放后需要有东西执行</span></span><br><span class="line">    inneAudioCtx.<span class="title function_">onPlay</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始播放&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    inneAudioCtx.<span class="title function_">onError</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res, errMsg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    audioPlay3: function (event) &#123;</span></span><br><span class="line"><span class="comment">      console.log(event)</span></span><br><span class="line"><span class="comment">      console.log(&quot;开始播放&quot;)</span></span><br><span class="line"><span class="comment">      this.audioCtx.play()</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="attr">audioPause</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;暂停&quot;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioCtx</span>.<span class="title function_">pause</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audio14</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置当前播放时间为14秒&quot;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioCtx</span>.<span class="title function_">seek</span>(<span class="number">14</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">audioStart</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;回到开头&quot;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioCtx</span>.<span class="title function_">seek</span>(<span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioCtx</span> = wx.<span class="title function_">createAudioContext</span>(<span class="string">&#x27;audio3&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="video-视频"><a href="#video-视频" class="headerlink" title="video 视频"></a>video 视频</h2><p>原生组件(camera,canvas,input,live-player,live-pusher,map,textarea,video)</p><p>默认宽度300px，高度225px</p><h3 id="原生组件使用限制"><a href="#原生组件使用限制" class="headerlink" title="原生组件使用限制"></a>原生组件使用限制</h3><ul><li>原生组件的层级是最高层，其他组件无法通过z-index来覆盖，自身可以堆叠自身</li><li>原生组件可以覆盖原生组件</li><li>部分样式无法支持原生组件<br>css动画，position:fixed</li><li>原生组件的事件监听不能使用 bind:eventname 的写法，只支持 bindeventname。原生组件也不支持 catch 和 capture 的事件绑定方式。</li><li>在IOS下，原生组件不支持触摸事件</li></ul><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">src</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">是</td><td style="text-align:center">要播放视频的资源地址，支持网络路径、本地临时路径、云文件ID（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a>）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">duration</td><td style="text-align:center">number</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">指定视频时长</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td style="text-align:center">controls</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">是否显示默认播放控件（播放/暂停按钮、播放进度、时间）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">danmu-list</td><td style="text-align:center"><code>Array.&lt;object&gt;</code></td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">弹幕列表</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">danmu-btn</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否显示弹幕按钮，只在初始化时有效，不能动态变更</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">enable-danmu</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否展示弹幕，只在初始化时有效，不能动态变更</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">autoplay</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否自动播放</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否循环播放</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td style="text-align:center">muted</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否静音播放</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td style="text-align:center">initial-time</td><td style="text-align:center">number</td><td style="text-align:center">0</td><td style="text-align:center">否</td><td style="text-align:center">指定视频初始播放位置</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td style="text-align:center">page-gesture</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">在非全屏模式下，是否开启亮度与音量调节手势（废弃，见 vslide-gesture）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td style="text-align:center">direction</td><td style="text-align:center">number</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">设置全屏时视频的方向，不指定则根据宽高比自动判断</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.0</a></td></tr><tr><td style="text-align:center">show-progress</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">若不设置，宽度大于240时才会显示</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td style="text-align:center">show-fullscreen-btn</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">是否显示全屏按钮</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td style="text-align:center">show-play-btn</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">是否显示视频底部控制栏的播放按钮</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td style="text-align:center">show-center-play-btn</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">是否显示视频中间的播放按钮</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td style="text-align:center">enable-progress-gesture</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">是否开启控制进度的手势</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td style="text-align:center">object-fit</td><td style="text-align:center">string</td><td style="text-align:center">contain</td><td style="text-align:center">否</td><td style="text-align:center">当视频大小与 video 容器大小不一致时，视频的表现形式</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">poster</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频封面的图片网络资源地址或云文件ID（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a>）。若 controls 属性值为 false 则设置 poster 无效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">show-mute-btn</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否显示静音按钮</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频的标题，全屏时在顶部展示</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td></tr><tr><td style="text-align:center">play-btn-position</td><td style="text-align:center">string</td><td style="text-align:center">bottom</td><td style="text-align:center">否</td><td style="text-align:center">播放按钮的位置</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td></tr><tr><td style="text-align:center">enable-play-gesture</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否开启播放手势，即双击切换播放/暂停</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td></tr><tr><td style="text-align:center">auto-pause-if-navigate</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">当跳转到本小程序的其他页面时，是否自动暂停本页面的视频播放</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a></td></tr><tr><td style="text-align:center">auto-pause-if-open-native</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">当跳转到其它微信原生页面时，是否自动暂停本页面的视频</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a></td></tr><tr><td style="text-align:center">vslide-gesture</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">在非全屏模式下，是否开启亮度与音量调节手势（同 page-gesture）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.6.2</a></td></tr><tr><td style="text-align:center">vslide-gesture-in-fullscreen</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td style="text-align:center">否</td><td style="text-align:center">在全屏模式下，是否开启亮度与音量调节手势</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.6.2</a></td></tr><tr><td style="text-align:center">ad-unit-id</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">是</td><td style="text-align:center">视频前贴广告单元ID，更多详情可参考开放能力<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/ad/video-patch-ad.html">视频前贴广告</a></td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.1</a></td></tr><tr><td style="text-align:center">poster-for-crawler</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">是</td><td style="text-align:center">用于给搜索等场景作为视频封面展示，建议使用无播放 icon 的视频封面图，只支持网络地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">show-casting-button</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">显示投屏按钮。安卓在同层渲染下生效，支持 DLNA 协议；iOS 支持 AirPlay 和 DLNA 协议</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.2</a></td></tr><tr><td style="text-align:center">picture-in-picture-mode</td><td style="text-align:center">string/Array</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">设置小窗模式： push, pop，空字符串或通过数组形式设置多种模式（如： [“push”, “pop”</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">picture-in-picture-show-progress</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否在小窗模式下显示播放进度</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">enable-auto-rotation</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否开启手机横屏时自动全屏，当系统设置开启自动旋转时生效</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">show-screen-lock-button</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否显示锁屏按钮，仅在全屏时显示，锁屏后控制栏的操作</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">show-snapshot-button</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否显示截屏按钮，仅在全屏时显示</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.13.0</a></td></tr><tr><td style="text-align:center">show-background-playback-button</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">是否展示后台音频播放按钮</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.14.3</a></td></tr><tr><td style="text-align:center">background-poster</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">进入后台音频播放后的通知栏图标（Android 独有）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.14.3</a></td></tr><tr><td style="text-align:center">bindplay</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当开始/继续播放时触发play事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindpause</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当暂停播放时触发 pause 事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindended</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">当播放到末尾时触发 ended 事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindtimeupdate</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">播放进度变化时触发，event.detail = {currentTime, duration} 。触发频率 250ms 一次</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">bindfullscreenchange</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频进入和退出全屏时触发，event.detail = {fullScreen, direction}，direction 有效值为 vertical 或 horizontal</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td style="text-align:center">bindwaiting</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频出现缓冲时触发</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.0</a></td></tr><tr><td style="text-align:center">binderror</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频播放出错时触发</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.0</a></td></tr><tr><td style="text-align:center">bindprogress</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">加载进度变化时触发，只支持一段加载。event.detail = {buffered}，百分比</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td></tr><tr><td style="text-align:center">bindloadedmetadata</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">视频元数据加载完成时触发。event.detail = {width, height, duration}</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.0</a></td></tr><tr><td style="text-align:center">bindcontrolstoggle</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">切换 controls 显示隐藏时触发。event.detail = {show}</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.9.5</a></td></tr><tr><td style="text-align:center">bindenterpictureinpicture</td><td style="text-align:center">eventhandler</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">播放器进入小窗</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">bindleavepictureinpicture</td><td style="text-align:center">eventhandler</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">播放器退出小窗</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td style="text-align:center">bindseekcomplete</td><td style="text-align:center">eventhandler</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">seek 完成时触发 (position iOS 单位 s, Android 单位 ms)</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.12.0</a></td></tr></tbody></table></div><h3 id="弹幕制作案例"><a href="#弹幕制作案例" class="headerlink" title="弹幕制作案例"></a>弹幕制作案例</h3><p>原生组件没有doucment对象，无法通过dom获取</p><p><code>video.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;videoclass&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;videourl&#125;&#125;&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">initial-time</span>=<span class="string">&quot;5&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">danmu-list</span>=<span class="string">&quot;&#123;&#123;danmuArray&#125;&#125;&quot;</span> <span class="attr">danmu-btn</span> <span class="attr">enable-danmu</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">填写弹幕内容</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入弹幕&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputVal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;sendDanmu1&quot;</span>&gt;</span>发布弹幕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>video.wxss</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.videoclass</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>video.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/video/video.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接受弹幕变量</span></span><br><span class="line"><span class="keyword">var</span> inputVal = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取随机颜色</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> rgb = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> color = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>).<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">    color = color.<span class="property">length</span> == <span class="number">1</span> ? <span class="string">&quot;0&quot;</span> + color : color</span><br><span class="line">    rgb.<span class="title function_">push</span>(color)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + rgb.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">videourl</span>: <span class="string">&quot;https://media.w3.org/2010/05/sintel/trailer.mp4&quot;</span>,</span><br><span class="line">    <span class="attr">danmuArray</span>: [&#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;测试弹幕&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">        <span class="attr">time</span>: <span class="number">5</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;测试弹幕2&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#ff0&quot;</span>,</span><br><span class="line">        <span class="attr">time</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//input输入框获取</span></span><br><span class="line">  <span class="attr">inputVal</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(event)</span></span><br><span class="line">    inputVal = event.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送弹幕</span></span><br><span class="line">  <span class="attr">sendDanmu1</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputVal)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoCxt</span>.<span class="title function_">sendDanmu</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: inputVal,</span><br><span class="line">      <span class="attr">color</span>: <span class="title function_">getRandomColor</span>()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //添加到弹幕列表</span></span><br><span class="line">    <span class="comment">// this.setData(</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     //danmuArray:  覆盖操作</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//创建video对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoCxt</span> = wx.<span class="title function_">createVideoContext</span>(<span class="string">&#x27;video1&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="视图容器"><a href="#视图容器" class="headerlink" title="视图容器"></a>视图容器</h1><h2 id="movable-view"><a href="#movable-view" class="headerlink" title="movable-view"></a>movable-view</h2><h3 id="movable-area-可移动区域"><a href="#movable-area-可移动区域" class="headerlink" title="movable-area 可移动区域"></a>movable-area 可移动区域</h3><ul><li><code>movable-view</code> 必须在 <code>movable-area</code> 组件中，并且必须是直接子节点，否则不能移动。</li></ul><p>默认高宽为10px</p><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th>必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">direction</td><td style="text-align:center">string</td><td style="text-align:center">none</td><td>否</td><td style="text-align:center">movable-view的移动方向，属性值有all、vertical、horizontal、none</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">inertia</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td>否</td><td style="text-align:center">movable-view是否带有惯性</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">out-of-bounds</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td>否</td><td style="text-align:center">超过可移动区域后，movable-view是否还可以移动</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">number</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">number</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">damping</td><td style="text-align:center">number</td><td style="text-align:center">20</td><td>否</td><td style="text-align:center">阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">friction</td><td style="text-align:center">number</td><td style="text-align:center">2</td><td>否</td><td style="text-align:center">摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td style="text-align:center">disabled</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td>否</td><td style="text-align:center">是否禁用</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">scale</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td>否</td><td style="text-align:center">是否支持双指缩放，默认缩放手势生效区域是在movable-view内</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">scale-min</td><td style="text-align:center">number</td><td style="text-align:center">0.5</td><td>否</td><td style="text-align:center">定义缩放倍数最小值</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">scale-max</td><td style="text-align:center">number</td><td style="text-align:center">10</td><td>否</td><td style="text-align:center">定义缩放倍数最大值</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">scale-value</td><td style="text-align:center">number</td><td style="text-align:center">1</td><td>否</td><td style="text-align:center">定义缩放倍数，取值范围为 0.5 - 10</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">animation</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td><td>否</td><td style="text-align:center">是否使用动画</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td style="text-align:center">bindchange</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">拖动过程中触发的事件，event.detail = {x, y, source}</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">bindscale</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">缩放过程中触发的事件，event.detail = {x, y, scale}，x和y字段在<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a>之后支持</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">htouchmove</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">初次手指触摸后移动为横向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td style="text-align:center">vtouchmove</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td>否</td><td style="text-align:center">初次手指触摸后移动为纵向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr></tbody></table></div><h3 id="照片的拖动缩放"><a href="#照片的拖动缩放" class="headerlink" title="照片的拖动缩放"></a>照片的拖动缩放</h3><p><code>movable-view.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  movable操作</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">class</span>=<span class="string">&quot;area&quot;</span> <span class="attr">scale-area</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">class</span>=<span class="string">&quot;view1&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;all&quot;</span> <span class="attr">out-of-bounds</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scale</span> <span class="attr">inertia</span>&gt;</span></span><br><span class="line">    move</span><br><span class="line">  <span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">class</span>=<span class="string">&quot;view1&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;all&quot;</span> <span class="attr">out-of-bounds</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scale</span> <span class="attr">inertia</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">clas</span>=<span class="string">&quot;images&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imageurl&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>movable-view.wxss</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.area</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.images</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E7%85%A7%E7%89%87%E7%9A%84%E6%8B%96%E5%8A%A8%E7%BC%A9%E6%94%BE.gif" class="" title="照片的拖动缩放"><h2 id="cover-view"><a href="#cover-view" class="headerlink" title="cover-view"></a>cover-view</h2><p>覆盖在原生组件之上的文本视图。</p><p>可覆盖的原生组件包括 map、video、canvas、camera、live-player、live-pusher</p><p>只支持嵌套 cover-view、cover-image，可在 cover-view 中使用 button。组件属性的长度单位默认为px，2.4.0起支持传入单位(rpx/px)。</p><h3 id="视频播放悬浮"><a href="#视频播放悬浮" class="headerlink" title="视频播放悬浮"></a>视频播放悬浮</h3><p><code>cover-view.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>cover-view<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video1&quot;</span> <span class="attr">scr</span>=<span class="string">&quot;&#123;&#123;video_src&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;playing&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon1&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;pause&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">src</span>=<span class="string">&#x27;/images/icon_1.png&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">wx:else</span> <span class="attr">class</span>=<span class="string">&quot;icon2&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;play&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">src</span>=<span class="string">&#x27;/images/icon_2.png&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>cover-view.wxss</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>cover-view.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/cover-view/cover-view.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">video_src</span>: <span class="string">&quot;http://downsc.chinaz.net/Files/DownLoad/sound1/201906/11582.mp3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">pause</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoCtx</span>.<span class="title function_">pause</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">playing</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">play</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoCtx</span>.<span class="title function_">play</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">playing</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoCtx</span> = wx.<span class="title function_">createVideoContext</span>(<span class="string">&#x27;video1&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%82%AC%E6%B5%AE.gif" class="" title="视频播放悬浮"><h1 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a>rich-text</h1><ul><li>富文本对话框</li><li>可以直接导入HTML标签文本</li></ul><h2 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">nodes</td><td style="text-align:center">array/string</td><td style="text-align:center">[]</td><td style="text-align:center">否</td><td style="text-align:center">节点列表/HTML String</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td style="text-align:center">space</td><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">显示连续空格</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.1</a></td></tr></tbody></table></div><h2 id="nodes属性"><a href="#nodes属性" class="headerlink" title="nodes属性"></a>nodes属性</h2><p>现支持两种节点，通过type来区分，分别是元素节点和文本节点，默认是元素节点，在富文本区域里显示的HTML节点 元素节点：type = node*</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">标签名</td><td style="text-align:center">string</td><td style="text-align:center">是</td><td style="text-align:center">支持部分受信任的 HTML 节点</td></tr><tr><td style="text-align:center">attrs</td><td style="text-align:center">属性</td><td style="text-align:center">object</td><td style="text-align:center">否</td><td style="text-align:center">支持部分受信任的属性，遵循 Pascal 命名法</td></tr><tr><td style="text-align:center">children</td><td style="text-align:center">子节点列表</td><td style="text-align:center">array</td><td style="text-align:center">否</td><td style="text-align:center">结构和 nodes 一致</td></tr></tbody></table></div><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>rich-text.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>rich-text<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;&lt;h1&gt;标签内容&lt;/h1&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;&#123;&#123;htmlstr&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;&#123;&#123;nodes&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>rich-text.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/rich-text/rich-text.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">htmlstr</span>: <span class="string">&quot;&lt;h1&gt;标签&lt;/h1&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">nodes</span>: [&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;h4&quot;</span>,</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&quot;color:red;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;数组传递node&quot;</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E5%B5%8C%E5%85%A5html.png" class="" title="嵌入html"><h1 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h1><h2 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th><th style="text-align:center">最低版本</th></tr></thead><tbody><tr><td style="text-align:center">percent</td><td style="text-align:center">number</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">百分比0~100</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">show-info</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">在进度条右侧显示百分比</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">border-radius</td><td style="text-align:center">number/string</td><td style="text-align:center">0</td><td style="text-align:center">否</td><td style="text-align:center">圆角大小</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.1</a></td></tr><tr><td style="text-align:center">font-size</td><td style="text-align:center">number/string</td><td style="text-align:center">16</td><td style="text-align:center">否</td><td style="text-align:center">右侧百分比字体大小</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.1</a></td></tr><tr><td style="text-align:center">stroke-width</td><td style="text-align:center">number/string</td><td style="text-align:center">6</td><td style="text-align:center">否</td><td style="text-align:center">进度条线的宽度</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">string</td><td style="text-align:center">#09BB07</td><td style="text-align:center">否</td><td style="text-align:center">进度条颜色（请使用activeColor）</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">activeColor</td><td style="text-align:center">string</td><td style="text-align:center">#09BB07</td><td style="text-align:center">否</td><td style="text-align:center">已选择的进度条的颜色</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">backgroundColor</td><td style="text-align:center">string</td><td style="text-align:center">#EBEBEB</td><td style="text-align:center">否</td><td style="text-align:center">未选择的进度条的颜色</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">active</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:center">进度条从左往右的动画</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:center">active-mode</td><td style="text-align:center">string</td><td style="text-align:center">backwards</td><td style="text-align:center">否</td><td style="text-align:center">backwards: 动画从头播；forwards：动画从上次结束点接着播</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.0</a></td></tr><tr><td style="text-align:center">duration</td><td style="text-align:center">number</td><td style="text-align:center">30</td><td style="text-align:center">否</td><td style="text-align:center">进度增加1%所需毫秒数</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.2</a></td></tr><tr><td style="text-align:center">bindactiveend</td><td style="text-align:center">eventhandle</td><td style="text-align:center"></td><td style="text-align:center">否</td><td style="text-align:center">动画完成事件</td><td style="text-align:center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.1</a></td></tr></tbody></table></div><h2 id="进度条案例演示"><a href="#进度条案例演示" class="headerlink" title="进度条案例演示"></a>进度条案例演示</h2><p><code>progress.wxml</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>progress<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">&quot;80&quot;</span> <span class="attr">show-info</span> <span class="attr">stroke-width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">activeColor</span>=<span class="string">&quot;pink&quot;</span> <span class="attr">backgroundColor</span>=<span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">active</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;startdown&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>开始下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>下载进度<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">&quot;&#123;&#123;prescent&#125;&#125;&quot;</span> <span class="attr">show-info</span> <span class="attr">active</span>=<span class="string">&quot;&#123;&#123;isDown&#125;&#125;&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>progress.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/progress/progress.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">prescent</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">isDown</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 开始下载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">startdown</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isDown</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">prescent</span>:<span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><img src="/2021/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F3-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/%E8%BF%9B%E5%BA%A6%E6%9D%A1progress.gif" class="" title="进度条progress">]]></content>
    
    
    <summary type="html">微信小程序3-基础语法二</summary>
    
    
    
    <category term="微信小程序" scheme="http://hibiscidai.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="微信小程序" scheme="http://hibiscidai.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
